2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-31 12:14:16+0530 - sLogger - DEBUG - process_main_pages started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-07-31 12:14:16+0530 - sLogger - ERROR - error occured: 'headers'
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-07-31 12:14:16+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-31 12:14:16+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD currentassets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD currentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentassets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentassets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equityandliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('currentassets', 52), ('currentliabilities', 50), ('current liabilities', 48), ('noncurrentassets', 47), ('noncurrentliabilities', 45), ('assets', 42), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('equityliabilities', 22), ('equityandliabilities', 20), ('liabilities', 8)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD currentassets | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD currentliabilities | score 53
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentassets | score 78
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentliabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentassets | score 78
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentliabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equityandliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Derivative asset | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('equity and liabilities', 36), ('equityandliabilities', 36), ('equity', 35), ('equity liabilities', 33), ('current liabilities', 32), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD current assets | score 53
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD currentassets | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD current liabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD currentliabilities | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD noncurrent assets | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD noncurrent liabilities | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD non current assets | score 47
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD non current liabilities | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD noncurrentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD noncurrentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD equity and liabilities | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD equity | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Derivative asset | MATCH WORD equityandliabilities | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Other current financial assets | [('current assets', 65), ('current liabilities', 54), ('noncurrent assets', 50), ('currentassets', 46), ('currentliabilities', 44), ('noncurrentassets', 43), ('noncurrentliabilities', 41), ('equity and liabilities', 36), ('equity liabilities', 35), ('equityandliabilities', 32), ('assets', 31), ('noncurrent liabilities', 29), ('equity', 24), ('equityliabilities', 23), ('liabilities', 18)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD currentassets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD current liabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD currentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD noncurrent assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD noncurrentassets | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD noncurrent liabilities | score 58
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD non current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD non current liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD noncurrentassets | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD equity and liabilities | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other current financial assets | MATCH WORD equityandliabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total Current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD current assets | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD currentassets | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD current liabilities | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD currentliabilities | score 53
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD noncurrent assets | score 81
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD noncurrentassets | score 78
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD noncurrent liabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD non current assets | score 84
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD non current liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD noncurrentliabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD noncurrentassets | score 78
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD noncurrentliabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD equity and liabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current assets | MATCH WORD equityandliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Other non current financial assets | [('current assets', 59), ('current liabilities', 49), ('noncurrent assets', 45), ('currentassets', 42), ('currentliabilities', 40), ('noncurrentassets', 39), ('noncurrentliabilities', 37), ('noncurrent liabilities', 36), ('equity and liabilities', 33), ('equity liabilities', 32), ('equityandliabilities', 29), ('assets', 28), ('equity', 22), ('equityliabilities', 21), ('liabilities', 16)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD currentassets | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD current liabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD currentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD noncurrent assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD noncurrentassets | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD noncurrent liabilities | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD non current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD non current liabilities | score 63
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD noncurrentliabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD noncurrentassets | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD noncurrentliabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD equity and liabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current financial assets | MATCH WORD equityandliabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Exploration and evaluation | [('equity and liabilities', 48), ('noncurrent assets', 34), ('noncurrent liabilities', 33), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('current assets', 28), ('equity liabilities', 28), ('current liabilities', 27), ('noncurrentassets', 26), ('equityliabilities', 25), ('currentliabilities', 24), ('currentassets', 21), ('assets', 19), ('liabilities', 18), ('equity', 18)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD current assets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD currentassets | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD current liabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD currentliabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD noncurrent assets | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD noncurrentassets | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD noncurrent liabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD non current assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD non current liabilities | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD noncurrentliabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD noncurrentassets | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD noncurrentliabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD equity and liabilities | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Exploration and evaluation | MATCH WORD equityandliabilities | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Deferred stripping asset | [('current assets', 53), ('noncurrent assets', 53), ('assets', 45), ('currentassets', 34), ('noncurrentassets', 31), ('equity and liabilities', 29), ('equityandliabilities', 29), ('equity liabilities', 27), ('equity', 26), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('currentliabilities', 23), ('noncurrentliabilities', 21), ('liabilities', 17)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD current assets | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD currentassets | score 49
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD current liabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD currentliabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD noncurrent assets | score 49
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD noncurrentassets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD noncurrent liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD non current assets | score 49
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD non current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD noncurrentliabilities | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD noncurrentassets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD noncurrentliabilities | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD equity and liabilities | score 26
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred stripping asset | MATCH WORD equityandliabilities | score 23
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Investments | [('noncurrentassets', 38), ('assets', 36), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('equityandliabilities', 24), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentassets | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentliabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equityandliabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Other non current assets | [('current assets', 72), ('noncurrent assets', 56), ('currentassets', 46), ('currentliabilities', 44), ('current liabilities', 43), ('noncurrentassets', 42), ('noncurrentliabilities', 40), ('assets', 36), ('noncurrent liabilities', 32), ('equity and liabilities', 25), ('equityandliabilities', 24), ('equity liabilities', 22), ('equity', 21), ('equityliabilities', 19), ('liabilities', 7)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD current assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD currentassets | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD current liabilities | score 51
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD currentliabilities | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD noncurrent assets | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD noncurrentassets | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD noncurrent liabilities | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD non current assets | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD non current liabilities | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD noncurrentliabilities | score 58
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD noncurrentassets | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD noncurrentliabilities | score 58
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD equity and liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other non current assets | MATCH WORD equityandliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total Noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD current assets | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD currentassets | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD current liabilities | score 52
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD currentliabilities | score 49
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD non current assets | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD non current liabilities | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 24
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD currentassets | score 25
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD currentliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 24
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentassets | score 22
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 24
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentassets | score 22
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equityandliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentassets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equityandliabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Current tax payable | [('current liabilities', 69), ('currentassets', 60), ('currentliabilities', 59), ('noncurrentassets', 55), ('noncurrentliabilities', 53), ('current assets', 45), ('equity liabilities', 39), ('equity and liabilities', 34), ('equityandliabilities', 34), ('equityliabilities', 31), ('noncurrent assets', 26), ('liabilities', 25), ('noncurrent liabilities', 25), ('assets', 17), ('equity', 17)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD current assets | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD currentassets | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD current liabilities | score 63
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD currentliabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrent assets | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentassets | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrent liabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD non current assets | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD non current liabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentassets | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD equity and liabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD equityandliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - liability | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD current assets | score 20
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD currentassets | score 18
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD current liabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD currentliabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD noncurrent assets | score 20
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD noncurrentassets | score 20
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD noncurrent liabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD non current assets | score 20
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD non current liabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD noncurrentliabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD noncurrentassets | score 20
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD noncurrentliabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD equity and liabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD equity | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text liability | MATCH WORD equityandliabilities | score 80
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Other liabilities | [('noncurrent liabilities', 69), ('liabilities', 67), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('noncurrent assets', 32), ('equityandliabilities', 26), ('assets', 24), ('current assets', 24), ('noncurrentassets', 22), ('equity', 22), ('equityliabilities', 20), ('currentliabilities', 19), ('currentassets', 17), ('noncurrentliabilities', 17)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current assets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equityandliabilities | score 65
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total Current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD currentassets | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD current liabilities | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD currentliabilities | score 84
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD noncurrent assets | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD noncurrentassets | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD non current assets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD non current liabilities | score 88
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD noncurrentassets | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD equity and liabilities | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Current liabilities | MATCH WORD equityandliabilities | score 62
2023-07-31 12:14:16+0530 - sLogger - DEBUG - nan | [('equityandliabilities', 29), ('currentassets', 27), ('noncurrentliabilities', 27), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('current liabilities', 24), ('noncurrent liabilities', 24), ('noncurrentassets', 22), ('liabilities', 22), ('equity and liabilities', 20), ('currentliabilities', 17), ('equity liabilities', 12), ('equity', 0), ('equityliabilities', 0)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentassets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent assets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current assets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity and liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity | score 0
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equityandliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentassets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equityandliabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Other liabilities | [('noncurrent liabilities', 69), ('liabilities', 67), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('noncurrent assets', 32), ('equityandliabilities', 26), ('assets', 24), ('current assets', 24), ('noncurrentassets', 22), ('equity', 22), ('equityliabilities', 20), ('currentliabilities', 19), ('currentassets', 17), ('noncurrentliabilities', 17)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current assets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equityandliabilities | score 65
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equityandliabilities', 30), ('equity', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('current assets', 21), ('currentassets', 21), ('noncurrentliabilities', 21), ('assets', 19), ('noncurrentassets', 19), ('noncurrent assets', 14)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD currentassets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD currentliabilities | score 71
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentassets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentliabilities | score 67
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentassets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentliabilities | score 67
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equityandliabilities | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total Noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD current assets | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD currentassets | score 56
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD non current assets | score 61
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total Noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD currentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD currentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD noncurrent assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD noncurrent liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD non current assets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD non current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD noncurrentassets | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD equity and liabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD equity | score 100
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text equity | MATCH WORD equityandliabilities | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Reserves | [('currentassets', 44), ('noncurrentassets', 38), ('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentassets | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentliabilities | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equityandliabilities | score 22
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Retained profits | [('currentliabilities', 45), ('current liabilities', 44), ('currentassets', 40), ('noncurrentliabilities', 40), ('current assets', 38), ('equity liabilities', 38), ('noncurrentassets', 36), ('equity and liabilities', 33), ('equityandliabilities', 33), ('liabilities', 32), ('equity', 32), ('noncurrent liabilities', 30), ('equityliabilities', 29), ('noncurrent assets', 23), ('assets', 22)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current assets | score 47
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD currentassets | score 48
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current liabilities | score 46
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD currentliabilities | score 47
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent assets | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent liabilities | score 42
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current assets | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current liabilities | score 41
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentliabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentassets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrentliabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity and liabilities | score 47
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equityandliabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Noncontrolling interest | [('noncurrent assets', 50), ('noncurrentliabilities', 45), ('noncurrent liabilities', 42), ('current assets', 38), ('currentliabilities', 36), ('noncurrentassets', 35), ('current liabilities', 30), ('equity and liabilities', 28), ('equityandliabilities', 27), ('currentassets', 26), ('equity liabilities', 25), ('equityliabilities', 22), ('assets', 17), ('liabilities', 16), ('equity', 16)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD current assets | score 37
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD currentassets | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD current liabilities | score 43
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD currentliabilities | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD noncurrent assets | score 45
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD noncurrentassets | score 46
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD noncurrent liabilities | score 53
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD non current assets | score 44
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD non current liabilities | score 52
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD noncurrentassets | score 46
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD equity and liabilities | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD equity | score 30
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Noncontrolling interest | MATCH WORD equityandliabilities | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-07-31 12:14:16+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-07-31 12:14:16+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-31 12:14:16+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers (inclusive of goods and services tax) | operating profit before changes in assets and liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees (inclusive of goods and services tax) | operating profit before changes in assets and liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operations | movements in working capital
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes (paid) | changes in working capital
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash inflow from operating activities | operating cash flow before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for investments | adiustments for movements in working capital
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments received /provided to related party | adjustments for increase decrease in operating assets
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for loan receivable related parties | operating profit before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loan receivable | operating profit before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment, intangibles and other mine assets | operating profit before changes in assets and liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment and mine properties | operating profit before changes in assets and liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividend income | movements in working capital
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (outflow) from investing activities | adjustments for increase decrease in operating liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings related parties Payments for lease liability | adjustments for increase decrease in operating liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings related parties Payments for lease liability | adjustments for increase decrease in operating liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of borrowings related parties | operating profit before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (outflow) from financing activities | operating cash flow before working capital changes
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease) I increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the period | changes in operating assets and liabilities
2023-07-31 12:14:16+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the period | changes in operating assets and liabilities
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'value'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'value'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:14:21+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:14:21+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:21+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 12:14:21+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:21+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 12:14:21+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:21+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 12:14:21+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:21+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('cash asset', 55), ('cash asset', 55), ('other bank balances', 50), ('cash and short term deposits', 48), ('Cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('cash asset', 57), ('cash asset', 57), ('cash and cash equivalents', 44), (' cash and cash equivalents', 44), ('cash and short term deposits', 37), ('Cash and short term deposits', 37), ('other bank balances', 29), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 21), ('cash and bank balances', 13)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('other bank balances', 50), ('cash asset', 49), ('cash asset', 49), ('bank balances other than above', 44), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than cash and cash equivalents', 39), ('cash and bank balances', 34), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 257724.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['10'], 'line_item_value': [257724.0]}
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:21+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('cash asset', 55), ('cash asset', 55), ('other bank balances', 50), ('cash and short term deposits', 48), ('Cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('cash asset', 57), ('cash asset', 57), ('cash and cash equivalents', 44), (' cash and cash equivalents', 44), ('cash and short term deposits', 37), ('Cash and short term deposits', 37), ('other bank balances', 29), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 21), ('cash and bank balances', 13)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('other bank balances', 50), ('cash asset', 49), ('cash asset', 49), ('bank balances other than above', 44), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than cash and cash equivalents', 39), ('cash and bank balances', 34), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 176085.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['10'], 'line_item_value': [176085.0]}
2023-07-31 12:14:21+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:21+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents bank balances , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash on hand , res_fuzz_match = [('cash on hand', 100), (' cash and cash equivalents', 100), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = cash flows from operating activities profit for the period , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 44), (' cash and cash equivalents', 43), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: depreciation , res_fuzz_match = [(' short term deposits', 51), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), ('cash on hand', 33), (' cash and cash equivalents', 33), (' cash at bank and on hand', 28), (' cash on hand and at bank', 28), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: impairment , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 47), (' short term deposits', 41), (' cash and cash equivalents', 35), (' cash at bank and on hand', 29), (' cash on hand and at bank', 29), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: dividend received , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash and cash equivalents', 40), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: amortisation of exploration and evaluation and intangible assets , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 50), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), (' cash at bank', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: natural hedge unwind from , res_fuzz_match = [('cash on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' cash at bank', 33), (' cash and cash equivalents', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: loss on disposal of property, plant and equipment and mine properties , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 56), (' cash and cash equivalents', 52), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest expense , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' short term deposits', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 49), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 54), (' short term deposits', 51), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: non controlling interest (participant in minerva joint venture) , res_fuzz_match = [(' short term deposits', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax expense , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other receivables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 54), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in inventories , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in deferred stripping asset , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 44), (' cash and cash equivalents', 43), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other non current financial assets , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other assets , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in provisions , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 34), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other payables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 48), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other liabilities , res_fuzz_match = [(' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 40), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax (paid) , res_fuzz_match = [('cash on hand', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash at bank', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: net cash from operating activities , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at bank and on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 43)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents bank balances , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash on hand , res_fuzz_match = [('cash on hand', 100), (' cash and cash equivalents', 100), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = cash flows from operating activities profit for the period , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 44), (' cash and cash equivalents', 43), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: depreciation , res_fuzz_match = [(' short term deposits', 51), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), ('cash on hand', 33), (' cash and cash equivalents', 33), (' cash at bank and on hand', 28), (' cash on hand and at bank', 28), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: impairment , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 47), (' short term deposits', 41), (' cash and cash equivalents', 35), (' cash at bank and on hand', 29), (' cash on hand and at bank', 29), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: dividend received , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash and cash equivalents', 40), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: amortisation of exploration and evaluation and intangible assets , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 50), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), (' cash at bank', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: natural hedge unwind from , res_fuzz_match = [('cash on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' cash at bank', 33), (' cash and cash equivalents', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: loss on disposal of property, plant and equipment and mine properties , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 56), (' cash and cash equivalents', 52), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest expense , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' short term deposits', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 49), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 54), (' short term deposits', 51), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: non controlling interest (participant in minerva joint venture) , res_fuzz_match = [(' short term deposits', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax expense , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other receivables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 54), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in inventories , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in deferred stripping asset , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 44), (' cash and cash equivalents', 43), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other non current financial assets , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other assets , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in provisions , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 34), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other payables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 48), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other liabilities , res_fuzz_match = [(' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 40), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax (paid) , res_fuzz_match = [('cash on hand', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash at bank', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: net cash from operating activities , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at bank and on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 43)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents bank balances , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash on hand , res_fuzz_match = [('cash on hand', 100), (' cash and cash equivalents', 100), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 33)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = cash flows from operating activities profit for the period , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 44), (' cash and cash equivalents', 43), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: depreciation , res_fuzz_match = [(' short term deposits', 51), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), ('cash on hand', 33), (' cash and cash equivalents', 33), (' cash at bank and on hand', 28), (' cash on hand and at bank', 28), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: impairment , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 47), (' short term deposits', 41), (' cash and cash equivalents', 35), (' cash at bank and on hand', 29), (' cash on hand and at bank', 29), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: dividend received , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash and cash equivalents', 40), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: amortisation of exploration and evaluation and intangible assets , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 50), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), (' cash at bank', 44)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:21+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: natural hedge unwind from , res_fuzz_match = [('cash on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' cash at bank', 33), (' cash and cash equivalents', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: loss on disposal of property, plant and equipment and mine properties , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 56), (' cash and cash equivalents', 52), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest expense , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' short term deposits', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 49), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 54), (' short term deposits', 51), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: non controlling interest (participant in minerva joint venture) , res_fuzz_match = [(' short term deposits', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax expense , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other receivables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 54), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in inventories , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in deferred stripping asset , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 44), (' cash and cash equivalents', 43), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other non current financial assets , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other assets , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in provisions , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 34), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other payables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 48), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other liabilities , res_fuzz_match = [(' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 40), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax (paid) , res_fuzz_match = [('cash on hand', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash at bank', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: net cash from operating activities , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at bank and on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents bank balances , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash on hand , res_fuzz_match = [('cash on hand', 100), (' cash and cash equivalents', 100), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 10 cash and cash equivalents cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = cash flows from operating activities profit for the period , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), (' short term deposits', 44), (' cash and cash equivalents', 43), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: depreciation , res_fuzz_match = [(' short term deposits', 51), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), ('cash on hand', 33), (' cash and cash equivalents', 33), (' cash at bank and on hand', 28), (' cash on hand and at bank', 28), (' cash at bank', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: impairment , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 47), (' short term deposits', 41), (' cash and cash equivalents', 35), (' cash at bank and on hand', 29), (' cash on hand and at bank', 29), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: dividend received , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash and cash equivalents', 40), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33), (' cash at bank', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: amortisation of exploration and evaluation and intangible assets , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 50), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), (' cash at bank', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: natural hedge unwind from , res_fuzz_match = [('cash on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' cash at bank', 33), (' cash and cash equivalents', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: loss on disposal of property, plant and equipment and mine properties , res_fuzz_match = [('cash on hand', 56), (' cash at bank and on hand', 56), (' cash and cash equivalents', 52), (' short term deposits', 50), (' cash on hand and at bank', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest expense , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' short term deposits', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 49), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: non cash interest , res_fuzz_match = [('cash on hand', 67), (' cash at bank', 67), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 54), (' short term deposits', 51), (' cash and cash equivalents', 48), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: non controlling interest (participant in minerva joint venture) , res_fuzz_match = [(' short term deposits', 50), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax expense , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' short term deposits', 39), ('cash on hand', 33), (' cash at bank', 33), (' cash at bank and on hand', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: total , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), (' short term deposits', 38), (' cash and cash equivalents', 38), (' cash on hand and at bank', 32), (' cash at bank and on hand', 31), ('cash on hand', 22), (' cash at bank', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other receivables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 54), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in inventories , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in deferred stripping asset , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 44), (' cash and cash equivalents', 43), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 41), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other non current financial assets , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other assets , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39), (' cash and cash equivalents', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in provisions , res_fuzz_match = [('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 34), (' cash at bank and on hand', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in trade and other payables , res_fuzz_match = [(' cash at bank and on hand', 61), (' cash on hand and at bank', 56), (' cash and cash equivalents', 48), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: change in other liabilities , res_fuzz_match = [(' cash and cash equivalents', 48), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 45), ('cash on hand', 44), (' cash at bank', 44), (' short term deposits', 40), (' cash at bank and on hand', 39), (' cash on hand and at bank', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: income tax (paid) , res_fuzz_match = [('cash on hand', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash at bank and on hand', 39), (' short term deposits', 39), (' cash at bank', 33), (' cash and cash equivalents', 33), (' cash on hand and at bank', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = adjustments for: net cash from operating activities , res_fuzz_match = [('cash on hand', 56), (' cash at bank', 56), (' cash at bank and on hand', 44), (' short term deposits', 44), (' cash on hand and at bank', 44), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 43), (' cash and cash equivalents', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 26, 27, 28, 52, 53, 54, 78, 79, 80], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [176085.0, 0.0, 176085.0, 257723.0, 1.0, 257724.0, 62971.0, 0.0, 62971.0, 43512.0, 1.0, 43513.0], 'label': ['10 Cash and cash equivalents Bank balances', '10 Cash and cash equivalents Cash on hand', '10 Cash and cash equivalents Cash and cash equivalents in the statement of cash flows', '10 Cash and cash equivalents Bank balances', '10 Cash and cash equivalents Cash on hand', '10 Cash and cash equivalents Cash and cash equivalents in the statement of cash flows', '10 Cash and cash equivalents Bank balances', '10 Cash and cash equivalents Cash on hand', '10 Cash and cash equivalents Cash and cash equivalents in the statement of cash flows', '10 Cash and cash equivalents Bank balances', '10 Cash and cash equivalents Cash on hand', '10 Cash and cash equivalents Cash and cash equivalents in the statement of cash flows'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('inventories', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('inventories', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 92490.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [92490.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('inventories', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('inventories', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 129839.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [129839.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('other assets', 73), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 42), ('prepayments', 12)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('other current financial assets', 100), ('other current assets', 83), ('other financial assets', 83), ('other assets', 58), ('prepayments', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 17270.0, 'line_item_label': ['Current assets', 'Other current assets', 'Other current financial assets'], 'note_numbers': [nan, '13', '14'], 'line_item_value': [0.0, 8913.0, 8357.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('other assets', 73), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 42), ('prepayments', 12)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('other current financial assets', 100), ('other current assets', 83), ('other financial assets', 83), ('other assets', 58), ('prepayments', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 63777.0, 'line_item_label': ['Current assets', 'Other current assets', 'Other current financial assets'], 'note_numbers': [nan, '13', '14'], 'line_item_value': [0.0, 9841.0, 53936.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('other assets', 73), (' biological assets', 61), (' financial assets', 58), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' trade and other receivables', 36), (' deferred operating expenditure', 31), (' income tax receivable from related parties', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' other financial assets', 83), (' financial assets', 65), ('other assets', 58), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 7], 'score': 83, 'value': 161233.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets', 'Other current financial assets'], 'note_numbers': [nan, '11', '13', '14'], 'line_item_value': [0.0, 143963.0, 8913.0, 8357.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('other assets', 73), (' biological assets', 61), (' financial assets', 58), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' trade and other receivables', 36), (' deferred operating expenditure', 31), (' income tax receivable from related parties', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' other financial assets', 83), (' financial assets', 65), ('other assets', 58), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 7], 'score': 83, 'value': 202639.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other current assets', 'Other current financial assets'], 'note_numbers': [nan, '11', '13', '14'], 'line_item_value': [0.0, 138862.0, 9841.0, 53936.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('current assets', 58)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('current assets', 65)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 81, 'value': 8913.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 8913.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('current assets', 58)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('current assets', 65)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 81, 'value': 9841.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 9841.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35), ('plant and equipment', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('plant and equipment', 58), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('plant property equipment', 38), ('property plant equipment', 38), ('plant and equipment', 31)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('plant property equipment', 37), ('property plant equipment', 37), ('plant and equipment', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 314635.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['17'], 'line_item_value': [314635.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35), ('plant and equipment', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('plant and equipment', 58), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('plant property equipment', 38), ('property plant equipment', 38), ('plant and equipment', 31)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('plant property equipment', 37), ('property plant equipment', 37), ('plant and equipment', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 343782.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['17'], 'line_item_value': [343782.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('plant property equipment', 38), ('property plant equipment', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('plant property equipment', 37), ('property plant equipment', 37)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 314635.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['17'], 'line_item_value': [314635.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('plant property equipment', 38), ('property plant equipment', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('plant property equipment', 37), ('property plant equipment', 37)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 343782.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['17'], 'line_item_value': [343782.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('tangible assets', 45)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('tangible assets', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('tangible assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('tangible assets', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 80, 'value': 49014.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['18'], 'line_item_value': [49014.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('tangible assets', 45)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('tangible assets', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('tangible assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('tangible assets', 44)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 80, 'value': 43588.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['18'], 'line_item_value': [43588.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('goodwill on consolidatio', 35), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('goodwill on consolidatio', 35), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('goodwill on consolidatio', 35), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('goodwill on consolidatio', 35), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('intangible assets', 83), ('intangible assets under development', 40), ('intangible under development', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('intangible assets under development', 50), ('intangible under development', 44), ('intangible assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 41), ('intangible under development', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('intangible assets', 67), ('intangible under development', 37), ('intangible assets under development', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [10, 14], 'score': 100, 'value': 245155.0, 'line_item_label': ['Other non current financial assets', 'Intangible assets'], 'note_numbers': ['14', '18'], 'line_item_value': [196141.0, 49014.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('intangible assets', 83), ('intangible assets under development', 40), ('intangible under development', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('intangible assets under development', 50), ('intangible under development', 44), ('intangible assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 41), ('intangible under development', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('intangible assets', 67), ('intangible under development', 37), ('intangible assets under development', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [10, 14], 'score': 100, 'value': 231511.0, 'line_item_label': ['Other non current financial assets', 'Intangible assets'], 'note_numbers': ['14', '18'], 'line_item_value': [187923.0, 43588.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('donations', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('donations', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('donations', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('donations', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('donations', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('donations', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('donations', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('donations', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('derivative financial instruments', 60), ('joint ventures and associates', 57), (' investment in associate', 46), (' investments accounted for using the equity method', 45), (' investment in joint venture', 42), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('joint ventures and associates', 50), ('derivative financial instruments', 38), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33), (' investment in associate', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [(' investment in associate', 54), ('investment', 50), (' investments accounted for using the equity method', 47), ('joint ventures and associates', 41), ('derivative financial instruments', 41), (' investment in joint venture', 41)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('joint ventures and associates', 48), (' investment in associate', 48), (' investments accounted for using the equity method', 48), ('derivative financial instruments', 43), (' investment in joint venture', 42), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 829.0, 'line_item_label': ['Investments'], 'note_numbers': [nan], 'line_item_value': [829.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('derivative financial instruments', 60), ('joint ventures and associates', 57), (' investment in associate', 46), (' investments accounted for using the equity method', 45), (' investment in joint venture', 42), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('joint ventures and associates', 50), ('derivative financial instruments', 38), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33), (' investment in associate', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [(' investment in associate', 54), ('investment', 50), (' investments accounted for using the equity method', 47), ('joint ventures and associates', 41), ('derivative financial instruments', 41), (' investment in joint venture', 41)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('joint ventures and associates', 48), (' investment in associate', 48), (' investments accounted for using the equity method', 48), ('derivative financial instruments', 43), (' investment in joint venture', 42), ('investment', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 829.0, 'line_item_label': ['Investments'], 'note_numbers': [nan], 'line_item_value': [829.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('deferred tax assets', 43), ('deferred charges', 29), ('deferred tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('deferred charges', 37), ('deferred tax', 32), ('deferred tax assets', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('deferred tax assets', 81), ('deferred tax', 54), ('deferred charges', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 29), ('deferred tax', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 81, 'value': 87986.0, 'line_item_label': ['Deferred stripping asset'], 'note_numbers': ['16'], 'line_item_value': [87986.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('deferred tax assets', 43), ('deferred charges', 29), ('deferred tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('deferred charges', 37), ('deferred tax', 32), ('deferred tax assets', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('deferred tax assets', 81), ('deferred tax', 54), ('deferred charges', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('deferred tax assets', 47), ('deferred charges', 29), ('deferred tax', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 81, 'value': 119211.0, 'line_item_label': ['Deferred stripping asset'], 'note_numbers': ['16'], 'line_item_value': [119211.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 1 april , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset changes in deferred stripping asset , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 31 march , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 1 april , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset changes in deferred stripping asset , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 31 march , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 1 april , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset changes in deferred stripping asset , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 31 march , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 1 april , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset changes in deferred stripping asset , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 16 deferred stripping asset balance at 31 march , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = construction in progress $'000 , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 19)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $'000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased plant and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased land $'000 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = leased buildings $'000 , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = furniture, fittings and equipment $'000 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april2021 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('deferred tax assets', 30), (' deferred tax balances', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal other , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal transfers , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposal balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 1 april2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total additions , res_fuzz_match = [('deferred tax assets', 45), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total disposal , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total other , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total transters , res_fuzz_match = [('deferred tax assets', 43), (' deferred tax balances', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses balance at 1 april2 2021 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment losses depreciation charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment other , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at 31 march 2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 47)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers balance at1 april2022 , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = transfers depreciation charge , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment disposal , res_fuzz_match = [('deferred tax assets', 31), (' deferred tax balances', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = impairment balance at31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april2 2021 , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2023 , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining development $'000 , res_fuzz_match = [('deferred tax assets', 25), (' deferred tax balances', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [(' other non-current assets', 64), (' other non-current assets', 64), (' financial assets', 59), ('other assets', 52), (' other assets', 52), (' leased assets', 39), (' exploration and evaluation expenditure', 31), (' loan receivables', 29), ('non-current', 21), (' leases', 11)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [(' exploration and evaluation expenditure', 74), ('other assets', 37), (' other assets', 37), (' loan receivables', 37), (' other non-current assets', 34), (' other non-current assets', 34), (' leased assets', 31), ('non-current', 26), (' financial assets', 21), (' leases', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [(' leased assets', 59), ('other assets', 57), (' other assets', 57), (' other non-current assets', 56), (' other non-current assets', 56), (' financial assets', 53), (' exploration and evaluation expenditure', 36), (' loan receivables', 36), (' leases', 19), ('non-current', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [(' other non-current assets', 76), (' other non-current assets', 76), ('other assets', 65), (' other assets', 65), (' financial assets', 44), (' leased assets', 42), (' exploration and evaluation expenditure', 36), (' loan receivables', 29), ('non-current', 27), (' leases', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 14], 'score': 80, 'value': 49014.0, 'line_item_label': ['Non-current assets', 'Intangible assets'], 'note_numbers': [nan, '18'], 'line_item_value': [0.0, 49014.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [(' other non-current assets', 64), (' other non-current assets', 64), (' financial assets', 59), ('other assets', 52), (' other assets', 52), (' leased assets', 39), (' exploration and evaluation expenditure', 31), (' loan receivables', 29), ('non-current', 21), (' leases', 11)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [(' exploration and evaluation expenditure', 74), ('other assets', 37), (' other assets', 37), (' loan receivables', 37), (' other non-current assets', 34), (' other non-current assets', 34), (' leased assets', 31), ('non-current', 26), (' financial assets', 21), (' leases', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [(' leased assets', 59), ('other assets', 57), (' other assets', 57), (' other non-current assets', 56), (' other non-current assets', 56), (' financial assets', 53), (' exploration and evaluation expenditure', 36), (' loan receivables', 36), (' leases', 19), ('non-current', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [(' other non-current assets', 76), (' other non-current assets', 76), ('other assets', 65), (' other assets', 65), (' financial assets', 44), (' leased assets', 42), (' exploration and evaluation expenditure', 36), (' loan receivables', 29), ('non-current', 27), (' leases', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 14], 'score': 80, 'value': 43588.0, 'line_item_label': ['Non-current assets', 'Intangible assets'], 'note_numbers': [nan, '18'], 'line_item_value': [0.0, 43588.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' defined benefit plans', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 35), (' electricity derivatives at fair value', 35), (' warehouse and office equipment', 35), (' motor vehicles', 25), (' right-of-use-assets', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 37), (' electricity derivatives at fair value', 37), (' right-of-use-assets', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals additions , res_fuzz_match = [(' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 26), ('finance receivables', 25), (' total properties', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses impairment , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april 2021 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at311 march2 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = jv rail access facilitation goodwill rights $'000 , res_fuzz_match = [(' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' right-of-use-assets', 33), (' motor vehicles', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' defined benefit plans', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 35), (' electricity derivatives at fair value', 35), (' warehouse and office equipment', 35), (' motor vehicles', 25), (' right-of-use-assets', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 37), (' electricity derivatives at fair value', 37), (' right-of-use-assets', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals additions , res_fuzz_match = [(' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 26), ('finance receivables', 25), (' total properties', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses impairment , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april 2021 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at311 march2 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' defined benefit plans', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 35), (' electricity derivatives at fair value', 35), (' warehouse and office equipment', 35), (' motor vehicles', 25), (' right-of-use-assets', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 37), (' electricity derivatives at fair value', 37), (' right-of-use-assets', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals additions , res_fuzz_match = [(' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 26), ('finance receivables', 25), (' total properties', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses impairment , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april 2021 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at311 march2 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = computer software $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 43), (' total properties', 36), (' warehouse and office equipment', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 29), (' exploration and evaluation expenditure', 29), ('finance receivables', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' defined benefit plans', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 35), (' electricity derivatives at fair value', 35), (' warehouse and office equipment', 35), (' motor vehicles', 25), (' right-of-use-assets', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 37), (' electricity derivatives at fair value', 37), (' right-of-use-assets', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals additions , res_fuzz_match = [(' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 26), ('finance receivables', 25), (' total properties', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses impairment , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april 2021 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at311 march2 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining information $'000 , res_fuzz_match = [(' defined benefit plans', 45), ('finance receivables', 36), (' electricity derivatives at fair value', 36), (' allowance for expected credit losses', 27), (' exploration and evaluation expenditure', 27), (' total properties', 27), (' warehouse and office equipment', 27), (' motor vehicles', 27), (' right-of-use-assets', 18)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' defined benefit plans', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 35), (' electricity derivatives at fair value', 35), (' warehouse and office equipment', 35), (' motor vehicles', 25), (' right-of-use-assets', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 37), (' electricity derivatives at fair value', 37), (' right-of-use-assets', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals additions , res_fuzz_match = [(' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 26), ('finance receivables', 25), (' total properties', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses impairment , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april 2021 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at311 march2 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = mining tenements (incl sub-lease) $'000 , res_fuzz_match = [(' defined benefit plans', 50), (' motor vehicles', 50), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' electricity derivatives at fair value', 32), (' exploration and evaluation expenditure', 31), (' total properties', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' defined benefit plans', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 35), (' electricity derivatives at fair value', 35), (' warehouse and office equipment', 35), (' motor vehicles', 25), (' right-of-use-assets', 13)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' allowance for expected credit losses', 50), (' defined benefit plans', 50), ('finance receivables', 40), (' electricity derivatives at fair value', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' warehouse and office equipment', 40), (' total properties', 30), (' motor vehicles', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 37), (' electricity derivatives at fair value', 37), (' right-of-use-assets', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals additions , res_fuzz_match = [(' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' warehouse and office equipment', 42), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' motor vehicles', 26), ('finance receivables', 25), (' total properties', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals other , res_fuzz_match = [(' total properties', 42), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' motor vehicles', 26), ('finance receivables', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = disposals balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 28), (' electricity derivatives at fair value', 27), (' motor vehicles', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses impairment , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses amortisation , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses other , res_fuzz_match = [(' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' total properties', 43), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 39), ('finance receivables', 38), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = amortisation andi impairments losses balance at3 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 37), (' total properties', 36), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 1april 2021 , res_fuzz_match = [(' motor vehicles', 52), (' electricity derivatives at fair value', 50), (' total properties', 43), ('finance receivables', 40), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' right-of-use-assets', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at311 march2 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [365751.0, 471.0, 11166.0, 377388.0, 377388.0, 351.0, -436.0, 377303.0, 305790.0, 5420.0, 5998.0, 11165.0, 328374.0, 328374.0, 5778.0, -437.0, 333715.0, 59961.0, 49014.0, 43588.0], 'label': ["Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) mining tenements at cost , res_fuzz_match = [('finance receivables', 54), (' defined benefit plans', 44), (' total properties', 43), (' allowance for expected credit losses', 36), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' electricity derivatives at fair value', 27), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) mining tenements accumulated amortisation and impairment , res_fuzz_match = [('finance receivables', 54), (' defined benefit plans', 50), (' total properties', 50), (' warehouse and office equipment', 42), (' exploration and evaluation expenditure', 41), (' electricity derivatives at fair value', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 32), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) computer software at cost , res_fuzz_match = [('finance receivables', 54), (' total properties', 50), (' motor vehicles', 42), (' right-of-use-assets', 40), (' allowance for expected credit losses', 36), (' defined benefit plans', 33), (' electricity derivatives at fair value', 32), (' warehouse and office equipment', 29), (' exploration and evaluation expenditure', 26)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) computer software accumulated depreciation , res_fuzz_match = [('finance receivables', 54), (' total properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 38), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' allowance for expected credit losses', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) total , res_fuzz_match = [('finance receivables', 54), (' total properties', 43), (' defined benefit plans', 33), (' motor vehicles', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 30), (' electricity derivatives at fair value', 30), (' exploration and evaluation expenditure', 30), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) mining tenements at cost , res_fuzz_match = [('finance receivables', 54), (' defined benefit plans', 44), (' total properties', 43), (' allowance for expected credit losses', 36), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' electricity derivatives at fair value', 27), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) mining tenements accumulated amortisation and impairment , res_fuzz_match = [('finance receivables', 54), (' defined benefit plans', 50), (' total properties', 50), (' warehouse and office equipment', 42), (' exploration and evaluation expenditure', 41), (' electricity derivatives at fair value', 36), (' motor vehicles', 33), (' allowance for expected credit losses', 32), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) computer software at cost , res_fuzz_match = [('finance receivables', 54), (' total properties', 50), (' motor vehicles', 42), (' right-of-use-assets', 40), (' allowance for expected credit losses', 36), (' defined benefit plans', 33), (' electricity derivatives at fair value', 32), (' warehouse and office equipment', 29), (' exploration and evaluation expenditure', 26)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) computer software accumulated depreciation , res_fuzz_match = [('finance receivables', 54), (' total properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 38), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' allowance for expected credit losses', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 18 intangibles (continued) total , res_fuzz_match = [('finance receivables', 54), (' total properties', 43), (' defined benefit plans', 33), (' motor vehicles', 33), (' warehouse and office equipment', 32), (' allowance for expected credit losses', 30), (' electricity derivatives at fair value', 30), (' exploration and evaluation expenditure', 30), (' right-of-use-assets', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = company $'000 , res_fuzz_match = [(' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total properties', 43), (' warehouse and office equipment', 43), ('finance receivables', 29), (' allowance for expected credit losses', 29), (' right-of-use-assets', 29), (' motor vehicles', 29), (' electricity derivatives at fair value', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('non-current assets total', 52)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('non-current assets total', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('non-current assets total', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('non-current assets total', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('non-current assets total', 52)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('non-current assets total', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('non-current assets total', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('non-current assets total', 62)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [(' interest bearing liabilites', 45), ('lease liabilities', 34), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 46), ('shortterm debt', 46), ('short term debt', 44), ('shortterm borrowings', 43), (' interest bearing liabilites', 41), (' bank overdraft', 38), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' loans and borrowings', 33), (' leases', 29), (' bank overdraft', 24), (' interest bearing liabilites', 16), ('lease liabilities', 14), ('short term debt', 0), ('short-term debt', 0), ('borrowings', 0), ('shortterm debt', 0), ('shortterm borrowings', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 46), ('shortterm debt', 46), ('short term debt', 44), ('shortterm borrowings', 43), (' interest bearing liabilites', 41), (' bank overdraft', 38), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), (' interest bearing liabilites', 58), ('short-term debt', 33), ('shortterm debt', 33), ('short term debt', 32), (' loans and borrowings', 32), (' bank overdraft', 27), (' leases', 20), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [23, 24, 31, 32], 'score': 100, 'value': 209763.0, 'line_item_label': ['Lease liability', 'Borrowings', 'Borrowings', 'Lease liability'], 'note_numbers': [nan, '22', '22', nan], 'line_item_value': [26885.0, 0.0, 162484.0, 20394.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [(' interest bearing liabilites', 45), ('lease liabilities', 34), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 46), ('shortterm debt', 46), ('short term debt', 44), ('shortterm borrowings', 43), (' interest bearing liabilites', 41), (' bank overdraft', 38), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' loans and borrowings', 33), (' leases', 29), (' bank overdraft', 24), (' interest bearing liabilites', 16), ('lease liabilities', 14), ('short term debt', 0), ('short-term debt', 0), ('borrowings', 0), ('shortterm debt', 0), ('shortterm borrowings', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 46), ('shortterm debt', 46), ('short term debt', 44), ('shortterm borrowings', 43), (' interest bearing liabilites', 41), (' bank overdraft', 38), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), (' interest bearing liabilites', 58), ('short-term debt', 33), ('shortterm debt', 33), ('short term debt', 32), (' loans and borrowings', 32), (' bank overdraft', 27), (' leases', 20), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [23, 24, 31, 32], 'score': 100, 'value': 142529.0, 'line_item_label': ['Lease liability', 'Borrowings', 'Borrowings', 'Lease liability'], 'note_numbers': [nan, '22', '22', nan], 'line_item_value': [15282.0, 0.0, 121674.0, 5573.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other trade payables', 61), ('trade and other payables', 60), ('trade payable', 60)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16), ('trade payable', 13), ('other trade payables', 10)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('trade and other payables', 53), ('other trade payables', 53), ('trade payable', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 175152.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['19'], 'line_item_value': [175152.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other trade payables', 61), ('trade and other payables', 60), ('trade payable', 60)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16), ('trade payable', 13), ('other trade payables', 10)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('trade and other payables', 53), ('other trade payables', 53), ('trade payable', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 118230.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['19'], 'line_item_value': [118230.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 67), (' trade and other payables', 59), (' trade payables - other parties', 57), (' other trade payables', 56), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 62), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 46), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('trade creditors', 43), (' amounts payable to controlling entity', 40), (' trade and other payables', 35), (' trade payables - other parties', 35), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), (' trade and other payables', 64), (' amounts payable to controlling entity', 54), ('trade creditors', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 54), ('trade creditors', 43), (' amounts payable to controlling entity', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' trade and other payables', 46), (' amounts payable to controlling entity', 46), (' trade payables', 43), (' trade payables', 43), ('trade creditors', 38), (' trade payables - other parties', 38), (' other trade payables', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 67), (' trade and other payables', 59), (' trade payables - other parties', 57), (' other trade payables', 56), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 62), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 46), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('trade creditors', 43), (' amounts payable to controlling entity', 40), (' trade and other payables', 35), (' trade payables - other parties', 35), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), (' trade and other payables', 64), (' amounts payable to controlling entity', 54), ('trade creditors', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 54), ('trade creditors', 43), (' amounts payable to controlling entity', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' trade and other payables', 46), (' amounts payable to controlling entity', 46), (' trade payables', 43), (' trade payables', 43), ('trade creditors', 38), (' trade payables - other parties', 38), (' other trade payables', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 67), (' trade and other payables', 59), (' trade payables - other parties', 57), (' other trade payables', 56), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 62), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 46), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('trade creditors', 43), (' amounts payable to controlling entity', 40), (' trade and other payables', 35), (' trade payables - other parties', 35), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), (' trade and other payables', 64), (' amounts payable to controlling entity', 54), ('trade creditors', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 54), ('trade creditors', 43), (' amounts payable to controlling entity', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' trade and other payables', 46), (' amounts payable to controlling entity', 46), (' trade payables', 43), (' trade payables', 43), ('trade creditors', 38), (' trade payables - other parties', 38), (' other trade payables', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 67), (' trade and other payables', 59), (' trade payables - other parties', 57), (' other trade payables', 56), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' amounts payable to controlling entity', 62), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 46), ('trade creditors', 36)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('trade creditors', 43), (' amounts payable to controlling entity', 40), (' trade and other payables', 35), (' trade payables - other parties', 35), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), (' trade and other payables', 64), (' amounts payable to controlling entity', 54), ('trade creditors', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' trade and other payables', 59), (' other trade payables', 56), (' trade payables - other parties', 54), ('trade creditors', 43), (' amounts payable to controlling entity', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' trade and other payables', 46), (' amounts payable to controlling entity', 46), (' trade payables', 43), (' trade payables', 43), ('trade creditors', 38), (' trade payables - other parties', 38), (' other trade payables', 38)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('trade and other payables', 60)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('trade and other payables', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 175152.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['19'], 'line_item_value': [175152.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('trade and other payables', 60)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('trade and other payables', 53)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 118230.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['19'], 'line_item_value': [118230.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 64)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [('interest accrued', 71), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 64)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [('interest accrued', 71), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 64)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [('interest accrued', 71), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 64)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [('interest accrued', 71), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 8, 14, 20], 'score': [100, 100, 100, 100], 'value': [72719.0, 67010.0, 515.0, 281.0], 'label': ['Current Accrued expenses', 'Current Accrued expenses', 'Current Accrued expenses', 'Current Accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 12:14:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('tax', 100), ('current tax liabilities', 83), (' income tax payable', 75), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33), ('provision', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33), ('provision', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('tax', 100), ('current tax liabilities', 75), (' income tax payable', 50), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 22, 25, 26, 30, 34], 'score': 100, 'value': 335334.0, 'line_item_label': ['LIABILITIES', 'Provisions', 'Current tax payable', 'liability', 'Provisions', 'Deferred tax liabilities'], 'note_numbers': [nan, '20', nan, nan, '21', '24'], 'line_item_value': [0.0, 33651.0, 0.0, 0.0, 239295.0, 62388.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('tax', 100), ('current tax liabilities', 83), (' income tax payable', 75), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33), ('provision', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33), ('provision', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('tax', 100), ('current tax liabilities', 75), (' income tax payable', 50), ('provision', 17)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 22, 25, 26, 30, 34], 'score': 100, 'value': 468734.0, 'line_item_label': ['LIABILITIES', 'Provisions', 'Current tax payable', 'liability', 'Provisions', 'Deferred tax liabilities'], 'note_numbers': [nan, '20', nan, nan, '21', '24'], 'line_item_value': [0.0, 29850.0, 142391.0, 8479.0, 235331.0, 52683.0]}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions employee provision current , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions provision for rehababilitation current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions total , res_fuzz_match = [(' provision for income tax', 51), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions employee provision current , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions provision for rehababilitation current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions total , res_fuzz_match = [(' provision for income tax', 51), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions employee provision current , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions provision for rehababilitation current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions total , res_fuzz_match = [(' provision for income tax', 51), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions employee provision current , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions provision for rehababilitation current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = 20 current provisions total , res_fuzz_match = [(' provision for income tax', 51), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provision for income tax', 58), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provision for income tax', 58), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provision for income tax', 58), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provision for income tax', 58), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 50)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets other assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets employee benefits , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets provisions , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets third party payables , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities inventories , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred stripping assets , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities restricted cash , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives provisions , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives other assets , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables inventories , res_fuzz_match = [(' provision for income tax', 35), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables exploration and evaluation , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets other assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets employee benefits , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets provisions , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets third party payables , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities inventories , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred stripping assets , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities restricted cash , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives provisions , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives other assets , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables inventories , res_fuzz_match = [(' provision for income tax', 35), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables exploration and evaluation , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets other assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets employee benefits , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets provisions , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets third party payables , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities inventories , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred stripping assets , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities restricted cash , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives provisions , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives other assets , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables inventories , res_fuzz_match = [(' provision for income tax', 35), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables exploration and evaluation , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets other assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets employee benefits , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets provisions , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax assets third party payables , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities inventories , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred stripping assets , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities restricted cash , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = intangibles lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 24)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives provisions , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 25)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = derivatives other assets , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities intangibles , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables inventories , res_fuzz_match = [(' provision for income tax', 35), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables exploration and evaluation , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables property, plant and equipment , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = trade and other receivables borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income total , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = income $ '000 , res_fuzz_match = [('income tax (refundable)/payable ', 100), (' provision for income tax', 100)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], 'scorevalue': [5950.0, 143.0, -326.0, -4062.0, 3969.0, -74719.0, -2778.0, -31.0, 20904.0, 3015.0, 17901.0, 234.0, 62082.0, 15219.0, 5961.0, 2145.0, 4605.0, 2177.0, 62388.0, -168.0, -144.0, -229.0, -397.0, -3133.0, -51.0, -3.0, 10357.0, 1241.0, 6620.0, 207.0, 2145.0, 524.0, 2177.0, 19146.0, -4390.0, -249.0, 449.0, -264.0, -4116.0, -6618.0, 2778.0, 48.0, 2768.0, 858.0, 8632.0, 2988.0, -2558.0, 5304.0, -103.0, -429.0, 0.0, 0.0, 5097.0, 62.0, 144.0, 82.0, -60.0, -340.0, 78.0, 3.0, 152.0, 557.0, 626.0, -80.0, -429.0, 0.0, 0.0, 795.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6664.0, -8139.0, -14803.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -716.0, -8139.0, -8855.0, 1560.0, -106.0, 123.0, -4326.0, -147.0, -81338.0, 0.0, 17.0, 23672.0, 3873.0, 26533.0, 3222.0, 59524.0, 20523.0, 5858.0, 1716.0, -2059.0, -5962.0, 52683.0, -106.0, 0.0, -147.0, -457.0, -3473.0, 27.0, 0.0, 10509.0, 1798.0, 7246.0, 127.0, 1716.0, -192.0, -5962.0, 11086.0], 'label': ["income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $'000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000", "income $ '000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 12:14:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:22+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = consolidated trade and other receivables , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = consolidated inventories , res_fuzz_match = [(' provision for income tax', 39), ('income tax (refundable)/payable ', 28)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = consolidated deferred stripping assets , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = consolidated leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 32)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = consolidated restricted cash , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss other assets , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss exploration and evaluation , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss property, plant and equipment , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 29)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss third party payable , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 40)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:22+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company inventories , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company other assets , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 37)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 45)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated trade and other receivables , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated inventories , res_fuzz_match = [(' provision for income tax', 39), ('income tax (refundable)/payable ', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated deferred stripping assets , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated restricted cash , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss other assets , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss exploration and evaluation , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss property, plant and equipment , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss third party payable , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company inventories , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company other assets , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 37)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 45)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = assets 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated trade and other receivables , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated inventories , res_fuzz_match = [(' provision for income tax', 39), ('income tax (refundable)/payable ', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated deferred stripping assets , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated restricted cash , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss other assets , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss exploration and evaluation , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss property, plant and equipment , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss third party payable , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company inventories , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company other assets , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 37)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 45)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated trade and other receivables , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated inventories , res_fuzz_match = [(' provision for income tax', 39), ('income tax (refundable)/payable ', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated deferred stripping assets , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated restricted cash , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss other assets , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss exploration and evaluation , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss property, plant and equipment , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss third party payable , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company inventories , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company other assets , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 37)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 45)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = liabilities 31-mar-22 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated trade and other receivables , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated inventories , res_fuzz_match = [(' provision for income tax', 39), ('income tax (refundable)/payable ', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated deferred stripping assets , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated restricted cash , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss other assets , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss exploration and evaluation , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss property, plant and equipment , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss third party payable , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company inventories , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company other assets , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 37)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 45)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net 31-mar-23 $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated trade and other receivables , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated inventories , res_fuzz_match = [(' provision for income tax', 39), ('income tax (refundable)/payable ', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated deferred stripping assets , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated leased assets , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = consolidated restricted cash , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss other assets , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss exploration and evaluation , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss property, plant and equipment , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss derivatives , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss third party payable , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company trade and other receivables , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company inventories , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company other assets , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 37)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company exploration and evaluation , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' provision for income tax', 45)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = company property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss leased asset , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss intangibles , res_fuzz_match = [(' provision for income tax', 48), ('income tax (refundable)/payable ', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss trade and other payables , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss employee benefits , res_fuzz_match = [(' provision for income tax', 36), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss lease liability , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss provisions , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = tax loss borrowings , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income derivatives , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income borrowings , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income tax (assets)liabilities , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 52)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income set off tax , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = other comprehensive income net deferred tax liabilities , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 55)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = net $'000 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other current liabilities', 68), (' other current liabilities', 68), (' trade and other payables', 60), (' customer deposits', 38), (' other financial liabilities', 37), (' foreign exchange contract liability', 37), (' employee benefits', 36), (' financial liabilities', 31), (' deferred revenue', 27), ('provisions', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' employee benefits', 37), (' foreign exchange contract liability', 28), (' customer deposits', 23), (' deferred revenue', 17), ('provisions', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' financial liabilities', 35), (' other financial liabilities', 26), (' foreign exchange contract liability', 18), ('other current liabilities', 17), (' other current liabilities', 17), (' trade and other payables', 16), (' deferred revenue', 13), (' employee benefits', 11), ('provisions', 0), (' customer deposits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' employee benefits', 37), (' foreign exchange contract liability', 28), (' customer deposits', 23), (' deferred revenue', 17), ('provisions', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other current liabilities', 56), (' other current liabilities', 56), (' other financial liabilities', 56), (' financial liabilities', 53), (' trade and other payables', 53), (' deferred revenue', 43), (' foreign exchange contract liability', 43), (' customer deposits', 27), (' employee benefits', 26), ('provisions', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 22, 30], 'score': 100, 'value': 448098.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Provisions'], 'note_numbers': [nan, '19', '20', '21'], 'line_item_value': [0.0, 175152.0, 33651.0, 239295.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other current liabilities', 68), (' other current liabilities', 68), (' trade and other payables', 60), (' customer deposits', 38), (' other financial liabilities', 37), (' foreign exchange contract liability', 37), (' employee benefits', 36), (' financial liabilities', 31), (' deferred revenue', 27), ('provisions', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' employee benefits', 37), (' foreign exchange contract liability', 28), (' customer deposits', 23), (' deferred revenue', 17), ('provisions', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' financial liabilities', 35), (' other financial liabilities', 26), (' foreign exchange contract liability', 18), ('other current liabilities', 17), (' other current liabilities', 17), (' trade and other payables', 16), (' deferred revenue', 13), (' employee benefits', 11), ('provisions', 0), (' customer deposits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' employee benefits', 37), (' foreign exchange contract liability', 28), (' customer deposits', 23), (' deferred revenue', 17), ('provisions', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other current liabilities', 56), (' other current liabilities', 56), (' other financial liabilities', 56), (' financial liabilities', 53), (' trade and other payables', 53), (' deferred revenue', 43), (' foreign exchange contract liability', 43), (' customer deposits', 27), (' employee benefits', 26), ('provisions', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 22, 30], 'score': 100, 'value': 383411.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Provisions'], 'note_numbers': [nan, '19', '20', '21'], 'line_item_value': [0.0, 118230.0, 29850.0, 235331.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 56), (' gst payable and accruals', 50), (' contract liabilites - current', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' total current employee benefits', 47), (' forward exchange contracts', 46), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' arising from service contracts', 40), (' other', 40), (' loans from related party', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' share of joint venture payables', 56), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' total current employee benefits', 49), (' contract liabilites - current', 48), (' other related parties', 47), (' secured long-term bank loans', 46), (' gst payable and accruals', 45), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [(' rebates', 60), (' total current employee benefits', 60), (' current - liability for annual and long service leave', 55), ('other creditors and accruals', 50), (' restructuring', 50), (' warranty', 50), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), (' derivative contracts - at fair value', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' gst payables', 30), (' employee benefits - payroll', 30), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' other', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' gst payables', 90), (' rebates', 80), (' other related parties', 71), (' gst', 67), (' gst payable and accruals', 64), (' loans from related party', 62), (' share of joint venture payables', 60), (' gst liabilities', 60), (' other', 60), (' loan payable to relayed party under tax funding agreement', 54), (' warranty', 50), (' current - liability for annual and long service leave', 49), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' total current employee benefits', 41), (' restructuring', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' gst payables', 80), (' other related parties', 76), (' loans from related party', 62), (' current - liability for annual and long service leave', 60), (' share of joint venture payables', 60), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 57), (' ultimate parent entity', 53), (' derivative contracts - at fair value', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' contract liabilites - current', 48), (' gst payable and accruals', 45), (' total current employee benefits', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' employee benefits - payroll', 41), (' other', 40), (' make good provisions', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 56), (' gst payable and accruals', 50), (' contract liabilites - current', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' total current employee benefits', 47), (' forward exchange contracts', 46), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' arising from service contracts', 40), (' other', 40), (' loans from related party', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' share of joint venture payables', 56), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' total current employee benefits', 49), (' contract liabilites - current', 48), (' other related parties', 47), (' secured long-term bank loans', 46), (' gst payable and accruals', 45), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [(' rebates', 60), (' total current employee benefits', 60), (' current - liability for annual and long service leave', 55), ('other creditors and accruals', 50), (' restructuring', 50), (' warranty', 50), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), (' derivative contracts - at fair value', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' gst payables', 30), (' employee benefits - payroll', 30), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' other', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' gst payables', 90), (' rebates', 80), (' other related parties', 71), (' gst', 67), (' gst payable and accruals', 64), (' loans from related party', 62), (' share of joint venture payables', 60), (' gst liabilities', 60), (' other', 60), (' loan payable to relayed party under tax funding agreement', 54), (' warranty', 50), (' current - liability for annual and long service leave', 49), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' total current employee benefits', 41), (' restructuring', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' gst payables', 80), (' other related parties', 76), (' loans from related party', 62), (' current - liability for annual and long service leave', 60), (' share of joint venture payables', 60), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 57), (' ultimate parent entity', 53), (' derivative contracts - at fair value', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' contract liabilites - current', 48), (' gst payable and accruals', 45), (' total current employee benefits', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' employee benefits - payroll', 41), (' other', 40), (' make good provisions', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 56), (' gst payable and accruals', 50), (' contract liabilites - current', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' total current employee benefits', 47), (' forward exchange contracts', 46), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' arising from service contracts', 40), (' other', 40), (' loans from related party', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' share of joint venture payables', 56), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' total current employee benefits', 49), (' contract liabilites - current', 48), (' other related parties', 47), (' secured long-term bank loans', 46), (' gst payable and accruals', 45), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [(' rebates', 60), (' total current employee benefits', 60), (' current - liability for annual and long service leave', 55), ('other creditors and accruals', 50), (' restructuring', 50), (' warranty', 50), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), (' derivative contracts - at fair value', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' gst payables', 30), (' employee benefits - payroll', 30), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' other', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' gst payables', 90), (' rebates', 80), (' other related parties', 71), (' gst', 67), (' gst payable and accruals', 64), (' loans from related party', 62), (' share of joint venture payables', 60), (' gst liabilities', 60), (' other', 60), (' loan payable to relayed party under tax funding agreement', 54), (' warranty', 50), (' current - liability for annual and long service leave', 49), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' total current employee benefits', 41), (' restructuring', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' gst payables', 80), (' other related parties', 76), (' loans from related party', 62), (' current - liability for annual and long service leave', 60), (' share of joint venture payables', 60), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 57), (' ultimate parent entity', 53), (' derivative contracts - at fair value', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' contract liabilites - current', 48), (' gst payable and accruals', 45), (' total current employee benefits', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' employee benefits - payroll', 41), (' other', 40), (' make good provisions', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable trade , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 56), (' gst payable and accruals', 50), (' contract liabilites - current', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' total current employee benefits', 47), (' forward exchange contracts', 46), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' arising from service contracts', 40), (' other', 40), (' loans from related party', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accounts payable non , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' share of joint venture payables', 56), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' total current employee benefits', 49), (' contract liabilites - current', 48), (' other related parties', 47), (' secured long-term bank loans', 46), (' gst payable and accruals', 45), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current accrued expenses , res_fuzz_match = [(' rebates', 60), (' total current employee benefits', 60), (' current - liability for annual and long service leave', 55), ('other creditors and accruals', 50), (' restructuring', 50), (' warranty', 50), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), (' derivative contracts - at fair value', 35), (' forward exchange contracts', 35), (' gst', 33), (' make good provisions', 31), (' gst payables', 30), (' employee benefits - payroll', 30), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' other', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current interest payable related party , res_fuzz_match = [(' gst payables', 90), (' rebates', 80), (' other related parties', 71), (' gst', 67), (' gst payable and accruals', 64), (' loans from related party', 62), (' share of joint venture payables', 60), (' gst liabilities', 60), (' other', 60), (' loan payable to relayed party under tax funding agreement', 54), (' warranty', 50), (' current - liability for annual and long service leave', 49), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' total current employee benefits', 41), (' restructuring', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current related party payable (tax) , res_fuzz_match = [(' gst payables', 80), (' other related parties', 76), (' loans from related party', 62), (' current - liability for annual and long service leave', 60), (' share of joint venture payables', 60), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 57), (' ultimate parent entity', 53), (' derivative contracts - at fair value', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' contract liabilites - current', 48), (' gst payable and accruals', 45), (' total current employee benefits', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' employee benefits - payroll', 41), (' other', 40), (' make good provisions', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22], 'score': [80, 80, 90, 80, 80, 80, 90, 80, 80, 80, 90, 80, 80, 80, 90, 80], 'value': [44631.0, 0.0, 880.0, 0.0, 48088.0, 1467.0, 319.0, 58268.0, 10634.0, 0.0, 880.0, 0.0, 9625.0, 179.0, 319.0, 7531.0], 'label': ['Current Accounts payable trade', 'Current Accounts payable non', 'Current Interest payable Related party', 'Current Related party payable (tax)', 'Current Accounts payable trade', 'Current Accounts payable non', 'Current Interest payable Related party', 'Current Related party payable (tax)', 'Current Accounts payable trade', 'Current Accounts payable non', 'Current Interest payable Related party', 'Current Related party payable (tax)', 'Current Accounts payable trade', 'Current Accounts payable non', 'Current Interest payable Related party', 'Current Related party payable (tax)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' employee benefits - current', 61), (' provision for associate funding', 60), (' rebates', 60), (' other related parties', 53), (' warranty', 53), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits', 45), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' current - liability for annual and long service leave', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst payables', 30), (' gst liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provisions - current', 71), (' contract liabilites - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' employee benefits - current', 52), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' make good provisions', 50), (' gst liabilities', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' forward exchange contracts', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 44), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' restructuring', 40), (' other', 40), (' total current employee benefits', 38), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' employee benefits - current', 61), (' provision for associate funding', 60), (' rebates', 60), (' other related parties', 53), (' warranty', 53), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits', 45), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' current - liability for annual and long service leave', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst payables', 30), (' gst liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provisions - current', 71), (' contract liabilites - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' employee benefits - current', 52), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' make good provisions', 50), (' gst liabilities', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' forward exchange contracts', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 44), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' restructuring', 40), (' other', 40), (' total current employee benefits', 38), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' employee benefits - current', 61), (' provision for associate funding', 60), (' rebates', 60), (' other related parties', 53), (' warranty', 53), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits', 45), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' current - liability for annual and long service leave', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst payables', 30), (' gst liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provisions - current', 71), (' contract liabilites - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' employee benefits - current', 52), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' make good provisions', 50), (' gst liabilities', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' forward exchange contracts', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 44), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' restructuring', 40), (' other', 40), (' total current employee benefits', 38), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none employee provision - non current , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' employee benefits - current', 61), (' provision for associate funding', 60), (' rebates', 60), (' other related parties', 53), (' warranty', 53), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits', 45), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' arising from service contracts', 40), (' restructuring', 40), (' other', 40), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' current - liability for annual and long service leave', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst payables', 30), (' gst liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none provision for rehababilitation non current , res_fuzz_match = [(' provisions - current', 71), (' contract liabilites - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' employee benefits - current', 52), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' make good provisions', 50), (' gst liabilities', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' forward exchange contracts', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 44), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' restructuring', 40), (' other', 40), (' total current employee benefits', 38), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('current liabilities', 69)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current liabilities', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('current liabilities', 53)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('current liabilities', 69)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = liability , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current liabilities', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('current liabilities', 53)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), (' share capital ', 24), ('contributed equity', 18), ('contributed equity', 18), (' issued capital', 12), ('common stock', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('share capital', 50), (' share capital ', 50), ('contributed equity', 48), ('contributed equity', 48), ('equity share capital', 45), (' issued capital', 43), ('perpetual equity instrument', 32), ('common stock', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('perpetual equity instrument', 36), ('contributed equity', 34), ('contributed equity', 34), ('common stock', 32), ('equity share capital', 32), ('share capital', 27), (' share capital ', 27), (' issued capital', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), (' share capital ', 24), ('contributed equity', 18), ('contributed equity', 18), (' issued capital', 12), ('common stock', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('share capital', 50), (' share capital ', 50), ('contributed equity', 48), ('contributed equity', 48), ('equity share capital', 45), (' issued capital', 43), ('perpetual equity instrument', 32), ('common stock', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('perpetual equity instrument', 36), ('contributed equity', 34), ('contributed equity', 34), ('common stock', 32), ('equity share capital', 32), ('share capital', 27), (' share capital ', 27), (' issued capital', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves', 100), ('other reserves ', 67)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves ', 40), (' reserves', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other reserves ', 39), (' reserves', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [40], 'score': 100, 'value': 15825.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [15825.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves', 100), ('other reserves ', 67)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves ', 40), (' reserves', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other reserves ', 39), (' reserves', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [40], 'score': 100, 'value': -9685.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [-9685.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('retained earnings', 67), ('other equity', 32), ('reserves surplus', 23), (' accumulated losses', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other equity', 39), ('reserves surplus', 38), ('retained earnings', 33), (' accumulated losses', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('retained earnings', 67), ('other equity', 32), ('reserves surplus', 23), (' accumulated losses', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other equity', 39), ('reserves surplus', 38), ('retained earnings', 33), (' accumulated losses', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 32), (' non-controlling interest', 32), ('non controlling interest', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('minority interest', 52), ('minority interest', 52), ('non controlling interest', 48), ('noncontrolling interest', 38), (' non-controlling interest', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('noncontrolling interest', 100), (' non-controlling interest', 100), ('minority interest', 73), ('minority interest', 73), ('non controlling interest', 62)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [42], 'score': 100, 'value': -1512.0, 'line_item_label': ['Non-controlling interest'], 'note_numbers': [nan], 'line_item_value': [-1512.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 32), (' non-controlling interest', 32), ('non controlling interest', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('minority interest', 52), ('minority interest', 52), ('non controlling interest', 48), ('noncontrolling interest', 38), (' non-controlling interest', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('noncontrolling interest', 100), (' non-controlling interest', 100), ('minority interest', 73), ('minority interest', 73), ('non controlling interest', 62)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [42], 'score': 100, 'value': -1751.0, 'line_item_label': ['Non-controlling interest'], 'note_numbers': [nan], 'line_item_value': [-1751.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35), ('plant and equipment', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('plant and equipment', 58), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('plant property equipment', 38), ('property plant equipment', 38), ('plant and equipment', 31)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('plant property equipment', 37), ('property plant equipment', 37), ('plant and equipment', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 314635.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['17'], 'line_item_value': [314635.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other non current financial assets , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35), ('plant and equipment', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = exploration and evaluation , res_fuzz_match = [('plant and equipment', 58), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = deferred stripping asset , res_fuzz_match = [('plant property equipment', 38), ('property plant equipment', 38), ('plant and equipment', 31)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other non current assets , res_fuzz_match = [('plant property equipment', 37), ('property plant equipment', 37), ('plant and equipment', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 91, 'value': 343782.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['17'], 'line_item_value': [343782.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 47), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('receivable', 50), ('trade receivables', 45), ('government subsidies receivable', 45), ('trade and other receivables', 45), ('account receivables', 27), ('billed', 25), ('unbilled', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('account receivables', 43), ('government subsidies receivable', 43), ('trade receivables', 42), ('trade and other receivables', 41), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 143963.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [143963.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 47), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = derivative asset , res_fuzz_match = [('receivable', 50), ('trade receivables', 45), ('government subsidies receivable', 45), ('trade and other receivables', 45), ('account receivables', 27), ('billed', 25), ('unbilled', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other current financial assets , res_fuzz_match = [('account receivables', 43), ('government subsidies receivable', 43), ('trade receivables', 42), ('trade and other receivables', 41), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 138862.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [138862.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:14:23+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), (' revenue from continuing activities', 19), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('net sales', 42), ('transmission and distribution business', 41), (' Sale of coal', 40), (' Sales revenue', 37), ('from trading business', 32), ('sale of products', 29), (' revenue from continuing activities', 29), ('revenue from operations', 25), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), (' Revenue', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('sale of products', 35), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Sale of coal', 29), (' revenue from continuing activities', 20), (' Revenue', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), ('transmission and distribution business', 12), (' Sales revenue', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('sale of products', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sale of coal', 30), (' Sales revenue', 27), ('from trading business', 23), (' revenue from continuing activities', 22), ('net sales', 21), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('sale of products', 35), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Sale of coal', 29), (' revenue from continuing activities', 20), (' Revenue', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), ('transmission and distribution business', 12), (' Sales revenue', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), (' revenue from continuing activities', 60), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('transmission and distribution business', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' revenue from continuing activities', 21), (' Sale of coal', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' revenue from continuing activities', 38), ('from trading business', 37), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('transmission and distribution business', 27), ('revenue from operations', 26), ('net sales', 26), (' Sale of coal', 25), ('sale of products', 23), (' Revenue', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' revenue from continuing activities', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('from trading business', 50), (' Sale of coal', 44), ('net sales', 35), (' Sales revenue', 30), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('revenue from operations', 48), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 39), ('sale of products', 37), ('transmission and distribution business', 33), (' revenue from continuing activities', 31), ('net sales', 24), (' Sale of coal', 23), (' Sales revenue', 22), (' Revenue', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), (' revenue from continuing activities', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('transmission and distribution business', 38), ('revenue from operations', 32), (' revenue from continuing activities', 31), ('from trading business', 29), ('sale of products', 27), (' Sales revenue', 27), ('net sales', 25), (' Sale of coal', 20), (' Revenue', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' revenue from continuing activities', 35), ('transmission and distribution business', 33), ('from trading business', 29), (' Sales revenue', 27), (' Revenue', 25), ('net sales', 24), ('sale of products', 21), (' Sale of coal', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('from trading business', 38), (' revenue from continuing activities', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('net sales', 27), ('sale of products', 24), (' Revenue', 23), (' Sale of coal', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('transmission and distribution business', 44), ('revenue from operations', 37), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), (' revenue from continuing activities', 35), ('from trading business', 28), ('sale of products', 26), ('net sales', 25), (' Sale of coal', 21), (' Sales revenue', 20), (' Revenue', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 39), ('revenue from operations', 38), (' revenue from continuing activities', 35), ('transmission and distribution business', 33), ('sale of products', 32), (' Sales revenue', 32), (' Revenue', 25), ('net sales', 24), (' Sale of coal', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('revenue from operations', 37), (' revenue from continuing activities', 35), ('transmission and distribution business', 31), ('sale of products', 29), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('revenue from operations', 38), ('from trading business', 35), (' revenue from continuing activities', 33), ('transmission and distribution business', 31), ('sale of products', 30), (' Sales revenue', 30), ('net sales', 24), (' Sale of coal', 24), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('transmission and distribution business', 42), ('from trading business', 40), (' revenue from continuing activities', 40), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 31), ('revenue from operations', 28), (' Sales revenue', 26), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('net sales', 37), (' revenue from continuing activities', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('sale of products', 32), ('transmission and distribution business', 30), ('from trading business', 29), (' Sales revenue', 27), (' Revenue', 24), ('revenue from operations', 23), (' Sale of coal', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 36), ('from trading business', 34), ('transmission and distribution business', 33), (' Sales revenue', 28), (' revenue from continuing activities', 28), ('net sales', 25), (' Sale of coal', 24), (' Revenue', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('revenue from contracts with customers', 44), ('Revenue from contract with customers', 44), (' revenue from continuing activities', 43), ('transmission and distribution business', 41), ('from trading business', 39), ('revenue from operations', 34), ('sale of products', 33), (' Sales revenue', 33), ('net sales', 26), (' Sale of coal', 25), (' Revenue', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('net sales', 37), (' revenue from continuing activities', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('sale of products', 32), ('transmission and distribution business', 30), ('from trading business', 29), (' Sales revenue', 27), (' Revenue', 24), ('revenue from operations', 23), (' Sale of coal', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('revenue from operations', 38), ('from trading business', 35), (' revenue from continuing activities', 33), ('transmission and distribution business', 31), ('sale of products', 30), (' Sales revenue', 30), ('net sales', 24), (' Sale of coal', 24), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), (' revenue from continuing activities', 19), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('net sales', 42), ('transmission and distribution business', 41), (' Sale of coal', 40), (' Sales revenue', 37), ('from trading business', 32), ('sale of products', 29), (' revenue from continuing activities', 29), ('revenue from operations', 25), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), (' Revenue', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('sale of products', 35), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Sale of coal', 29), (' revenue from continuing activities', 20), (' Revenue', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), ('transmission and distribution business', 12), (' Sales revenue', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('sale of products', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sale of coal', 30), (' Sales revenue', 27), ('from trading business', 23), (' revenue from continuing activities', 22), ('net sales', 21), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('sale of products', 35), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Sale of coal', 29), (' revenue from continuing activities', 20), (' Revenue', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), ('transmission and distribution business', 12), (' Sales revenue', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), (' revenue from continuing activities', 60), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('transmission and distribution business', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' revenue from continuing activities', 21), (' Sale of coal', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' revenue from continuing activities', 38), ('from trading business', 37), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('transmission and distribution business', 27), ('revenue from operations', 26), ('net sales', 26), (' Sale of coal', 25), ('sale of products', 23), (' Revenue', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' revenue from continuing activities', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('from trading business', 50), (' Sale of coal', 44), ('net sales', 35), (' Sales revenue', 30), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('revenue from operations', 48), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 39), ('sale of products', 37), ('transmission and distribution business', 33), (' revenue from continuing activities', 31), ('net sales', 24), (' Sale of coal', 23), (' Sales revenue', 22), (' Revenue', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), (' revenue from continuing activities', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('transmission and distribution business', 38), ('revenue from operations', 32), (' revenue from continuing activities', 31), ('from trading business', 29), ('sale of products', 27), (' Sales revenue', 27), ('net sales', 25), (' Sale of coal', 20), (' Revenue', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' revenue from continuing activities', 35), ('transmission and distribution business', 33), ('from trading business', 29), (' Sales revenue', 27), (' Revenue', 25), ('net sales', 24), ('sale of products', 21), (' Sale of coal', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('from trading business', 38), (' revenue from continuing activities', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('net sales', 27), ('sale of products', 24), (' Revenue', 23), (' Sale of coal', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('transmission and distribution business', 44), ('revenue from operations', 37), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), (' revenue from continuing activities', 35), ('from trading business', 28), ('sale of products', 26), ('net sales', 25), (' Sale of coal', 21), (' Sales revenue', 20), (' Revenue', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 39), ('revenue from operations', 38), (' revenue from continuing activities', 35), ('transmission and distribution business', 33), ('sale of products', 32), (' Sales revenue', 32), (' Revenue', 25), ('net sales', 24), (' Sale of coal', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('revenue from operations', 37), (' revenue from continuing activities', 35), ('transmission and distribution business', 31), ('sale of products', 29), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('revenue from operations', 38), ('from trading business', 35), (' revenue from continuing activities', 33), ('transmission and distribution business', 31), ('sale of products', 30), (' Sales revenue', 30), ('net sales', 24), (' Sale of coal', 24), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('transmission and distribution business', 42), ('from trading business', 40), (' revenue from continuing activities', 40), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 31), ('revenue from operations', 28), (' Sales revenue', 26), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('net sales', 37), (' revenue from continuing activities', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('sale of products', 32), ('transmission and distribution business', 30), ('from trading business', 29), (' Sales revenue', 27), (' Revenue', 24), ('revenue from operations', 23), (' Sale of coal', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 36), ('from trading business', 34), ('transmission and distribution business', 33), (' Sales revenue', 28), (' revenue from continuing activities', 28), ('net sales', 25), (' Sale of coal', 24), (' Revenue', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('revenue from contracts with customers', 44), ('Revenue from contract with customers', 44), (' revenue from continuing activities', 43), ('transmission and distribution business', 41), ('from trading business', 39), ('revenue from operations', 34), ('sale of products', 33), (' Sales revenue', 33), ('net sales', 26), (' Sale of coal', 25), (' Revenue', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('net sales', 37), (' revenue from continuing activities', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('sale of products', 32), ('transmission and distribution business', 30), ('from trading business', 29), (' Sales revenue', 27), (' Revenue', 24), ('revenue from operations', 23), (' Sale of coal', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('revenue from operations', 38), ('from trading business', 35), (' revenue from continuing activities', 33), ('transmission and distribution business', 31), ('sale of products', 30), (' Sales revenue', 30), ('net sales', 24), (' Sale of coal', 24), (' Revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Cost of goods and services sold', 49), ('total expenditure', 44), ('total expenses', 36), (' Cost of inventory sold', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('expenditure', 31), ('purchase of stock-in-trade', 29), (' cost of goods sold', 27), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), ('expense', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('cost of sales', 43), ('Cost of sales', 43), (' Personnel costs', 42), (' Cost of inventory sold', 33), ('expenditure', 27), (' Cost of product sold', 27), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' cost of coal sold', 21), (' cost of goods sold', 21), ('total expenditure', 19), ('expense', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' cost of coal sold', 40), ('total expenditure', 37), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), ('total expenses', 26), ('expense', 24), (' Personnel costs', 24), (' cost of goods sold', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('cost of sales', 43), ('Cost of sales', 43), (' Personnel costs', 42), (' Cost of inventory sold', 33), ('expenditure', 27), (' Cost of product sold', 27), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' cost of coal sold', 21), (' cost of goods sold', 21), ('total expenditure', 19), ('expense', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('total expenses', 51), ('total expenditure', 46), ('expenditure', 42), ('expense', 41), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), (' cost of goods sold', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold', 27), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('cost of sales', 44), ('Cost of sales', 44), ('total expenses', 38), (' cost of coal sold', 35), ('total expenditure', 32), (' Cost of product sold', 31), ('purchase of stock-in-trade', 29), (' Cost of inventory sold', 29), (' Personnel costs', 26), (' cost of goods sold', 26), (' Cost of goods and services sold', 24), ('expenditure', 21), ('expense', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' Cost of product sold', 42), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of inventory sold', 36), (' cost of coal sold', 35), (' cost of goods sold', 35), ('total expenditure', 33), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenses', 26), ('expense', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 32), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), ('total expenditure', 29), ('total expenses', 27), (' Cost of inventory sold', 27), (' cost of coal sold', 26), ('cost of sales', 24), ('Cost of sales', 24), (' cost of goods sold', 22), ('expenditure', 20), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('total expenditure', 43), (' Cost of inventory sold', 40), (' Cost of product sold', 37), (' cost of coal sold', 35), (' Cost of goods and services sold', 35), (' cost of goods sold', 35), ('expenditure', 33), ('total expenses', 32), (' Personnel costs', 30), ('purchase of stock-in-trade', 27), ('cost of sales', 23), ('Cost of sales', 23), ('expense', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('total expenses', 29), (' Cost of inventory sold', 29), (' cost of coal sold', 27), (' cost of goods sold', 27), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Personnel costs', 24), ('expenditure', 21), ('expense', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Cost of goods and services sold', 41), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 29), (' Cost of inventory sold', 29), (' Personnel costs', 29), ('total expenditure', 28), (' cost of goods sold', 25), ('cost of sales', 24), ('Cost of sales', 24), ('total expenses', 23), ('expenditure', 17), ('expense', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenditure', 43), ('total expenses', 42), (' Cost of inventory sold', 40), (' cost of coal sold', 35), (' Cost of goods and services sold', 35), (' Personnel costs', 35), (' cost of goods sold', 35), ('cost of sales', 34), ('Cost of sales', 34), ('expenditure', 33), (' Cost of product sold', 33), ('expense', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Cost of product sold', 43), ('total expenditure', 41), (' Cost of inventory sold', 39), (' Personnel costs', 39), (' Cost of goods and services sold', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of goods sold', 35), (' cost of coal sold', 32), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 23), ('expense', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Cost of goods and services sold', 42), (' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 38), ('total expenses', 37), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('purchase of stock-in-trade', 33), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 19), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of inventory sold', 36), (' cost of coal sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' cost of goods sold', 29), ('total expenditure', 28), ('total expenses', 25), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 20), ('expense', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Personnel costs', 48), (' Cost of inventory sold', 47), ('total expenses', 45), (' Cost of product sold', 44), ('purchase of stock-in-trade', 42), (' cost of goods sold', 42), (' Cost of goods and services sold', 41), ('total expenditure', 40), (' cost of coal sold', 36), ('expenditure', 34), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('total expenditure', 46), (' Cost of product sold', 45), (' Cost of goods and services sold', 42), ('total expenses', 41), (' Cost of inventory sold', 39), (' Personnel costs', 39), (' cost of coal sold', 35), (' cost of goods sold', 35), ('purchase of stock-in-trade', 31), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('expense', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('total expenses', 47), ('total expenditure', 43), (' Cost of inventory sold', 40), (' Cost of goods and services sold', 39), ('purchase of stock-in-trade', 36), (' cost of coal sold', 36), (' cost of goods sold', 36), (' Cost of product sold', 33), (' Personnel costs', 31), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 24), ('expense', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Personnel costs', 48), (' Cost of inventory sold', 47), ('total expenses', 45), (' Cost of product sold', 44), ('purchase of stock-in-trade', 42), (' cost of goods sold', 42), (' Cost of goods and services sold', 41), ('total expenditure', 40), (' cost of coal sold', 36), ('expenditure', 34), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Cost of goods and services sold', 42), (' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 38), ('total expenses', 37), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('purchase of stock-in-trade', 33), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 19), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': -564149.0, 'line_item_label': ['Cost of sales', 'expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-455350.0, -108799.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Cost of goods and services sold', 49), ('total expenditure', 44), ('total expenses', 36), (' Cost of inventory sold', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('expenditure', 31), ('purchase of stock-in-trade', 29), (' cost of goods sold', 27), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), ('expense', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('cost of sales', 43), ('Cost of sales', 43), (' Personnel costs', 42), (' Cost of inventory sold', 33), ('expenditure', 27), (' Cost of product sold', 27), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' cost of coal sold', 21), (' cost of goods sold', 21), ('total expenditure', 19), ('expense', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' cost of coal sold', 40), ('total expenditure', 37), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), ('total expenses', 26), ('expense', 24), (' Personnel costs', 24), (' cost of goods sold', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('cost of sales', 43), ('Cost of sales', 43), (' Personnel costs', 42), (' Cost of inventory sold', 33), ('expenditure', 27), (' Cost of product sold', 27), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' cost of coal sold', 21), (' cost of goods sold', 21), ('total expenditure', 19), ('expense', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('total expenses', 51), ('total expenditure', 46), ('expenditure', 42), ('expense', 41), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), (' cost of goods sold', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold', 27), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('cost of sales', 44), ('Cost of sales', 44), ('total expenses', 38), (' cost of coal sold', 35), ('total expenditure', 32), (' Cost of product sold', 31), ('purchase of stock-in-trade', 29), (' Cost of inventory sold', 29), (' Personnel costs', 26), (' cost of goods sold', 26), (' Cost of goods and services sold', 24), ('expenditure', 21), ('expense', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' Cost of product sold', 42), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of inventory sold', 36), (' cost of coal sold', 35), (' cost of goods sold', 35), ('total expenditure', 33), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenses', 26), ('expense', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 32), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), ('total expenditure', 29), ('total expenses', 27), (' Cost of inventory sold', 27), (' cost of coal sold', 26), ('cost of sales', 24), ('Cost of sales', 24), (' cost of goods sold', 22), ('expenditure', 20), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('total expenditure', 43), (' Cost of inventory sold', 40), (' Cost of product sold', 37), (' cost of coal sold', 35), (' Cost of goods and services sold', 35), (' cost of goods sold', 35), ('expenditure', 33), ('total expenses', 32), (' Personnel costs', 30), ('purchase of stock-in-trade', 27), ('cost of sales', 23), ('Cost of sales', 23), ('expense', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('total expenses', 29), (' Cost of inventory sold', 29), (' cost of coal sold', 27), (' cost of goods sold', 27), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Personnel costs', 24), ('expenditure', 21), ('expense', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Cost of goods and services sold', 41), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 29), (' Cost of inventory sold', 29), (' Personnel costs', 29), ('total expenditure', 28), (' cost of goods sold', 25), ('cost of sales', 24), ('Cost of sales', 24), ('total expenses', 23), ('expenditure', 17), ('expense', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenditure', 43), ('total expenses', 42), (' Cost of inventory sold', 40), (' cost of coal sold', 35), (' Cost of goods and services sold', 35), (' Personnel costs', 35), (' cost of goods sold', 35), ('cost of sales', 34), ('Cost of sales', 34), ('expenditure', 33), (' Cost of product sold', 33), ('expense', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Cost of product sold', 43), ('total expenditure', 41), (' Cost of inventory sold', 39), (' Personnel costs', 39), (' Cost of goods and services sold', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of goods sold', 35), (' cost of coal sold', 32), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 23), ('expense', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Cost of goods and services sold', 42), (' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 38), ('total expenses', 37), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('purchase of stock-in-trade', 33), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 19), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of inventory sold', 36), (' cost of coal sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' cost of goods sold', 29), ('total expenditure', 28), ('total expenses', 25), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 20), ('expense', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Personnel costs', 48), (' Cost of inventory sold', 47), ('total expenses', 45), (' Cost of product sold', 44), ('purchase of stock-in-trade', 42), (' cost of goods sold', 42), (' Cost of goods and services sold', 41), ('total expenditure', 40), (' cost of coal sold', 36), ('expenditure', 34), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('total expenditure', 46), (' Cost of product sold', 45), (' Cost of goods and services sold', 42), ('total expenses', 41), (' Cost of inventory sold', 39), (' Personnel costs', 39), (' cost of coal sold', 35), (' cost of goods sold', 35), ('purchase of stock-in-trade', 31), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('expense', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('total expenses', 47), ('total expenditure', 43), (' Cost of inventory sold', 40), (' Cost of goods and services sold', 39), ('purchase of stock-in-trade', 36), (' cost of coal sold', 36), (' cost of goods sold', 36), (' Cost of product sold', 33), (' Personnel costs', 31), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 24), ('expense', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Personnel costs', 48), (' Cost of inventory sold', 47), ('total expenses', 45), (' Cost of product sold', 44), ('purchase of stock-in-trade', 42), (' cost of goods sold', 42), (' Cost of goods and services sold', 41), ('total expenditure', 40), (' cost of coal sold', 36), ('expenditure', 34), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Cost of goods and services sold', 42), (' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 38), ('total expenses', 37), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('purchase of stock-in-trade', 33), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 19), ('expense', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': -577247.0, 'line_item_label': ['Cost of sales', 'expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-473697.0, -103550.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Sales and marketing', 52), (' Logistics and distribution', 44), (' Advertising expenses', 39), (' Administrative and other expenses', 38), (' Lease expenses', 37), (' depreciation', 35), (' Selling Expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Depreciation expenses', 27), (' Selling & distribution expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 21), (' Management expenses', 21), (' Occupancy ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' depreciation', 33), (' Administrative and other expenses', 32), (' Amortisation expenses', 32), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Advertising expenses', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Logistics and distribution', 16), (' Selling & distribution expenses', 15), (' Occupancy expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Logistics and distribution', 45), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Administration expenses', 37), (' Lease expenses', 36), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Selling & distribution expenses', 31), (' Advertising expenses', 31), ('Distribution expenses', 30), (' Administrative and other expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Occupancy expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' depreciation', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' depreciation', 33), (' Administrative and other expenses', 32), (' Amortisation expenses', 32), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Advertising expenses', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Logistics and distribution', 16), (' Selling & distribution expenses', 15), (' Occupancy expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' Marketing expenses', 56), ('other expenses', 51), (' Occupancy expenses', 51), (' Other expenses', 51), (' Management expenses', 51), (' Other expenses', 51), (' Lease expenses', 47), (' Selling Expenses', 47), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Administrative and other expenses', 37), (' Selling & distribution expenses', 36), (' depreciation', 33), (' Advertising expenses', 32), (' Amortisation expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Logistics and distribution', 28), (' Occupancy ', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Amortisation expenses', 26), (' Advertising expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 21), (' Selling & distribution expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 38), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Depreciation expenses', 30), (' Selling & distribution expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Marketing expenses', 26), (' depreciation', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Lease expenses', 22), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Management expenses', 16), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Logistics and distribution', 37), (' Administrative and other expenses', 36), (' Marketing expenses', 34), (' Sales and marketing', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Lease expenses', 27), (' Management expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Occupancy ', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('other expenses', 47), (' Other expenses', 47), (' Other expenses', 47), (' Administrative and other expenses', 38), (' Occupancy expenses', 37), (' Logistics and distribution', 35), (' Marketing expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 24), (' Sales and marketing', 24), (' Selling & distribution expenses', 21), ('Distribution expenses', 19), (' Occupancy ', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' Administrative and other expenses', 38), (' Sales and marketing', 38), (' Selling & distribution expenses', 34), (' Logistics and distribution', 32), ('Distribution expenses', 30), (' Management expenses', 29), (' Marketing expenses', 28), (' Depreciation expenses', 27), (' Advertising expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 25), (' Selling Expenses', 25), ('other expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' Occupancy expenses', 20), (' depreciation', 14), (' Occupancy ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Administrative and other expenses', 40), (' Sales and marketing', 38), (' Logistics and distribution', 35), (' Selling & distribution expenses', 31), ('Distribution expenses', 28), (' Administrative expenses', 28), (' Administration expenses', 28), (' Advertising expenses', 28), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), ('other expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Occupancy expenses', 20), (' Lease expenses', 20), (' Selling Expenses', 20), (' Management expenses', 20), (' Marketing expenses', 19), (' depreciation', 18), (' Occupancy ', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Administrative and other expenses', 46), (' Marketing expenses', 41), (' Lease expenses', 38), (' Management expenses', 37), (' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Occupancy expenses', 32), (' Selling Expenses', 32), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' depreciation', 24), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Administrative and other expenses', 41), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Marketing expenses', 32), (' Logistics and distribution', 32), (' Selling & distribution expenses', 31), (' Sales and marketing', 31), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 20), (' Occupancy ', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 38), ('other expenses', 33), (' Marketing expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Logistics and distribution', 32), (' Occupancy expenses', 30), (' Lease expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 28), (' Management expenses', 26), (' Depreciation expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), ('Distribution expenses', 21), (' depreciation', 20), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Logistics and distribution', 60), ('Distribution expenses', 44), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 35), (' Amortisation expenses', 35), (' Advertising expenses', 34), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Occupancy expenses', 19), (' Lease expenses', 19), (' Occupancy ', 16), (' Selling Expenses', 13), (' Management expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other expenses', 45), (' Other expenses', 45), (' Other expenses', 45), (' Administrative and other expenses', 44), (' Occupancy expenses', 39), (' Logistics and distribution', 36), (' Selling & distribution expenses', 35), (' Sales and marketing', 35), ('Distribution expenses', 34), (' Administrative expenses', 34), (' Administration expenses', 34), (' Lease expenses', 33), (' Selling Expenses', 33), (' Management expenses', 32), (' depreciation', 31), (' Marketing expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Advertising expenses', 29), (' Amortisation expenses', 24), (' Occupancy ', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 34), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Logistics and distribution', 31), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Sales and marketing', 30), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Advertising expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 25), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Administrative expenses', 21), (' Administration expenses', 21), (' Occupancy ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 50), ('Distribution expenses', 47), (' Logistics and distribution', 43), (' Administrative and other expenses', 39), (' Amortisation expenses', 36), (' Advertising expenses', 35), (' Sales and marketing', 35), (' Administrative expenses', 34), (' Administration expenses', 34), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' depreciation', 21), (' Occupancy ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other expenses', 45), (' Other expenses', 45), (' Other expenses', 45), (' Administrative and other expenses', 44), (' Occupancy expenses', 39), (' Logistics and distribution', 36), (' Selling & distribution expenses', 35), (' Sales and marketing', 35), ('Distribution expenses', 34), (' Administrative expenses', 34), (' Administration expenses', 34), (' Lease expenses', 33), (' Selling Expenses', 33), (' Management expenses', 32), (' depreciation', 31), (' Marketing expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Advertising expenses', 29), (' Amortisation expenses', 24), (' Occupancy ', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 38), ('other expenses', 33), (' Marketing expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Logistics and distribution', 32), (' Occupancy expenses', 30), (' Lease expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 28), (' Management expenses', 26), (' Depreciation expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), ('Distribution expenses', 21), (' depreciation', 20), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Sales and marketing', 52), (' Logistics and distribution', 44), (' Advertising expenses', 39), (' Administrative and other expenses', 38), (' Lease expenses', 37), (' depreciation', 35), (' Selling Expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Depreciation expenses', 27), (' Selling & distribution expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 21), (' Management expenses', 21), (' Occupancy ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' depreciation', 33), (' Administrative and other expenses', 32), (' Amortisation expenses', 32), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Advertising expenses', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Logistics and distribution', 16), (' Selling & distribution expenses', 15), (' Occupancy expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Logistics and distribution', 45), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Administration expenses', 37), (' Lease expenses', 36), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Selling & distribution expenses', 31), (' Advertising expenses', 31), ('Distribution expenses', 30), (' Administrative and other expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Occupancy expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' depreciation', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' depreciation', 33), (' Administrative and other expenses', 32), (' Amortisation expenses', 32), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Advertising expenses', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Logistics and distribution', 16), (' Selling & distribution expenses', 15), (' Occupancy expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' Marketing expenses', 56), ('other expenses', 51), (' Occupancy expenses', 51), (' Other expenses', 51), (' Management expenses', 51), (' Other expenses', 51), (' Lease expenses', 47), (' Selling Expenses', 47), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Administrative and other expenses', 37), (' Selling & distribution expenses', 36), (' depreciation', 33), (' Advertising expenses', 32), (' Amortisation expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Logistics and distribution', 28), (' Occupancy ', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Amortisation expenses', 26), (' Advertising expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 21), (' Selling & distribution expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 38), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Depreciation expenses', 30), (' Selling & distribution expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Marketing expenses', 26), (' depreciation', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Lease expenses', 22), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Management expenses', 16), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Logistics and distribution', 37), (' Administrative and other expenses', 36), (' Marketing expenses', 34), (' Sales and marketing', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Lease expenses', 27), (' Management expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Occupancy ', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('other expenses', 47), (' Other expenses', 47), (' Other expenses', 47), (' Administrative and other expenses', 38), (' Occupancy expenses', 37), (' Logistics and distribution', 35), (' Marketing expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 24), (' Sales and marketing', 24), (' Selling & distribution expenses', 21), ('Distribution expenses', 19), (' Occupancy ', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' Administrative and other expenses', 38), (' Sales and marketing', 38), (' Selling & distribution expenses', 34), (' Logistics and distribution', 32), ('Distribution expenses', 30), (' Management expenses', 29), (' Marketing expenses', 28), (' Depreciation expenses', 27), (' Advertising expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 25), (' Selling Expenses', 25), ('other expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' Occupancy expenses', 20), (' depreciation', 14), (' Occupancy ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Administrative and other expenses', 40), (' Sales and marketing', 38), (' Logistics and distribution', 35), (' Selling & distribution expenses', 31), ('Distribution expenses', 28), (' Administrative expenses', 28), (' Administration expenses', 28), (' Advertising expenses', 28), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), ('other expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Occupancy expenses', 20), (' Lease expenses', 20), (' Selling Expenses', 20), (' Management expenses', 20), (' Marketing expenses', 19), (' depreciation', 18), (' Occupancy ', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Administrative and other expenses', 46), (' Marketing expenses', 41), (' Lease expenses', 38), (' Management expenses', 37), (' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Occupancy expenses', 32), (' Selling Expenses', 32), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' depreciation', 24), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Administrative and other expenses', 41), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Marketing expenses', 32), (' Logistics and distribution', 32), (' Selling & distribution expenses', 31), (' Sales and marketing', 31), (' Occupancy expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 20), (' Occupancy ', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 38), ('other expenses', 33), (' Marketing expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Logistics and distribution', 32), (' Occupancy expenses', 30), (' Lease expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 28), (' Management expenses', 26), (' Depreciation expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), ('Distribution expenses', 21), (' depreciation', 20), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Logistics and distribution', 60), ('Distribution expenses', 44), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 35), (' Amortisation expenses', 35), (' Advertising expenses', 34), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Occupancy expenses', 19), (' Lease expenses', 19), (' Occupancy ', 16), (' Selling Expenses', 13), (' Management expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other expenses', 45), (' Other expenses', 45), (' Other expenses', 45), (' Administrative and other expenses', 44), (' Occupancy expenses', 39), (' Logistics and distribution', 36), (' Selling & distribution expenses', 35), (' Sales and marketing', 35), ('Distribution expenses', 34), (' Administrative expenses', 34), (' Administration expenses', 34), (' Lease expenses', 33), (' Selling Expenses', 33), (' Management expenses', 32), (' depreciation', 31), (' Marketing expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Advertising expenses', 29), (' Amortisation expenses', 24), (' Occupancy ', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 34), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Logistics and distribution', 31), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Sales and marketing', 30), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Advertising expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 25), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Administrative expenses', 21), (' Administration expenses', 21), (' Occupancy ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 50), ('Distribution expenses', 47), (' Logistics and distribution', 43), (' Administrative and other expenses', 39), (' Amortisation expenses', 36), (' Advertising expenses', 35), (' Sales and marketing', 35), (' Administrative expenses', 34), (' Administration expenses', 34), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' depreciation', 21), (' Occupancy ', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other expenses', 45), (' Other expenses', 45), (' Other expenses', 45), (' Administrative and other expenses', 44), (' Occupancy expenses', 39), (' Logistics and distribution', 36), (' Selling & distribution expenses', 35), (' Sales and marketing', 35), ('Distribution expenses', 34), (' Administrative expenses', 34), (' Administration expenses', 34), (' Lease expenses', 33), (' Selling Expenses', 33), (' Management expenses', 32), (' depreciation', 31), (' Marketing expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Advertising expenses', 29), (' Amortisation expenses', 24), (' Occupancy ', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Administrative and other expenses', 38), ('other expenses', 33), (' Marketing expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Logistics and distribution', 32), (' Occupancy expenses', 30), (' Lease expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 28), (' Management expenses', 26), (' Depreciation expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), ('Distribution expenses', 21), (' depreciation', 20), (' Occupancy ', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('Rent', 22), (' Rental expenses', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Administration expenses', 37), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 13), (' Occupancy', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('Rent', 22), (' Rental expenses', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' Occupancy expenses', 51), (' Rental expenses', 50), (' Administration expenses', 31), ('Rent', 22), (' Occupancy', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 31), (' Occupancy expenses', 19), (' Occupancy', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' Rental expenses', 26), (' Administration expenses', 24), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Administration expenses', 25), (' Occupancy expenses', 23), ('Rent', 14), (' Occupancy', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [(' Occupancy expenses', 37), (' Rental expenses', 31), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 26), (' Occupancy expenses', 20), ('Rent', 15), (' Occupancy', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 23), (' Occupancy expenses', 20), ('Rent', 11), (' Occupancy', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' Rental expenses', 41), (' Administration expenses', 33), (' Occupancy expenses', 32), ('Rent', 27), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 29), (' Administration expenses', 27), ('Rent', 17), (' Occupancy', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 17), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 24), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 39), ('Rent', 35), (' Administration expenses', 34), (' Occupancy', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 23), (' Administration expenses', 21), ('Rent', 17), (' Occupancy', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Rental expenses', 41), (' Administration expenses', 34), (' Occupancy expenses', 28), ('Rent', 23), (' Occupancy', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 39), ('Rent', 35), (' Administration expenses', 34), (' Occupancy', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 17), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('Rent', 22), (' Rental expenses', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Administration expenses', 37), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 13), (' Occupancy', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('Rent', 22), (' Rental expenses', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' Occupancy expenses', 51), (' Rental expenses', 50), (' Administration expenses', 31), ('Rent', 22), (' Occupancy', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 31), (' Occupancy expenses', 19), (' Occupancy', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' Rental expenses', 26), (' Administration expenses', 24), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Administration expenses', 25), (' Occupancy expenses', 23), ('Rent', 14), (' Occupancy', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [(' Occupancy expenses', 37), (' Rental expenses', 31), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 26), (' Occupancy expenses', 20), ('Rent', 15), (' Occupancy', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 23), (' Occupancy expenses', 20), ('Rent', 11), (' Occupancy', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' Rental expenses', 41), (' Administration expenses', 33), (' Occupancy expenses', 32), ('Rent', 27), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 29), (' Administration expenses', 27), ('Rent', 17), (' Occupancy', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 17), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 24), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 39), ('Rent', 35), (' Administration expenses', 34), (' Occupancy', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 23), (' Administration expenses', 21), ('Rent', 17), (' Occupancy', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Rental expenses', 41), (' Administration expenses', 34), (' Occupancy expenses', 28), ('Rent', 23), (' Occupancy', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 39), ('Rent', 35), (' Administration expenses', 34), (' Occupancy', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 17), (' Occupancy', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('other operating', 31), (' Other income', 30), ('Other revenue', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other operating', 67), (' Other income', 62), ('Other revenue', 59)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other operating', 38), (' Other income', 36), ('Other revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other operating', 67), (' Other income', 62), ('Other revenue', 59)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' Other income', 41), ('other operating', 30), ('Other revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Other income', 70), ('other operating', 32), ('Other revenue', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('other operating', 50), (' Other income', 38), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 42)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('Other revenue', 29), ('other operating', 26), (' Other income', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Other income', 27), ('Other revenue', 26), ('other operating', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' Other income', 59), ('other operating', 50), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('other operating', 33), (' Other income', 32), ('Other revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other operating', 41), (' Other income', 40), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('other operating', 43), (' Other income', 33), ('Other revenue', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Other income', 38), ('Other revenue', 33), ('other operating', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other operating', 41), (' Other income', 40), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('other operating', 31), (' Other income', 30), ('Other revenue', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other operating', 67), (' Other income', 62), ('Other revenue', 59)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other operating', 38), (' Other income', 36), ('Other revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other operating', 67), (' Other income', 62), ('Other revenue', 59)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' Other income', 41), ('other operating', 30), ('Other revenue', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Other income', 70), ('other operating', 32), ('Other revenue', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('other operating', 50), (' Other income', 38), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 42)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('Other revenue', 29), ('other operating', 26), (' Other income', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Other income', 27), ('Other revenue', 26), ('other operating', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' Other income', 59), ('other operating', 50), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('other operating', 33), (' Other income', 32), ('Other revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other operating', 41), (' Other income', 40), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('other operating', 43), (' Other income', 33), ('Other revenue', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Other income', 38), ('Other revenue', 33), ('other operating', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('other operating', 41), (' Other income', 40), ('Other revenue', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Finance income and costs', 38), ('finance income', 36), ('Finance income', 36), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('other income', 30), (' Interest revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other income', 62), (' Interest revenue', 30), (' Net finance costs', 30), (' Finance income and costs', 15), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other income', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 23), (' Net finance costs', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other income', 62), (' Interest revenue', 30), (' Net finance costs', 30), (' Finance income and costs', 15), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('finance income', 69), ('Finance income', 69), (' Finance income and costs', 68), (' Net finance costs', 63), (' Finance income and finance costs', 59), ('other income', 41), (' Interest revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other income', 70), ('finance income', 48), ('Finance income', 48), (' Net finance costs', 42), (' Finance income and costs', 33), (' Finance income and finance costs', 27), (' Interest revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('other income', 38), (' Net finance costs', 34), (' Finance income and finance costs', 33), (' Finance income and costs', 30), (' Interest revenue', 24), ('finance income', 21), ('Finance income', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 32), (' Finance income and costs', 30), (' Interest revenue', 29), (' Net finance costs', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('other income', 43), (' Interest revenue', 34), (' Net finance costs', 34), (' Finance income and costs', 30), (' Finance income and finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' Interest revenue', 35), (' Net finance costs', 35), (' Finance income and costs', 34), (' Finance income and finance costs', 34), ('other income', 25), ('finance income', 24), ('Finance income', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Finance income and finance costs', 36), (' Finance income and costs', 34), (' Interest revenue', 31), ('other income', 27), (' Net finance costs', 25), ('finance income', 23), ('Finance income', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('other income', 59), (' Net finance costs', 49), (' Finance income and costs', 38), ('finance income', 37), ('Finance income', 37), (' Finance income and finance costs', 33), (' Interest revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('other income', 41), (' Net finance costs', 38), (' Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 28), ('finance income', 25), ('Finance income', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 35), (' Finance income and finance costs', 34), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Finance income and costs', 34), (' Net finance costs', 34), ('other income', 32), (' Interest revenue', 29), (' Finance income and finance costs', 29), ('finance income', 19), ('Finance income', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Interest revenue', 59), (' Net finance costs', 47), (' Finance income and costs', 45), ('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' Net finance costs', 34), ('other income', 33), (' Finance income and finance costs', 33), (' Finance income and costs', 30), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Finance income and costs', 42), (' Net finance costs', 39), ('other income', 38), ('finance income', 37), ('Finance income', 37), (' Finance income and finance costs', 37), (' Interest revenue', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Interest revenue', 59), (' Net finance costs', 47), (' Finance income and costs', 45), ('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 35), (' Finance income and finance costs', 34), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 2848.0, 'line_item_label': ['Finance income'], 'note_numbers': ['8'], 'line_item_value': [2848.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' Finance income and costs', 38), ('finance income', 36), ('Finance income', 36), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('other income', 30), (' Interest revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other income', 62), (' Interest revenue', 30), (' Net finance costs', 30), (' Finance income and costs', 15), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other income', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 23), (' Net finance costs', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other income', 62), (' Interest revenue', 30), (' Net finance costs', 30), (' Finance income and costs', 15), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('finance income', 69), ('Finance income', 69), (' Finance income and costs', 68), (' Net finance costs', 63), (' Finance income and finance costs', 59), ('other income', 41), (' Interest revenue', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other income', 70), ('finance income', 48), ('Finance income', 48), (' Net finance costs', 42), (' Finance income and costs', 33), (' Finance income and finance costs', 27), (' Interest revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('other income', 38), (' Net finance costs', 34), (' Finance income and finance costs', 33), (' Finance income and costs', 30), (' Interest revenue', 24), ('finance income', 21), ('Finance income', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 32), (' Finance income and costs', 30), (' Interest revenue', 29), (' Net finance costs', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('other income', 43), (' Interest revenue', 34), (' Net finance costs', 34), (' Finance income and costs', 30), (' Finance income and finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' Interest revenue', 35), (' Net finance costs', 35), (' Finance income and costs', 34), (' Finance income and finance costs', 34), ('other income', 25), ('finance income', 24), ('Finance income', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' Finance income and finance costs', 36), (' Finance income and costs', 34), (' Interest revenue', 31), ('other income', 27), (' Net finance costs', 25), ('finance income', 23), ('Finance income', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('other income', 59), (' Net finance costs', 49), (' Finance income and costs', 38), ('finance income', 37), ('Finance income', 37), (' Finance income and finance costs', 33), (' Interest revenue', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('other income', 41), (' Net finance costs', 38), (' Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 28), ('finance income', 25), ('Finance income', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 35), (' Finance income and finance costs', 34), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' Finance income and costs', 34), (' Net finance costs', 34), ('other income', 32), (' Interest revenue', 29), (' Finance income and finance costs', 29), ('finance income', 19), ('Finance income', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Interest revenue', 59), (' Net finance costs', 47), (' Finance income and costs', 45), ('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' Net finance costs', 34), ('other income', 33), (' Finance income and finance costs', 33), (' Finance income and costs', 30), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' Finance income and costs', 42), (' Net finance costs', 39), ('other income', 38), ('finance income', 37), ('Finance income', 37), (' Finance income and finance costs', 37), (' Interest revenue', 35)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' Interest revenue', 59), (' Net finance costs', 47), (' Finance income and costs', 45), ('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 35), (' Finance income and finance costs', 34), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 15933.0, 'line_item_label': ['Finance income'], 'note_numbers': ['8'], 'line_item_value': [15933.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 28), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' finance expenses', 72), (' net finance costs ', 63), ('finance cost', 47), ('finance costs', 47)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 26), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 41), ('finance cost', 38), ('finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' net finance costs ', 38), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 36), ('finance cost', 33), ('finance costs', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -5841.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['8'], 'line_item_value': [-5841.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 28), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' finance expenses', 72), (' net finance costs ', 63), ('finance cost', 47), ('finance costs', 47)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 26), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 41), ('finance cost', 38), ('finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' net finance costs ', 38), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 36), ('finance cost', 33), ('finance costs', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -18436.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['8'], 'line_item_value': [-18436.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 28), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' finance expenses', 72), (' net finance costs ', 63), ('finance cost', 47), ('finance costs', 47)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 26), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 41), ('finance cost', 38), ('finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' net finance costs ', 38), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 36), ('finance cost', 33), ('finance costs', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -5841.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['8'], 'line_item_value': [-5841.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 28), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' net finance costs ', 30), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' finance expenses', 72), (' net finance costs ', 63), ('finance cost', 47), ('finance costs', 47)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 26), ('finance cost', 22), ('finance costs', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 41), ('finance cost', 38), ('finance costs', 38)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' net finance costs ', 38), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 36), ('finance cost', 33), ('finance costs', 33)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 44), ('finance cost', 40), ('finance costs', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -18436.0, 'line_item_label': ['Finance expenses'], 'note_numbers': ['8'], 'line_item_value': [-18436.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('NULL', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('NULL', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('earlier year', 43), ('provision for taxation previous year', 40), ('amount transferred to retained earnings', 37), (' income tax benefit', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), ('prior year ', 31), (' income tax expense', 31), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 29), (' income tax', 24), ('current tax', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior year ', 40), ('deferred tax', 29), (' income tax', 29), ('amount transferred to retained earnings', 25), ('provision for taxation previous year', 24), ('earlier year', 24), (' income tax expense', 19), (' income tax benefit', 18), (' tax (expense)/benefit', 17), ('minimum alternate tax credit entitlement', 16), (' income tax benefit/(expense)', 14), ('current tax', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior year ', 38), ('earlier year', 35), (' income tax', 30), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit/(expense)', 23), (' income tax expense', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 21), ('deferred tax', 20), ('minimum alternate tax credit entitlement', 19), ('current tax', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior year ', 40), ('deferred tax', 29), (' income tax', 29), ('amount transferred to retained earnings', 25), ('provision for taxation previous year', 24), ('earlier year', 24), (' income tax expense', 19), (' income tax benefit', 18), (' tax (expense)/benefit', 17), ('minimum alternate tax credit entitlement', 16), (' income tax benefit/(expense)', 14), ('current tax', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' income tax expense', 72), (' income tax benefit', 60), (' income tax benefit/(expense)', 60), (' income tax', 44), ('minimum alternate tax credit entitlement', 40), ('amount transferred to retained earnings', 40), (' tax (expense)/benefit', 39), ('prior year ', 30), ('earlier year', 29), ('provision for taxation previous year', 27), ('deferred tax', 25), ('current tax', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' income tax', 100), (' income tax expense', 72), (' income tax benefit', 69), (' income tax benefit/(expense)', 55), ('current tax', 50), ('deferred tax', 44), (' tax (expense)/benefit', 44), ('prior year ', 42), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('earlier year', 29), ('amount transferred to retained earnings', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 39), ('amount transferred to retained earnings', 38), ('earlier year', 32), (' income tax benefit/(expense)', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax benefit', 28), ('current tax', 27), (' tax (expense)/benefit', 27), (' income tax', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 41), (' income tax benefit/(expense)', 38), (' tax (expense)/benefit', 38), (' income tax benefit', 35), (' income tax expense', 32), ('earlier year', 31), ('prior year ', 28), ('current tax', 24), ('deferred tax', 24), (' income tax', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('amount transferred to retained earnings', 38), (' income tax expense', 38), (' income tax benefit', 37), ('provision for taxation previous year', 33), ('earlier year', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax', 29), ('prior year ', 28), ('current tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('amount transferred to retained earnings', 41), (' income tax benefit', 37), ('provision for taxation previous year', 36), (' income tax benefit/(expense)', 36), ('minimum alternate tax credit entitlement', 35), ('earlier year', 33), (' tax (expense)/benefit', 33), (' income tax expense', 30), ('deferred tax', 26), ('prior year ', 26), (' income tax', 26), ('current tax', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 32), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 30), ('earlier year', 26), (' income tax expense', 25), ('deferred tax', 24), ('prior year ', 24), (' income tax', 21), ('current tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit', 56), (' income tax benefit/(expense)', 56), (' income tax', 51), ('current tax', 49), ('minimum alternate tax credit entitlement', 45), ('provision for taxation previous year', 44), (' tax (expense)/benefit', 41), ('deferred tax', 40), ('prior year ', 39), ('amount transferred to retained earnings', 38), ('earlier year', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' income tax expense', 44), (' income tax benefit', 40), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), ('amount transferred to retained earnings', 34), (' income tax', 31), ('current tax', 30), ('prior year ', 30), ('earlier year', 29), ('deferred tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax', 31), ('current tax', 30), ('earlier year', 30), ('deferred tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 37), ('amount transferred to retained earnings', 34), ('prior year ', 33), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('earlier year', 31), (' income tax', 28), ('current tax', 26), (' income tax expense', 22), ('deferred tax', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 46), (' income tax benefit', 44), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), (' income tax', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 33), ('earlier year', 32), ('deferred tax', 29), ('prior year ', 28), ('provision for taxation previous year', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('provision for taxation previous year', 56), ('minimum alternate tax credit entitlement', 38), ('prior year ', 38), (' income tax benefit/(expense)', 36), (' tax (expense)/benefit', 36), ('amount transferred to retained earnings', 34), (' income tax benefit', 33), ('earlier year', 32), ('deferred tax', 29), (' income tax expense', 29), ('current tax', 28), (' income tax', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 58), (' income tax expense', 55), ('minimum alternate tax credit entitlement', 51), (' income tax benefit', 50), ('amount transferred to retained earnings', 41), (' tax (expense)/benefit', 41), (' income tax', 40), ('provision for taxation previous year', 37), ('current tax', 33), ('prior year ', 29), ('earlier year', 28), ('deferred tax', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 46), (' income tax benefit', 44), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), (' income tax', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 33), ('earlier year', 32), ('deferred tax', 29), ('prior year ', 28), ('provision for taxation previous year', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax', 31), ('current tax', 30), ('earlier year', 30), ('deferred tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': -134414.0, 'line_item_label': ['Income tax'], 'note_numbers': ['9'], 'line_item_value': [-134414.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('earlier year', 43), ('provision for taxation previous year', 40), ('amount transferred to retained earnings', 37), (' income tax benefit', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), ('prior year ', 31), (' income tax expense', 31), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 29), (' income tax', 24), ('current tax', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior year ', 40), ('deferred tax', 29), (' income tax', 29), ('amount transferred to retained earnings', 25), ('provision for taxation previous year', 24), ('earlier year', 24), (' income tax expense', 19), (' income tax benefit', 18), (' tax (expense)/benefit', 17), ('minimum alternate tax credit entitlement', 16), (' income tax benefit/(expense)', 14), ('current tax', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior year ', 38), ('earlier year', 35), (' income tax', 30), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit/(expense)', 23), (' income tax expense', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 21), ('deferred tax', 20), ('minimum alternate tax credit entitlement', 19), ('current tax', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior year ', 40), ('deferred tax', 29), (' income tax', 29), ('amount transferred to retained earnings', 25), ('provision for taxation previous year', 24), ('earlier year', 24), (' income tax expense', 19), (' income tax benefit', 18), (' tax (expense)/benefit', 17), ('minimum alternate tax credit entitlement', 16), (' income tax benefit/(expense)', 14), ('current tax', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [(' income tax expense', 72), (' income tax benefit', 60), (' income tax benefit/(expense)', 60), (' income tax', 44), ('minimum alternate tax credit entitlement', 40), ('amount transferred to retained earnings', 40), (' tax (expense)/benefit', 39), ('prior year ', 30), ('earlier year', 29), ('provision for taxation previous year', 27), ('deferred tax', 25), ('current tax', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' income tax', 100), (' income tax expense', 72), (' income tax benefit', 69), (' income tax benefit/(expense)', 55), ('current tax', 50), ('deferred tax', 44), (' tax (expense)/benefit', 44), ('prior year ', 42), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('earlier year', 29), ('amount transferred to retained earnings', 28)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 39), ('amount transferred to retained earnings', 38), ('earlier year', 32), (' income tax benefit/(expense)', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax benefit', 28), ('current tax', 27), (' tax (expense)/benefit', 27), (' income tax', 23)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 41), (' income tax benefit/(expense)', 38), (' tax (expense)/benefit', 38), (' income tax benefit', 35), (' income tax expense', 32), ('earlier year', 31), ('prior year ', 28), ('current tax', 24), ('deferred tax', 24), (' income tax', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('amount transferred to retained earnings', 38), (' income tax expense', 38), (' income tax benefit', 37), ('provision for taxation previous year', 33), ('earlier year', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax', 29), ('prior year ', 28), ('current tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('amount transferred to retained earnings', 41), (' income tax benefit', 37), ('provision for taxation previous year', 36), (' income tax benefit/(expense)', 36), ('minimum alternate tax credit entitlement', 35), ('earlier year', 33), (' tax (expense)/benefit', 33), (' income tax expense', 30), ('deferred tax', 26), ('prior year ', 26), (' income tax', 26), ('current tax', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 32), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 30), ('earlier year', 26), (' income tax expense', 25), ('deferred tax', 24), ('prior year ', 24), (' income tax', 21), ('current tax', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit', 56), (' income tax benefit/(expense)', 56), (' income tax', 51), ('current tax', 49), ('minimum alternate tax credit entitlement', 45), ('provision for taxation previous year', 44), (' tax (expense)/benefit', 41), ('deferred tax', 40), ('prior year ', 39), ('amount transferred to retained earnings', 38), ('earlier year', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [(' income tax expense', 44), (' income tax benefit', 40), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), ('amount transferred to retained earnings', 34), (' income tax', 31), ('current tax', 30), ('prior year ', 30), ('earlier year', 29), ('deferred tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax', 31), ('current tax', 30), ('earlier year', 30), ('deferred tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 37), ('amount transferred to retained earnings', 34), ('prior year ', 33), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('earlier year', 31), (' income tax', 28), ('current tax', 26), (' income tax expense', 22), ('deferred tax', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 46), (' income tax benefit', 44), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), (' income tax', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 33), ('earlier year', 32), ('deferred tax', 29), ('prior year ', 28), ('provision for taxation previous year', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('provision for taxation previous year', 56), ('minimum alternate tax credit entitlement', 38), ('prior year ', 38), (' income tax benefit/(expense)', 36), (' tax (expense)/benefit', 36), ('amount transferred to retained earnings', 34), (' income tax benefit', 33), ('earlier year', 32), ('deferred tax', 29), (' income tax expense', 29), ('current tax', 28), (' income tax', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 58), (' income tax expense', 55), ('minimum alternate tax credit entitlement', 51), (' income tax benefit', 50), ('amount transferred to retained earnings', 41), (' tax (expense)/benefit', 41), (' income tax', 40), ('provision for taxation previous year', 37), ('current tax', 33), ('prior year ', 29), ('earlier year', 28), ('deferred tax', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 46), (' income tax benefit', 44), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), (' income tax', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 33), ('earlier year', 32), ('deferred tax', 29), ('prior year ', 28), ('provision for taxation previous year', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('prior year ', 31), (' income tax', 31), ('current tax', 30), ('earlier year', 30), ('deferred tax', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': -203941.0, 'line_item_label': ['Income tax'], 'note_numbers': ['9'], 'line_item_value': [-203941.0]}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-07-31 12:14:23+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('prior period', 36), ('exceptional', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior period', 35), ('exceptional', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('exceptional', 34), ('prior period', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('prior period', 53), ('exceptional', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('prior period', 31), ('exceptional', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('prior period', 32), ('exceptional', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('prior period', 24), ('exceptional', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('prior period', 26), ('exceptional', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('prior period', 37), ('exceptional', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('prior period', 36), ('exceptional', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('prior period', 37), ('exceptional', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('prior period', 44), ('exceptional', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('prior period', 32), ('exceptional', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('prior period', 50), ('exceptional', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('prior period', 33), ('exceptional', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('prior period', 32), ('exceptional', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('prior period', 37), ('exceptional', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('prior period', 36), ('exceptional', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior period', 35), ('exceptional', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 32)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('exceptional', 34), ('prior period', 34)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('prior period', 53), ('exceptional', 19)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('prior period', 31), ('exceptional', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('prior period', 32), ('exceptional', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('prior period', 24), ('exceptional', 14)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('prior period', 26), ('exceptional', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('prior period', 37), ('exceptional', 25)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('prior period', 36), ('exceptional', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('prior period', 37), ('exceptional', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('prior period', 44), ('exceptional', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('prior period', 32), ('exceptional', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('prior period', 50), ('exceptional', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('prior period', 33), ('exceptional', 16)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('prior period', 32), ('exceptional', 24)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('prior period', 37), ('exceptional', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:14:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 12:14:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('NULL', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:14:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:14:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = royalties and levies , res_fuzz_match = [('NULL', 30)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = net financing (expense) i income , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit / (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = other movements through oci , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of (losses). gains on hedges taken to equity , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = fair value of gains / (losses) on hedges transferred to profit and loss , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive , res_fuzz_match = [('NULL', 7)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income for the period , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = profit/(loss) attributable to : , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total profit i (loss) for the period , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income attributable to: , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = non-controlling interest , res_fuzz_match = [('NULL', 17)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income i (loss) for the period , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:14:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-31 12:17:19+0530 - sLogger - DEBUG - process_main_pages started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-31 12:17:19+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Contract assets | [('current assets', 67), ('noncurrent assets', 67), ('assets', 53), ('currentassets', 38), ('noncurrent liabilities', 36), ('noncurrentassets', 34), ('equity and liabilities', 32), ('noncurrentliabilities', 31), ('equity liabilities', 30), ('current liabilities', 29), ('currentliabilities', 26), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('liabilities', 10)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Income taxes receivable | [('noncurrentassets', 39), ('currentassets', 36), ('equity and liabilities', 36), ('noncurrentliabilities', 36), ('current liabilities', 33), ('currentliabilities', 32), ('equityandliabilities', 30), ('current assets', 28), ('equity liabilities', 28), ('equity', 27), ('noncurrent liabilities', 27), ('equityliabilities', 25), ('noncurrent assets', 21), ('assets', 19), ('liabilities', 18)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Assets under construction | [('noncurrent assets', 65), ('current assets', 53), ('noncurrent liabilities', 40), ('assets', 38), ('noncurrentassets', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('equity and liabilities', 26), ('equity liabilities', 24), ('current liabilities', 23), ('equity', 22), ('equityliabilities', 21), ('currentliabilities', 20), ('liabilities', 7)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD current assets | score 24
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD currentassets | score 25
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD current liabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD currentliabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD noncurrent assets | score 24
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD noncurrentassets | score 22
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD noncurrent liabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD non current assets | score 24
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD non current liabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD noncurrentliabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD noncurrentassets | score 22
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD noncurrentliabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD equity and liabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text liabilities | MATCH WORD equityandliabilities | score 90
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentassets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentliabilities | score 55
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equityandliabilities | score 57
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Interest bearing loans and borrowings | [('equity and liabilities', 43), ('noncurrentassets', 36), ('noncurrentliabilities', 34), ('current assets', 33), ('current liabilities', 33), ('noncurrent assets', 29), ('currentassets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equityandliabilities', 25), ('liabilities', 23), ('equityliabilities', 22), ('assets', 18), ('equity', 17)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD current assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD currentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD current liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD currentliabilities | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD noncurrent assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD noncurrentassets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD noncurrent liabilities | score 37
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD non current assets | score 38
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD non current liabilities | score 41
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD noncurrentassets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD equity and liabilities | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Interest bearing loans and borrowings | MATCH WORD equityandliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Current tax payable | [('current liabilities', 69), ('currentassets', 60), ('currentliabilities', 59), ('noncurrentassets', 55), ('noncurrentliabilities', 53), ('current assets', 45), ('equity liabilities', 39), ('equity and liabilities', 34), ('equityandliabilities', 34), ('equityliabilities', 31), ('noncurrent assets', 26), ('liabilities', 25), ('noncurrent liabilities', 25), ('assets', 17), ('equity', 17)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD current assets | score 64
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD currentassets | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD current liabilities | score 63
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD currentliabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrent assets | score 56
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentassets | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrent liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD non current assets | score 56
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD non current liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentassets | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD noncurrentliabilities | score 55
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD equity and liabilities | score 44
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Current tax payable | MATCH WORD equityandliabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Deferred tax liability | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equityandliabilities', 30), ('equity', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('current assets', 21), ('currentassets', 21), ('noncurrentliabilities', 21), ('assets', 19), ('noncurrentassets', 19), ('noncurrent assets', 14)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current assets | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD currentassets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current liabilities | score 63
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD currentliabilities | score 60
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent assets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current assets | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current liabilities | score 58
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrentliabilities | score 56
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrentliabilities | score 56
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity and liabilities | score 55
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equityandliabilities | score 52
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentassets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentliabilities | score 55
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equityandliabilities | score 57
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Reserves | [('currentassets', 44), ('noncurrentassets', 38), ('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentassets | score 48
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentliabilities | score 31
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equityandliabilities | score 22
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-07-31 12:17:19+0530 - sLogger - DEBUG - Total equity attributable to equity holders of the Company | [('equity and liabilities', 41), ('equity liabilities', 33), ('current assets', 27), ('current liabilities', 26), ('noncurrentliabilities', 24), ('equityandliabilities', 24), ('noncurrent assets', 23), ('noncurrentassets', 23), ('equity', 23), ('noncurrent liabilities', 23), ('equityliabilities', 22), ('currentliabilities', 21), ('currentassets', 20), ('liabilities', 15), ('assets', 12)]
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD current assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD currentassets | score 34
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD current liabilities | score 38
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD currentliabilities | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD noncurrent assets | score 32
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD noncurrentassets | score 28
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD noncurrent liabilities | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD non current assets | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD non current liabilities | score 35
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD noncurrentassets | score 28
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD noncurrentliabilities | score 30
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD equity and liabilities | score 86
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD equity | score 60
2023-07-31 12:17:19+0530 - sLogger - DEBUG - particular_text Total equity attributable to equity holders of the Company | MATCH WORD equityandliabilities | score 54
2023-07-31 12:17:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-31 12:17:19+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Profit/(loss) for the year | operating profit loss before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Depreciation right-of-use assets | adjustments for increase decrease in operating assets
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Depreciation | adjustments for increase decrease in operating liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Amortisation | movements in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Impairment | changes in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax expense | adjustments for increase decrease in operating liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net finance expense | adjustments for increase decrease in operating assets
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- (Profit)/loss on disposal of property, plant and equipment and intangibles | operating profit loss before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating cash flow before changes in working | operating cash flow before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- capital changes | changes in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Change in other assets | changes in assets liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Change in trade and other receivables | operating profit before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Change in inventories | movements in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Change in trade and other payables and other liabilities | changes in operating assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Change in provisions and employee benefits | operating profit before changes in assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Power purchase agreement realised gain | operating profit before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Tax paid | changes in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from operating activities | adjustments for increase decrease in operating assets
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- (Acquisition) of property, plant and equipment | changes in operating assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Disposal of property, plant and equipment | changes in operating assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- (Acquisition) of software licences and intangible assets | changes in operating assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- (Acquisition) of subsidiaries net of cash acquired | changes in operating assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing | operating cash flow before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings | operating cash flow before working capital changes
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Lease payments | movements in working capital
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | adjustments for increase decrease in operating assets
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease/increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 April | changes in operating assets and liabilities
2023-07-31 12:17:19+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 March | changes in operating assets and liabilities
2023-07-31 12:17:22+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-07-31 12:17:22+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: ''
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: 'value'
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 12:17:23+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [(' loans and borrowings', 68), (' interest bearing liabilites', 63), ('shortterm borrowings', 44), ('short term debt', 41), ('short-term debt', 37), ('shortterm debt', 37), ('borrowings', 34), (' bank overdraft', 33), ('lease liabilities', 30), (' leases', 18)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [(' interest bearing liabilites', 45), ('lease liabilities', 34), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), (' interest bearing liabilites', 58), ('short-term debt', 33), ('shortterm debt', 33), ('short term debt', 32), (' loans and borrowings', 32), (' bank overdraft', 27), (' leases', 20), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 26], 'score': 100, 'value': 131960.0, 'line_item_label': ['Lease liability', 'Lease liability'], 'note_numbers': ['20', '20'], 'line_item_value': [25250.0, 106710.0]}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [(' loans and borrowings', 68), (' interest bearing liabilites', 63), ('shortterm borrowings', 44), ('short term debt', 41), ('short-term debt', 37), ('shortterm debt', 37), ('borrowings', 34), (' bank overdraft', 33), ('lease liabilities', 30), (' leases', 18)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [(' interest bearing liabilites', 45), ('lease liabilities', 34), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), (' interest bearing liabilites', 58), ('short-term debt', 33), ('shortterm debt', 33), ('short term debt', 32), (' loans and borrowings', 32), (' bank overdraft', 27), (' leases', 20), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 26], 'score': 100, 'value': 117695.0, 'line_item_label': ['Lease liability', 'Lease liability'], 'note_numbers': ['20', '20'], 'line_item_value': [25637.0, 92058.0]}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('trade and other payables', 47), ('trade payable', 34), ('other trade payables', 34)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other trade payables', 61), ('trade and other payables', 60), ('trade payable', 60)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('trade and other payables', 53), ('other trade payables', 53), ('trade payable', 43)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('trade and other payables', 47), ('trade payable', 34), ('other trade payables', 34)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other trade payables', 61), ('trade and other payables', 60), ('trade payable', 60)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('trade and other payables', 53), ('other trade payables', 53), ('trade payable', 43)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('trade and other payables', 47)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('trade and other payables', 60)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('trade and other payables', 53)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('trade and other payables', 47)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('trade and other payables', 60)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('trade and other payables', 53)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:23+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:23+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 12:17:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('current tax liabilities', 44), (' income tax payable', 38), ('tax', 33), ('provision', 33)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('tax', 100), ('current tax liabilities', 83), (' income tax payable', 75), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('tax', 100), ('current tax liabilities', 75), (' income tax payable', 50), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 19, 21, 24, 25], 'score': 100, 'value': 68850.0, 'line_item_label': ['liabilities', 'Current tax payable', 'Provisions', 'Provisions', 'Deferred tax liability'], 'note_numbers': ['6', '11', '23', '23', '11'], 'line_item_value': [18707.0, 17888.0, 15526.0, 10209.0, 6520.0]}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('current tax liabilities', 44), (' income tax payable', 38), ('tax', 33), ('provision', 33)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('tax', 100), ('current tax liabilities', 83), (' income tax payable', 75), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('tax', 100), ('current tax liabilities', 75), (' income tax payable', 50), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 19, 21, 24, 25], 'score': 100, 'value': 68851.0, 'line_item_label': ['liabilities', 'Current tax payable', 'Provisions', 'Provisions', 'Deferred tax liability'], 'note_numbers': ['6', '11', '23', '23', '11'], 'line_item_value': [25283.0, 0.0, 11821.0, 13181.0, 18566.0]}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:23+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = income tax current expense nan , res_fuzz_match = [('income tax (refundable)/payable ', 65), (' provision for income tax', 40)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods nan , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 50)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax origination and reversal of temporary nan , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax adjustment for tax of prior periods nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax total tax expense nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = of tax rate profit before tax from continuing operations nan , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = of tax rate tax using the company's tax rate nan , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 50)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of expenses nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of r&d incentive nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of adjustment for prior years nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of for tax rates nan , res_fuzz_match = [('income tax (refundable)/payable ', 51), (' provision for income tax', 40)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of foreign income tax offset nan , res_fuzz_match = [(' provision for income tax', 70), ('income tax (refundable)/payable ', 60)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of others nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of total nan , res_fuzz_match = [('income tax (refundable)/payable ', 49), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of tax receivable/payable) nan , res_fuzz_match = [('income tax (refundable)/payable ', 65), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of nan as at , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 36)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary property, plant and 10.420 , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary blackhole 4145 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 28)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary intangible assets (2,452) , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary nan 6300 , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 31)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary doubtful debts 6 , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary operating leases 12071 , res_fuzz_match = [(' provision for income tax', 37), ('income tax (refundable)/payable ', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary provisions 24.244 , res_fuzz_match = [('income tax (refundable)/payable ', 31), (' provision for income tax', 25)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary other (1,818) , res_fuzz_match = [(' provision for income tax', 33), ('income tax (refundable)/payable ', 27)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary nan as at , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 31)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary nan 31 march 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 32), (' provision for income tax', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary property, plant and equipment 11190 , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary blackhole expenditure nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary intangible assets 968 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary foreign currency (187) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 6430 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary doubtful debts 33 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary operating leases 4804 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 25228 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary other (2,043) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 46423 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = deferred tax balances are presented in the of financial position as follows: total nan , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = in of aud tax assets nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 24)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = in of aud deferred tax liabilities nan , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = income tax current expense nan , res_fuzz_match = [('income tax (refundable)/payable ', 65), (' provision for income tax', 40)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods nan , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 50)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax origination and reversal of temporary nan , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax adjustment for tax of prior periods nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax total tax expense nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = of tax rate profit before tax from continuing operations nan , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = of tax rate tax using the company's tax rate nan , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 50)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of expenses nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of r&d incentive nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of adjustment for prior years nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of for tax rates nan , res_fuzz_match = [('income tax (refundable)/payable ', 51), (' provision for income tax', 40)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of foreign income tax offset nan , res_fuzz_match = [(' provision for income tax', 70), ('income tax (refundable)/payable ', 60)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of others nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of total nan , res_fuzz_match = [('income tax (refundable)/payable ', 49), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of tax receivable/payable) nan , res_fuzz_match = [('income tax (refundable)/payable ', 65), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax effect of nan as at , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 36)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary property, plant and 10.420 , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary blackhole 4145 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 28)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary intangible assets (2,452) , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary nan 6300 , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 31)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary doubtful debts 6 , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary operating leases 12071 , res_fuzz_match = [(' provision for income tax', 37), ('income tax (refundable)/payable ', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary provisions 24.244 , res_fuzz_match = [('income tax (refundable)/payable ', 31), (' provision for income tax', 25)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary other (1,818) , res_fuzz_match = [(' provision for income tax', 33), ('income tax (refundable)/payable ', 27)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary nan as at , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 31)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = temporary nan 31 march 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 32), (' provision for income tax', 32)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary property, plant and equipment 11190 , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary blackhole expenditure nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary intangible assets 968 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary foreign currency (187) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 6430 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary doubtful debts 33 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary operating leases 4804 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 25228 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary other (2,043) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 46423 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows = deferred tax balances are presented in the of financial position as follows: total nan , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:23+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud tax assets nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud deferred tax liabilities nan , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense nan , res_fuzz_match = [('income tax (refundable)/payable ', 65), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods nan , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 50)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax origination and reversal of temporary nan , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax adjustment for tax of prior periods nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 48)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax total tax expense nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate profit before tax from continuing operations nan , res_fuzz_match = [(' provision for income tax', 60), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate tax using the company's tax rate nan , res_fuzz_match = [('income tax (refundable)/payable ', 52), (' provision for income tax', 50)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of expenses nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of r&d incentive nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of adjustment for prior years nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of for tax rates nan , res_fuzz_match = [('income tax (refundable)/payable ', 51), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of foreign income tax offset nan , res_fuzz_match = [(' provision for income tax', 70), ('income tax (refundable)/payable ', 60)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of others nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of total nan , res_fuzz_match = [('income tax (refundable)/payable ', 49), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of tax receivable/payable) nan , res_fuzz_match = [('income tax (refundable)/payable ', 65), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of nan as at , res_fuzz_match = [('income tax (refundable)/payable ', 57), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary property, plant and 10.420 , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary blackhole 4145 , res_fuzz_match = [('income tax (refundable)/payable ', 33), (' provision for income tax', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary intangible assets (2,452) , res_fuzz_match = [(' provision for income tax', 41), ('income tax (refundable)/payable ', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 6300 , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary doubtful debts 6 , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary operating leases 12071 , res_fuzz_match = [(' provision for income tax', 37), ('income tax (refundable)/payable ', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary provisions 24.244 , res_fuzz_match = [('income tax (refundable)/payable ', 31), (' provision for income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary other (1,818) , res_fuzz_match = [(' provision for income tax', 33), ('income tax (refundable)/payable ', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan as at , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 31 march 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 32), (' provision for income tax', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary property, plant and equipment 11190 , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary blackhole expenditure nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary intangible assets 968 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary foreign currency (187) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 6430 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary doubtful debts 33 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary operating leases 4804 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 25228 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary other (2,043) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 46423 , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = deferred tax balances are presented in the of financial position as follows: total nan , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud tax assets nan , res_fuzz_match = [('income tax (refundable)/payable ', 47), (' provision for income tax', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud deferred tax liabilities nan , res_fuzz_match = [('income tax (refundable)/payable ', 37), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' provision for income tax', 45), ('income tax (refundable)/payable ', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [(' trade and other payables', 47), (' foreign exchange contract liability', 40), (' deferred revenue', 39), (' other financial liabilities', 37), (' employee benefits', 36), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), ('provisions', 23), (' customer deposits', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other current liabilities', 68), (' other current liabilities', 68), (' trade and other payables', 60), (' customer deposits', 38), (' other financial liabilities', 37), (' foreign exchange contract liability', 37), (' employee benefits', 36), (' financial liabilities', 31), (' deferred revenue', 27), ('provisions', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('other current liabilities', 56), (' other current liabilities', 56), (' other financial liabilities', 56), (' financial liabilities', 53), (' trade and other payables', 53), (' deferred revenue', 43), (' foreign exchange contract liability', 43), (' customer deposits', 27), (' employee benefits', 26), ('provisions', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 23, 24], 'score': 100, 'value': 79694.0, 'line_item_label': ['Employee benefits', 'Provisions', 'Employee benefits', 'Provisions'], 'note_numbers': ['22', '23', '22', '23'], 'line_item_value': [49976.0, 15526.0, 3983.0, 10209.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [(' trade and other payables', 47), (' foreign exchange contract liability', 40), (' deferred revenue', 39), (' other financial liabilities', 37), (' employee benefits', 36), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), ('provisions', 23), (' customer deposits', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('other current liabilities', 68), (' other current liabilities', 68), (' trade and other payables', 60), (' customer deposits', 38), (' other financial liabilities', 37), (' foreign exchange contract liability', 37), (' employee benefits', 36), (' financial liabilities', 31), (' deferred revenue', 27), ('provisions', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('other current liabilities', 56), (' other current liabilities', 56), (' other financial liabilities', 56), (' financial liabilities', 53), (' trade and other payables', 53), (' deferred revenue', 43), (' foreign exchange contract liability', 43), (' customer deposits', 27), (' employee benefits', 26), ('provisions', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21, 23, 24], 'score': 100, 'value': 80323.0, 'line_item_label': ['Employee benefits', 'Provisions', 'Employee benefits', 'Provisions'], 'note_numbers': ['22', '23', '22', '23'], 'line_item_value': [51347.0, 11821.0, 3974.0, 13181.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' loans from related party', 48), (' abandonment and decommissioning costs', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' total current employee benefits', 43), (' employee benefits - payroll', 42), (' gst payables', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' share of joint venture payables', 39), (' make good provisions', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' secured long-term bank loans', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' gst', 33), (' gst payable and accruals', 32), (' derivative contracts - at fair value', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25), (' provision for associate funding', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' provisions - current', 50), (' loans from related party', 48), (' current - liability for annual and long service leave', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 42), ('other creditors and accruals', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' share of joint venture payables', 41), (' total current employee benefits', 41), (' gst payables', 40), (' restructuring', 40), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' abandonment and decommissioning costs', 36), (' arising from service contracts', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' contract liabilites - current', 32), (' make good provisions', 31), (' gst liabilities', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' forward exchange contracts', 27), (' warranty', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = provision, spares & deferred warranty , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 50), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' other related parties', 47), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' other creditors', 37), (' other creditors', 37), (' current - liability for annual and long service leave', 37), (' other creditors', 37), (' total current employee benefits', 37), (' gst', 33), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' loans from related party', 48), (' abandonment and decommissioning costs', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' total current employee benefits', 43), (' employee benefits - payroll', 42), (' gst payables', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' share of joint venture payables', 39), (' make good provisions', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' secured long-term bank loans', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' gst', 33), (' gst payable and accruals', 32), (' derivative contracts - at fair value', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25), (' provision for associate funding', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' provisions - current', 50), (' loans from related party', 48), (' current - liability for annual and long service leave', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 42), ('other creditors and accruals', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' share of joint venture payables', 41), (' total current employee benefits', 41), (' gst payables', 40), (' restructuring', 40), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' abandonment and decommissioning costs', 36), (' arising from service contracts', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' contract liabilites - current', 32), (' make good provisions', 31), (' gst liabilities', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' forward exchange contracts', 27), (' warranty', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' loans from related party', 48), (' abandonment and decommissioning costs', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' total current employee benefits', 43), (' employee benefits - payroll', 42), (' gst payables', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' share of joint venture payables', 39), (' make good provisions', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' secured long-term bank loans', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' gst', 33), (' gst payable and accruals', 32), (' derivative contracts - at fair value', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25), (' provision for associate funding', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' provisions - current', 50), (' loans from related party', 48), (' current - liability for annual and long service leave', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 42), ('other creditors and accruals', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' share of joint venture payables', 41), (' total current employee benefits', 41), (' gst payables', 40), (' restructuring', 40), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' abandonment and decommissioning costs', 36), (' arising from service contracts', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' contract liabilites - current', 32), (' make good provisions', 31), (' gst liabilities', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' forward exchange contracts', 27), (' warranty', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = costs and claims , res_fuzz_match = [(' gst', 67), ('other creditors and accruals', 57), (' contract liabilites - current', 57), (' abandonment and decommissioning costs', 57), (' derivative contracts - at fair value', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' gst payables', 50), (' gst liabilities', 50), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other creditors', 37), (' other creditors', 37), (' other creditors', 37), (' ultimate parent entity', 36), (' other related parties', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' total current employee benefits', 36), (' restructuring', 30), (' provisions - current', 29), (' make good provisions', 29), (' rebates', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2022 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none made during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' loans from related party', 48), (' abandonment and decommissioning costs', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' total current employee benefits', 43), (' employee benefits - payroll', 42), (' gst payables', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' share of joint venture payables', 39), (' make good provisions', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' secured long-term bank loans', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' gst', 33), (' gst payable and accruals', 32), (' derivative contracts - at fair value', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25), (' provision for associate funding', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none used during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 50), (' provisions - current', 50), (' loans from related party', 48), (' current - liability for annual and long service leave', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 42), ('other creditors and accruals', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' share of joint venture payables', 41), (' total current employee benefits', 41), (' gst payables', 40), (' restructuring', 40), (' ultimate parent entity', 37), (' secured long-term bank loans', 36), (' abandonment and decommissioning costs', 36), (' arising from service contracts', 36), (' gst', 33), (' derivative contracts - at fair value', 32), (' contract liabilites - current', 32), (' make good provisions', 31), (' gst liabilities', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' forward exchange contracts', 27), (' warranty', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2023 , res_fuzz_match = [('other creditors and accruals', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), (' other related parties', 40), (' other creditors', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other creditors', 40), (' other', 40), (' ultimate parent entity', 30), (' provisions - current', 30), (' share of joint venture payables', 30), (' make good provisions', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' gst payables', 21), (' gst liabilities', 20), (' gst', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2022 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 current , res_fuzz_match = [(' provisions - current', 69), (' total current employee benefits', 69), (' employee benefits - current', 62), (' contract liabilites - current', 62), (' rebates', 60), (' ultimate parent entity', 54), (' arising from service contracts', 54), (' warranty', 53), ('other creditors and accruals', 46), (' other creditors', 46), (' loans from related party', 46), (' other creditors', 46), (' forward exchange contracts', 46), (' other creditors', 46), (' restructuring', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' gst', 33), (' gst payable and accruals', 31), (' current - liability for annual and long service leave', 31), (' employee benefits - payroll', 31), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other', 20), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = 31 march 2023 total , res_fuzz_match = [(' arising from service contracts', 55), (' ultimate parent entity', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' share of joint venture payables', 45), (' forward exchange contracts', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' current - liability for annual and long service leave', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' make good provisions', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 32), (' gst liabilities', 30), (' restructuring', 30), (' total current employee benefits', 27), (' employee benefits - current', 18), (' provisions - current', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [10.948, 7127.0, -7563.0, 10512.0, 10448.0, 500.0, 10948.0, 10012.0, 500.0, 0.0, 25735.0, 7831.0, -8564.0, 25002.0, 15526.0, 10209.0, 25735.0, 11821.0, 13181.0, 0.0], 'label': ['provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'provision, spares & deferred warranty', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('current liabilities', 69)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('current liabilities', 53)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = interest bearing loans and borrowings , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = current tax payable , res_fuzz_match = [('current liabilities', 69)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('current liabilities', 53)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('long term debt', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('long term debt', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('long term debt', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('long term debt', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('long term debt', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('long term debt', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('long term debt', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('long term debt', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' lease liabilities', 40), (' lease liability', 40), ('interest bearing loans and borrowings', 30), (' loans and borrowings', 20), (' borrowings', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' borrowings', 33), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('interest bearing loans and borrowings', 64), (' loans and borrowings', 45), (' lease liabilities', 38), (' lease liability', 38), (' borrowings', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('interest bearing loans and borrowings', 38), (' lease liabilities', 36), (' lease liability', 36), (' borrowings', 33), (' loans and borrowings', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' lease liabilities', 40), (' lease liability', 40), ('interest bearing loans and borrowings', 30), (' loans and borrowings', 20), (' borrowings', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' borrowings', 33), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('interest bearing loans and borrowings', 64), (' loans and borrowings', 45), (' lease liabilities', 38), (' lease liability', 38), (' borrowings', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('interest bearing loans and borrowings', 38), (' lease liabilities', 36), (' lease liability', 36), (' borrowings', 33), (' loans and borrowings', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('interest bearing loans and borrowings', 21), ('(bond)', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('interest bearing loans and borrowings', 17), ('(bond)', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('interest bearing loans and borrowings', 45), ('(bond)', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('(bond)', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('interest bearing loans and borrowings', 21), ('(bond)', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('interest bearing loans and borrowings', 17), ('(bond)', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('interest bearing loans and borrowings', 45), ('(bond)', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('(bond)', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('deferred tax liabilities', 30), ('deferred taxes', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('deferred taxes', 50), ('deferred tax liabilities', 50)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('deferred tax liabilities', 45), ('deferred taxes', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('deferred taxes', 56), ('deferred tax liabilities', 52)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('deferred tax liabilities', 30), ('deferred taxes', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('deferred taxes', 50), ('deferred tax liabilities', 50)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('deferred tax liabilities', 45), ('deferred taxes', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('deferred taxes', 56), ('deferred tax liabilities', 52)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' provisions', 38), (' financial liabilities', 33), (' provision for associate funding', 31), (' other financial liabilities', 27), (' other non-current liabilities', 27), ('other long term liabilities', 25), (' employee benefits', 24), ('trade and other payables', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' provisions', 33), (' other non-current liabilities', 23), ('other long term liabilities', 21), (' provision for associate funding', 21), (' employee benefits', 19), (' other financial liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' financial liabilities', 40), ('trade and other payables', 36), (' provision for associate funding', 36), (' other financial liabilities', 32), (' employee benefits', 31), ('other long term liabilities', 30), (' other non-current liabilities', 26), (' provisions', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('other long term liabilities', 38), (' other financial liabilities', 36), (' other non-current liabilities', 33), ('trade and other payables', 32), (' employee benefits', 29), (' financial liabilities', 26), (' provision for associate funding', 26), (' provisions', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' provisions', 38), (' financial liabilities', 33), (' provision for associate funding', 31), (' other financial liabilities', 27), (' other non-current liabilities', 27), ('other long term liabilities', 25), (' employee benefits', 24), ('trade and other payables', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' provisions', 33), (' other non-current liabilities', 23), ('other long term liabilities', 21), (' provision for associate funding', 21), (' employee benefits', 19), (' other financial liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' financial liabilities', 40), ('trade and other payables', 36), (' provision for associate funding', 36), (' other financial liabilities', 32), (' employee benefits', 31), ('other long term liabilities', 30), (' other non-current liabilities', 26), (' provisions', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('other long term liabilities', 38), (' other financial liabilities', 36), (' other non-current liabilities', 33), ('trade and other payables', 32), (' employee benefits', 29), (' financial liabilities', 26), (' provision for associate funding', 26), (' provisions', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total equity attributable to equity holders of the company , res_fuzz_match = [('', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 12:17:24+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 12:17:24+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), (' revenue from continuing activities', 19), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), (' revenue from continuing activities', 60), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' revenue from continuing activities', 42), ('transmission and distribution business', 34), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('from trading business', 29), ('revenue from operations', 21), ('net sales', 19), (' Sale of coal', 18), (' Sales revenue', 17), ('sale of products', 16), (' Revenue', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Sales revenue', 40), ('transmission and distribution business', 33), (' Revenue', 30), ('from trading business', 28), ('revenue from operations', 27), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('sale of products', 23), (' revenue from continuing activities', 21), (' Sale of coal', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Sales revenue', 43), ('net sales', 32), ('from trading business', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('sale of products', 28), ('transmission and distribution business', 27), (' Revenue', 26), ('revenue from operations', 24), (' revenue from continuing activities', 24), (' Sale of coal', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), ('transmission and distribution business', 36), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 27), (' Sale of coal', 26), (' revenue from continuing activities', 26), (' Sales revenue', 24), (' Revenue', 7)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('revenue from contracts with customers', 44), ('Revenue from contract with customers', 44), (' revenue from continuing activities', 43), ('transmission and distribution business', 34), ('revenue from operations', 31), ('from trading business', 31), ('sale of products', 23), (' Sale of coal', 21), (' Sales revenue', 20), ('net sales', 18), (' Revenue', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), (' revenue from continuing activities', 34), ('from trading business', 33), ('revenue from operations', 32), ('transmission and distribution business', 29), (' Sale of coal', 27), ('sale of products', 25), (' Revenue', 24), ('net sales', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), (' revenue from continuing activities', 34), ('transmission and distribution business', 33), ('revenue from operations', 30), ('from trading business', 27), (' Sales revenue', 26), ('sale of products', 22), ('net sales', 20), (' Sale of coal', 20), (' Revenue', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('from trading business', 41), ('revenue from operations', 40), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 34), ('sale of products', 32), (' revenue from continuing activities', 32), (' Revenue', 16), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' revenue from continuing activities', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('revenue from operations', 34), ('transmission and distribution business', 34), ('from trading business', 32), (' Sales revenue', 24), ('net sales', 18), (' Sale of coal', 18), ('sale of products', 17), (' Revenue', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('revenue from operations', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 36), (' revenue from continuing activities', 36), ('transmission and distribution business', 29), (' Sales revenue', 27), ('sale of products', 26), ('net sales', 20), (' Sale of coal', 20), (' Revenue', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 37), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 27), ('sale of products', 23), (' Sales revenue', 23), (' Sale of coal', 21), ('net sales', 19), (' Revenue', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 959588.0, 'line_item_label': ['Revenue'], 'note_numbers': ['6'], 'line_item_value': [959588.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), (' revenue from continuing activities', 19), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), (' revenue from continuing activities', 60), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' revenue from continuing activities', 42), ('transmission and distribution business', 34), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('from trading business', 29), ('revenue from operations', 21), ('net sales', 19), (' Sale of coal', 18), (' Sales revenue', 17), ('sale of products', 16), (' Revenue', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Sales revenue', 40), ('transmission and distribution business', 33), (' Revenue', 30), ('from trading business', 28), ('revenue from operations', 27), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('sale of products', 23), (' revenue from continuing activities', 21), (' Sale of coal', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Sales revenue', 43), ('net sales', 32), ('from trading business', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('sale of products', 28), ('transmission and distribution business', 27), (' Revenue', 26), ('revenue from operations', 24), (' revenue from continuing activities', 24), (' Sale of coal', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), ('transmission and distribution business', 36), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 27), (' Sale of coal', 26), (' revenue from continuing activities', 26), (' Sales revenue', 24), (' Revenue', 7)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('revenue from contracts with customers', 44), ('Revenue from contract with customers', 44), (' revenue from continuing activities', 43), ('transmission and distribution business', 34), ('revenue from operations', 31), ('from trading business', 31), ('sale of products', 23), (' Sale of coal', 21), (' Sales revenue', 20), ('net sales', 18), (' Revenue', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), (' revenue from continuing activities', 34), ('from trading business', 33), ('revenue from operations', 32), ('transmission and distribution business', 29), (' Sale of coal', 27), ('sale of products', 25), (' Revenue', 24), ('net sales', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), (' revenue from continuing activities', 34), ('transmission and distribution business', 33), ('revenue from operations', 30), ('from trading business', 27), (' Sales revenue', 26), ('sale of products', 22), ('net sales', 20), (' Sale of coal', 20), (' Revenue', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('from trading business', 41), ('revenue from operations', 40), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 34), ('sale of products', 32), (' revenue from continuing activities', 32), (' Revenue', 16), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' revenue from continuing activities', 36), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('revenue from operations', 34), ('transmission and distribution business', 34), ('from trading business', 32), (' Sales revenue', 24), ('net sales', 18), (' Sale of coal', 18), ('sale of products', 17), (' Revenue', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('revenue from operations', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 36), (' revenue from continuing activities', 36), ('transmission and distribution business', 29), (' Sales revenue', 27), ('sale of products', 26), ('net sales', 20), (' Sale of coal', 20), (' Revenue', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 37), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 27), ('sale of products', 23), (' Sales revenue', 23), (' Sale of coal', 21), ('net sales', 19), (' Revenue', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1.10373, 'line_item_label': ['Revenue'], 'note_numbers': ['6'], 'line_item_value': [1.10373]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Cost of inventory sold', 38), (' Cost of goods and services sold', 37), (' cost of coal sold', 30), ('total expenditure', 28), (' Cost of product sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' Personnel costs', 22), (' cost of goods sold', 22), ('cost of sales', 18), ('Cost of sales', 18), ('expenditure', 17), ('expense', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('total expenses', 62), ('expense', 60), ('expenditure', 50), ('total expenditure', 47), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of goods and services sold', 26), (' Cost of product sold', 19), (' cost of coal sold', 14), (' cost of goods sold', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('total expenses', 55), ('expense', 52), ('expenditure', 52), ('total expenditure', 48), (' Personnel costs', 39), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), (' Cost of goods and services sold', 29), (' Cost of product sold', 24), (' cost of coal sold', 19), (' cost of goods sold', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' cost of goods sold', 28), ('expenditure', 25), ('expense', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold', 27), (' Cost of product sold', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Cost of goods and services sold', 30), (' Cost of product sold', 27), ('purchase of stock-in-trade', 26), ('total expenditure', 25), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of inventory sold', 24), ('total expenses', 23), (' cost of goods sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 17), ('expense', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' Cost of inventory sold', 43), ('purchase of stock-in-trade', 38), (' cost of coal sold', 38), (' Personnel costs', 38), (' cost of goods sold', 38), ('total expenses', 35), (' Cost of goods and services sold', 34), ('expenditure', 32), ('total expenditure', 32), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Cost of goods and services sold', 39), (' Cost of inventory sold', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of product sold', 29), (' cost of coal sold', 28), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' Cost of product sold', 50), (' Cost of inventory sold', 37), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), ('expense', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Cost of goods and services sold', 36), (' Cost of inventory sold', 36), ('total expenditure', 31), ('purchase of stock-in-trade', 30), (' Personnel costs', 29), (' cost of goods sold', 29), ('total expenses', 27), (' Cost of product sold', 25), (' cost of coal sold', 23), ('expenditure', 21), ('expense', 19), ('cost of sales', 18), ('Cost of sales', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('purchase of stock-in-trade', 37), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' Cost of goods and services sold', 30), (' cost of coal sold', 29), (' cost of goods sold', 29), (' Cost of product sold', 28), ('expenditure', 24), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Cost of goods and services sold', 31), (' cost of coal sold', 28), ('total expenditure', 27), (' Cost of product sold', 27), ('total expenses', 26), (' Cost of inventory sold', 26), (' Personnel costs', 25), ('purchase of stock-in-trade', 24), (' cost of goods sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 16), ('expense', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -960422.0, 'line_item_label': ['Expenses'], 'note_numbers': ['8'], 'line_item_value': [-960422.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Cost of inventory sold', 38), (' Cost of goods and services sold', 37), (' cost of coal sold', 30), ('total expenditure', 28), (' Cost of product sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' Personnel costs', 22), (' cost of goods sold', 22), ('cost of sales', 18), ('Cost of sales', 18), ('expenditure', 17), ('expense', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('total expenses', 62), ('expense', 60), ('expenditure', 50), ('total expenditure', 47), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of goods and services sold', 26), (' Cost of product sold', 19), (' cost of coal sold', 14), (' cost of goods sold', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('total expenses', 55), ('expense', 52), ('expenditure', 52), ('total expenditure', 48), (' Personnel costs', 39), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), (' Cost of goods and services sold', 29), (' Cost of product sold', 24), (' cost of coal sold', 19), (' cost of goods sold', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' cost of goods sold', 28), ('expenditure', 25), ('expense', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold', 27), (' Cost of product sold', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Cost of goods and services sold', 30), (' Cost of product sold', 27), ('purchase of stock-in-trade', 26), ('total expenditure', 25), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of inventory sold', 24), ('total expenses', 23), (' cost of goods sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 17), ('expense', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' Cost of inventory sold', 43), ('purchase of stock-in-trade', 38), (' cost of coal sold', 38), (' Personnel costs', 38), (' cost of goods sold', 38), ('total expenses', 35), (' Cost of goods and services sold', 34), ('expenditure', 32), ('total expenditure', 32), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Cost of goods and services sold', 39), (' Cost of inventory sold', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of product sold', 29), (' cost of coal sold', 28), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' Cost of product sold', 50), (' Cost of inventory sold', 37), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), ('expense', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Cost of goods and services sold', 36), (' Cost of inventory sold', 36), ('total expenditure', 31), ('purchase of stock-in-trade', 30), (' Personnel costs', 29), (' cost of goods sold', 29), ('total expenses', 27), (' Cost of product sold', 25), (' cost of coal sold', 23), ('expenditure', 21), ('expense', 19), ('cost of sales', 18), ('Cost of sales', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('purchase of stock-in-trade', 37), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' Cost of goods and services sold', 30), (' cost of coal sold', 29), (' cost of goods sold', 29), (' Cost of product sold', 28), ('expenditure', 24), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Cost of goods and services sold', 31), (' cost of coal sold', 28), ('total expenditure', 27), (' Cost of product sold', 27), ('total expenses', 26), (' Cost of inventory sold', 26), (' Personnel costs', 25), ('purchase of stock-in-trade', 24), (' cost of goods sold', 22), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 16), ('expense', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -1.168031, 'line_item_label': ['Expenses'], 'note_numbers': ['8'], 'line_item_value': [-1.168031]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administrative and other expenses', 36), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Advertising expenses', 29), (' Sales and marketing', 29), ('Distribution expenses', 28), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Selling & distribution expenses', 24), (' Management expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Occupancy ', 22), (' depreciation', 20), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Management expenses', 69), (' Lease expenses', 64), (' Occupancy expenses', 62), (' Marketing expenses', 59), (' Selling Expenses', 56), ('other expenses', 54), (' Other expenses', 54), (' Other expenses', 54), (' depreciation', 48), (' Depreciation expenses', 43), (' Depreciation expenses', 43), (' Amortisation expenses', 43), (' Advertising expenses', 41), ('Distribution expenses', 40), (' Administrative expenses', 40), (' Selling & distribution expenses', 40), (' Administration expenses', 40), (' Administrative and other expenses', 35), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Marketing expenses', 67), (' Management expenses', 62), (' Lease expenses', 57), (' Selling Expenses', 57), ('other expenses', 55), (' Occupancy expenses', 55), (' Other expenses', 55), (' Other expenses', 55), (' Selling & distribution expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Amortisation expenses', 39), (' Advertising expenses', 38), (' Administrative and other expenses', 37), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' Occupancy ', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), (' Administrative and other expenses', 25), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Management expenses', 24), (' Administrative expenses', 21), (' Administration expenses', 21), (' Occupancy ', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 31), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Administrative expenses', 28), (' Administration expenses', 28), (' Sales and marketing', 28), (' Advertising expenses', 25), (' Amortisation expenses', 25), (' Marketing expenses', 23), (' Lease expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Selling Expenses', 17), (' Occupancy expenses', 16), (' Management expenses', 16), (' depreciation', 11), (' Occupancy ', 7)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 48), (' Selling Expenses', 41), (' Marketing expenses', 39), (' Selling & distribution expenses', 37), (' Lease expenses', 36), (' Occupancy expenses', 30), (' Management expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 23), (' Occupancy ', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Administrative and other expenses', 39), (' Selling & distribution expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Sales and marketing', 30), (' Selling Expenses', 29), (' Marketing expenses', 28), (' Amortisation expenses', 28), (' Logistics and distribution', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), ('Distribution expenses', 21), (' Advertising expenses', 21), (' depreciation', 17), (' Occupancy ', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Logistics and distribution', 36), (' Administrative and other expenses', 31), ('Distribution expenses', 29), (' Occupancy expenses', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), (' Sales and marketing', 24), (' depreciation', 23), (' Management expenses', 19), (' Advertising expenses', 18), (' Administrative expenses', 17), (' Occupancy ', 17), (' Administration expenses', 17), (' Lease expenses', 13), (' Selling Expenses', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Selling & distribution expenses', 32), (' Administrative and other expenses', 32), (' Advertising expenses', 32), (' Logistics and distribution', 32), ('Distribution expenses', 31), (' Amortisation expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Sales and marketing', 25), (' Lease expenses', 24), ('other expenses', 23), (' Marketing expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Occupancy expenses', 20), (' Selling Expenses', 20), (' depreciation', 18), (' Occupancy ', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Marketing expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Occupancy expenses', 26), (' Management expenses', 26), (' Logistics and distribution', 26), ('Distribution expenses', 25), (' Depreciation expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), (' Sales and marketing', 25), (' depreciation', 17), (' Occupancy ', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Administrative and other expenses', 37), (' Selling & distribution expenses', 34), (' Logistics and distribution', 28), ('Distribution expenses', 27), (' Sales and marketing', 27), ('other expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Advertising expenses', 22), (' Amortisation expenses', 22), (' Lease expenses', 21), (' Selling Expenses', 21), (' Management expenses', 21), (' Marketing expenses', 20), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Occupancy expenses', 18), (' depreciation', 11), (' Occupancy ', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administrative and other expenses', 36), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Advertising expenses', 29), (' Sales and marketing', 29), ('Distribution expenses', 28), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Selling & distribution expenses', 24), (' Management expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Occupancy ', 22), (' depreciation', 20), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Management expenses', 69), (' Lease expenses', 64), (' Occupancy expenses', 62), (' Marketing expenses', 59), (' Selling Expenses', 56), ('other expenses', 54), (' Other expenses', 54), (' Other expenses', 54), (' depreciation', 48), (' Depreciation expenses', 43), (' Depreciation expenses', 43), (' Amortisation expenses', 43), (' Advertising expenses', 41), ('Distribution expenses', 40), (' Administrative expenses', 40), (' Selling & distribution expenses', 40), (' Administration expenses', 40), (' Administrative and other expenses', 35), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Marketing expenses', 67), (' Management expenses', 62), (' Lease expenses', 57), (' Selling Expenses', 57), ('other expenses', 55), (' Occupancy expenses', 55), (' Other expenses', 55), (' Other expenses', 55), (' Selling & distribution expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Amortisation expenses', 39), (' Advertising expenses', 38), (' Administrative and other expenses', 37), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' Occupancy ', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), (' Administrative and other expenses', 25), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Management expenses', 24), (' Administrative expenses', 21), (' Administration expenses', 21), (' Occupancy ', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 31), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Administrative expenses', 28), (' Administration expenses', 28), (' Sales and marketing', 28), (' Advertising expenses', 25), (' Amortisation expenses', 25), (' Marketing expenses', 23), (' Lease expenses', 20), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' Selling Expenses', 17), (' Occupancy expenses', 16), (' Management expenses', 16), (' depreciation', 11), (' Occupancy ', 7)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 48), (' Selling Expenses', 41), (' Marketing expenses', 39), (' Selling & distribution expenses', 37), (' Lease expenses', 36), (' Occupancy expenses', 30), (' Management expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 23), (' Occupancy ', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Administrative and other expenses', 39), (' Selling & distribution expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Sales and marketing', 30), (' Selling Expenses', 29), (' Marketing expenses', 28), (' Amortisation expenses', 28), (' Logistics and distribution', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), ('Distribution expenses', 21), (' Advertising expenses', 21), (' depreciation', 17), (' Occupancy ', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Logistics and distribution', 36), (' Administrative and other expenses', 31), ('Distribution expenses', 29), (' Occupancy expenses', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), (' Sales and marketing', 24), (' depreciation', 23), (' Management expenses', 19), (' Advertising expenses', 18), (' Administrative expenses', 17), (' Occupancy ', 17), (' Administration expenses', 17), (' Lease expenses', 13), (' Selling Expenses', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Selling & distribution expenses', 32), (' Administrative and other expenses', 32), (' Advertising expenses', 32), (' Logistics and distribution', 32), ('Distribution expenses', 31), (' Amortisation expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Sales and marketing', 25), (' Lease expenses', 24), ('other expenses', 23), (' Marketing expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Occupancy expenses', 20), (' Selling Expenses', 20), (' depreciation', 18), (' Occupancy ', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Marketing expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Occupancy expenses', 26), (' Management expenses', 26), (' Logistics and distribution', 26), ('Distribution expenses', 25), (' Depreciation expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), (' Sales and marketing', 25), (' depreciation', 17), (' Occupancy ', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Administrative and other expenses', 37), (' Selling & distribution expenses', 34), (' Logistics and distribution', 28), ('Distribution expenses', 27), (' Sales and marketing', 27), ('other expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Administrative expenses', 24), (' Administration expenses', 24), (' Advertising expenses', 22), (' Amortisation expenses', 22), (' Lease expenses', 21), (' Selling Expenses', 21), (' Management expenses', 21), (' Marketing expenses', 20), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Occupancy expenses', 18), (' depreciation', 11), (' Occupancy ', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy expenses', 24), (' Rental expenses', 23), (' Occupancy', 22), ('Rent', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Rental expenses', 67), (' Occupancy expenses', 62), (' Administration expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Rental expenses', 60), (' Occupancy expenses', 55), (' Administration expenses', 36), ('Rent', 29), (' Occupancy', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Rental expenses', 34), (' Occupancy expenses', 24), (' Administration expenses', 21), ('Rent', 15), (' Occupancy', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 26), (' Occupancy expenses', 16), ('Rent', 11), (' Occupancy', 7)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' Rental expenses', 34), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 15), (' Occupancy', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 17), (' Administration expenses', 17), (' Occupancy', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 28), (' Occupancy expenses', 20), ('Rent', 15), (' Occupancy', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 32), (' Occupancy expenses', 26), ('Rent', 18), (' Occupancy', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Rental expenses', 25), (' Administration expenses', 24), (' Occupancy expenses', 18), ('Rent', 11), (' Occupancy', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy expenses', 24), (' Rental expenses', 23), (' Occupancy', 22), ('Rent', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Rental expenses', 67), (' Occupancy expenses', 62), (' Administration expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Rental expenses', 60), (' Occupancy expenses', 55), (' Administration expenses', 36), ('Rent', 29), (' Occupancy', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Rental expenses', 34), (' Occupancy expenses', 24), (' Administration expenses', 21), ('Rent', 15), (' Occupancy', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 26), (' Occupancy expenses', 16), ('Rent', 11), (' Occupancy', 7)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' Rental expenses', 34), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 15), (' Occupancy', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 17), (' Administration expenses', 17), (' Occupancy', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 28), (' Occupancy expenses', 20), ('Rent', 15), (' Occupancy', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 32), (' Occupancy expenses', 26), ('Rent', 18), (' Occupancy', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Rental expenses', 25), (' Administration expenses', 24), (' Occupancy expenses', 18), ('Rent', 11), (' Occupancy', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Other income', 42), ('other operating', 17), ('Other revenue', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Other income', 36), ('other operating', 30), ('Other revenue', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('other operating', 31), ('Other revenue', 24), (' Other income', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Other income', 33), ('other operating', 31), ('Other revenue', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Other income', 35), ('other operating', 30), ('Other revenue', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('other operating', 48), (' Other income', 40), ('Other revenue', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('other operating', 24), (' Other income', 24), ('Other revenue', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' Other income', 42), ('other operating', 39), ('Other revenue', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Other income', 29), ('other operating', 26), ('Other revenue', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 26255.0, 'line_item_label': ['Other income'], 'note_numbers': ['7'], 'line_item_value': [26255.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Other income', 42), ('other operating', 17), ('Other revenue', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Other income', 36), ('other operating', 30), ('Other revenue', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('other operating', 31), ('Other revenue', 24), (' Other income', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' Other income', 33), ('other operating', 31), ('Other revenue', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' Other income', 35), ('other operating', 30), ('Other revenue', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('other operating', 48), (' Other income', 40), ('Other revenue', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('other operating', 24), (' Other income', 24), ('Other revenue', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' Other income', 42), ('other operating', 39), ('Other revenue', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Other income', 29), ('other operating', 26), ('Other revenue', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 1967.0, 'line_item_label': ['Other income'], 'note_numbers': ['7'], 'line_item_value': [1967.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('finance income', 96), ('Finance income', 96), (' Finance income and costs', 71), (' Finance income and finance costs', 63), (' Net finance costs', 57), ('other income', 42), (' Interest revenue', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Finance income and costs', 57), (' Net finance costs', 55), ('finance income', 54), ('Finance income', 54), (' Finance income and finance costs', 48), (' Interest revenue', 34), ('other income', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Net finance costs', 75), (' Finance income and costs', 58), ('finance income', 55), ('Finance income', 55), (' Finance income and finance costs', 49), ('other income', 36), (' Interest revenue', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), (' Interest revenue', 27), ('other income', 24), ('finance income', 18), ('Finance income', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('other income', 33), (' Net finance costs', 28), (' Finance income and costs', 26), (' Finance income and finance costs', 26), (' Interest revenue', 25), ('finance income', 16), ('Finance income', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('other income', 56), (' Net finance costs', 42), (' Finance income and costs', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 32), (' Interest revenue', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('other income', 35), (' Finance income and finance costs', 35), (' Finance income and costs', 33), (' Net finance costs', 30), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' Net finance costs', 41), ('other income', 40), (' Finance income and costs', 35), (' Finance income and finance costs', 30), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 24), ('finance income', 23), ('Finance income', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('other income', 42), (' Net finance costs', 39), (' Finance income and costs', 35), (' Finance income and finance costs', 32), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 29), (' Net finance costs', 27), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': 96, 'value': 26968.0, 'line_item_label': ['Other income', 'Financial income'], 'note_numbers': ['7', '9'], 'line_item_value': [26255.0, 713.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('finance income', 96), ('Finance income', 96), (' Finance income and costs', 71), (' Finance income and finance costs', 63), (' Net finance costs', 57), ('other income', 42), (' Interest revenue', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Finance income and costs', 57), (' Net finance costs', 55), ('finance income', 54), ('Finance income', 54), (' Finance income and finance costs', 48), (' Interest revenue', 34), ('other income', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' Net finance costs', 75), (' Finance income and costs', 58), ('finance income', 55), ('Finance income', 55), (' Finance income and finance costs', 49), ('other income', 36), (' Interest revenue', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), (' Interest revenue', 27), ('other income', 24), ('finance income', 18), ('Finance income', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('other income', 33), (' Net finance costs', 28), (' Finance income and costs', 26), (' Finance income and finance costs', 26), (' Interest revenue', 25), ('finance income', 16), ('Finance income', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('other income', 56), (' Net finance costs', 42), (' Finance income and costs', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 32), (' Interest revenue', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('other income', 35), (' Finance income and finance costs', 35), (' Finance income and costs', 33), (' Net finance costs', 30), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' Net finance costs', 41), ('other income', 40), (' Finance income and costs', 35), (' Finance income and finance costs', 30), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 24), ('finance income', 23), ('Finance income', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('other income', 42), (' Net finance costs', 39), (' Finance income and costs', 35), (' Finance income and finance costs', 32), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 29), (' Net finance costs', 27), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': 96, 'value': 7901.0, 'line_item_label': ['Other income', 'Financial income'], 'note_numbers': ['7', '9'], 'line_item_value': [1967.0, 5934.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), ('finance cost', 50), ('finance costs', 50), (' finance expenses', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost', 64), ('finance costs', 64), (' net finance costs ', 55)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' finance expenses', 87), (' net finance costs ', 75), ('finance cost', 57), ('finance costs', 57)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' net finance costs ', 42), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 25), ('finance cost', 23), ('finance costs', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 27), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 87, 'value': -11147.0, 'line_item_label': ['Financial expenses', 'Net financing expense'], 'note_numbers': ['10', nan], 'line_item_value': [-5930.0, -5217.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), ('finance cost', 50), ('finance costs', 50), (' finance expenses', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost', 64), ('finance costs', 64), (' net finance costs ', 55)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' finance expenses', 87), (' net finance costs ', 75), ('finance cost', 57), ('finance costs', 57)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' net finance costs ', 42), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 25), ('finance cost', 23), ('finance costs', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 27), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 87, 'value': -8470.0, 'line_item_label': ['Financial expenses', 'Net financing expense'], 'note_numbers': ['10', nan], 'line_item_value': [-7202.0, -1268.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none interest on financial liabilities measured at am ortised cost , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), (' Interest accrued on lease liabilities', 69), (' Interest accrued on loans', 68), ('Interest expenses', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 65), ('  Other interest expense', 62), ('bank facilities', 60), (' Lease interest expense', 60), ('loan', 50), ('debenture', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 48), (' Lease liabilities interest expense', 48), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), ('cash credit', 45), (' Discount unwind on the provision for asset retirement obligation', 43), ('borrowings', 33), ('debt', 25), ('bonds', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange loss , res_fuzz_match = [('loan', 50), ('debt', 50), ('bonds', 50), ('interest', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), ('Interest expenses', 47), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest accrued on loans', 42), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('bank facilities', 40), ('debenture', 38), ('cash credit', 36), ('borrowings', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none interest on financial liabilities measured at am ortised cost , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), (' Interest accrued on lease liabilities', 69), (' Interest accrued on loans', 68), ('Interest expenses', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 65), ('  Other interest expense', 62), ('bank facilities', 60), (' Lease interest expense', 60), ('loan', 50), ('debenture', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 48), (' Lease liabilities interest expense', 48), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), ('cash credit', 45), (' Discount unwind on the provision for asset retirement obligation', 43), ('borrowings', 33), ('debt', 25), ('bonds', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange loss , res_fuzz_match = [('loan', 50), ('debt', 50), ('bonds', 50), ('interest', 50), (' Lease interest expense', 50), ('  Other interest expense', 48), ('Interest expenses', 47), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest accrued on loans', 42), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('bank facilities', 40), ('debenture', 38), ('cash credit', 36), ('borrowings', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [6.462, 5343.0], 'label': ['None Interest on financial liabilities measured at am ortised cost', 'None Interest on financial liabilities measured at am ortised cost'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none interest on financial liabilities measured at am ortised cost , res_fuzz_match = [('interest income', 79)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange loss , res_fuzz_match = [('interest income', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none interest on financial liabilities measured at am ortised cost , res_fuzz_match = [('interest income', 79)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange loss , res_fuzz_match = [('interest income', 43)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense , res_fuzz_match = [('Interest expenses', 67), ('  Other interest expense', 62), (' Lease interest expense', 60), ('cash credit', 55), (' Interest expense on financial liabilities using the effective interest rate method - other', 54), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), (' Lease liabilities interest expense', 54), ('debt', 50), ('interest', 50), (' Interest on leases', 46), (' Discount unwind on the provision for asset retirement obligation', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), ('debenture', 38), (' Interest accrued on lease liabilities', 38), (' Interest accrued on loans', 37), ('borrowings', 33), ('bank facilities', 30), ('loan', 25), ('bonds', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods , res_fuzz_match = [('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 49), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest accrued on loans', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 41), ('interest', 38), ('  Other interest expense', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), (' Lease liabilities interest expense', 37), ('cash credit', 36), (' Lease interest expense', 35), ('borrowings', 33), ('Interest expenses', 33), ('bank facilities', 30), ('loan', 25), ('debt', 25), ('debenture', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense , res_fuzz_match = [('Interest expenses', 67), ('  Other interest expense', 62), (' Lease interest expense', 60), ('cash credit', 55), (' Interest expense on financial liabilities using the effective interest rate method - other', 54), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), (' Lease liabilities interest expense', 54), ('debt', 50), ('interest', 50), (' Interest on leases', 46), (' Discount unwind on the provision for asset retirement obligation', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), ('debenture', 38), (' Interest accrued on lease liabilities', 38), (' Interest accrued on loans', 37), ('borrowings', 33), ('bank facilities', 30), ('loan', 25), ('bonds', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods , res_fuzz_match = [('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 49), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest accrued on loans', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 41), ('interest', 38), ('  Other interest expense', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), (' Lease liabilities interest expense', 37), ('cash credit', 36), (' Lease interest expense', 35), ('borrowings', 33), ('Interest expenses', 33), ('bank facilities', 30), ('loan', 25), ('debt', 25), ('debenture', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense , res_fuzz_match = [('interest income', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods , res_fuzz_match = [('interest income', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense , res_fuzz_match = [('interest income', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods , res_fuzz_match = [('interest income', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), ('finance cost', 50), ('finance costs', 50), (' finance expenses', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost', 64), ('finance costs', 64), (' net finance costs ', 55)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' finance expenses', 87), (' net finance costs ', 75), ('finance cost', 57), ('finance costs', 57)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' net finance costs ', 42), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 25), ('finance cost', 23), ('finance costs', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 27), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 87, 'value': -11147.0, 'line_item_label': ['Financial expenses', 'Net financing expense'], 'note_numbers': ['10', nan], 'line_item_value': [-5930.0, -5217.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), ('finance cost', 50), ('finance costs', 50), (' finance expenses', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost', 64), ('finance costs', 64), (' net finance costs ', 55)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' finance expenses', 87), (' net finance costs ', 75), ('finance cost', 57), ('finance costs', 57)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' net finance costs ', 42), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 25), ('finance cost', 23), ('finance costs', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [(' net finance costs ', 32), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [(' net finance costs ', 27), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 87, 'value': -8470.0, 'line_item_label': ['Financial expenses', 'Net financing expense'], 'note_numbers': ['10', nan], 'line_item_value': [-7202.0, -1268.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none interest on financial liabilities measured at am ortised cost , res_fuzz_match = [(' paid by customers - at amortised cost', 62), (' other', 60), (' net of tax', 57), (' other income', 55), (' share of jv income', 55), (' net foreign exchange gain', 50), (' quota lease income', 50), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' effective portion of changes in fair value of cash flow', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' margin charge income', 44), ('other revenue', 42), ('  government grants', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' dividend from other parties', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' secondment income (tw recovery)', 38), (' net ppe disposal (loss)/gain', 38), (' japan recoveries', 36), (' profit from discontinued operation', 34), (' commission revenue', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange loss , res_fuzz_match = [(' net foreign exchange gains/(losses)', 91), (' net foreign exchange (loss)/gain', 91), (' net foreign exchange gain', 83), (' net other foreign exchange (losses)/gains', 83), (' foreign exchange gain', 80), (' net of tax', 57), (' margin charge income', 56), (' effective portion of changes in fair value of cash flow', 55), (' net ppe disposal (loss)/gain', 46), (' other income', 45), (' share of jv income', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' other miscellaneous - net (loss)/gain', 42), (' other', 40), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' quota lease income', 38), (' commission revenue', 36), (' insurance proceeds', 36), (' net (loss)/profit on disposal of non-current assets', 34), (' profit from discontinued operation', 33), (' sundry income', 33), (' dividend from other parties', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none interest on financial liabilities measured at am ortised cost , res_fuzz_match = [(' paid by customers - at amortised cost', 62), (' other', 60), (' net of tax', 57), (' other income', 55), (' share of jv income', 55), (' net foreign exchange gain', 50), (' quota lease income', 50), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' effective portion of changes in fair value of cash flow', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' margin charge income', 44), ('other revenue', 42), ('  government grants', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' dividend from other parties', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' secondment income (tw recovery)', 38), (' net ppe disposal (loss)/gain', 38), (' japan recoveries', 36), (' profit from discontinued operation', 34), (' commission revenue', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange loss , res_fuzz_match = [(' net foreign exchange gains/(losses)', 91), (' net foreign exchange (loss)/gain', 91), (' net foreign exchange gain', 83), (' net other foreign exchange (losses)/gains', 83), (' foreign exchange gain', 80), (' net of tax', 57), (' margin charge income', 56), (' effective portion of changes in fair value of cash flow', 55), (' net ppe disposal (loss)/gain', 46), (' other income', 45), (' share of jv income', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' other miscellaneous - net (loss)/gain', 42), (' other', 40), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' quota lease income', 38), (' commission revenue', 36), (' insurance proceeds', 36), (' net (loss)/profit on disposal of non-current assets', 34), (' profit from discontinued operation', 33), (' sundry income', 33), (' dividend from other parties', 32)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': [91, 91], 'value': [0.0, 0.0], 'label': ['None Net foreign exchange loss', 'None Net foreign exchange loss'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense , res_fuzz_match = [(' net of tax', 57), (' commission revenue', 50), (' net other foreign exchange (losses)/gains', 46), (' profit from discontinued operation', 43), (' secondment income (tw recovery)', 43), ('other revenue', 42), (' net foreign exchange gain', 42), (' paid by customers - at amortised cost', 42), (' net foreign exchange (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' other', 40), (' dividend from other parties', 38), (' effective portion of changes in fair value of cash flow', 38), (' net foreign exchange gains/(losses)', 38), (' other miscellaneous - net (loss)/gain', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' other income', 36), (' share of jv income', 36), (' japan recoveries', 36), ('  government grants', 33), (' margin charge income', 33), (' sundry income', 33), (' net ppe disposal (loss)/gain', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods , res_fuzz_match = [(' net of tax', 57), (' insurance proceeds', 55), (' japan recoveries', 50), (' quota lease income', 50), (' paid by customers - at amortised cost', 46), (' other income', 45), (' dividend from other parties', 44), (' secondment income (tw recovery)', 43), (' sundry income', 42), (' profit from discontinued operation', 41), (' other', 40), (' net other foreign exchange (losses)/gains', 40), (' margin charge income', 39), (' net foreign exchange gain', 38), (' net foreign exchange gains/(losses)', 38), (' net foreign exchange (loss)/gain', 38), (' net ppe disposal (loss)/gain', 38), (' commission revenue', 36), (' effective portion of changes in fair value of cash flow', 36), (' share of jv income', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' foreign exchange gain', 35), (' other miscellaneous - net (loss)/gain', 34), ('other revenue', 33), ('  government grants', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense , res_fuzz_match = [(' net of tax', 57), (' commission revenue', 50), (' net other foreign exchange (losses)/gains', 46), (' profit from discontinued operation', 43), (' secondment income (tw recovery)', 43), ('other revenue', 42), (' net foreign exchange gain', 42), (' paid by customers - at amortised cost', 42), (' net foreign exchange (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' other', 40), (' dividend from other parties', 38), (' effective portion of changes in fair value of cash flow', 38), (' net foreign exchange gains/(losses)', 38), (' other miscellaneous - net (loss)/gain', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' other income', 36), (' share of jv income', 36), (' japan recoveries', 36), ('  government grants', 33), (' margin charge income', 33), (' sundry income', 33), (' net ppe disposal (loss)/gain', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods , res_fuzz_match = [(' net of tax', 57), (' insurance proceeds', 55), (' japan recoveries', 50), (' quota lease income', 50), (' paid by customers - at amortised cost', 46), (' other income', 45), (' dividend from other parties', 44), (' secondment income (tw recovery)', 43), (' sundry income', 42), (' profit from discontinued operation', 41), (' other', 40), (' net other foreign exchange (losses)/gains', 40), (' margin charge income', 39), (' net foreign exchange gain', 38), (' net foreign exchange gains/(losses)', 38), (' net foreign exchange (loss)/gain', 38), (' net ppe disposal (loss)/gain', 38), (' commission revenue', 36), (' effective portion of changes in fair value of cash flow', 36), (' share of jv income', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' foreign exchange gain', 35), (' other miscellaneous - net (loss)/gain', 34), ('other revenue', 33), ('  government grants', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('NULL', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('NULL', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' income tax benefit', 53), (' income tax benefit/(expense)', 49), (' income tax expense', 48), (' income tax', 45), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 30), (' tax (expense)/benefit', 26), ('earlier year', 24), ('provision for taxation previous year', 19), ('deferred tax', 18), ('current tax', 17), ('prior year ', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit/(expense)', 53), (' tax (expense)/benefit', 50), (' income tax benefit', 39), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('earlier year', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 26), ('prior year ', 25), ('provision for taxation previous year', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' income tax expense', 73), (' income tax benefit/(expense)', 59), (' income tax benefit', 47), (' tax (expense)/benefit', 46), (' income tax', 38), ('amount transferred to retained earnings', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 31), ('provision for taxation previous year', 30), ('prior year ', 30), ('current tax', 29), ('earlier year', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('provision for taxation previous year', 55), (' income tax benefit/(expense)', 48), (' income tax benefit', 46), ('deferred tax', 45), (' tax (expense)/benefit', 45), ('current tax', 42), (' income tax expense', 42), ('minimum alternate tax credit entitlement', 37), ('earlier year', 35), ('amount transferred to retained earnings', 33), (' income tax', 32), ('prior year ', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('provision for taxation previous year', 46), ('amount transferred to retained earnings', 37), ('minimum alternate tax credit entitlement', 35), ('earlier year', 33), (' tax (expense)/benefit', 33), ('prior year ', 31), (' income tax benefit/(expense)', 30), ('current tax', 27), (' income tax benefit', 27), (' income tax expense', 25), (' income tax', 24), ('deferred tax', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' income tax expense', 55), (' income tax benefit/(expense)', 46), (' income tax benefit', 44), ('provision for taxation previous year', 42), (' income tax', 38), ('minimum alternate tax credit entitlement', 37), ('prior year ', 37), ('amount transferred to retained earnings', 36), ('current tax', 31), ('earlier year', 30), (' tax (expense)/benefit', 30), ('deferred tax', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' income tax benefit/(expense)', 43), ('amount transferred to retained earnings', 41), (' income tax expense', 39), ('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax benefit', 32), (' tax (expense)/benefit', 29), (' income tax', 27), ('current tax', 26), ('prior year ', 26), ('earlier year', 25), ('deferred tax', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('provision for taxation previous year', 38), ('prior year ', 34), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), (' income tax expense', 29), (' income tax benefit', 28), ('current tax', 27), (' tax (expense)/benefit', 27), ('earlier year', 26), (' income tax benefit/(expense)', 23), ('deferred tax', 21), (' income tax', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('amount transferred to retained earnings', 45), ('provision for taxation previous year', 42), (' income tax benefit/(expense)', 39), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 31), (' income tax expense', 31), ('deferred tax', 28), ('prior year ', 24), ('earlier year', 23), (' income tax', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax expense', 46), (' income tax benefit', 41), (' income tax benefit/(expense)', 40), ('prior year ', 39), ('earlier year', 38), ('amount transferred to retained earnings', 35), ('minimum alternate tax credit entitlement', 33), (' income tax', 32), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('provision for taxation previous year', 38), (' income tax benefit/(expense)', 38), ('minimum alternate tax credit entitlement', 35), ('amount transferred to retained earnings', 34), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 29), ('earlier year', 26), ('prior year ', 24), ('current tax', 21), (' income tax', 21), ('deferred tax', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -15940.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['11'], 'line_item_value': [-15940.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' income tax benefit', 53), (' income tax benefit/(expense)', 49), (' income tax expense', 48), (' income tax', 45), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 30), (' tax (expense)/benefit', 26), ('earlier year', 24), ('provision for taxation previous year', 19), ('deferred tax', 18), ('current tax', 17), ('prior year ', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit/(expense)', 53), (' tax (expense)/benefit', 50), (' income tax benefit', 39), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('earlier year', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 26), ('prior year ', 25), ('provision for taxation previous year', 23)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [(' income tax expense', 73), (' income tax benefit/(expense)', 59), (' income tax benefit', 47), (' tax (expense)/benefit', 46), (' income tax', 38), ('amount transferred to retained earnings', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 31), ('provision for taxation previous year', 30), ('prior year ', 30), ('current tax', 29), ('earlier year', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('provision for taxation previous year', 55), (' income tax benefit/(expense)', 48), (' income tax benefit', 46), ('deferred tax', 45), (' tax (expense)/benefit', 45), ('current tax', 42), (' income tax expense', 42), ('minimum alternate tax credit entitlement', 37), ('earlier year', 35), ('amount transferred to retained earnings', 33), (' income tax', 32), ('prior year ', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('provision for taxation previous year', 46), ('amount transferred to retained earnings', 37), ('minimum alternate tax credit entitlement', 35), ('earlier year', 33), (' tax (expense)/benefit', 33), ('prior year ', 31), (' income tax benefit/(expense)', 30), ('current tax', 27), (' income tax benefit', 27), (' income tax expense', 25), (' income tax', 24), ('deferred tax', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [(' income tax expense', 55), (' income tax benefit/(expense)', 46), (' income tax benefit', 44), ('provision for taxation previous year', 42), (' income tax', 38), ('minimum alternate tax credit entitlement', 37), ('prior year ', 37), ('amount transferred to retained earnings', 36), ('current tax', 31), ('earlier year', 30), (' tax (expense)/benefit', 30), ('deferred tax', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [(' income tax benefit/(expense)', 43), ('amount transferred to retained earnings', 41), (' income tax expense', 39), ('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax benefit', 32), (' tax (expense)/benefit', 29), (' income tax', 27), ('current tax', 26), ('prior year ', 26), ('earlier year', 25), ('deferred tax', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('provision for taxation previous year', 38), ('prior year ', 34), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), (' income tax expense', 29), (' income tax benefit', 28), ('current tax', 27), (' tax (expense)/benefit', 27), ('earlier year', 26), (' income tax benefit/(expense)', 23), ('deferred tax', 21), (' income tax', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('amount transferred to retained earnings', 45), ('provision for taxation previous year', 42), (' income tax benefit/(expense)', 39), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), ('current tax', 31), (' income tax expense', 31), ('deferred tax', 28), ('prior year ', 24), ('earlier year', 23), (' income tax', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax expense', 46), (' income tax benefit', 41), (' income tax benefit/(expense)', 40), ('prior year ', 39), ('earlier year', 38), ('amount transferred to retained earnings', 35), ('minimum alternate tax credit entitlement', 33), (' income tax', 32), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('provision for taxation previous year', 38), (' income tax benefit/(expense)', 38), ('minimum alternate tax credit entitlement', 35), ('amount transferred to retained earnings', 34), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 29), ('earlier year', 26), ('prior year ', 24), ('current tax', 21), (' income tax', 21), ('deferred tax', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -3577.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['11'], 'line_item_value': [-3577.0]}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense nan , res_fuzz_match = [('income tax expense', 75), (' total income tax expense / (benefit)', 69), (' income tax expense on continuing operations', 68), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total tax (expense)/benefit in income statement', 54), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods nan , res_fuzz_match = [('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax origination and reversal of temporary nan , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 43), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax adjustment for tax of prior periods nan , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax total tax expense nan , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 71), (' total income tax expense / (benefit)', 71), (' income tax expense on continuing operations', 62), (' current income tax', 41), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate profit before tax from continuing operations nan , res_fuzz_match = [(' income tax expense on continuing operations', 66), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate tax using the company's tax rate nan , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 50), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 47)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of expenses nan , res_fuzz_match = [(' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), ('income tax expense', 56), (' deferred income tax', 40), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of r&d incentive nan , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 57), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 48), (' current income tax', 47), ('income tax expense', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of adjustment for prior years nan , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of for tax rates nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 48), (' current income tax', 47), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of foreign income tax offset nan , res_fuzz_match = [(' current income tax', 76), (' deferred income tax', 73), ('income tax expense', 69), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense / (benefit)', 53), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of others nan , res_fuzz_match = [(' income tax expense on continuing operations', 50), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 35), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of total nan , res_fuzz_match = [(' income tax expense on continuing operations', 50), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 38), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of tax receivable/payable) nan , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 44), (' income tax expense on continuing operations', 39), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of nan as at , res_fuzz_match = [('income tax expense', 58), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' income tax expense on continuing operations', 57), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 57), (' deferred income tax', 43), (' current income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary property, plant and 10.420 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' current income tax', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 39), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary blackhole 4145 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' current income tax', 29), (' total tax (expense)/benefit in income statement', 28), ('income tax expense', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary intangible assets (2,452) , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 6300 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' deferred income tax', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' income tax expense on continuing operations', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary doubtful debts 6 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' income tax expense on continuing operations', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary operating leases 12071 , res_fuzz_match = [(' income tax expense on continuing operations', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary provisions 24.244 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' total income tax expense / (benefit)', 31), (' deferred income tax', 27), (' current income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary other (1,818) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' deferred income tax', 34), (' current income tax', 33), ('income tax expense', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan as at , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' deferred income tax', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' income tax expense on continuing operations', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 31 march 2021 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), (' income tax expense on continuing operations', 37), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), ('income tax expense', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary property, plant and equipment 11190 , res_fuzz_match = [(' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' current income tax', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary blackhole expenditure nan , res_fuzz_match = [('income tax expense', 50), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary intangible assets 968 , res_fuzz_match = [(' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary foreign currency (187) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), (' income tax expense on continuing operations', 38), (' deferred income tax', 33), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 6430 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary doubtful debts 33 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 44), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary operating leases 4804 , res_fuzz_match = [(' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 25228 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary other (2,043) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' total income tax expense / (benefit)', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 46423 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = deferred tax balances are presented in the of financial position as follows: total nan , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud tax assets nan , res_fuzz_match = [(' income tax expense on continuing operations', 47), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' current income tax', 35), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud deferred tax liabilities nan , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' current income tax', 35), (' income tax expense on continuing operations', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense nan , res_fuzz_match = [('income tax expense', 75), (' total income tax expense / (benefit)', 69), (' income tax expense on continuing operations', 68), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total tax (expense)/benefit in income statement', 54), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods nan , res_fuzz_match = [('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax origination and reversal of temporary nan , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 43), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax adjustment for tax of prior periods nan , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax total tax expense nan , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 71), (' total income tax expense / (benefit)', 71), (' income tax expense on continuing operations', 62), (' current income tax', 41), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate profit before tax from continuing operations nan , res_fuzz_match = [(' income tax expense on continuing operations', 66), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate tax using the company's tax rate nan , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 50), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 47)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of expenses nan , res_fuzz_match = [(' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), ('income tax expense', 56), (' deferred income tax', 40), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of r&d incentive nan , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 57), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 48), (' current income tax', 47), ('income tax expense', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of adjustment for prior years nan , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of for tax rates nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 48), (' current income tax', 47), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of foreign income tax offset nan , res_fuzz_match = [(' current income tax', 76), (' deferred income tax', 73), ('income tax expense', 69), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense / (benefit)', 53), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of others nan , res_fuzz_match = [(' income tax expense on continuing operations', 50), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 35), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of total nan , res_fuzz_match = [(' income tax expense on continuing operations', 50), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 38), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of tax receivable/payable) nan , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 44), (' income tax expense on continuing operations', 39), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of nan as at , res_fuzz_match = [('income tax expense', 58), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' income tax expense on continuing operations', 57), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 57), (' deferred income tax', 43), (' current income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary property, plant and 10.420 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' current income tax', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 39), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary blackhole 4145 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' current income tax', 29), (' total tax (expense)/benefit in income statement', 28), ('income tax expense', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary intangible assets (2,452) , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 6300 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' deferred income tax', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' income tax expense on continuing operations', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary doubtful debts 6 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' income tax expense on continuing operations', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary operating leases 12071 , res_fuzz_match = [(' income tax expense on continuing operations', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary provisions 24.244 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' total income tax expense / (benefit)', 31), (' deferred income tax', 27), (' current income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary other (1,818) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' deferred income tax', 34), (' current income tax', 33), ('income tax expense', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan as at , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' deferred income tax', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' income tax expense on continuing operations', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 31 march 2021 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), (' income tax expense on continuing operations', 37), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), ('income tax expense', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary property, plant and equipment 11190 , res_fuzz_match = [(' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' current income tax', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary blackhole expenditure nan , res_fuzz_match = [('income tax expense', 50), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary intangible assets 968 , res_fuzz_match = [(' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary foreign currency (187) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), (' income tax expense on continuing operations', 38), (' deferred income tax', 33), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 6430 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary doubtful debts 33 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 44), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary operating leases 4804 , res_fuzz_match = [(' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 25228 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary other (2,043) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' total income tax expense / (benefit)', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 46423 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = deferred tax balances are presented in the of financial position as follows: total nan , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud tax assets nan , res_fuzz_match = [(' income tax expense on continuing operations', 47), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' current income tax', 35), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud deferred tax liabilities nan , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' current income tax', 35), (' income tax expense on continuing operations', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax current expense nan , res_fuzz_match = [('income tax expense', 75), (' total income tax expense / (benefit)', 69), (' income tax expense on continuing operations', 68), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total tax (expense)/benefit in income statement', 54), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = income tax adjustment for tax of prior periods nan , res_fuzz_match = [('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax origination and reversal of temporary nan , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 43), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 29)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax adjustment for tax of prior periods nan , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax total tax expense nan , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 71), (' total income tax expense / (benefit)', 71), (' income tax expense on continuing operations', 62), (' current income tax', 41), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate profit before tax from continuing operations nan , res_fuzz_match = [(' income tax expense on continuing operations', 66), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = of tax rate tax using the company's tax rate nan , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 50), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 47)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of expenses nan , res_fuzz_match = [(' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), ('income tax expense', 56), (' deferred income tax', 40), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of r&d incentive nan , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 57), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 48), (' current income tax', 47), ('income tax expense', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of adjustment for prior years nan , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of for tax rates nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 48), (' current income tax', 47), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of foreign income tax offset nan , res_fuzz_match = [(' current income tax', 76), (' deferred income tax', 73), ('income tax expense', 69), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense / (benefit)', 53), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of others nan , res_fuzz_match = [(' income tax expense on continuing operations', 50), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 35), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of total nan , res_fuzz_match = [(' income tax expense on continuing operations', 50), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 38), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of tax receivable/payable) nan , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 44), (' income tax expense on continuing operations', 39), (' current income tax', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax effect of nan as at , res_fuzz_match = [('income tax expense', 58), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' income tax expense on continuing operations', 57), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 57), (' deferred income tax', 43), (' current income tax', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary property, plant and 10.420 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' current income tax', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 39), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary blackhole 4145 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' current income tax', 29), (' total tax (expense)/benefit in income statement', 28), ('income tax expense', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary intangible assets (2,452) , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 6300 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' deferred income tax', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' income tax expense on continuing operations', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary doubtful debts 6 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' income tax expense on continuing operations', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary operating leases 12071 , res_fuzz_match = [(' income tax expense on continuing operations', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary provisions 24.244 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' total income tax expense / (benefit)', 31), (' deferred income tax', 27), (' current income tax', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary other (1,818) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' deferred income tax', 34), (' current income tax', 33), ('income tax expense', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan as at , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' deferred income tax', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' income tax expense on continuing operations', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = temporary nan 31 march 2021 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), (' income tax expense on continuing operations', 37), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), ('income tax expense', 26)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary property, plant and equipment 11190 , res_fuzz_match = [(' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' current income tax', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary blackhole expenditure nan , res_fuzz_match = [('income tax expense', 50), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary intangible assets 968 , res_fuzz_match = [(' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary foreign currency (187) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), (' income tax expense on continuing operations', 38), (' deferred income tax', 33), ('income tax expense', 31)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 6430 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary doubtful debts 33 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 44), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary operating leases 4804 , res_fuzz_match = [(' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 25228 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary other (2,043) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' total income tax expense / (benefit)', 35)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = tax assets and temporary nan 46423 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = deferred tax balances are presented in the of financial position as follows: total nan , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud tax assets nan , res_fuzz_match = [(' income tax expense on continuing operations', 47), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' current income tax', 35), (' deferred income tax', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows = in of aud deferred tax liabilities nan , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' current income tax', 35), (' income tax expense on continuing operations', 33)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('prior period', 32), ('exceptional', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('prior period', 31), ('exceptional', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('exceptional', 43), ('prior period', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('prior period', 26), ('exceptional', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('prior period', 35), ('exceptional', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('prior period', 27), ('exceptional', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('prior period', 23), ('exceptional', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('prior period', 32), ('exceptional', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('prior period', 31), ('exceptional', 30)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('exceptional', 43), ('prior period', 28)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('prior period', 26), ('exceptional', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('prior period', 35), ('exceptional', 24)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('prior period', 27), ('exceptional', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 17)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('prior period', 23), ('exceptional', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 12:17:24+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 12:17:24+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('NULL', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 12:17:24+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 12:17:24+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = net financing expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/lloss) before tax , res_fuzz_match = [('NULL', 15)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) , res_fuzz_match = [('NULL', 19)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) (amounts that will be recycled , res_fuzz_match = [('NULL', 11)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = through profit or loss) , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = foreign currency translation differences for foreign operations , res_fuzz_match = [('NULL', 8)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year attributable to the of the company , res_fuzz_match = [('NULL', 9)]
2023-07-31 12:17:24+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

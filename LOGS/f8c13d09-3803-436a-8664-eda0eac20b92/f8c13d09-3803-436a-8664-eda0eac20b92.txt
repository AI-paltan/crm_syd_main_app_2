2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-31 11:25:57+0530 - sLogger - DEBUG - process_main_pages started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: list index out of range
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CCF
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: 'year_list'
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: list index out of range
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CPL
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: 'year_list'
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: list index out of range
2023-07-31 11:25:57+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: 'headers'
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CCF
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: 'headers'
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CCF notes_number_processing
2023-07-31 11:25:57+0530 - sLogger - ERROR - error occured: local variable 'ccf_header' referenced before assignment
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-31 11:25:57+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Loans and borrowings | [('equity and liabilities', 44), ('noncurrentliabilities', 37), ('current assets', 36), ('noncurrent assets', 36), ('current liabilities', 34), ('noncurrent liabilities', 34), ('noncurrentassets', 33), ('equityandliabilities', 31), ('liabilities', 29), ('currentliabilities', 25), ('currentassets', 22), ('equity liabilities', 21), ('assets', 10), ('equityliabilities', 9), ('equity', 0)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current assets | score 28
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentassets | score 28
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent assets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent liabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current assets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current liabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity and liabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity | score 15
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equityandliabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 37
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equityandliabilities | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-07-31 11:25:57+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-07-31 11:25:57+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-31 11:25:57+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 11:25:57+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: set_sections_subsections  CCF
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: 'value'
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: 'value'
2023-07-31 11:26:01+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash asset', 64), ('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13194828.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [13194828.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash asset', 64), ('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 17144081.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [17144081.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none cash on hand cash on hand nan nan , res_fuzz_match = [('cash on hand', 100), (' cash on hand and at bank', 83), (' cash at bank', 78), (' cash at bank and on hand', 72), (' cash and cash equivalents', 71), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none bank balances bank balances nan nan , res_fuzz_match = [(' cash at bank', 67), (' cash at bank and on hand', 67), ('cash on hand', 56), (' cash on hand and at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash and cash equivalents', 43), (' short term deposits', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows nan , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash at bank and on hand', 61), (' cash on hand and at bank', 61), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none cash on hand cash on hand nan nan , res_fuzz_match = [('cash on hand', 100), (' cash on hand and at bank', 83), (' cash at bank', 78), (' cash at bank and on hand', 72), (' cash and cash equivalents', 71), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none bank balances bank balances nan nan , res_fuzz_match = [(' cash at bank', 67), (' cash at bank and on hand', 67), ('cash on hand', 56), (' cash on hand and at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash and cash equivalents', 43), (' short term deposits', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows nan , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash at bank and on hand', 61), (' cash on hand and at bank', 61), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 5], 'score': [100, 100, 100, 100], 'value': [0.0, 17144081.0, 1588.0, 13194828.0], 'label': ['None Cash on hand Cash on hand nan nan', 'None Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows nan', 'None Cash on hand Cash on hand nan nan', 'None Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 111489925.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [111489925.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 119512569.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [119512569.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = vehicles at cost , res_fuzz_match = [(' finished goods at cost', 55), (' stores and other consumables at cost', 55), (' provision for inventory obsolescence', 55), (' cranes - in transit', 36), (' spare parts', 30), (' finished goods', 27), (' work in progress', 27), (' finished goods', 27), (' goods in transit', 27), (' inventories', 22), ('raw materials', 20), (' raw materials', 20), (' cranes', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = vehicles at net realisable value , res_fuzz_match = [(' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' goods in transit', 42), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' stores and other consumables at cost', 32), (' finished goods at cost', 31), (' work in progress', 31), (' spare parts', 30), (' finished goods', 29), (' finished goods', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = vehicles total , res_fuzz_match = [(' provision for inventory obsolescence', 42), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' inventories', 33), (' cranes - in transit', 33), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' goods in transit', 25), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' work in progress', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts provision for obsolescence , res_fuzz_match = [(' spare parts', 100), (' provision for inventory obsolescence', 67), ('raw materials', 50), (' raw materials', 50), (' work in progress', 46), (' cranes - in transit', 46), (' finished goods', 45), (' finished goods', 45), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), (' cranes', 40), (' goods in transit', 33), (' inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts demonstrator units at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 57), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' cranes - in transit', 46), (' provision for inventory obsolescence', 45), (' inventories', 44), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts training vehicles at cost , res_fuzz_match = [(' spare parts', 100), (' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' stores and other consumables at cost', 52), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' provision for inventory obsolescence', 46), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts stock in transit at cost , res_fuzz_match = [(' spare parts', 100), (' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = vehicles at cost , res_fuzz_match = [(' finished goods at cost', 55), (' stores and other consumables at cost', 55), (' provision for inventory obsolescence', 55), (' cranes - in transit', 36), (' spare parts', 30), (' finished goods', 27), (' work in progress', 27), (' finished goods', 27), (' goods in transit', 27), (' inventories', 22), ('raw materials', 20), (' raw materials', 20), (' cranes', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = vehicles at net realisable value , res_fuzz_match = [(' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' goods in transit', 42), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' stores and other consumables at cost', 32), (' finished goods at cost', 31), (' work in progress', 31), (' spare parts', 30), (' finished goods', 29), (' finished goods', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = vehicles total , res_fuzz_match = [(' provision for inventory obsolescence', 42), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' inventories', 33), (' cranes - in transit', 33), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' goods in transit', 25), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' work in progress', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts provision for obsolescence , res_fuzz_match = [(' spare parts', 100), (' provision for inventory obsolescence', 67), ('raw materials', 50), (' raw materials', 50), (' work in progress', 46), (' cranes - in transit', 46), (' finished goods', 45), (' finished goods', 45), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), (' cranes', 40), (' goods in transit', 33), (' inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts demonstrator units at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 57), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' cranes - in transit', 46), (' provision for inventory obsolescence', 45), (' inventories', 44), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts training vehicles at cost , res_fuzz_match = [(' spare parts', 100), (' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' stores and other consumables at cost', 52), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' provision for inventory obsolescence', 46), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts stock in transit at cost , res_fuzz_match = [(' spare parts', 100), (' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [18689399.0, -474531.0, 18214868.0, 2052535.0, 275665.0, 46946929.0, 119512569.0, 14367964.0, -379530.0, 13988434.0, 1844631.0, 0.0, 42775001.0, 111489925.0], 'label': ['Spare parts At cost', 'Spare parts Provision for obsolescence', 'Spare parts Total', 'Spare parts Demonstrator units at cost', 'Spare parts Training vehicles at cost', 'Spare parts Stock in transit at cost', 'Spare parts Total', 'Spare parts At cost', 'Spare parts Provision for obsolescence', 'Spare parts Total', 'Spare parts Demonstrator units at cost', 'Spare parts Training vehicles at cost', 'Spare parts Stock in transit at cost', 'Spare parts Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('other financial assets', 65), ('other assets', 61), ('other current assets', 52), ('other current financial assets', 51), ('prepayments', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': 589085.0, 'line_item_label': ['Prepayments', 'Other assets'], 'note_numbers': [nan, '11'], 'line_item_value': [559696.0, 29389.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('other financial assets', 65), ('other assets', 61), ('other current assets', 52), ('other current financial assets', 51), ('prepayments', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': 1450893.0, 'line_item_label': ['Prepayments', 'Other assets'], 'note_numbers': [nan, '11'], 'line_item_value': [1427037.0, 23856.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), ('prepaid expenditure', 44), ('prepaid expense', 43), ('prepaid', 43), ('prepayments', 33), ('other prepayments', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepayments', 33), ('prepaid expense', 31), ('prepaid expenditure', 31), ('prepaid', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), ('prepayments', 33), ('other prepayments', 33), ('prepaid', 29), ('prepaid expense', 23), ('prepaid expenditure', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), ('prepaid expenditure', 44), ('prepaid expense', 43), ('prepaid', 43), ('prepayments', 33), ('other prepayments', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepayments', 33), ('prepaid expense', 31), ('prepaid expenditure', 31), ('prepaid', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), ('prepayments', 33), ('other prepayments', 33), ('prepaid', 29), ('prepaid expense', 23), ('prepaid expenditure', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['Current Bond deposits', 'Current Other', 'Current Total', 'Current Bond deposits', 'Current Other', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' biological assets', 67), (' other financial assets', 65), ('other assets', 61), ('other current assets', 52), (' other current assets', 52), (' trade and other receivables', 35), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 9], 'score': 80, 'value': 121398016.0, 'line_item_label': ['Trade and other receivables', 'Other assets', 'Intangible assets'], 'note_numbers': ['9', '11', '14'], 'line_item_value': [121289307.0, 29389.0, 79320.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' biological assets', 67), (' other financial assets', 65), ('other assets', 61), ('other current assets', 52), (' other current assets', 52), (' trade and other receivables', 35), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 24)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 9], 'score': 80, 'value': 126527517.0, 'line_item_label': ['Trade and other receivables', 'Other assets', 'Intangible assets'], 'note_numbers': ['9', '11', '14'], 'line_item_value': [126398542.0, 23856.0, 105119.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' other receivables - related party', 62), (' income tax receivable from related parties', 55), (' rental bond', 55), (' other deposits receivable - related party', 53), (' long service leave receivable', 52), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' amount receivable from controlling entity', 48), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' forward exchange contracts', 46), (' accrued interest', 43), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' accrued rebates', 36), (' lng', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [('current', 100), (' current investments', 71), (' related party disclosures', 67), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' related party receivable', 67), (' rental bond', 64), (' other deposits receivable - related party', 59), (' amount receivable from controlling entity', 58), (' accrued rebates', 55), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 48), (' interest receivable', 47), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' lng', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' other receivables - related party', 71), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 62), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 52), (' amount receivable from controlling entity', 52), (' other debtors and prepayments', 52), (' derivative contracts - fair value', 50), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' lng', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('current', 100), (' lng', 67), (' rental bond', 64), (' current investments', 64), (' bank guarantee', 46), (' accrued rebates', 45), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 39), (' derivative contracts - fair value', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' forward exchange contracts', 34), (' related party disclosures', 33), (' other receivables - related party', 33), (' related party receivable', 33), (' share of jv prepayments', 33), (' electricity derivatives at fair value', 32), (' income tax receivable from related parties', 32), (' other deposits receivable - related party', 32), (' amount receivable from controlling entity', 32), (' deposits', 29), (' interest receivable', 27), (' long service leave receivable', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' other receivables - related party', 62), (' income tax receivable from related parties', 55), (' rental bond', 55), (' other deposits receivable - related party', 53), (' long service leave receivable', 52), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' amount receivable from controlling entity', 48), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' forward exchange contracts', 46), (' accrued interest', 43), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' accrued rebates', 36), (' lng', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [('current', 100), (' current investments', 71), (' related party disclosures', 67), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' related party receivable', 67), (' rental bond', 64), (' other deposits receivable - related party', 59), (' amount receivable from controlling entity', 58), (' accrued rebates', 55), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 48), (' interest receivable', 47), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' lng', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' other receivables - related party', 71), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 62), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 52), (' amount receivable from controlling entity', 52), (' other debtors and prepayments', 52), (' derivative contracts - fair value', 50), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' lng', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('current', 100), (' lng', 67), (' rental bond', 64), (' current investments', 64), (' bank guarantee', 46), (' accrued rebates', 45), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 39), (' derivative contracts - fair value', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' forward exchange contracts', 34), (' related party disclosures', 33), (' other receivables - related party', 33), (' related party receivable', 33), (' share of jv prepayments', 33), (' electricity derivatives at fair value', 32), (' income tax receivable from related parties', 32), (' other deposits receivable - related party', 32), (' amount receivable from controlling entity', 32), (' deposits', 29), (' interest receivable', 27), (' long service leave receivable', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['Current Trade receivables Trade receivables nan nan', 'Current Amounts due from related party Amounts due from related party Amounts due from related party 20', 'Current Other receivables Other receivables nan nan', 'Current Total nan nan nan', 'Current Trade receivables Trade receivables nan nan', 'Current Amounts due from related party Amounts due from related party Amounts due from related party 20', 'Current Other receivables Other receivables nan nan', 'Current Total nan nan nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' rental bond', 82), (' current investments', 64), (' condensate', 57), (' other debtors and prepayments', 46), ('foreign exchange derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' accrued rebates', 45), (' other', 40), (' related party disclosures', 40), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' related party receivable', 39), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' interest receivable', 33), (' lng', 33), (' bank guarantee', 32), (' electricity derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' long service leave receivable', 26), (' share of jv prepayments', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), (' other', 100), (' current investments', 69), (' rental bond', 57), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' rental bond', 82), (' current investments', 64), (' condensate', 57), (' other debtors and prepayments', 46), ('foreign exchange derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' accrued rebates', 45), (' other', 40), (' related party disclosures', 40), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' related party receivable', 39), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' interest receivable', 33), (' lng', 33), (' bank guarantee', 32), (' electricity derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' long service leave receivable', 26), (' share of jv prepayments', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), (' other', 100), (' current investments', 69), (' rental bond', 57), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['Current Bond deposits', 'Current Other', 'Current Total', 'Current Bond deposits', 'Current Other', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [('other assets', 55), (' forward exchange contracts', 50), (' derivative contracts - fair value', 45), (' foreign exchange forward contracts', 45), (' other debtors and prepayments', 45), (' deposits', 43), (' condensate', 43), (' other', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), (' accrued interest', 36), (' related party disclosures', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 30), ('current', 29), (' current investments', 29), (' related party receivable', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party disclosures', 48), (' other receivables - related party', 46), ('other assets', 45), (' related party receivable', 44), (' current investments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' amount receivable from controlling entity', 39), (' other deposits receivable - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' rental bond', 36), ('foreign exchange derivatives at fair value', 35), (' long service leave receivable', 35), (' foreign exchange forward contracts', 34), (' lng', 33), (' other debtors and prepayments', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' interest receivable', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [('other assets', 55), (' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 52), (' current investments', 50), (' forward exchange contracts', 50), (' related party disclosures', 48), (' income tax receivable from related parties', 48), (' other deposits receivable - related party', 47), (' interest receivable', 47), (' other receivables - related party', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' related party receivable', 44), (' foreign exchange forward contracts', 44), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other', 40), (' long service leave receivable', 39), (' bank guarantee', 38), (' rental bond', 36), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' related party disclosures', 48), (' derivative contracts - fair value', 48), (' electricity derivatives at fair value', 45), (' rental bond', 45), (' related party receivable', 44), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 41), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' share of jv prepayments', 33), (' lng', 33), (' other deposits receivable - related party', 32), (' interest receivable', 27), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' related party disclosures', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' foreign exchange forward contracts', 38), ('other assets', 36), (' accrued interest', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' share of jv prepayments', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' current investments', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), ('other assets', 45), (' other deposits receivable - related party', 44), (' forward exchange contracts', 44), (' deposits', 43), (' condensate', 43), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' bank guarantee', 38), (' rental bond', 36), (' current investments', 36), (' income tax receivable from related parties', 33), (' long service leave receivable', 33), (' other receivables - related party', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), ('current', 29), (' accrued interest', 29), (' related party disclosures', 28), (' related party receivable', 28), (' interest receivable', 27), (' accrued rebates', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' accrued rebates', 45), (' condensate', 43), (' derivative contracts - fair value', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' accrued interest', 36), (' rental bond', 36), (' related party disclosures', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), ('current', 29), (' current investments', 29), (' interest receivable', 27), (' deposits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' long service leave receivable', 48), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' current investments', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' other deposits receivable - related party', 41), (' other', 40), (' foreign exchange forward contracts', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' lng', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 50), ('other assets', 45), (' related party disclosures', 43), (' derivative contracts - fair value', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' electricity derivatives at fair value', 41), (' other', 40), (' income tax receivable from related parties', 39), (' amount receivable from controlling entity', 39), (' other receivables - related party', 38), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 37), (' rental bond', 36), (' long service leave receivable', 35), (' foreign exchange forward contracts', 35), (' interest receivable', 33), (' lng', 33), (' other deposits receivable - related party', 32), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' related party receivable', 50), (' other receivables - related party', 46), (' amount receivable from controlling entity', 46), (' bank guarantee', 46), ('other assets', 45), (' accrued rebates', 45), ('current', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' electricity derivatives at fair value', 37), (' accrued interest', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' current investments', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' interest receivable', 40), (' long service leave receivable', 39), (' other deposits receivable - related party', 39), (' related party receivable', 39), (' related party disclosures', 38), (' other receivables - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 37), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' rental bond', 36), (' other debtors and prepayments', 35), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [('other assets', 55), (' forward exchange contracts', 50), (' derivative contracts - fair value', 45), (' foreign exchange forward contracts', 45), (' other debtors and prepayments', 45), (' deposits', 43), (' condensate', 43), (' other', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), (' accrued interest', 36), (' related party disclosures', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 30), ('current', 29), (' current investments', 29), (' related party receivable', 28)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party disclosures', 48), (' other receivables - related party', 46), ('other assets', 45), (' related party receivable', 44), (' current investments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' amount receivable from controlling entity', 39), (' other deposits receivable - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' rental bond', 36), ('foreign exchange derivatives at fair value', 35), (' long service leave receivable', 35), (' foreign exchange forward contracts', 34), (' lng', 33), (' other debtors and prepayments', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' interest receivable', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [('other assets', 55), (' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 52), (' current investments', 50), (' forward exchange contracts', 50), (' related party disclosures', 48), (' income tax receivable from related parties', 48), (' other deposits receivable - related party', 47), (' interest receivable', 47), (' other receivables - related party', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' related party receivable', 44), (' foreign exchange forward contracts', 44), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other', 40), (' long service leave receivable', 39), (' bank guarantee', 38), (' rental bond', 36), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' related party disclosures', 48), (' derivative contracts - fair value', 48), (' electricity derivatives at fair value', 45), (' rental bond', 45), (' related party receivable', 44), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 41), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' share of jv prepayments', 33), (' lng', 33), (' other deposits receivable - related party', 32), (' interest receivable', 27), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' related party disclosures', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' foreign exchange forward contracts', 38), ('other assets', 36), (' accrued interest', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' share of jv prepayments', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' current investments', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), ('other assets', 45), (' other deposits receivable - related party', 44), (' forward exchange contracts', 44), (' deposits', 43), (' condensate', 43), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' bank guarantee', 38), (' rental bond', 36), (' current investments', 36), (' income tax receivable from related parties', 33), (' long service leave receivable', 33), (' other receivables - related party', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), ('current', 29), (' accrued interest', 29), (' related party disclosures', 28), (' related party receivable', 28), (' interest receivable', 27), (' accrued rebates', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' accrued rebates', 45), (' condensate', 43), (' derivative contracts - fair value', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' accrued interest', 36), (' rental bond', 36), (' related party disclosures', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), ('current', 29), (' current investments', 29), (' interest receivable', 27), (' deposits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' long service leave receivable', 48), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' current investments', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' other deposits receivable - related party', 41), (' other', 40), (' foreign exchange forward contracts', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' lng', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 50), ('other assets', 45), (' related party disclosures', 43), (' derivative contracts - fair value', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' electricity derivatives at fair value', 41), (' other', 40), (' income tax receivable from related parties', 39), (' amount receivable from controlling entity', 39), (' other receivables - related party', 38), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 37), (' rental bond', 36), (' long service leave receivable', 35), (' foreign exchange forward contracts', 35), (' interest receivable', 33), (' lng', 33), (' other deposits receivable - related party', 32), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' related party receivable', 50), (' other receivables - related party', 46), (' amount receivable from controlling entity', 46), (' bank guarantee', 46), ('other assets', 45), (' accrued rebates', 45), ('current', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' electricity derivatives at fair value', 37), (' accrued interest', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' current investments', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' interest receivable', 40), (' long service leave receivable', 39), (' other deposits receivable - related party', 39), (' related party receivable', 39), (' related party disclosures', 38), (' other receivables - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 37), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' rental bond', 36), (' other debtors and prepayments', 35), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [190619.0, -85500.0, 105119.0, 0.0, 128219.0, 62400.0, 190619.0, 48899.0, 36601.0, 85500.0, 79320.0, 105119.0, 128219.0, -48899.0, 79320.0, 0.0, 128219.0, 62400.0, 190619.0, 48899.0, 36601.0, 85500.0, 79320.0, 105119.0], 'label': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('current assets', 38)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('current assets', 64)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('current assets', 38)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('current assets', 64)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings', 100), ('borrowings', 57), ('shortterm borrowings', 52), (' bank overdraft', 48), ('short-term debt', 34), ('shortterm debt', 34), ('short term debt', 33), (' interest bearing liabilites', 32), ('lease liabilities', 31), (' leases', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 16, 21], 'score': 100, 'value': 126919644.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings', 'Lease liabilities'], 'note_numbers': ['13', '16', '13'], 'line_item_value': [600799.0, 111234712.0, 15084133.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings', 100), ('borrowings', 57), ('shortterm borrowings', 52), (' bank overdraft', 48), ('short-term debt', 34), ('shortterm debt', 34), ('short term debt', 33), (' interest bearing liabilites', 32), ('lease liabilities', 31), (' leases', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 16, 21], 'score': 100, 'value': 156056011.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings', 'Lease liabilities'], 'note_numbers': ['13', '16', '13'], 'line_item_value': [655853.0, 140948462.0, 14451696.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' loans from related party', 62), (' lease liabilities', 55), (' secured long-term bank loans', 54), (' not later than 1 year', 53), (' leases', 50), (' not later than one year', 48), (' balance at the end of period', 43), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loans nan , res_fuzz_match = [(' secured long-term bank loans', 67), (' not later than one year', 57), ('bank borrowings', 55), (' not later than 1 year', 53), (' leases', 50), (' bank overdraft', 50), (' utilised – bank borrowings', 45), (' lease liabilities - current', 37), (' lease liabilities', 36), (' loans from related party', 33), (' balance at the end of period', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' secured long-term bank loans', 53), (' leases', 50), (' not later than one year', 47), (' not later than 1 year', 41), (' lease liabilities - current', 41), (' lease liabilities', 36), (' utilised – bank borrowings', 35), (' loans from related party', 35), (' bank overdraft', 30), (' balance at the end of period', 29), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' loans from related party', 62), (' lease liabilities', 55), (' secured long-term bank loans', 54), (' not later than 1 year', 53), (' leases', 50), (' not later than one year', 48), (' balance at the end of period', 43), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loans nan , res_fuzz_match = [(' secured long-term bank loans', 67), (' not later than one year', 57), ('bank borrowings', 55), (' not later than 1 year', 53), (' leases', 50), (' bank overdraft', 50), (' utilised – bank borrowings', 45), (' lease liabilities - current', 37), (' lease liabilities', 36), (' loans from related party', 33), (' balance at the end of period', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' secured long-term bank loans', 53), (' leases', 50), (' not later than one year', 47), (' not later than 1 year', 41), (' lease liabilities - current', 41), (' lease liabilities', 36), (' utilised – bank borrowings', 35), (' loans from related party', 35), (' bank overdraft', 30), (' balance at the end of period', 29), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 53848711.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [53848711.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 54)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' trade payables', 58), (' trade payables - other parties', 58), (' trade payables', 58), (' amounts payable to controlling entity', 54), (' other trade payables', 50), (' trade and other payables', 45), ('trade creditors', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' trade payables - other parties', 54), ('trade creditors', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 46), (' trade and other payables', 45), (' trade payables', 42), (' trade payables', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' trade and other payables', 36), (' amounts payable to controlling entity', 36), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 33), (' trade payables - other parties', 29), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('trade creditors', 79), (' other trade payables', 56), (' trade and other payables', 50), (' trade payables', 50), (' trade payables', 50), (' trade payables - other parties', 46), (' amounts payable to controlling entity', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade and other payables', 41), (' amounts payable to controlling entity', 40), (' other trade payables', 39), (' trade payables - other parties', 34), ('trade creditors', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 54)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' trade payables', 58), (' trade payables - other parties', 58), (' trade payables', 58), (' amounts payable to controlling entity', 54), (' other trade payables', 50), (' trade and other payables', 45), ('trade creditors', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' trade payables - other parties', 54), ('trade creditors', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 46), (' trade and other payables', 45), (' trade payables', 42), (' trade payables', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' trade and other payables', 36), (' amounts payable to controlling entity', 36), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 33), (' trade payables - other parties', 29), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('trade creditors', 79), (' other trade payables', 56), (' trade and other payables', 50), (' trade payables', 50), (' trade payables', 50), (' trade payables - other parties', 46), (' amounts payable to controlling entity', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade and other payables', 41), (' amounts payable to controlling entity', 40), (' other trade payables', 39), (' trade payables - other parties', 34), ('trade creditors', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 54)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' trade payables', 58), (' trade payables - other parties', 58), (' trade payables', 58), (' amounts payable to controlling entity', 54), (' other trade payables', 50), (' trade and other payables', 45), ('trade creditors', 36)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' trade payables - other parties', 54), ('trade creditors', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 46), (' trade and other payables', 45), (' trade payables', 42), (' trade payables', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' trade and other payables', 36), (' amounts payable to controlling entity', 36), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 33), (' trade payables - other parties', 29), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('trade creditors', 79), (' other trade payables', 56), (' trade and other payables', 50), (' trade payables', 50), (' trade payables', 50), (' trade payables - other parties', 46), (' amounts payable to controlling entity', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade and other payables', 41), (' amounts payable to controlling entity', 40), (' other trade payables', 39), (' trade payables - other parties', 34), ('trade creditors', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8, 16], 'score': [100, 100, 100], 'value': [7802444.0, 8166254.0, 8166254.0], 'label': ['Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 53848711.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [53848711.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('interest accrued', 64), ('accrued expenses', 58)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('interest accrued', 64), ('accrued expenses', 58)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('interest accrued', 64), ('accrued expenses', 58)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 17, 19, 22], 'score': 100, 'value': 29230893.0, 'line_item_label': ['Liabilities', 'Provisions', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '17', nan, '17'], 'line_item_value': [0.0, 28301337.0, 409556.0, 520000.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 17, 19, 22], 'score': 100, 'value': 27806347.0, 'line_item_label': ['Liabilities', 'Provisions', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '17', nan, '17'], 'line_item_value': [0.0, 26652372.0, 633975.0, 520000.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [('income tax (refundable)/payable ', 45), (' provision for income tax', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [('income tax (refundable)/payable ', 45), (' provision for income tax', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 35)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' foreign exchange contract liability', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' customer deposits', 21), ('provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 17, 18, 19, 22, 23], 'score': 100, 'value': 98754244.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Employee benefits'], 'note_numbers': ['15', '17', '18', nan, '17', '18'], 'line_item_value': [66271138.0, 28301337.0, 2213375.0, 409556.0, 520000.0, 1038838.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' foreign exchange contract liability', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' customer deposits', 21), ('provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 17, 18, 19, 22, 23], 'score': 100, 'value': 84845084.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Employee benefits'], 'note_numbers': ['15', '17', '18', nan, '17', '18'], 'line_item_value': [53848711.0, 26652372.0, 2512347.0, 633975.0, 520000.0, 677679.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' gst payable and accruals', 59), (' share of joint venture payables', 56), (' other related parties', 53), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' gst liabilities', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' gst', 33), (' provision for associate funding', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 76), (' derivative contracts - at fair value', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 57), (' ultimate parent entity', 53), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 54), (' ultimate parent entity', 53), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' other creditors', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' contract liabilites - current', 48), (' share of joint venture payables', 48), (' employee benefits - payroll', 47), ('other creditors and accruals', 46), (' arising from service contracts', 44), (' employee benefits - current', 43), (' secured long-term bank loans', 42), (' provision for associate funding', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' total current employee benefits', 43), ('other creditors and accruals', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' gst liabilities', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' restructuring', 30), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' employee benefits - current', 26), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 59), (' share of joint venture payables', 52), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' other related parties', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' forward exchange contracts', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' make good provisions', 25), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 68), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 52), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' provisions - current', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' loans from related party', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' provision for associate funding', 27), (' employee benefits - current', 26), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' total current employee benefits', 52), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' gst payables', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' gst payable and accruals', 59), (' share of joint venture payables', 56), (' other related parties', 53), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' gst liabilities', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' gst', 33), (' provision for associate funding', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 76), (' derivative contracts - at fair value', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 57), (' ultimate parent entity', 53), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 54), (' ultimate parent entity', 53), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' other creditors', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' contract liabilites - current', 48), (' share of joint venture payables', 48), (' employee benefits - payroll', 47), ('other creditors and accruals', 46), (' arising from service contracts', 44), (' employee benefits - current', 43), (' secured long-term bank loans', 42), (' provision for associate funding', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' total current employee benefits', 43), ('other creditors and accruals', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' gst liabilities', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' restructuring', 30), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' employee benefits - current', 26), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 59), (' share of joint venture payables', 52), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' other related parties', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' forward exchange contracts', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' make good provisions', 25), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 68), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 52), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' provisions - current', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' loans from related party', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' provision for associate funding', 27), (' employee benefits - current', 26), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' total current employee benefits', 52), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' gst payables', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' gst payable and accruals', 59), (' share of joint venture payables', 56), (' other related parties', 53), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' gst liabilities', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' gst', 33), (' provision for associate funding', 32)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 76), (' derivative contracts - at fair value', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 57), (' ultimate parent entity', 53), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 54), (' ultimate parent entity', 53), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' other creditors', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' contract liabilites - current', 48), (' share of joint venture payables', 48), (' employee benefits - payroll', 47), ('other creditors and accruals', 46), (' arising from service contracts', 44), (' employee benefits - current', 43), (' secured long-term bank loans', 42), (' provision for associate funding', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' total current employee benefits', 43), ('other creditors and accruals', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' gst liabilities', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' restructuring', 30), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' employee benefits - current', 26), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 59), (' share of joint venture payables', 52), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' other related parties', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' forward exchange contracts', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' make good provisions', 25), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 68), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 52), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' provisions - current', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' loans from related party', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' provision for associate funding', 27), (' employee benefits - current', 26), (' other', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' total current employee benefits', 52), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' gst payables', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22], 'score': [100, 80, 82, 80, 100, 100, 100, 80, 82, 80, 100, 100, 100, 80, 82, 80, 100, 100], 'value': [7802444.0, 333926.0, 34427416.0, 754341.0, 5293901.0, 2441269.0, 8166254.0, 785740.0, 44920374.0, 503541.0, 3376358.0, 6047112.0, 8166254.0, 785740.0, 44920374.0, 503541.0, 3376358.0, 6047112.0], 'label': ['Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Contract liabilities Contract liabilities nan nan', 'Current Amounts due to related party Amounts due to related party Amounts due to related party 20', 'Current FBT payable FBT payable nan nan', 'Current GST payable GST payable nan nan', 'Current Other creditors Other creditors and accruals nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Contract liabilities Contract liabilities nan nan', 'Current Amounts due to related party Amounts due to related party Amounts due to related party 20', 'Current FBT payable FBT payable nan nan', 'Current GST payable GST payable nan nan', 'Current Other creditors Other creditors and accruals nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Contract liabilities Contract liabilities nan nan', 'Current Amounts due to related party Amounts due to related party Amounts due to related party 20', 'Current FBT payable FBT payable nan nan', 'Current GST payable GST payable nan nan', 'Current Other creditors Other creditors and accruals nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 64), (' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' loans from related party', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' total current employee benefits', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' employee benefits - payroll', 27), (' make good provisions', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' secured long-term bank loans', 54), (' total current employee benefits', 53), (' warranty', 50), (' gst payable and accruals', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' forward exchange contracts', 38), (' contract liabilites - current', 36), (' loans from related party', 33), (' arising from service contracts', 33), (' gst', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' abandonment and decommissioning costs', 27), (' make good provisions', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 55), (' secured long-term bank loans', 46), (' forward exchange contracts', 42), (' rebates', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 37), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' other creditors', 36), (' employee benefits - current', 35), (' total current employee benefits', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' provisions - current', 29), (' employee benefits - payroll', 27), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 44), (' loan payable to relayed party under tax funding agreement', 44), (' gst payable and accruals', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' employee benefits - payroll', 23), (' make good provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' loans from related party', 48), (' employee benefits - current', 48), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 45), (' contract liabilites - current', 44), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' total current employee benefits', 39), (' secured long-term bank loans', 38), (' share of joint venture payables', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), (' other related parties', 47), (' current - liability for annual and long service leave', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 41), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' total current employee benefits', 39), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' other creditors', 29), (' other creditors', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' arising from service contracts', 28), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 59), (' provisions - current', 57), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' other related parties', 59), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' employee benefits - current', 48), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [(' ultimate parent entity', 51), (' share of joint venture payables', 50), (' gst payables', 50), (' employee benefits - payroll', 50), (' other related parties', 47), (' employee benefits - current', 46), (' total current employee benefits', 46), ('other creditors and accruals', 45), (' loan payable to relayed party under tax funding agreement', 45), (' secured long-term bank loans', 45), (' loans from related party', 40), (' gst payable and accruals', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' arising from service contracts', 35), (' gst', 33), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' arising from service contracts', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits', 34), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 64), (' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' loans from related party', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' total current employee benefits', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' employee benefits - payroll', 27), (' make good provisions', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' secured long-term bank loans', 54), (' total current employee benefits', 53), (' warranty', 50), (' gst payable and accruals', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' forward exchange contracts', 38), (' contract liabilites - current', 36), (' loans from related party', 33), (' arising from service contracts', 33), (' gst', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' abandonment and decommissioning costs', 27), (' make good provisions', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 55), (' secured long-term bank loans', 46), (' forward exchange contracts', 42), (' rebates', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 37), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' other creditors', 36), (' employee benefits - current', 35), (' total current employee benefits', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' provisions - current', 29), (' employee benefits - payroll', 27), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 44), (' loan payable to relayed party under tax funding agreement', 44), (' gst payable and accruals', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' employee benefits - payroll', 23), (' make good provisions', 19)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' loans from related party', 48), (' employee benefits - current', 48), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 45), (' contract liabilites - current', 44), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' total current employee benefits', 39), (' secured long-term bank loans', 38), (' share of joint venture payables', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), (' other related parties', 47), (' current - liability for annual and long service leave', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 41), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' total current employee benefits', 39), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' other creditors', 29), (' other creditors', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' arising from service contracts', 28), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 59), (' provisions - current', 57), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' other related parties', 59), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' employee benefits - current', 48), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [(' ultimate parent entity', 51), (' share of joint venture payables', 50), (' gst payables', 50), (' employee benefits - payroll', 50), (' other related parties', 47), (' employee benefits - current', 46), (' total current employee benefits', 46), ('other creditors and accruals', 45), (' loan payable to relayed party under tax funding agreement', 45), (' secured long-term bank loans', 45), (' loans from related party', 40), (' gst payable and accruals', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' arising from service contracts', 35), (' gst', 33), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' arising from service contracts', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits', 34), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' restructuring', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 11, 16], 'score': [100, 100, 100, 100], 'value': [6563463.0, 0.0, 7248723.0, 0.0], 'label': ['Current Warranty nan nan nan', 'Movement in In AUD nan Warranty Dealers', 'Current Warranty nan nan nan', 'Movement in In AUD nan Warranty Dealers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 88, 'value': 409556.0, 'line_item_label': ['Current tax liabilities'], 'note_numbers': [nan], 'line_item_value': [409556.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 88, 'value': 633975.0, 'line_item_label': ['Current tax liabilities'], 'note_numbers': [nan], 'line_item_value': [633975.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:01+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 11:26:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), (' share capital ', 100), ('equity share capital', 76), (' issued capital', 67), ('contributed equity', 37), ('contributed equity', 37), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 10000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['19'], 'line_item_value': [10000000.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), (' share capital ', 100), ('equity share capital', 76), (' issued capital', 67), ('contributed equity', 37), ('contributed equity', 37), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 10000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['19'], 'line_item_value': [10000000.0]}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:01+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:01+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 6, 7, 12, 13, 18, 19, 24, 25, 30, 31], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 1.131, 0.0, 11310005.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'label': ['None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves', 24)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves', 24)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 36), (' accumulated losses', 26), ('reserves surplus', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 41223680.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [41223680.0]}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 36), (' accumulated losses', 26), ('reserves surplus', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 43210939.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [43210939.0]}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest', 32), ('non controlling interest', 32), ('minority interest', 32), ('noncontrolling interest', 27), (' non-controlling interest', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest', 32), ('non controlling interest', 32), ('minority interest', 32), ('noncontrolling interest', 27), (' non-controlling interest', 27)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 11:26:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('trade receivables', 35), ('account receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('receivable', 17), ('billed', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 121289307.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [121289307.0]}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('trade receivables', 35), ('account receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('receivable', 17), ('billed', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 126398542.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [126398542.0]}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:02+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 56), (' other debtors', 42), ('charges paid in advance', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' related party receivables', 67), (' other debtors', 50), (' net trade debtors', 50), (' share of joint venture receivables', 48), ('charges paid in advance', 47), ('trade receivables', 42)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44), ('charges paid in advance', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('charges paid in advance', 41), (' net trade debtors', 38), (' related party receivables', 33), (' share of joint venture receivables', 32), ('trade receivables', 25), (' other debtors', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 56), (' other debtors', 42), ('charges paid in advance', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' related party receivables', 67), (' other debtors', 50), (' net trade debtors', 50), (' share of joint venture receivables', 48), ('charges paid in advance', 47), ('trade receivables', 42)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44), ('charges paid in advance', 41)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('charges paid in advance', 41), (' net trade debtors', 38), (' related party receivables', 33), (' share of joint venture receivables', 32), ('trade receivables', 25), (' other debtors', 25)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:02+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [125686659.0, 120689684.0], 'label': ['Current Trade receivables Trade receivables nan nan', 'Current Trade receivables Trade receivables nan nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 11:26:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:02+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:02+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash asset', 64), ('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13194828.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [13194828.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash asset', 64), ('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 17144081.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [17144081.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none cash on hand cash on hand nan nan , res_fuzz_match = [('cash on hand', 100), (' cash on hand and at bank', 83), (' cash at bank', 78), (' cash at bank and on hand', 72), (' cash and cash equivalents', 71), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none bank balances bank balances nan nan , res_fuzz_match = [(' cash at bank', 67), (' cash at bank and on hand', 67), ('cash on hand', 56), (' cash on hand and at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash and cash equivalents', 43), (' short term deposits', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows nan , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash at bank and on hand', 61), (' cash on hand and at bank', 61), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none cash on hand cash on hand nan nan , res_fuzz_match = [('cash on hand', 100), (' cash on hand and at bank', 83), (' cash at bank', 78), (' cash at bank and on hand', 72), (' cash and cash equivalents', 71), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' short term deposits', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none bank balances bank balances nan nan , res_fuzz_match = [(' cash at bank', 67), (' cash at bank and on hand', 67), ('cash on hand', 56), (' cash on hand and at bank', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 44), (' cash and cash equivalents', 43), (' short term deposits', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows cash and cash equivalents in the statement of cash flows nan , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash at bank and on hand', 61), (' cash on hand and at bank', 61), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), (' short term deposits', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 5], 'score': [100, 100, 100, 100], 'value': [0.0, 17144081.0, 1588.0, 13194828.0], 'label': ['None Cash on hand Cash on hand nan nan', 'None Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows nan', 'None Cash on hand Cash on hand nan nan', 'None Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows Cash and cash equivalents in the statement of cash flows nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 111489925.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [111489925.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 119512569.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [119512569.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = vehicles at cost , res_fuzz_match = [(' finished goods at cost', 55), (' stores and other consumables at cost', 55), (' provision for inventory obsolescence', 55), (' cranes - in transit', 36), (' spare parts', 30), (' finished goods', 27), (' work in progress', 27), (' finished goods', 27), (' goods in transit', 27), (' inventories', 22), ('raw materials', 20), (' raw materials', 20), (' cranes', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = vehicles at net realisable value , res_fuzz_match = [(' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' goods in transit', 42), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' stores and other consumables at cost', 32), (' finished goods at cost', 31), (' work in progress', 31), (' spare parts', 30), (' finished goods', 29), (' finished goods', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = vehicles total , res_fuzz_match = [(' provision for inventory obsolescence', 42), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' inventories', 33), (' cranes - in transit', 33), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' goods in transit', 25), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' work in progress', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts provision for obsolescence , res_fuzz_match = [(' spare parts', 100), (' provision for inventory obsolescence', 67), ('raw materials', 50), (' raw materials', 50), (' work in progress', 46), (' cranes - in transit', 46), (' finished goods', 45), (' finished goods', 45), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), (' cranes', 40), (' goods in transit', 33), (' inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts demonstrator units at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 57), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' cranes - in transit', 46), (' provision for inventory obsolescence', 45), (' inventories', 44), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts training vehicles at cost , res_fuzz_match = [(' spare parts', 100), (' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' stores and other consumables at cost', 52), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' provision for inventory obsolescence', 46), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts stock in transit at cost , res_fuzz_match = [(' spare parts', 100), (' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = vehicles at cost , res_fuzz_match = [(' finished goods at cost', 55), (' stores and other consumables at cost', 55), (' provision for inventory obsolescence', 55), (' cranes - in transit', 36), (' spare parts', 30), (' finished goods', 27), (' work in progress', 27), (' finished goods', 27), (' goods in transit', 27), (' inventories', 22), ('raw materials', 20), (' raw materials', 20), (' cranes', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = vehicles at net realisable value , res_fuzz_match = [(' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' goods in transit', 42), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' stores and other consumables at cost', 32), (' finished goods at cost', 31), (' work in progress', 31), (' spare parts', 30), (' finished goods', 29), (' finished goods', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = vehicles total , res_fuzz_match = [(' provision for inventory obsolescence', 42), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' inventories', 33), (' cranes - in transit', 33), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' goods in transit', 25), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' work in progress', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts provision for obsolescence , res_fuzz_match = [(' spare parts', 100), (' provision for inventory obsolescence', 67), ('raw materials', 50), (' raw materials', 50), (' work in progress', 46), (' cranes - in transit', 46), (' finished goods', 45), (' finished goods', 45), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), (' cranes', 40), (' goods in transit', 33), (' inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts demonstrator units at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 57), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' cranes - in transit', 46), (' provision for inventory obsolescence', 45), (' inventories', 44), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts training vehicles at cost , res_fuzz_match = [(' spare parts', 100), (' cranes', 60), (' inventories', 56), (' cranes - in transit', 54), (' stores and other consumables at cost', 52), ('raw materials', 50), (' finished goods at cost', 50), (' raw materials', 50), (' goods in transit', 50), (' provision for inventory obsolescence', 46), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts stock in transit at cost , res_fuzz_match = [(' spare parts', 100), (' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 41), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 50), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' finished goods at cost', 31), (' goods in transit', 25), (' inventories', 22), (' finished goods', 18), (' finished goods', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [18689399.0, -474531.0, 18214868.0, 2052535.0, 275665.0, 46946929.0, 119512569.0, 14367964.0, -379530.0, 13988434.0, 1844631.0, 0.0, 42775001.0, 111489925.0], 'label': ['Spare parts At cost', 'Spare parts Provision for obsolescence', 'Spare parts Total', 'Spare parts Demonstrator units at cost', 'Spare parts Training vehicles at cost', 'Spare parts Stock in transit at cost', 'Spare parts Total', 'Spare parts At cost', 'Spare parts Provision for obsolescence', 'Spare parts Total', 'Spare parts Demonstrator units at cost', 'Spare parts Training vehicles at cost', 'Spare parts Stock in transit at cost', 'Spare parts Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('other financial assets', 65), ('other assets', 61), ('other current assets', 52), ('other current financial assets', 51), ('prepayments', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': 589085.0, 'line_item_label': ['Prepayments', 'Other assets'], 'note_numbers': [nan, '11'], 'line_item_value': [559696.0, 29389.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('other financial assets', 65), ('other assets', 61), ('other current assets', 52), ('other current financial assets', 51), ('prepayments', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': 1450893.0, 'line_item_label': ['Prepayments', 'Other assets'], 'note_numbers': [nan, '11'], 'line_item_value': [1427037.0, 23856.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), ('prepaid expenditure', 44), ('prepaid expense', 43), ('prepaid', 43), ('prepayments', 33), ('other prepayments', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepayments', 33), ('prepaid expense', 31), ('prepaid expenditure', 31), ('prepaid', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), ('prepayments', 33), ('other prepayments', 33), ('prepaid', 29), ('prepaid expense', 23), ('prepaid expenditure', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), ('prepaid expenditure', 44), ('prepaid expense', 43), ('prepaid', 43), ('prepayments', 33), ('other prepayments', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepayments', 33), ('prepaid expense', 31), ('prepaid expenditure', 31), ('prepaid', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), ('prepayments', 33), ('other prepayments', 33), ('prepaid', 29), ('prepaid expense', 23), ('prepaid expenditure', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['Current Bond deposits', 'Current Other', 'Current Total', 'Current Bond deposits', 'Current Other', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' biological assets', 67), (' other financial assets', 65), ('other assets', 61), ('other current assets', 52), (' other current assets', 52), (' trade and other receivables', 35), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 9], 'score': 80, 'value': 121398016.0, 'line_item_label': ['Trade and other receivables', 'Other assets', 'Intangible assets'], 'note_numbers': ['9', '11', '14'], 'line_item_value': [121289307.0, 29389.0, 79320.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' biological assets', 67), (' other financial assets', 65), ('other assets', 61), ('other current assets', 52), (' other current assets', 52), (' trade and other receivables', 35), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 9], 'score': 80, 'value': 126527517.0, 'line_item_label': ['Trade and other receivables', 'Other assets', 'Intangible assets'], 'note_numbers': ['9', '11', '14'], 'line_item_value': [126398542.0, 23856.0, 105119.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' other receivables - related party', 62), (' income tax receivable from related parties', 55), (' rental bond', 55), (' other deposits receivable - related party', 53), (' long service leave receivable', 52), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' amount receivable from controlling entity', 48), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' forward exchange contracts', 46), (' accrued interest', 43), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' accrued rebates', 36), (' lng', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [('current', 100), (' current investments', 71), (' related party disclosures', 67), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' related party receivable', 67), (' rental bond', 64), (' other deposits receivable - related party', 59), (' amount receivable from controlling entity', 58), (' accrued rebates', 55), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 48), (' interest receivable', 47), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' lng', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' other receivables - related party', 71), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 62), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 52), (' amount receivable from controlling entity', 52), (' other debtors and prepayments', 52), (' derivative contracts - fair value', 50), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' lng', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('current', 100), (' lng', 67), (' rental bond', 64), (' current investments', 64), (' bank guarantee', 46), (' accrued rebates', 45), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 39), (' derivative contracts - fair value', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' forward exchange contracts', 34), (' related party disclosures', 33), (' other receivables - related party', 33), (' related party receivable', 33), (' share of jv prepayments', 33), (' electricity derivatives at fair value', 32), (' income tax receivable from related parties', 32), (' other deposits receivable - related party', 32), (' amount receivable from controlling entity', 32), (' deposits', 29), (' interest receivable', 27), (' long service leave receivable', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' other receivables - related party', 62), (' income tax receivable from related parties', 55), (' rental bond', 55), (' other deposits receivable - related party', 53), (' long service leave receivable', 52), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' amount receivable from controlling entity', 48), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' forward exchange contracts', 46), (' accrued interest', 43), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' accrued rebates', 36), (' lng', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [('current', 100), (' current investments', 71), (' related party disclosures', 67), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' related party receivable', 67), (' rental bond', 64), (' other deposits receivable - related party', 59), (' amount receivable from controlling entity', 58), (' accrued rebates', 55), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 48), (' interest receivable', 47), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), ('other assets', 36), (' lng', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' other receivables - related party', 71), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 62), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 52), (' amount receivable from controlling entity', 52), (' other debtors and prepayments', 52), (' derivative contracts - fair value', 50), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' related party disclosures', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' lng', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('current', 100), (' lng', 67), (' rental bond', 64), (' current investments', 64), (' bank guarantee', 46), (' accrued rebates', 45), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' other debtors and prepayments', 39), (' derivative contracts - fair value', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' accrued interest', 36), (' forward exchange contracts', 34), (' related party disclosures', 33), (' other receivables - related party', 33), (' related party receivable', 33), (' share of jv prepayments', 33), (' electricity derivatives at fair value', 32), (' income tax receivable from related parties', 32), (' other deposits receivable - related party', 32), (' amount receivable from controlling entity', 32), (' deposits', 29), (' interest receivable', 27), (' long service leave receivable', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['Current Trade receivables Trade receivables nan nan', 'Current Amounts due from related party Amounts due from related party Amounts due from related party 20', 'Current Other receivables Other receivables nan nan', 'Current Total nan nan nan', 'Current Trade receivables Trade receivables nan nan', 'Current Amounts due from related party Amounts due from related party Amounts due from related party 20', 'Current Other receivables Other receivables nan nan', 'Current Total nan nan nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' rental bond', 82), (' current investments', 64), (' condensate', 57), (' other debtors and prepayments', 46), ('foreign exchange derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' accrued rebates', 45), (' other', 40), (' related party disclosures', 40), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' related party receivable', 39), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' interest receivable', 33), (' lng', 33), (' bank guarantee', 32), (' electricity derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' long service leave receivable', 26), (' share of jv prepayments', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), (' other', 100), (' current investments', 69), (' rental bond', 57), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' rental bond', 82), (' current investments', 64), (' condensate', 57), (' other debtors and prepayments', 46), ('foreign exchange derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' accrued rebates', 45), (' other', 40), (' related party disclosures', 40), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' related party receivable', 39), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' interest receivable', 33), (' lng', 33), (' bank guarantee', 32), (' electricity derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' long service leave receivable', 26), (' share of jv prepayments', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), (' other', 100), (' current investments', 69), (' rental bond', 57), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['Current Bond deposits', 'Current Other', 'Current Total', 'Current Bond deposits', 'Current Other', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [('other assets', 55), (' forward exchange contracts', 50), (' derivative contracts - fair value', 45), (' foreign exchange forward contracts', 45), (' other debtors and prepayments', 45), (' deposits', 43), (' condensate', 43), (' other', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), (' accrued interest', 36), (' related party disclosures', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 30), ('current', 29), (' current investments', 29), (' related party receivable', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party disclosures', 48), (' other receivables - related party', 46), ('other assets', 45), (' related party receivable', 44), (' current investments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' amount receivable from controlling entity', 39), (' other deposits receivable - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' rental bond', 36), ('foreign exchange derivatives at fair value', 35), (' long service leave receivable', 35), (' foreign exchange forward contracts', 34), (' lng', 33), (' other debtors and prepayments', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' interest receivable', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [('other assets', 55), (' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 52), (' current investments', 50), (' forward exchange contracts', 50), (' related party disclosures', 48), (' income tax receivable from related parties', 48), (' other deposits receivable - related party', 47), (' interest receivable', 47), (' other receivables - related party', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' related party receivable', 44), (' foreign exchange forward contracts', 44), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other', 40), (' long service leave receivable', 39), (' bank guarantee', 38), (' rental bond', 36), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' related party disclosures', 48), (' derivative contracts - fair value', 48), (' electricity derivatives at fair value', 45), (' rental bond', 45), (' related party receivable', 44), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 41), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' share of jv prepayments', 33), (' lng', 33), (' other deposits receivable - related party', 32), (' interest receivable', 27), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' related party disclosures', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' foreign exchange forward contracts', 38), ('other assets', 36), (' accrued interest', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' share of jv prepayments', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' current investments', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), ('other assets', 45), (' other deposits receivable - related party', 44), (' forward exchange contracts', 44), (' deposits', 43), (' condensate', 43), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' bank guarantee', 38), (' rental bond', 36), (' current investments', 36), (' income tax receivable from related parties', 33), (' long service leave receivable', 33), (' other receivables - related party', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), ('current', 29), (' accrued interest', 29), (' related party disclosures', 28), (' related party receivable', 28), (' interest receivable', 27), (' accrued rebates', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' accrued rebates', 45), (' condensate', 43), (' derivative contracts - fair value', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' accrued interest', 36), (' rental bond', 36), (' related party disclosures', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), ('current', 29), (' current investments', 29), (' interest receivable', 27), (' deposits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' long service leave receivable', 48), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' current investments', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' other deposits receivable - related party', 41), (' other', 40), (' foreign exchange forward contracts', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' lng', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 50), ('other assets', 45), (' related party disclosures', 43), (' derivative contracts - fair value', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' electricity derivatives at fair value', 41), (' other', 40), (' income tax receivable from related parties', 39), (' amount receivable from controlling entity', 39), (' other receivables - related party', 38), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 37), (' rental bond', 36), (' long service leave receivable', 35), (' foreign exchange forward contracts', 35), (' interest receivable', 33), (' lng', 33), (' other deposits receivable - related party', 32), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' related party receivable', 50), (' other receivables - related party', 46), (' amount receivable from controlling entity', 46), (' bank guarantee', 46), ('other assets', 45), (' accrued rebates', 45), ('current', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' electricity derivatives at fair value', 37), (' accrued interest', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' current investments', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' interest receivable', 40), (' long service leave receivable', 39), (' other deposits receivable - related party', 39), (' related party receivable', 39), (' related party disclosures', 38), (' other receivables - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 37), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' rental bond', 36), (' other debtors and prepayments', 35), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [('other assets', 55), (' forward exchange contracts', 50), (' derivative contracts - fair value', 45), (' foreign exchange forward contracts', 45), (' other debtors and prepayments', 45), (' deposits', 43), (' condensate', 43), (' other', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), (' accrued interest', 36), (' related party disclosures', 36), (' rental bond', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' electricity derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 30), ('current', 29), (' current investments', 29), (' related party receivable', 28)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party disclosures', 48), (' other receivables - related party', 46), ('other assets', 45), (' related party receivable', 44), (' current investments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' amount receivable from controlling entity', 39), (' other deposits receivable - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' rental bond', 36), ('foreign exchange derivatives at fair value', 35), (' long service leave receivable', 35), (' foreign exchange forward contracts', 34), (' lng', 33), (' other debtors and prepayments', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' interest receivable', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [('other assets', 55), (' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 52), (' current investments', 50), (' forward exchange contracts', 50), (' related party disclosures', 48), (' income tax receivable from related parties', 48), (' other deposits receivable - related party', 47), (' interest receivable', 47), (' other receivables - related party', 46), (' electricity derivatives at fair value', 45), (' accrued rebates', 45), (' related party receivable', 44), (' foreign exchange forward contracts', 44), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' other', 40), (' long service leave receivable', 39), (' bank guarantee', 38), (' rental bond', 36), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' related party disclosures', 48), (' derivative contracts - fair value', 48), (' electricity derivatives at fair value', 45), (' rental bond', 45), (' related party receivable', 44), ('current', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 41), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' share of jv prepayments', 33), (' lng', 33), (' other deposits receivable - related party', 32), (' interest receivable', 27), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' related party disclosures', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' foreign exchange forward contracts', 38), ('other assets', 36), (' accrued interest', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' share of jv prepayments', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' current investments', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' other debtors and prepayments', 50), ('other assets', 45), (' other deposits receivable - related party', 44), (' forward exchange contracts', 44), (' deposits', 43), (' condensate', 43), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' bank guarantee', 38), (' rental bond', 36), (' current investments', 36), (' income tax receivable from related parties', 33), (' long service leave receivable', 33), (' other receivables - related party', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), ('current', 29), (' accrued interest', 29), (' related party disclosures', 28), (' related party receivable', 28), (' interest receivable', 27), (' accrued rebates', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' lng', 67), (' bank guarantee', 54), (' long service leave receivable', 48), (' accrued rebates', 45), (' condensate', 43), (' derivative contracts - fair value', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' accrued interest', 36), (' rental bond', 36), (' related party disclosures', 33), (' amount receivable from controlling entity', 33), (' share of jv prepayments', 33), ('current', 29), (' current investments', 29), (' interest receivable', 27), (' deposits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' long service leave receivable', 48), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party receivable', 44), (' related party disclosures', 43), (' current investments', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' other deposits receivable - related party', 41), (' other', 40), (' foreign exchange forward contracts', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 36), (' interest receivable', 33), (' lng', 33), (' forward exchange contracts', 33), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' accrued rebates', 55), (' accrued interest', 50), (' related party receivable', 50), ('other assets', 45), (' related party disclosures', 43), (' derivative contracts - fair value', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' electricity derivatives at fair value', 41), (' other', 40), (' income tax receivable from related parties', 39), (' amount receivable from controlling entity', 39), (' other receivables - related party', 38), (' bank guarantee', 38), ('foreign exchange derivatives at fair value', 37), (' rental bond', 36), (' long service leave receivable', 35), (' foreign exchange forward contracts', 35), (' interest receivable', 33), (' lng', 33), (' other deposits receivable - related party', 32), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' accrued rebates', 55), (' bank guarantee', 54), (' accrued interest', 50), (' derivative contracts - fair value', 46), (' rental bond', 45), (' related party disclosures', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' related party receivable', 50), (' other receivables - related party', 46), (' amount receivable from controlling entity', 46), (' bank guarantee', 46), ('other assets', 45), (' accrued rebates', 45), ('current', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 42), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' electricity derivatives at fair value', 37), (' accrued interest', 36), (' rental bond', 36), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' derivative contracts - fair value', 54), (' amount receivable from controlling entity', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' current investments', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' share of jv prepayments', 42), (' forward exchange contracts', 42), (' other', 40), (' interest receivable', 40), (' long service leave receivable', 39), (' other deposits receivable - related party', 39), (' related party receivable', 39), (' related party disclosures', 38), (' other receivables - related party', 38), (' bank guarantee', 38), (' electricity derivatives at fair value', 37), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' rental bond', 36), (' other debtors and prepayments', 35), (' lng', 33), (' deposits', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software at cost nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation accumulated amortisation nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = software net carrying amount net carrying amount nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost additions nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 balance at 1 april 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation nan nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 balance at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 at31 march 2022 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 at 31 march 2023 nan , res_fuzz_match = [(' ', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [190619.0, -85500.0, 105119.0, 0.0, 128219.0, 62400.0, 190619.0, 48899.0, 36601.0, 85500.0, 79320.0, 105119.0, 128219.0, -48899.0, 79320.0, 0.0, 128219.0, 62400.0, 190619.0, 48899.0, 36601.0, 85500.0, 79320.0, 105119.0], 'label': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('current assets', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('current assets', 64)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('current assets', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('current assets', 64)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('current assets', 57)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings', 100), ('borrowings', 57), ('shortterm borrowings', 52), (' bank overdraft', 48), ('short-term debt', 34), ('shortterm debt', 34), ('short term debt', 33), (' interest bearing liabilites', 32), ('lease liabilities', 31), (' leases', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 16, 21], 'score': 100, 'value': 126919644.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings', 'Lease liabilities'], 'note_numbers': ['13', '16', '13'], 'line_item_value': [600799.0, 111234712.0, 15084133.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings', 100), ('borrowings', 57), ('shortterm borrowings', 52), (' bank overdraft', 48), ('short-term debt', 34), ('shortterm debt', 34), ('short term debt', 33), (' interest bearing liabilites', 32), ('lease liabilities', 31), (' leases', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 16, 21], 'score': 100, 'value': 156056011.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings', 'Lease liabilities'], 'note_numbers': ['13', '16', '13'], 'line_item_value': [655853.0, 140948462.0, 14451696.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' loans from related party', 62), (' lease liabilities', 55), (' secured long-term bank loans', 54), (' not later than 1 year', 53), (' leases', 50), (' not later than one year', 48), (' balance at the end of period', 43), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loans nan , res_fuzz_match = [(' secured long-term bank loans', 67), (' not later than one year', 57), ('bank borrowings', 55), (' not later than 1 year', 53), (' leases', 50), (' bank overdraft', 50), (' utilised – bank borrowings', 45), (' lease liabilities - current', 37), (' lease liabilities', 36), (' loans from related party', 33), (' balance at the end of period', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' secured long-term bank loans', 53), (' leases', 50), (' not later than one year', 47), (' not later than 1 year', 41), (' lease liabilities - current', 41), (' lease liabilities', 36), (' utilised – bank borrowings', 35), (' loans from related party', 35), (' bank overdraft', 30), (' balance at the end of period', 29), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' loans from related party', 62), (' lease liabilities', 55), (' secured long-term bank loans', 54), (' not later than 1 year', 53), (' leases', 50), (' not later than one year', 48), (' balance at the end of period', 43), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loans nan , res_fuzz_match = [(' secured long-term bank loans', 67), (' not later than one year', 57), ('bank borrowings', 55), (' not later than 1 year', 53), (' leases', 50), (' bank overdraft', 50), (' utilised – bank borrowings', 45), (' lease liabilities - current', 37), (' lease liabilities', 36), (' loans from related party', 33), (' balance at the end of period', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' secured long-term bank loans', 53), (' leases', 50), (' not later than one year', 47), (' not later than 1 year', 41), (' lease liabilities - current', 41), (' lease liabilities', 36), (' utilised – bank borrowings', 35), (' loans from related party', 35), (' bank overdraft', 30), (' balance at the end of period', 29), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = face value , res_fuzz_match = [(' not later than 1 year', 44), (' not later than one year', 44), (' lease liabilities', 44), (' balance at the end of period', 44), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' bank overdraft', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none related party loan unsecured bank loans aud 2023 , res_fuzz_match = [(' secured long-term bank loans', 67), (' loans from related party', 67), ('bank borrowings', 55), (' not later than one year', 52), (' leases', 50), (' bank overdraft', 50), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' utilised – bank borrowings', 45), (' lease liabilities', 45), (' balance at the end of period', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' leases', 50), (' not later than 1 year', 50), (' not later than one year', 50), (' secured long-term bank loans', 50), (' loans from related party', 44), (' lease liabilities', 36), (' lease liabilities - current', 33), (' balance at the end of period', 33), (' bank overdraft', 29), (' utilised – bank borrowings', 28), ('bank borrowings', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans', 50), (' lease liabilities - current', 50), (' not later than 1 year', 42), (' not later than one year', 42), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 33), (' balance at the end of period', 33), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 53848711.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [53848711.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 54)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' trade payables', 58), (' trade payables - other parties', 58), (' trade payables', 58), (' amounts payable to controlling entity', 54), (' other trade payables', 50), (' trade and other payables', 45), ('trade creditors', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' trade payables - other parties', 54), ('trade creditors', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 46), (' trade and other payables', 45), (' trade payables', 42), (' trade payables', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' trade and other payables', 36), (' amounts payable to controlling entity', 36), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 33), (' trade payables - other parties', 29), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('trade creditors', 79), (' other trade payables', 56), (' trade and other payables', 50), (' trade payables', 50), (' trade payables', 50), (' trade payables - other parties', 46), (' amounts payable to controlling entity', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade and other payables', 41), (' amounts payable to controlling entity', 40), (' other trade payables', 39), (' trade payables - other parties', 34), ('trade creditors', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 54)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' trade payables', 58), (' trade payables - other parties', 58), (' trade payables', 58), (' amounts payable to controlling entity', 54), (' other trade payables', 50), (' trade and other payables', 45), ('trade creditors', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' trade payables - other parties', 54), ('trade creditors', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 46), (' trade and other payables', 45), (' trade payables', 42), (' trade payables', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' trade and other payables', 36), (' amounts payable to controlling entity', 36), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 33), (' trade payables - other parties', 29), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('trade creditors', 79), (' other trade payables', 56), (' trade and other payables', 50), (' trade payables', 50), (' trade payables', 50), (' trade payables - other parties', 46), (' amounts payable to controlling entity', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade and other payables', 41), (' amounts payable to controlling entity', 40), (' other trade payables', 39), (' trade payables - other parties', 34), ('trade creditors', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 71), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 54)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' trade payables', 58), (' trade payables - other parties', 58), (' trade payables', 58), (' amounts payable to controlling entity', 54), (' other trade payables', 50), (' trade and other payables', 45), ('trade creditors', 36)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' trade payables - other parties', 54), ('trade creditors', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 46), (' trade and other payables', 45), (' trade payables', 42), (' trade payables', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' trade and other payables', 36), (' amounts payable to controlling entity', 36), (' trade payables', 33), (' trade payables', 33), (' other trade payables', 33), (' trade payables - other parties', 29), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), (' trade payables - other parties', 54), (' amounts payable to controlling entity', 50), ('trade creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('trade creditors', 79), (' other trade payables', 56), (' trade and other payables', 50), (' trade payables', 50), (' trade payables', 50), (' trade payables - other parties', 46), (' amounts payable to controlling entity', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade and other payables', 41), (' amounts payable to controlling entity', 40), (' other trade payables', 39), (' trade payables - other parties', 34), ('trade creditors', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8, 16], 'score': [100, 100, 100], 'value': [7802444.0, 8166254.0, 8166254.0], 'label': ['Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 53848711.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [53848711.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('interest accrued', 64), ('accrued expenses', 58)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('interest accrued', 64), ('accrued expenses', 58)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('interest accrued', 64), ('accrued expenses', 58)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 17, 19, 22], 'score': 100, 'value': 29230893.0, 'line_item_label': ['Liabilities', 'Provisions', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '17', nan, '17'], 'line_item_value': [0.0, 28301337.0, 409556.0, 520000.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 17, 19, 22], 'score': 100, 'value': 27806347.0, 'line_item_label': ['Liabilities', 'Provisions', 'Current tax liabilities', 'Provisions'], 'note_numbers': [nan, '17', nan, '17'], 'line_item_value': [0.0, 26652372.0, 633975.0, 520000.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [('income tax (refundable)/payable ', 45), (' provision for income tax', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 39)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [('income tax (refundable)/payable ', 45), (' provision for income tax', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 35)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' foreign exchange contract liability', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' customer deposits', 21), ('provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 17, 18, 19, 22, 23], 'score': 100, 'value': 98754244.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Employee benefits'], 'note_numbers': ['15', '17', '18', nan, '17', '18'], 'line_item_value': [66271138.0, 28301337.0, 2213375.0, 409556.0, 520000.0, 1038838.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' foreign exchange contract liability', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' customer deposits', 21), ('provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 17, 18, 19, 22, 23], 'score': 100, 'value': 84845084.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Employee benefits'], 'note_numbers': ['15', '17', '18', nan, '17', '18'], 'line_item_value': [53848711.0, 26652372.0, 2512347.0, 633975.0, 520000.0, 677679.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' gst payable and accruals', 59), (' share of joint venture payables', 56), (' other related parties', 53), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' gst liabilities', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' gst', 33), (' provision for associate funding', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 76), (' derivative contracts - at fair value', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 57), (' ultimate parent entity', 53), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 54), (' ultimate parent entity', 53), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' other creditors', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' contract liabilites - current', 48), (' share of joint venture payables', 48), (' employee benefits - payroll', 47), ('other creditors and accruals', 46), (' arising from service contracts', 44), (' employee benefits - current', 43), (' secured long-term bank loans', 42), (' provision for associate funding', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' total current employee benefits', 43), ('other creditors and accruals', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' gst liabilities', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' restructuring', 30), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' employee benefits - current', 26), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 59), (' share of joint venture payables', 52), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' other related parties', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' forward exchange contracts', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' make good provisions', 25), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 68), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 52), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' provisions - current', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' loans from related party', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' provision for associate funding', 27), (' employee benefits - current', 26), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' total current employee benefits', 52), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' gst payables', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' gst payable and accruals', 59), (' share of joint venture payables', 56), (' other related parties', 53), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' gst liabilities', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' gst', 33), (' provision for associate funding', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 76), (' derivative contracts - at fair value', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 57), (' ultimate parent entity', 53), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 54), (' ultimate parent entity', 53), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' other creditors', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' contract liabilites - current', 48), (' share of joint venture payables', 48), (' employee benefits - payroll', 47), ('other creditors and accruals', 46), (' arising from service contracts', 44), (' employee benefits - current', 43), (' secured long-term bank loans', 42), (' provision for associate funding', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' total current employee benefits', 43), ('other creditors and accruals', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' gst liabilities', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' restructuring', 30), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' employee benefits - current', 26), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 59), (' share of joint venture payables', 52), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' other related parties', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' forward exchange contracts', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' make good provisions', 25), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 68), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 52), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' provisions - current', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' loans from related party', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' provision for associate funding', 27), (' employee benefits - current', 26), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' total current employee benefits', 52), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' gst payables', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables trade and other payables trade and other payables nan , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' rebates', 60), (' gst payable and accruals', 59), (' share of joint venture payables', 56), (' other related parties', 53), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' loan payable to relayed party under tax funding agreement', 50), (' other creditors', 50), (' other creditors', 50), (' restructuring', 50), (' contract liabilites - current', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' gst liabilities', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' warranty', 38), (' provisions - current', 36), (' arising from service contracts', 36), (' gst', 33), (' provision for associate funding', 32)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities contract liabilities nan nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 76), (' derivative contracts - at fair value', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' forward exchange contracts', 58), (' current - liability for annual and long service leave', 57), (' ultimate parent entity', 53), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' total current employee benefits', 41), (' loan payable to relayed party under tax funding agreement', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' employee benefits - current', 35), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party amounts due to related party amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' loan payable to relayed party under tax funding agreement', 54), (' ultimate parent entity', 53), (' other creditors', 50), (' derivative contracts - at fair value', 50), (' other creditors', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' provisions - current', 50), (' other creditors', 50), (' warranty', 50), (' contract liabilites - current', 48), (' share of joint venture payables', 48), (' employee benefits - payroll', 47), ('other creditors and accruals', 46), (' arising from service contracts', 44), (' employee benefits - current', 43), (' secured long-term bank loans', 42), (' provision for associate funding', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' total current employee benefits', 43), ('other creditors and accruals', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' gst liabilities', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' gst payables', 30), (' restructuring', 30), (' arising from service contracts', 28), (' employee benefits - payroll', 27), (' employee benefits - current', 26), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable fbt payable nan nan , res_fuzz_match = [(' gst payables', 80), (' rebates', 60), (' gst payable and accruals', 59), (' current - liability for annual and long service leave', 59), (' share of joint venture payables', 52), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' loans from related party', 43), (' provisions - current', 43), (' other related parties', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' forward exchange contracts', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' make good provisions', 25), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current gst payable gst payable nan nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' gst liabilities', 70), (' gst payable and accruals', 68), (' rebates', 60), (' current - liability for annual and long service leave', 57), (' share of joint venture payables', 52), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 46), (' provisions - current', 43), (' secured long-term bank loans', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' loans from related party', 38), (' ultimate parent entity', 37), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 29), (' other creditors', 29), (' provision for associate funding', 27), (' employee benefits - current', 26), (' other', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current other creditors other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' total current employee benefits', 52), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' provisions - current', 43), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' gst payables', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst liabilities', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22], 'score': [100, 80, 82, 80, 100, 100, 100, 80, 82, 80, 100, 100, 100, 80, 82, 80, 100, 100], 'value': [7802444.0, 333926.0, 34427416.0, 754341.0, 5293901.0, 2441269.0, 8166254.0, 785740.0, 44920374.0, 503541.0, 3376358.0, 6047112.0, 8166254.0, 785740.0, 44920374.0, 503541.0, 3376358.0, 6047112.0], 'label': ['Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Contract liabilities Contract liabilities nan nan', 'Current Amounts due to related party Amounts due to related party Amounts due to related party 20', 'Current FBT payable FBT payable nan nan', 'Current GST payable GST payable nan nan', 'Current Other creditors Other creditors and accruals nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Contract liabilities Contract liabilities nan nan', 'Current Amounts due to related party Amounts due to related party Amounts due to related party 20', 'Current FBT payable FBT payable nan nan', 'Current GST payable GST payable nan nan', 'Current Other creditors Other creditors and accruals nan', 'Current Trade and other payables Trade and other payables Trade and other payables nan', 'Current Contract liabilities Contract liabilities nan nan', 'Current Amounts due to related party Amounts due to related party Amounts due to related party 20', 'Current FBT payable FBT payable nan nan', 'Current GST payable GST payable nan nan', 'Current Other creditors Other creditors and accruals nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 64), (' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' loans from related party', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' total current employee benefits', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' employee benefits - payroll', 27), (' make good provisions', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' secured long-term bank loans', 54), (' total current employee benefits', 53), (' warranty', 50), (' gst payable and accruals', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' forward exchange contracts', 38), (' contract liabilites - current', 36), (' loans from related party', 33), (' arising from service contracts', 33), (' gst', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' abandonment and decommissioning costs', 27), (' make good provisions', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 55), (' secured long-term bank loans', 46), (' forward exchange contracts', 42), (' rebates', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 37), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' other creditors', 36), (' employee benefits - current', 35), (' total current employee benefits', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' provisions - current', 29), (' employee benefits - payroll', 27), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 44), (' loan payable to relayed party under tax funding agreement', 44), (' gst payable and accruals', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' employee benefits - payroll', 23), (' make good provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' loans from related party', 48), (' employee benefits - current', 48), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 45), (' contract liabilites - current', 44), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' total current employee benefits', 39), (' secured long-term bank loans', 38), (' share of joint venture payables', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), (' other related parties', 47), (' current - liability for annual and long service leave', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 41), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' total current employee benefits', 39), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' other creditors', 29), (' other creditors', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' arising from service contracts', 28), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 59), (' provisions - current', 57), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' other related parties', 59), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' employee benefits - current', 48), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [(' ultimate parent entity', 51), (' share of joint venture payables', 50), (' gst payables', 50), (' employee benefits - payroll', 50), (' other related parties', 47), (' employee benefits - current', 46), (' total current employee benefits', 46), ('other creditors and accruals', 45), (' loan payable to relayed party under tax funding agreement', 45), (' secured long-term bank loans', 45), (' loans from related party', 40), (' gst payable and accruals', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' arising from service contracts', 35), (' gst', 33), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' arising from service contracts', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits', 34), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 64), (' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), (' gst payable and accruals', 45), (' loans from related party', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' total current employee benefits', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' gst liabilities', 30), (' employee benefits - payroll', 27), (' make good provisions', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' rebates', 60), (' secured long-term bank loans', 54), (' total current employee benefits', 53), (' warranty', 50), (' gst payable and accruals', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' forward exchange contracts', 38), (' contract liabilites - current', 36), (' loans from related party', 33), (' arising from service contracts', 33), (' gst', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' abandonment and decommissioning costs', 27), (' make good provisions', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 64), (' rebates', 60), (' secured long-term bank loans', 50), (' warranty', 50), (' gst payable and accruals', 47), (' total current employee benefits', 46), ('other creditors and accruals', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other related parties', 35), (' forward exchange contracts', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' arising from service contracts', 29), (' abandonment and decommissioning costs', 28), (' employee benefits - payroll', 27), (' make good provisions', 25), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 55), (' secured long-term bank loans', 46), (' forward exchange contracts', 42), (' rebates', 40), (' other', 40), ('other creditors and accruals', 39), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 37), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' other creditors', 36), (' employee benefits - current', 35), (' total current employee benefits', 34), (' loans from related party', 33), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' provisions - current', 29), (' employee benefits - payroll', 27), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), ('other creditors and accruals', 44), (' loan payable to relayed party under tax funding agreement', 44), (' gst payable and accruals', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' employee benefits - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' employee benefits - payroll', 23), (' make good provisions', 19)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in in aud nan warranty dealers , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' loans from related party', 48), (' employee benefits - current', 48), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 45), (' contract liabilites - current', 44), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' total current employee benefits', 39), (' secured long-term bank loans', 38), (' share of joint venture payables', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 1 april 2022 balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), (' other related parties', 47), (' current - liability for annual and long service leave', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 41), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' total current employee benefits', 39), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' gst', 33), (' provision for associate funding', 32), (' abandonment and decommissioning costs', 31), (' other creditors', 29), (' other creditors', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' arising from service contracts', 28), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions made during the year provisions made during the year 4207840 42237073 , res_fuzz_match = [(' rebates', 60), (' other', 60), (' other related parties', 59), (' provisions - current', 57), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' loans from related party', 43), (' employee benefits - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' employee benefits - payroll', 41), (' total current employee benefits', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' warranty', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions used during the year provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' other related parties', 59), (' make good provisions', 56), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' employee benefits - current', 48), (' secured long-term bank loans', 46), (' provision for associate funding', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' loans from related party', 43), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' contract liabilites - current', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in payments nan (3,089,523) (42,969,775) , res_fuzz_match = [(' ultimate parent entity', 51), (' share of joint venture payables', 50), (' gst payables', 50), (' employee benefits - payroll', 50), (' other related parties', 47), (' employee benefits - current', 46), (' total current employee benefits', 46), ('other creditors and accruals', 45), (' loan payable to relayed party under tax funding agreement', 45), (' secured long-term bank loans', 45), (' loans from related party', 40), (' gst payable and accruals', 40), (' rebates', 40), (' other', 40), (' warranty', 38), (' provisions - current', 36), (' derivative contracts - at fair value', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' arising from service contracts', 35), (' gst', 33), (' abandonment and decommissioning costs', 30), (' provision for associate funding', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = movement in balance at 31 march 2023 balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' loans from related party', 52), (' gst payable and accruals', 50), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' employee benefits - payroll', 45), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' arising from service contracts', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits', 34), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' restructuring', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 11, 16], 'score': [100, 100, 100, 100], 'value': [6563463.0, 0.0, 7248723.0, 0.0], 'label': ['Current Warranty nan nan nan', 'Movement in In AUD nan Warranty Dealers', 'Current Warranty nan nan nan', 'Movement in In AUD nan Warranty Dealers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 88, 'value': 409556.0, 'line_item_label': ['Current tax liabilities'], 'note_numbers': [nan], 'line_item_value': [409556.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 88, 'value': 633975.0, 'line_item_label': ['Current tax liabilities'], 'note_numbers': [nan], 'line_item_value': [633975.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), (' share capital ', 100), ('equity share capital', 76), (' issued capital', 67), ('contributed equity', 37), ('contributed equity', 37), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 10000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['19'], 'line_item_value': [10000000.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), (' share capital ', 100), ('equity share capital', 76), (' issued capital', 67), ('contributed equity', 37), ('contributed equity', 37), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 10000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['19'], 'line_item_value': [10000000.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = date of payment , res_fuzz_match = [('ordinary shares', 42), (' fully paid ordinary shares', 42), (' issued and paid-up share capital', 42), (' ordinary shares fully paid', 42), (' retained profits', 35), (' total issued capital', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = none final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' retained profits', 46), (' issued and paid-up share capital', 44), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total final - ordinary shares , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 72), (' ordinary shares fully paid', 60), (' total issued capital', 56), (' retained profits', 46), (' issued and paid-up share capital', 42)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total dividend franking account , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 37), ('ordinary shares', 36), (' ordinary shares fully paid', 36), (' issued and paid-up share capital', 33)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total issued capital', 55), (' retained profits', 45), ('ordinary shares', 27), (' fully paid ordinary shares', 27), (' issued and paid-up share capital', 27), (' ordinary shares fully paid', 27)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = total sales australia pty limited for subsequent financial years , res_fuzz_match = [(' total issued capital', 62), (' ordinary shares fully paid', 52), ('ordinary shares', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 41)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_rows = tax rate , res_fuzz_match = [(' retained profits', 50), ('ordinary shares', 38), (' fully paid ordinary shares', 38), (' issued and paid-up share capital', 38), (' ordinary shares fully paid', 38), (' total issued capital', 38)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 6, 7, 12, 13, 18, 19, 24, 25, 30, 31], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 1.131, 0.0, 11310005.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'label': ['None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares', 'None Final - ordinary shares', 'Total Final - ordinary shares'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 36), (' accumulated losses', 26), ('reserves surplus', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 41223680.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [41223680.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 36), (' accumulated losses', 26), ('reserves surplus', 25)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-31 11:26:19+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 43210939.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [43210939.0]}
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:19+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 11:26:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:19+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest', 32), ('non controlling interest', 32), ('minority interest', 32), ('noncontrolling interest', 27), (' non-controlling interest', 27)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest', 32), ('non controlling interest', 32), ('minority interest', 32), ('noncontrolling interest', 27), (' non-controlling interest', 27)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 11:26:20+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 11:26:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('trade receivables', 35), ('account receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('receivable', 17), ('billed', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 121289307.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [121289307.0]}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('trade receivables', 35), ('account receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('receivable', 17), ('billed', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 126398542.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [126398542.0]}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 11:26:20+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 56), (' other debtors', 42), ('charges paid in advance', 41)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' related party receivables', 67), (' other debtors', 50), (' net trade debtors', 50), (' share of joint venture receivables', 48), ('charges paid in advance', 47), ('trade receivables', 42)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44), ('charges paid in advance', 41)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('charges paid in advance', 41), (' net trade debtors', 38), (' related party receivables', 33), (' share of joint venture receivables', 32), ('trade receivables', 25), (' other debtors', 25)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current trade receivables trade receivables nan nan , res_fuzz_match = [('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 56), (' other debtors', 42), ('charges paid in advance', 41)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party amounts due from related party amounts due from related party 20 , res_fuzz_match = [(' related party receivables', 67), (' other debtors', 50), (' net trade debtors', 50), (' share of joint venture receivables', 48), ('charges paid in advance', 47), ('trade receivables', 42)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current other receivables other receivables nan nan , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44), ('charges paid in advance', 41)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows = current total nan nan nan , res_fuzz_match = [('charges paid in advance', 41), (' net trade debtors', 38), (' related party receivables', 33), (' share of joint venture receivables', 32), ('trade receivables', 25), (' other debtors', 25)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 11:26:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [125686659.0, 120689684.0], 'label': ['Current Trade receivables Trade receivables nan nan', 'Current Trade receivables Trade receivables nan nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 11:26:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 11:26:20+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 11:26:20+0530 - sLogger - DEBUG - CBS fetch_report completed

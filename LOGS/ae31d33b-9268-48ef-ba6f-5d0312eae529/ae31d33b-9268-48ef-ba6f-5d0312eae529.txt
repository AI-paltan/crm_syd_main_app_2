2023-05-18 18:30:13+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-18 18:30:14+0530 - sLogger - DEBUG - {'fileid': 'ae31d33b-9268-48ef-ba6f-5d0312eae529', 'filename': 'Yokohama Tyre Australia Pty Ltd_Financial report 2021.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Yokohama Tyre Australia Pty Ltd_Financial report 2021.pdf'}
2023-05-18 18:30:14+0530 - sLogger - DEBUG - save file completed
2023-05-18 18:30:14+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-18 18:30:14+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-18 18:30:14+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-18 18:30:14+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-18 18:30:14+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-18 18:30:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:14+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:18+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:18+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:25+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:25+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:29+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:29+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:33+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:33+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:36+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:36+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:40+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:40+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:42+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:46+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:46+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:30:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:30:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:30:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:30:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:30:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:30:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:30:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:00+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:00+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:08+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:08+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:16+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:16+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:25+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:25+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:34+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:34+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:49+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:49+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:31:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:31:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:31:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:31:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:31:57+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:31:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:31:57+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:00+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:00+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:05+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:05+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:09+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:09+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:12+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:12+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:20+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:20+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:24+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:24+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:28+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:28+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:32+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:32+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:42+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:42+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:49+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-18 18:32:50+0530 - sLogger - DEBUG - filetype: pdf
2023-05-18 18:32:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-18 18:32:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-18 18:32:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-18 18:32:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-18 18:32:55+0530 - sLogger - DEBUG - function: predict completed.
2023-05-18 18:32:55+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-18 18:32:55+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6], 'predicted_cpl_pages': [5], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [8], 'month': 'december'}
2023-05-18 18:32:55+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-18 18:32:55+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-18 18:32:55+0530 - sLogger - DEBUG - process file completed
2023-05-18 18:32:55+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-18 18:32:55+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-18 18:32:55+0530 - sLogger - DEBUG - TE process file started
2023-05-18 18:36:07+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-18 18:36:07+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-18 18:36:07+0530 - sLogger - DEBUG - process_main_pages started
2023-05-18 18:36:07+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-18 18:36:07+0530 - sLogger - DEBUG - start_refactoring started
2023-05-18 18:36:07+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-18 18:36:07+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-18 18:36:07+0530 - sLogger - DEBUG - start_refactoring started
2023-05-18 18:36:07+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-18 18:36:07+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-18 18:36:07+0530 - sLogger - DEBUG - start_refactoring started
2023-05-18 18:36:07+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-18 18:36:07+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-18 18:36:07+0530 - sLogger - DEBUG - set_section_details started
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Cash | [('assets', 44), ('current assets', 24), ('noncurrent assets', 24), ('current liabilities', 22), ('liabilities', 20), ('equity liabilities', 12), ('noncurrent liabilities', 11), ('equity and liabilities', 10), ('equity', 0)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD current assets | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD current liabilities | score 26
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrent assets | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrent liabilities | score 23
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD non current assets | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD non current liabilities | score 22
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equity and liabilities | score 22
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equity | score 0
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Trade receivables | [('equity', 33), ('current assets', 32), ('equity liabilities', 32), ('current liabilities', 31), ('equity and liabilities', 28), ('assets', 24), ('noncurrent assets', 24), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD current liabilities | score 50
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrent assets | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrent liabilities | score 46
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD non current assets | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD non current liabilities | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD equity and liabilities | score 51
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Prepayments | [('current liabilities', 30), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Liabilities and equity | [('equity and liabilities', 100), ('equity liabilities', 87), ('current liabilities', 58), ('liabilities', 52), ('equity', 52), ('noncurrent liabilities', 39), ('assets', 27), ('current assets', 27), ('noncurrent assets', 27)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current assets | score 32
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current liabilities | score 69
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent assets | score 26
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent liabilities | score 65
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current assets | score 25
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current liabilities | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity and liabilities | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Income tax payable | [('liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equity and liabilities', 30), ('current assets', 21), ('assets', 19), ('equity', 18), ('noncurrent assets', 14)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current assets | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current liabilities | score 43
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent assets | score 40
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent liabilities | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current liabilities | score 44
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity and liabilities | score 40
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Employee benefit liabilities | [('equity liabilities', 57), ('current liabilities', 56), ('equity and liabilities', 56), ('liabilities', 43), ('noncurrent liabilities', 33), ('equity', 29), ('current assets', 23), ('noncurrent assets', 23), ('assets', 15)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current assets | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current liabilities | score 69
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent assets | score 37
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent liabilities | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current liabilities | score 67
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity and liabilities | score 65
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Employee benefit liabilities | [('equity liabilities', 57), ('current liabilities', 56), ('equity and liabilities', 56), ('liabilities', 43), ('noncurrent liabilities', 33), ('equity', 29), ('current assets', 23), ('noncurrent assets', 23), ('assets', 15)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current assets | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current liabilities | score 69
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent assets | score 37
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent liabilities | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current liabilities | score 67
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity and liabilities | score 65
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity | score 45
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-05-18 18:36:07+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-18 18:36:07+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-18 18:36:08+0530 - sLogger - DEBUG - Total liabilities and equity | [('equity and liabilities', 85), ('equity liabilities', 72), ('current liabilities', 49), ('noncurrent liabilities', 43), ('liabilities', 41), ('equity', 41), ('current assets', 28), ('noncurrent assets', 28), ('assets', 21)]
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD current assets | score 32
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD current liabilities | score 69
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD noncurrent assets | score 32
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD noncurrent liabilities | score 64
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD non current assets | score 30
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD non current liabilities | score 62
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD equity and liabilities | score 95
2023-05-18 18:36:08+0530 - sLogger - DEBUG - particular_text Total liabilities and equity | MATCH WORD equity | score 90
2023-05-18 18:36:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-18 18:36:08+0530 - sLogger - DEBUG - set_section_details started
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Taxes paid | changes in working capital
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment | operating profit before changes in assets and liabilities
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of lease principal | adjustments for increase decrease in operating assets
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid on ordinary shares | adjustments for increase decrease in operating liabilities
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease/increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 January | changes in operating assets and liabilities
2023-05-18 18:36:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 December | changes in operating assets and liabilities
2023-05-18 18:36:09+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:09+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-18 18:36:09+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:09+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-18 18:36:09+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:09+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-18 18:36:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:09+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('cash and bank balances', 33), ('cash and cash equivalents', 32), (' cash and cash equivalents', 32), ('other bank balances', 29), ('cash and short term deposits', 26), ('bank balances other than above', 19), ('bank balances other than cash and cash equivalents', 17)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('cash and short term deposits', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('bank balances other than cash and cash equivalents', 29), ('other bank balances', 28), ('bank balances other than above', 26), ('cash and bank balances', 19)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:09+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('cash and bank balances', 33), ('cash and cash equivalents', 32), (' cash and cash equivalents', 32), ('other bank balances', 29), ('cash and short term deposits', 26), ('bank balances other than above', 19), ('bank balances other than cash and cash equivalents', 17)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('cash and short term deposits', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('bank balances other than cash and cash equivalents', 29), ('other bank balances', 28), ('bank balances other than above', 26), ('cash and bank balances', 19)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:09+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-18 18:36:09+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:09+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-18 18:36:09+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:09+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-18 18:36:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:09+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('inventories', 0)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('inventories', 33)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 20351152.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [20351152.0]}
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:09+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('inventories', 0)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('inventories', 33)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-05-18 18:36:09+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 20380987.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [20380987.0]}
2023-05-18 18:36:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:09+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:09+0530 - sLogger - DEBUG - txt_rows = stock in transit at cost , res_fuzz_match = [(' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 44), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33), (' spare parts', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 67), (' stores and other consumables at cost', 50), (' provision for inventory obsolescence', 38), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' spare parts', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods provision for obsolescence , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' finished goods at cost', 81), (' provision for inventory obsolescence', 67), (' goods in transit', 58), (' work in progress', 46), (' stores and other consumables at cost', 41), (' spare parts', 40), (' inventories', 33), (' cranes - in transit', 31), ('raw materials', 30), (' raw materials', 30), (' cranes', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods total finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' finished goods at cost', 88), (' goods in transit', 58), (' stores and other consumables at cost', 42), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' inventories', 33), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' work in progress', 23), (' cranes', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods total inventories at the lower of cost and net realisable value , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' inventories', 100), (' finished goods at cost', 88), (' goods in transit', 67), (' provision for inventory obsolescence', 55), (' stores and other consumables at cost', 52), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' work in progress', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods inventories recognised as an expense for the year , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' inventories', 100), (' finished goods at cost', 75), (' provision for inventory obsolescence', 59), (' goods in transit', 58), (' work in progress', 54), ('raw materials', 50), (' raw materials', 50), (' spare parts', 50), (' stores and other consumables at cost', 44), (' cranes', 40), (' cranes - in transit', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = stock in transit at cost , res_fuzz_match = [(' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 44), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33), (' spare parts', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 67), (' stores and other consumables at cost', 50), (' provision for inventory obsolescence', 38), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' spare parts', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods provision for obsolescence , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' finished goods at cost', 81), (' provision for inventory obsolescence', 67), (' goods in transit', 58), (' work in progress', 46), (' stores and other consumables at cost', 41), (' spare parts', 40), (' inventories', 33), (' cranes - in transit', 31), ('raw materials', 30), (' raw materials', 30), (' cranes', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods total finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' finished goods at cost', 88), (' goods in transit', 58), (' stores and other consumables at cost', 42), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' inventories', 33), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' work in progress', 23), (' cranes', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods total inventories at the lower of cost and net realisable value , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' inventories', 100), (' finished goods at cost', 88), (' goods in transit', 67), (' provision for inventory obsolescence', 55), (' stores and other consumables at cost', 52), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' work in progress', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = finished goods inventories recognised as an expense for the year , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' inventories', 100), (' finished goods at cost', 75), (' provision for inventory obsolescence', 59), (' goods in transit', 58), (' work in progress', 54), ('raw materials', 50), (' raw materials', 50), (' spare parts', 50), (' stores and other consumables at cost', 44), (' cranes', 40), (' cranes - in transit', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 4, 5, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15541148.0, -1160102.0, 14381046.0, 20380987.0, 69130613.0, 14678471.0, -870646.0, 13807825.0, 20351152.0, 61201876.0], 'label': ['Finished goods At cost', 'Finished goods Provision for obsolescence', 'Finished goods Total finished goods', 'Finished goods Total inventories at the lower of cost and net realisable value', 'Finished goods Inventories recognised as an expense for the year', 'Finished goods At cost', 'Finished goods Provision for obsolescence', 'Finished goods Total finished goods', 'Finished goods Total inventories at the lower of cost and net realisable value', 'Finished goods Inventories recognised as an expense for the year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), ('other financial assets', 26), ('prepayments', 20), ('other current financial assets', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 36), ('other assets', 35), ('prepayments', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 1274854.0, 'line_item_label': ['Current assets', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 1274854.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), ('other financial assets', 26), ('prepayments', 20), ('other current financial assets', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 36), ('other assets', 35), ('prepayments', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 1264220.0, 'line_item_label': ['Current assets', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 1264220.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), (' other current assets', 26), (' other financial assets', 26), (' biological assets', 25), (' financial assets', 24), (' trade and other receivables', 15), (' income tax receivable from related parties', 11), (' deferred operating expenditure', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' trade and other receivables', 71), (' deferred operating expenditure', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), ('other assets', 35), (' financial assets', 24), (' biological assets', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), (' other current assets', 26), (' other financial assets', 26), (' biological assets', 25), (' financial assets', 24), (' trade and other receivables', 15), (' income tax receivable from related parties', 11), (' deferred operating expenditure', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' trade and other receivables', 71), (' deferred operating expenditure', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), ('other assets', 35), (' financial assets', 24), (' biological assets', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('current assets', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('current assets', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('current assets', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('current assets', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 6078563.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [6078563.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 6496994.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [6496994.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7, 14, 15, 16, 17, 24, 25, 26, 27, 34, 35, 36, 37, 44, 45, 46, 47], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2765512.0, 95175.0, -80592.0, 2780095.0, 2244027.0, 134756.0, -81369.0, 2297414.0, 739454.0, 70150.0, -47225.0, 762379.0, 5312951.0, 708658.0, -283197.0, 5738412.0, 11061944.0, 1008739.0, -492383.0, 11578300.0], 'label': ['Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [5282339.0, 0.0, -94458.0, 5187881.0, 2463013.0, 163600.0, -83979.0, 2542634.0, 1029210.0, 53319.0, -47794.0, 1034735.0, 8365945.0, 1278548.0, -334449.0, 9310044.0, 17140507.0, 1495467.0, -560680.0, 18075294.0], 'label': ['Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 6078563.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [6078563.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 6496994.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [6496994.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 9619406.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['15'], 'line_item_value': [9619406.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 11038232.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['15'], 'line_item_value': [11038232.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 1670634.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['6'], 'line_item_value': [1670634.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 2479108.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['6'], 'line_item_value': [2479108.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': [80, 80], 'value': [-808474.0, -986098.0], 'label': ['Deferred tax: Relating to the origination and reversal of temporary differences', 'Deferred tax: Relating to the origination and reversal of temporary differences'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' loans and borrowings', 32), ('lease liabilities', 30), (' bank overdraft', 27), ('short-term debt', 20), ('shortterm debt', 20), (' leases', 20), ('short term debt', 19), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), (' bank overdraft', 33), (' loans and borrowings', 32), ('short-term debt', 28), ('shortterm debt', 28), ('short term debt', 27), (' leases', 23), ('shortterm borrowings', 21), ('borrowings', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 100, 'value': 2364666.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [2364666.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' loans and borrowings', 32), ('lease liabilities', 30), (' bank overdraft', 27), ('short-term debt', 20), ('shortterm debt', 20), (' leases', 20), ('short term debt', 19), ('shortterm borrowings', 19), ('borrowings', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), (' bank overdraft', 33), (' loans and borrowings', 32), ('short-term debt', 28), ('shortterm debt', 28), ('short term debt', 27), (' leases', 23), ('shortterm borrowings', 21), ('borrowings', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 100, 'value': 2428513.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [2428513.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 39), ('current maturities', 28), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other financial liabilities', 43), ('current maturities of long-term debt', 41), ('current maturities of longterm debt', 41), ('current maturities', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 39), ('current maturities', 28), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other financial liabilities', 43), ('current maturities of long-term debt', 41), ('current maturities of longterm debt', 41), ('current maturities', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('note payable(debt)', 62)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('note payable(debt)', 42)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('note payable(debt)', 62)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('note payable(debt)', 42)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63), ('accounts payable', 60), ('other than micro and small enterprises', 35), ('outstanding dues of creditors other than', 29), ('total outstanding due of other creditors other than micro and small', 29), ('micro enterprises and small enterprises', 27), ('outstanding dues of creditors other than micro enterprises and small enterprises', 26), ('small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 25), ('micro enterprises', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('accounts payable', 44), ('small enterprises', 43), ('micro enterprises and small enterprises', 39), ('micro enterprises', 38), ('other than micro and small enterprises', 38), ('trade and other payables', 36), ('other trade payables', 35), ('outstanding dues of creditors other than', 33), ('total outstanding due of other creditors other than micro and small', 32), ('outstanding dues of micro enterprises and small enterprises', 31), ('trade payable', 29), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 30525628.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['11'], 'line_item_value': [30525628.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('other trade payables', 65), ('trade payable', 64), ('trade and other payables', 63), ('accounts payable', 60), ('other than micro and small enterprises', 35), ('outstanding dues of creditors other than', 29), ('total outstanding due of other creditors other than micro and small', 29), ('micro enterprises and small enterprises', 27), ('outstanding dues of creditors other than micro enterprises and small enterprises', 26), ('small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 25), ('micro enterprises', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('accounts payable', 44), ('small enterprises', 43), ('micro enterprises and small enterprises', 39), ('micro enterprises', 38), ('other than micro and small enterprises', 38), ('trade and other payables', 36), ('other trade payables', 35), ('outstanding dues of creditors other than', 33), ('total outstanding due of other creditors other than micro and small', 32), ('outstanding dues of micro enterprises and small enterprises', 31), ('trade payable', 29), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 26952046.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['11'], 'line_item_value': [26952046.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current trade payables local , res_fuzz_match = [('current', 100), (' trade payables', 100), (' trade payables', 100), (' other trade payables', 78), (' trade payables - related parties', 71), (' trade payables - other parties', 71), (' related party payables', 67), (' trade and other payables', 59), (' amounts payable to controlling entity', 50), ('trade creditors', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current other payables , res_fuzz_match = [('current', 100), (' trade and other payables', 75), (' trade payables', 75), (' trade payables', 75), (' related party payables', 67), (' other trade payables', 67), (' trade payables - other parties', 50), (' amounts payable to controlling entity', 50), (' trade payables - related parties', 45), ('trade creditors', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' related party payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: parent entity (note 17.4) , res_fuzz_match = [(' related party payables', 100), (' amounts payable to controlling entity', 68), (' trade payables', 67), (' trade payables', 67), (' trade payables - related parties', 62), (' trade payables - other parties', 58), ('current', 57), (' other trade payables', 56), (' trade and other payables', 50), ('trade creditors', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: total trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' related party payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 67), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' trade payables - related parties', 54), ('current', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current trade payables local , res_fuzz_match = [('current', 100), (' trade payables', 100), (' trade payables', 100), (' other trade payables', 78), (' trade payables - related parties', 71), (' trade payables - other parties', 71), (' related party payables', 67), (' trade and other payables', 59), (' amounts payable to controlling entity', 50), ('trade creditors', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current other payables , res_fuzz_match = [('current', 100), (' trade and other payables', 75), (' trade payables', 75), (' trade payables', 75), (' related party payables', 67), (' other trade payables', 67), (' trade payables - other parties', 50), (' amounts payable to controlling entity', 50), (' trade payables - related parties', 45), ('trade creditors', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' related party payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: parent entity (note 17.4) , res_fuzz_match = [(' related party payables', 100), (' amounts payable to controlling entity', 68), (' trade payables', 67), (' trade payables', 67), (' trade payables - related parties', 62), (' trade payables - other parties', 58), ('current', 57), (' other trade payables', 56), (' trade and other payables', 50), ('trade creditors', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: total trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' related party payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 67), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' trade payables - related parties', 54), ('current', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1569635.0, 3182438.0, 4752073.0, 22199973.0, 26952046.0, 1917112.0, 1766114.0, 3683226.0, 26842402.0, 30525628.0], 'label': ['Current Trade payables local', 'Current Other payables', 'Current ', 'Related party payables: Parent entity (Note 17.4)', 'Related party payables: Total trade and other payables', 'Current Trade payables local', 'Current Other payables', 'Current ', 'Related party payables: Parent entity (Note 17.4)', 'Related party payables: Total trade and other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('trade and other payables', 63), ('other financial liabilities', 50), ('other liabilities', 43), ('other current financial liabilities', 41), ('other current liabilities', 39)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other current financial liabilities', 44), ('other financial liabilities', 43), ('trade and other payables', 36), ('other liabilities', 35)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15], 'score': 100, 'value': 30525628.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 30525628.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('trade and other payables', 63), ('other financial liabilities', 50), ('other liabilities', 43), ('other current financial liabilities', 41), ('other current liabilities', 39)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other current financial liabilities', 44), ('other financial liabilities', 43), ('trade and other payables', 36), ('other liabilities', 35)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15], 'score': 100, 'value': 26952046.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 26952046.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current trade payables local , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: parent entity (note 17.4) , res_fuzz_match = [('accrued expenses', 42), ('interest accrued', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: total trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current trade payables local , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: parent entity (note 17.4) , res_fuzz_match = [('accrued expenses', 42), ('interest accrued', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: total trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 56)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current tax liabilities', 56), (' income tax payable', 38), ('tax', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [16], 'score': 100, 'value': 531473.0, 'line_item_label': ['Income tax payable'], 'note_numbers': [nan], 'line_item_value': [531473.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 56)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current tax liabilities', 56), (' income tax payable', 38), ('tax', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [16], 'score': 100, 'value': 906196.0, 'line_item_label': ['Income tax payable'], 'note_numbers': [nan], 'line_item_value': [906196.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 50), (' financial liabilities', 47), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 30), (' employee benefits', 26), ('provisions', 9), (' deferred revenue', 7)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' foreign exchange contract liability', 49), ('other current liabilities', 48), (' other current liabilities', 48), (' other financial liabilities', 43), (' trade and other payables', 36), (' customer deposits', 33), (' deferred revenue', 29), ('provisions', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 17, 18], 'score': 81, 'value': 33307042.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Employee benefit liabilities'], 'note_numbers': [nan, '11', '13', '12'], 'line_item_value': [0.0, 30525628.0, 1200000.0, 1581414.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' trade and other payables', 63), (' other financial liabilities', 50), (' financial liabilities', 47), (' customer deposits', 40), ('other current liabilities', 39), (' other current liabilities', 39), (' foreign exchange contract liability', 30), (' employee benefits', 26), ('provisions', 9), (' deferred revenue', 7)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' foreign exchange contract liability', 49), ('other current liabilities', 48), (' other current liabilities', 48), (' other financial liabilities', 43), (' trade and other payables', 36), (' customer deposits', 33), (' deferred revenue', 29), ('provisions', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 17, 18], 'score': 81, 'value': 30562090.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Employee benefit liabilities'], 'note_numbers': [nan, '11', '13', '12'], 'line_item_value': [0.0, 26952046.0, 1990105.0, 1619939.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current trade payables local , res_fuzz_match = [('current', 100), (' gst payables', 70), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' share of joint venture payables', 56), (' gst payable and accruals', 55), (' restructuring', 50), (' warranty', 50), (' total current employee benefits', 49), ('other creditors and accruals', 48), (' secured long-term bank loans', 46), (' contract liabilites - current', 44), (' derivative contracts - at fair value', 43), (' provisions - current', 43), (' other related parties', 41), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' other', 40), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 33), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current other payables , res_fuzz_match = [('current', 100), (' other', 100), (' gst payables', 70), (' current - liability for annual and long service leave', 60), (' share of joint venture payables', 60), (' rebates', 60), (' total current employee benefits', 60), (' secured long-term bank loans', 55), ('other creditors and accruals', 50), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' forward exchange contracts', 45), (' provisions - current', 43), (' derivative contracts - at fair value', 40), (' gst payable and accruals', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' gst liabilities', 40), (' ultimate parent entity', 37), (' loans from related party', 36), (' loan payable to relayed party under tax funding agreement', 35), (' employee benefits - current', 35), (' arising from service contracts', 35), (' gst', 33), (' make good provisions', 31), (' provision for associate funding', 30), (' abandonment and decommissioning costs', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: parent entity (note 17.4) , res_fuzz_match = [(' gst payables', 80), (' rebates', 80), (' ultimate parent entity', 79), (' other', 60), ('current', 57), (' gst payable and accruals', 55), (' loan payable to relayed party under tax funding agreement', 52), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' total current employee benefits', 48), (' other related parties', 47), (' current - liability for annual and long service leave', 46), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' provisions - current', 43), (' other creditors', 43), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' share of joint venture payables', 40), (' arising from service contracts', 40), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' provision for associate funding', 36), ('other creditors and accruals', 35), (' gst', 33), (' make good provisions', 31)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: total trade and other payables , res_fuzz_match = [(' other', 100), (' rebates', 80), (' gst payables', 70), (' share of joint venture payables', 60), (' gst payable and accruals', 59), (' gst liabilities', 50), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), (' current - liability for annual and long service leave', 48), (' total current employee benefits', 48), (' ultimate parent entity', 47), (' other related parties', 47), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' secured long-term bank loans', 38), (' make good provisions', 38), (' provisions - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' gst', 33), ('current', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current trade payables local , res_fuzz_match = [('current', 100), (' gst payables', 70), (' rebates', 60), (' current - liability for annual and long service leave', 58), (' share of joint venture payables', 56), (' gst payable and accruals', 55), (' restructuring', 50), (' warranty', 50), (' total current employee benefits', 49), ('other creditors and accruals', 48), (' secured long-term bank loans', 46), (' contract liabilites - current', 44), (' derivative contracts - at fair value', 43), (' provisions - current', 43), (' other related parties', 41), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' other', 40), (' forward exchange contracts', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 33), (' arising from service contracts', 33), (' gst', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current other payables , res_fuzz_match = [('current', 100), (' other', 100), (' gst payables', 70), (' current - liability for annual and long service leave', 60), (' share of joint venture payables', 60), (' rebates', 60), (' total current employee benefits', 60), (' secured long-term bank loans', 55), ('other creditors and accruals', 50), (' restructuring', 50), (' warranty', 50), (' other related parties', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' forward exchange contracts', 45), (' provisions - current', 43), (' derivative contracts - at fair value', 40), (' gst payable and accruals', 40), (' contract liabilites - current', 40), (' employee benefits - payroll', 40), (' gst liabilities', 40), (' ultimate parent entity', 37), (' loans from related party', 36), (' loan payable to relayed party under tax funding agreement', 35), (' employee benefits - current', 35), (' arising from service contracts', 35), (' gst', 33), (' make good provisions', 31), (' provision for associate funding', 30), (' abandonment and decommissioning costs', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: parent entity (note 17.4) , res_fuzz_match = [(' gst payables', 80), (' rebates', 80), (' ultimate parent entity', 79), (' other', 60), ('current', 57), (' gst payable and accruals', 55), (' loan payable to relayed party under tax funding agreement', 52), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' total current employee benefits', 48), (' other related parties', 47), (' current - liability for annual and long service leave', 46), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' provisions - current', 43), (' other creditors', 43), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' share of joint venture payables', 40), (' arising from service contracts', 40), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' provision for associate funding', 36), ('other creditors and accruals', 35), (' gst', 33), (' make good provisions', 31)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = related party payables: total trade and other payables , res_fuzz_match = [(' other', 100), (' rebates', 80), (' gst payables', 70), (' share of joint venture payables', 60), (' gst payable and accruals', 59), (' gst liabilities', 50), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), (' current - liability for annual and long service leave', 48), (' total current employee benefits', 48), (' ultimate parent entity', 47), (' other related parties', 47), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' secured long-term bank loans', 38), (' make good provisions', 38), (' provisions - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' gst', 33), ('current', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 80, 100, 100, 100, 100, 80, 100], 'value': [1569635.0, 3182438.0, 4752073.0, 22199973.0, 26952046.0, 1917112.0, 1766114.0, 3683226.0, 26842402.0, 30525628.0], 'label': ['Current Trade payables local', 'Current Other payables', 'Current ', 'Related party payables: Parent entity (Note 17.4)', 'Related party payables: Total trade and other payables', 'Current Trade payables local', 'Current Other payables', 'Current ', 'Related party payables: Parent entity (Note 17.4)', 'Related party payables: Total trade and other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = at 1 january , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = at 31 december , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' forward exchange contracts', 50), (' rebates', 40), ('other creditors and accruals', 33), (' ultimate parent entity', 33), (' other related parties', 33), (' other creditors', 33), (' derivative contracts - at fair value', 33), (' other creditors', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' other creditors', 33), (' total current employee benefits', 33), (' other', 20), ('current', 17), (' loans from related party', 17), (' provisions - current', 17), (' contract liabilites - current', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' provision for associate funding', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current* , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = at 1 january , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = at 31 december , res_fuzz_match = [(' abandonment and decommissioning costs', 67), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' forward exchange contracts', 50), (' rebates', 40), ('other creditors and accruals', 33), (' ultimate parent entity', 33), (' other related parties', 33), (' other creditors', 33), (' derivative contracts - at fair value', 33), (' other creditors', 33), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' other creditors', 33), (' total current employee benefits', 33), (' other', 20), ('current', 17), (' loans from related party', 17), (' provisions - current', 17), (' contract liabilites - current', 17), (' share of joint venture payables', 17), (' gst payables', 17), (' provision for associate funding', 17), (' make good provisions', 17), (' gst liabilities', 17), (' restructuring', 17), (' gst', 0), (' warranty', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current* , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [100, 100], 'value': [1990105.0, 1200000.0], 'label': [' Current*', ' Current*'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('current liabilities', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current liabilities', 56)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('current liabilities', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current liabilities', 56)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term debt', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term debt', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 41), (' loans and borrowings', 33), (' borrowings', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 7480915.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [7480915.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 41), (' loans and borrowings', 33), (' borrowings', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 8842266.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [8842266.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 15)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), ('interest bearing loans and borrowings', 35)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 7480915.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [7480915.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), ('interest bearing loans and borrowings', 35)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 8842266.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [8842266.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 41)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 7480915.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [7480915.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 41)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 8842266.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [8842266.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' other financial liabilities', 43), ('trade and other payables', 36), ('other long term liabilities', 32), (' other non-current liabilities', 29), (' provision for associate funding', 23), (' provisions', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 22], 'score': 81, 'value': 154966.0, 'line_item_label': ['Non-current liabilities', 'Employee benefit liabilities'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 154966.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' other financial liabilities', 43), ('trade and other payables', 36), ('other long term liabilities', 32), (' other non-current liabilities', 29), (' provision for associate funding', 23), (' provisions', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 22], 'score': 81, 'value': 248919.0, 'line_item_label': ['Non-current liabilities', 'Employee benefit liabilities'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 248919.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current annual leave , res_fuzz_match = [('non-current trade and other payables', 53), (' non-current - liability for long-service leave', 47), (' trade payables - related parties', 47), (' employee benefits - non current', 42), (' total non-current employee benefits', 42), (' electricity derivatives at fair value through oci', 37), (' derivative contracts - at fair value', 37), (' contract liabilites - non-current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 32), (' make good provisions', 25), (' provision for associate funding', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 72), ('non-current trade and other payables', 50), (' total non-current employee benefits', 45), (' make good provisions', 44), (' derivative contracts - at fair value', 39), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' contract liabilites - non-current', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29), (' abandonment and decommissioning costs', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = non-current long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 77), (' total non-current employee benefits', 55), ('non-current trade and other payables', 54), (' derivative contracts - at fair value', 39), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' employee benefits - payroll', 34), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' provision for associate funding', 32), (' trade payables - related parties', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current annual leave , res_fuzz_match = [('non-current trade and other payables', 53), (' non-current - liability for long-service leave', 47), (' trade payables - related parties', 47), (' employee benefits - non current', 42), (' total non-current employee benefits', 42), (' electricity derivatives at fair value through oci', 37), (' derivative contracts - at fair value', 37), (' contract liabilites - non-current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 32), (' make good provisions', 25), (' provision for associate funding', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 72), ('non-current trade and other payables', 50), (' total non-current employee benefits', 45), (' make good provisions', 44), (' derivative contracts - at fair value', 39), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' contract liabilites - non-current', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29), (' abandonment and decommissioning costs', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = non-current long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 77), (' total non-current employee benefits', 55), ('non-current trade and other payables', 54), (' derivative contracts - at fair value', 39), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' employee benefits - payroll', 34), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' provision for associate funding', 32), (' trade payables - related parties', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': [100, 100], 'value': [1619939.0, 1581414.0], 'label': ['Current ', 'Current '], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('minority interest', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('minority interest', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term liabilities', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term liabilities', 32)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('equity share capital', 57), ('perpetual equity instrument', 38), ('share capital', 36), ('common stock', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('equity share capital', 57), ('perpetual equity instrument', 38), ('share capital', 36), ('common stock', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other equity', 48), ('additional paid in capital', 48), ('additional paid up capital', 48), ('reserves and surplus', 41), ('other reserves', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other equity', 48), ('additional paid in capital', 48), ('additional paid up capital', 48), ('reserves and surplus', 41), ('other reserves', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('retained earnings', 50), ('other equity', 48), (' accumulated losses', 28), ('reserves surplus', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 18610602.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [18610602.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('retained earnings', 50), ('other equity', 48), (' accumulated losses', 28), ('reserves surplus', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 17575919.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [17575919.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14), ('reserves', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14), ('reserves', 9)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 6078563.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [6078563.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 6496994.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [6496994.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [5282339.0, 0.0, -94458.0, 5187881.0, 2463013.0, 163600.0, -83979.0, 2542634.0, 1029210.0, 53319.0, -47794.0, 1034735.0, 8365945.0, 1278548.0, -334449.0, 9310044.0, 17140507.0, 1495467.0, -560680.0, 18075294.0], 'label': ['Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021', 'Cost At1 1January 2021', 'Cost Additions', 'Cost Disposals', 'Cost At3 31 December 2021'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = land, buildings and leasehold improvement $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment furniture, fixtures and office equipment motorvehicles $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 40), ('net value', 38), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at1 1january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = cost at3 31 december 2021 , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1january: 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at: 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = net book value at31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and office equipment furniture, fixtures and office equipment plant and total $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7, 14, 15, 16, 17, 24, 25, 26, 27, 34, 35, 36, 37, 44, 45, 46, 47], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2765512.0, 95175.0, -80592.0, 2780095.0, 2244027.0, 134756.0, -81369.0, 2297414.0, 739454.0, 70150.0, -47225.0, 762379.0, 5312951.0, 708658.0, -283197.0, 5738412.0, 11061944.0, 1008739.0, -492383.0, 11578300.0], 'label': ['Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021', 'Accumulated depreciation At1January: 2021', 'Accumulated depreciation Depreciation charge for the year', 'Accumulated depreciation Disposals', 'Accumulated depreciation At: 31 December 2021'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('account receivables', 25), ('trade receivables', 25), ('government subsidies receivable', 25), ('receivable', 25), ('trade and other receivables', 25), ('billed', 0), ('unbilled', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('trade receivables', 100), ('receivable', 100), ('trade and other receivables', 75), ('account receivables', 67), ('government subsidies receivable', 67), ('billed', 25), ('unbilled', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 13177383.0, 'line_item_label': ['Trade receivables'], 'note_numbers': ['8'], 'line_item_value': [13177383.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('account receivables', 25), ('trade receivables', 25), ('government subsidies receivable', 25), ('receivable', 25), ('trade and other receivables', 25), ('billed', 0), ('unbilled', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('trade receivables', 100), ('receivable', 100), ('trade and other receivables', 75), ('account receivables', 67), ('government subsidies receivable', 67), ('billed', 25), ('unbilled', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 11144209.0, 'line_item_label': ['Trade receivables'], 'note_numbers': ['8'], 'line_item_value': [11144209.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = total trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 67), (' related party receivables', 56), (' net trade debtors', 56), (' other debtors', 50), ('current', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 11,816,693 (672,484) , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = total trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 67), (' related party receivables', 56), (' net trade debtors', 56), (' other debtors', 50), ('current', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = 13,860,427 (683,044) , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [11144209.0, 13177383.0], 'label': [' Total trade receivables', ' Total trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:10+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-18 18:36:10+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('revenue from contracts with customers', 86), ('Revenue from contract with customers', 86), (' Sales revenue', 42), ('revenue from operations', 41), ('from trading business', 39), ('transmission and distribution business', 34), ('sale of products', 33), (' Sale of coal', 31), ('net sales', 28), (' Revenue', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('revenue from operations', 40), (' Sales revenue', 40), (' Revenue', 40), ('sale of products', 38), ('transmission and distribution business', 29), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 26), ('from trading business', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations', 44), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 31), ('net sales', 21), ('transmission and distribution business', 21), (' Sale of coal', 20), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('transmission and distribution business', 36), ('sale of products', 35), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('from trading business', 40), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('sale of products', 38), (' Sales revenue', 35), ('revenue from operations', 31), ('transmission and distribution business', 29), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 86, 'value': 0.0, 'line_item_label': ['Revenue from contracts with customers Cost of sales'], 'note_numbers': ['4'], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('revenue from contracts with customers', 86), ('Revenue from contract with customers', 86), (' Sales revenue', 42), ('revenue from operations', 41), ('from trading business', 39), ('transmission and distribution business', 34), ('sale of products', 33), (' Sale of coal', 31), ('net sales', 28), (' Revenue', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('revenue from operations', 40), (' Sales revenue', 40), (' Revenue', 40), ('sale of products', 38), ('transmission and distribution business', 29), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 26), ('from trading business', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations', 44), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 31), ('net sales', 21), ('transmission and distribution business', 21), (' Sale of coal', 20), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('transmission and distribution business', 36), ('sale of products', 35), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 14)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('from trading business', 40), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('sale of products', 38), (' Sales revenue', 35), ('revenue from operations', 31), ('transmission and distribution business', 29), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 86, 'value': 0.0, 'line_item_label': ['Revenue from contracts with customers Cost of sales'], 'note_numbers': ['4'], 'line_item_value': [0.0]}
2023-05-18 18:36:10+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:10+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = type of goods or service sale of tyres , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 53), (' Sale of goods - Motorcycles', 47), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 42), (' Goods sold to customer direct from supplier', 42), (' Feed gas income', 38), (' LNG', 33), (' Gas transportation income', 33), (' Domgas', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = type of goods or service service revenue , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Total Revenue', 58), (' Sale of goods - Spareparts', 53), (' Sale of goods - Motorcycles', 47), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Goods sold to customer direct from supplier', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' LNG', 33), (' Domgas', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = type of goods or service total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 58), (' Goods sold to customer from warehouse', 53), (' Goods sold to customer direct from supplier', 51), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), ('Sale of goods', 44), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Condensate', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition goods/services transferred at a point in time , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Domgas', 40), (' Goods sold to customer from warehouse', 40), (' LNG', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total from contracts with customers , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Sale of goods - Spareparts', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' LNG', 33), ('Sale of goods', 22)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = type of goods or service sale of tyres , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 53), (' Sale of goods - Motorcycles', 47), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 42), (' Goods sold to customer direct from supplier', 42), (' Feed gas income', 38), (' LNG', 33), (' Gas transportation income', 33), (' Domgas', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = type of goods or service service revenue , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Total Revenue', 58), (' Sale of goods - Spareparts', 53), (' Sale of goods - Motorcycles', 47), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Goods sold to customer direct from supplier', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' LNG', 33), (' Domgas', 20)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = type of goods or service total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 58), (' Goods sold to customer from warehouse', 53), (' Goods sold to customer direct from supplier', 51), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), ('Sale of goods', 44), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Condensate', 29)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition goods/services transferred at a point in time , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Domgas', 40), (' Goods sold to customer from warehouse', 40), (' LNG', 33)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total from contracts with customers , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Sale of goods - Spareparts', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' LNG', 33), ('Sale of goods', 22)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-18 18:36:10+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 7], 'score': [100, 100], 'value': [101927917.0, 87809583.0], 'label': ['Type of goods or service Total revenue from contracts with customers', 'Type of goods or service Total revenue from contracts with customers'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Cost of goods and services sold', 45), (' cost of coal sold', 43), (' Cost of product sold', 37), (' Cost of inventory sold', 36), ('cost of sales', 35), ('Cost of sales', 35), (' Personnel costs', 32), ('purchase of stock-in-trade', 30), ('total expenditure', 28), ('total expenses', 26), ('expenditure', 19), ('expense', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of goods and services sold', 28), ('expense', 24), ('cost of sales', 20), ('Cost of sales', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), ('expenditure', 25), ('expense', 14)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Cost of goods and services sold', 45), (' cost of coal sold', 43), (' Cost of product sold', 37), (' Cost of inventory sold', 36), ('cost of sales', 35), ('Cost of sales', 35), (' Personnel costs', 32), ('purchase of stock-in-trade', 30), ('total expenditure', 28), ('total expenses', 26), ('expenditure', 19), ('expense', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of goods and services sold', 28), ('expense', 24), ('cost of sales', 20), ('Cost of sales', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), ('expenditure', 25), ('expense', 14)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Amortisation expenses', 32), (' Logistics and distribution', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Advertising expenses', 28), ('other expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 22), (' Occupancy expenses', 19), (' Occupancy ', 17), (' depreciation', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' Depreciation expenses', 100), (' Depreciation expenses', 100), (' Advertising expenses', 76), (' depreciation', 67), ('Distribution expenses', 67), (' Amortisation expenses', 64), (' Administrative expenses', 60), (' Administration expenses', 60), (' Selling & distribution expenses', 57), (' Lease expenses', 48), (' Selling Expenses', 48), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Administrative and other expenses', 45), (' Marketing expenses', 44), (' Sales and marketing', 34), (' Logistics and distribution', 29), (' Occupancy ', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' depreciation', 44), ('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Marketing expenses', 42), (' Occupancy expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Selling Expenses', 27), (' Management expenses', 26), (' Occupancy ', 25), (' Sales and marketing', 23), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Management expenses', 24), (' Occupancy ', 22), (' Selling Expenses', 18)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 43), (' Other expenses', 43), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Sales and marketing', 32), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Administrative expenses', 27), (' Administration expenses', 27), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 19), (' Occupancy ', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -15461872.0, 'line_item_label': ['Depreciation expenses', 'Other expenses'], 'note_numbers': [nan, '5.2'], 'line_item_value': [-3037718.0, -12424154.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Amortisation expenses', 32), (' Logistics and distribution', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Advertising expenses', 28), ('other expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 22), (' Occupancy expenses', 19), (' Occupancy ', 17), (' depreciation', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' Depreciation expenses', 100), (' Depreciation expenses', 100), (' Advertising expenses', 76), (' depreciation', 67), ('Distribution expenses', 67), (' Amortisation expenses', 64), (' Administrative expenses', 60), (' Administration expenses', 60), (' Selling & distribution expenses', 57), (' Lease expenses', 48), (' Selling Expenses', 48), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Administrative and other expenses', 45), (' Marketing expenses', 44), (' Sales and marketing', 34), (' Logistics and distribution', 29), (' Occupancy ', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' depreciation', 44), ('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Marketing expenses', 42), (' Occupancy expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Selling Expenses', 27), (' Management expenses', 26), (' Occupancy ', 25), (' Sales and marketing', 23), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Management expenses', 24), (' Occupancy ', 22), (' Selling Expenses', 18)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 43), (' Other expenses', 43), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Sales and marketing', 32), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Administrative expenses', 27), (' Administration expenses', 27), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 19), (' Occupancy ', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -17524708.0, 'line_item_label': ['Depreciation expenses', 'Other expenses'], 'note_numbers': [nan, '5.2'], 'line_item_value': [-3631696.0, -13893012.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = freight and cartage expenses , res_fuzz_match = [('csr', 67), ('charges', 60), ('Included in administrative expenses', 57), (' Administrative expenses', 56), (' Wages and salaries', 53), ('analytical', 50), ('exchange', 43), (' Staff welfare', 42), ('power', 40), ('equipment', 40), ('donation', 40), (' plant and equipment', 40), (' Depreciation – property', 39), ('research', 38), (' Depreciation – right-of-use assets', 36), (' Compulsory superannuation contributions', 36), (' Payroll on-costs (excluding employee benefit provision)', 36), ('consum', 33), ('machinery', 33), ('miscellaneous', 33), ('loss on', 25), ('loss allowance', 20), ('social', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = advertising expense , res_fuzz_match = [('Included in administrative expenses', 67), (' Administrative expenses', 67), (' Depreciation – property', 47), ('miscellaneous', 44), ('exchange', 43), ('power', 40), ('equipment', 40), ('donation', 40), (' Compulsory superannuation contributions', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('research', 38), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), (' plant and equipment', 33), (' Depreciation – right-of-use assets', 33), (' Wages and salaries', 33), ('loss on', 25), (' Staff welfare', 25), ('charges', 20), ('loss allowance', 20), ('social', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = general property expenses , res_fuzz_match = [(' Depreciation – property', 61), ('power', 60), (' Administrative expenses', 50), ('exchange', 43), ('Included in administrative expenses', 43), (' Payroll on-costs (excluding employee benefit provision)', 43), ('equipment', 40), ('donation', 40), (' Wages and salaries', 40), ('research', 38), (' Depreciation – right-of-use assets', 38), ('consum', 33), ('machinery', 33), ('csr', 33), ('miscellaneous', 33), (' plant and equipment', 33), (' Compulsory superannuation contributions', 33), ('loss on', 25), (' Staff welfare', 25), ('charges', 20), ('loss allowance', 20), ('analytical', 17), ('social', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = lease payments short term , res_fuzz_match = [('analytical', 50), ('loss on', 50), (' Administrative expenses', 44), (' Compulsory superannuation contributions', 43), (' Staff welfare', 42), ('power', 40), ('charges', 40), ('equipment', 40), ('donation', 40), ('loss allowance', 40), (' plant and equipment', 40), (' Wages and salaries', 40), ('Included in administrative expenses', 39), (' Depreciation – property', 39), ('research', 38), (' Depreciation – right-of-use assets', 35), (' Payroll on-costs (excluding employee benefit provision)', 35), ('consum', 33), ('machinery', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), ('exchange', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = sap system expense , res_fuzz_match = [(' Administrative expenses', 62), ('Included in administrative expenses', 61), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 41), ('power', 40), ('equipment', 40), (' Compulsory superannuation contributions', 35), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' plant and equipment', 33), (' Staff welfare', 33), ('loss allowance', 30), (' Depreciation – right-of-use assets', 30), (' Depreciation – property', 29), (' Wages and salaries', 27), ('research', 25), ('loss on', 25), ('machinery', 22), ('donation', 20), ('charges', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation – property', 33), (' Wages and salaries', 33), (' Depreciation – right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = freight and cartage expenses , res_fuzz_match = [('csr', 67), ('charges', 60), ('Included in administrative expenses', 57), (' Administrative expenses', 56), (' Wages and salaries', 53), ('analytical', 50), ('exchange', 43), (' Staff welfare', 42), ('power', 40), ('equipment', 40), ('donation', 40), (' plant and equipment', 40), (' Depreciation – property', 39), ('research', 38), (' Depreciation – right-of-use assets', 36), (' Compulsory superannuation contributions', 36), (' Payroll on-costs (excluding employee benefit provision)', 36), ('consum', 33), ('machinery', 33), ('miscellaneous', 33), ('loss on', 25), ('loss allowance', 20), ('social', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = advertising expense , res_fuzz_match = [('Included in administrative expenses', 67), (' Administrative expenses', 67), (' Depreciation – property', 47), ('miscellaneous', 44), ('exchange', 43), ('power', 40), ('equipment', 40), ('donation', 40), (' Compulsory superannuation contributions', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('research', 38), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), (' plant and equipment', 33), (' Depreciation – right-of-use assets', 33), (' Wages and salaries', 33), ('loss on', 25), (' Staff welfare', 25), ('charges', 20), ('loss allowance', 20), ('social', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = general property expenses , res_fuzz_match = [(' Depreciation – property', 61), ('power', 60), (' Administrative expenses', 50), ('exchange', 43), ('Included in administrative expenses', 43), (' Payroll on-costs (excluding employee benefit provision)', 43), ('equipment', 40), ('donation', 40), (' Wages and salaries', 40), ('research', 38), (' Depreciation – right-of-use assets', 38), ('consum', 33), ('machinery', 33), ('csr', 33), ('miscellaneous', 33), (' plant and equipment', 33), (' Compulsory superannuation contributions', 33), ('loss on', 25), (' Staff welfare', 25), ('charges', 20), ('loss allowance', 20), ('analytical', 17), ('social', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = lease payments short term , res_fuzz_match = [('analytical', 50), ('loss on', 50), (' Administrative expenses', 44), (' Compulsory superannuation contributions', 43), (' Staff welfare', 42), ('power', 40), ('charges', 40), ('equipment', 40), ('donation', 40), ('loss allowance', 40), (' plant and equipment', 40), (' Wages and salaries', 40), ('Included in administrative expenses', 39), (' Depreciation – property', 39), ('research', 38), (' Depreciation – right-of-use assets', 35), (' Payroll on-costs (excluding employee benefit provision)', 35), ('consum', 33), ('machinery', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), ('exchange', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = sap system expense , res_fuzz_match = [(' Administrative expenses', 62), ('Included in administrative expenses', 61), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 41), ('power', 40), ('equipment', 40), (' Compulsory superannuation contributions', 35), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' plant and equipment', 33), (' Staff welfare', 33), ('loss allowance', 30), (' Depreciation – right-of-use assets', 30), (' Depreciation – property', 29), (' Wages and salaries', 27), ('research', 25), ('loss on', 25), ('machinery', 22), ('donation', 20), ('charges', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation – property', 33), (' Wages and salaries', 33), (' Depreciation – right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('consum', 0), ('power', 0), ('machinery', 0), ('charges', 0), ('research', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('loss on', 0), ('donation', 0), ('csr', 0), ('social', 0), ('miscellaneous', 0), ('loss allowance', 0), ('Included in administrative expenses', 0), (' Depreciation – property', 0), (' plant and equipment', 0), (' Depreciation – right-of-use assets', 0), (' Administrative expenses', 0), (' Wages and salaries', 0), (' Compulsory superannuation contributions', 0), (' Payroll on-costs (excluding employee benefit provision)', 0), (' Staff welfare', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' Administration expenses', 60), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 33), (' Occupancy', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 35), ('Rent', 27), (' Occupancy', 25), (' Administration expenses', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 21), (' Occupancy', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' Administration expenses', 60), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 33), (' Occupancy', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 35), ('Rent', 27), (' Occupancy', 25), (' Administration expenses', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 21), (' Occupancy', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('Other revenue', 37), (' Other income', 30), ('other operating', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue', 43), (' Other income', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('Other revenue', 37), (' Other income', 30), ('other operating', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue', 43), (' Other income', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Interest revenue', 42), (' Finance income and finance costs', 40), (' Finance income and costs', 38), (' Net finance costs', 35), ('other income', 30), ('finance income', 26), ('Finance income', 26)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' Interest revenue', 48), (' Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Net finance costs', 38), ('other income', 36), (' Interest revenue', 31), (' Finance income and costs', 25), (' Finance income and finance costs', 21), ('finance income', 17), ('Finance income', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Finance income and costs', 33), (' Interest revenue', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 28)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7], 'score': 85, 'value': -209657.0, 'line_item_label': ['Finance income', 'Finance costs'], 'note_numbers': ['5.1', '5.3'], 'line_item_value': [100304.0, -309961.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' Interest revenue', 42), (' Finance income and finance costs', 40), (' Finance income and costs', 38), (' Net finance costs', 35), ('other income', 30), ('finance income', 26), ('Finance income', 26)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' Interest revenue', 48), (' Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Net finance costs', 38), ('other income', 36), (' Interest revenue', 31), (' Finance income and costs', 25), (' Finance income and finance costs', 21), ('finance income', 17), ('Finance income', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Finance income and costs', 33), (' Interest revenue', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 28)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7], 'score': 85, 'value': -424623.0, 'line_item_label': ['Finance income', 'Finance costs'], 'note_numbers': ['5.1', '5.3'], 'line_item_value': [13977.0, -438600.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Sublease interest income', 100), (' Interest income', 100), (' Interest received - Bank', 71), (' Interest received - Loan', 71), (' Share of JV interest received/(paid)', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 71), ('Bank interest', 62), (' Bank Deposits - cash and cash equivalents', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Sublease interest income', 100), (' Interest income', 100), (' Interest received - Bank', 71), (' Interest received - Loan', 71), (' Share of JV interest received/(paid)', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 71), ('Bank interest', 62), (' Bank Deposits - cash and cash equivalents', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [13977.0, 100304.0], 'label': [' Interest income', ' Interest income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Sublease interest income', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Share of JV interest received/(paid)', 42), ('interest', 38), ('Bank interest', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' Sublease interest income', 45), (' Share of JV interest received/(paid)', 42), (' Interest received - Loan', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Interest income', 36), (' Interest received - Bank', 35), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [('Bank interest', 54), ('interest', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 47), (' Share of JV interest received/(paid)', 46), (' Interest received - Loan', 45), (' Interest income', 43), (' Interest income', 43), (' Bank Deposits - cash and cash equivalents', 41), (' Interest received - Bank', 40), (' Sublease interest income', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Interest received - Loan', 55), ('interest', 50), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 47), ('Bank interest', 46), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 46), (' Interest received - Bank', 45)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Sublease interest income', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Share of JV interest received/(paid)', 42), ('interest', 38), ('Bank interest', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' Sublease interest income', 45), (' Share of JV interest received/(paid)', 42), (' Interest received - Loan', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Interest income', 36), (' Interest received - Bank', 35), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [('Bank interest', 54), ('interest', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 47), (' Share of JV interest received/(paid)', 46), (' Interest received - Loan', 45), (' Interest income', 43), (' Interest income', 43), (' Bank Deposits - cash and cash equivalents', 41), (' Interest received - Bank', 40), (' Sublease interest income', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Interest received - Loan', 55), ('interest', 50), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 47), ('Bank interest', 46), (' Share of JV interest received/(paid)', 46), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 46), (' Interest received - Bank', 45)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' Interest income', 71), (' Interest income', 71), (' Sublease interest income', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest received - Bank', 41), (' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 40), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('interest', 50), (' Interest income', 43), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('Bank interest', 38), (' Share of JV interest received/(paid)', 35), (' Bank Deposits - cash and cash equivalents', 35), (' Sublease interest income', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [(' Share of JV interest received/(paid)', 42), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 39), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [('interest', 60), ('Bank interest', 60), (' Interest income', 60), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 60), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 60), (' Bank Deposits - cash and cash equivalents', 40)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Share of JV interest received/(paid)', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' Interest income', 71), (' Interest income', 71), (' Sublease interest income', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest received - Bank', 41), (' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 40), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('interest', 50), (' Interest income', 43), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('Bank interest', 38), (' Share of JV interest received/(paid)', 35), (' Bank Deposits - cash and cash equivalents', 35), (' Sublease interest income', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [(' Share of JV interest received/(paid)', 42), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 39), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [('interest', 60), ('Bank interest', 60), (' Interest income', 60), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 60), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 60), (' Bank Deposits - cash and cash equivalents', 40)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Share of JV interest received/(paid)', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Bank Deposits - cash and cash equivalents', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), ('interest', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 43), (' Interest income', 43), (' Sublease interest income', 41), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -309961.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['5.3'], 'line_item_value': [-309961.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -438600.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['5.3'], 'line_item_value': [-438600.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' Interest income', 64), ('debt', 50), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), (' Discount unwind on the provision for asset retirement obligation', 41), ('bank facilities', 40), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('interest', 38), ('  Other interest expense', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Interest accrued on loans', 37), (' Lease interest expense', 35), ('borrowings', 33), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), ('loan', 25), ('bonds', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [('debt', 50), ('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 48), ('  Other interest expense', 48), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 43), (' Interest accrued on loans', 42), ('bank facilities', 40), ('Interest expenses', 40), (' Lease interest expense', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest expense on financial liabilities using the effective interest rate method - other', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), (' Lease liabilities interest expense', 37), (' Interest income', 36), (' Interest accrued on lease liabilities', 35), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [('loan', 50), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest on leases', 46), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Lease liabilities interest expense', 44), ('  Other interest expense', 43), (' Interest income', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 41), ('Interest expenses', 40), (' Discount unwind on the provision for asset retirement obligation', 40), (' Lease interest expense', 40), (' Interest accrued on lease liabilities', 38), (' Interest accrued on loans', 37), ('borrowings', 33), ('bank facilities', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [(' Interest income', 64), ('debenture', 62), ('Interest expenses', 60), ('  Other interest expense', 52), ('loan', 50), ('debt', 50), ('bonds', 50), ('interest', 50), (' Lease interest expense', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 48), (' Lease liabilities interest expense', 48), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 47), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), ('cash credit', 45), (' Discount unwind on the provision for asset retirement obligation', 42), (' Interest accrued on lease liabilities', 42), ('bank facilities', 40), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' Interest income', 64), ('debt', 50), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), (' Discount unwind on the provision for asset retirement obligation', 41), ('bank facilities', 40), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('interest', 38), ('  Other interest expense', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Interest accrued on loans', 37), (' Lease interest expense', 35), ('borrowings', 33), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), ('loan', 25), ('bonds', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [('debt', 50), ('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 48), ('  Other interest expense', 48), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 43), (' Interest accrued on loans', 42), ('bank facilities', 40), ('Interest expenses', 40), (' Lease interest expense', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest expense on financial liabilities using the effective interest rate method - other', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), (' Lease liabilities interest expense', 37), (' Interest income', 36), (' Interest accrued on lease liabilities', 35), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [('loan', 50), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest on leases', 46), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Lease liabilities interest expense', 44), ('  Other interest expense', 43), (' Interest income', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 41), ('Interest expenses', 40), (' Discount unwind on the provision for asset retirement obligation', 40), (' Lease interest expense', 40), (' Interest accrued on lease liabilities', 38), (' Interest accrued on loans', 37), ('borrowings', 33), ('bank facilities', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [(' Interest income', 64), ('debenture', 62), ('Interest expenses', 60), ('  Other interest expense', 52), ('loan', 50), ('debt', 50), ('bonds', 50), ('interest', 50), (' Lease interest expense', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 48), (' Lease liabilities interest expense', 48), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 47), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), ('cash credit', 45), (' Discount unwind on the provision for asset retirement obligation', 42), (' Interest accrued on lease liabilities', 42), ('bank facilities', 40), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' Interest income', 71), ('loan', 50), ('borrowings', 50), ('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 50), (' Interest on leases', 46), ('  Other interest expense', 43), (' Interest accrued on loans', 42), ('bank facilities', 40), ('Interest expenses', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('interest', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), ('cash credit', 36), (' Interest accrued on lease liabilities', 35), (' Lease interest expense', 35), (' Lease liabilities interest expense', 30), ('debt', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [(' Interest income', 57), ('loan', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), ('  Other interest expense', 43), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), ('cash credit', 36), (' Interest accrued on lease liabilities', 35), (' Lease interest expense', 35), ('borrowings', 33), ('bank facilities', 30), ('debt', 25), ('bonds', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('bonds', 75), ('Interest expenses', 67), ('  Other interest expense', 52), ('loan', 50), ('debt', 50), ('interest', 50), (' Lease interest expense', 50), (' Discount unwind on the provision for asset retirement obligation', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest income', 43), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), (' Interest accrued on loans', 42), ('debenture', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33), (' Lease liabilities interest expense', 33), ('bank facilities', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [('debt', 50), ('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 50), ('  Other interest expense', 48), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest accrued on loans', 42), ('Interest expenses', 40), (' Lease interest expense', 40), (' Lease liabilities interest expense', 39), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest expense on financial liabilities using the effective interest rate method - other', 36), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 36), (' Interest income', 36), (' Interest accrued on lease liabilities', 35), ('borrowings', 33), ('bank facilities', 30), ('cash credit', 27), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [('  Other interest expense', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), ('interest', 60), ('Interest expenses', 60), (' Discount unwind on the provision for asset retirement obligation', 60), (' Interest on leases', 60), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), (' Lease interest expense', 60), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 60), (' Interest income', 60), (' Lease liabilities interest expense', 60), ('debenture', 40), ('borrowings', 40), ('debt', 25), ('cash credit', 20), ('loan', 0), ('bank facilities', 0), ('bonds', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 60), ('  Other interest expense', 57), (' Interest income', 57), (' Lease liabilities interest expense', 53), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), (' Discount unwind on the provision for asset retirement obligation', 35), (' Interest on bank overdrafts and loans (other than those from related parties)', 35), ('bank facilities', 30), (' Interest accrued on lease liabilities', 30), ('cash credit', 27), ('loan', 25), ('debt', 25), ('bonds', 25), ('borrowings', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' Interest income', 71), ('loan', 50), ('borrowings', 50), ('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 50), (' Interest on leases', 46), ('  Other interest expense', 43), (' Interest accrued on loans', 42), ('bank facilities', 40), ('Interest expenses', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), ('debenture', 38), ('interest', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 37), ('cash credit', 36), (' Interest accrued on lease liabilities', 35), (' Lease interest expense', 35), (' Lease liabilities interest expense', 30), ('debt', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [(' Interest income', 57), ('loan', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), ('  Other interest expense', 43), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), ('cash credit', 36), (' Interest accrued on lease liabilities', 35), (' Lease interest expense', 35), ('borrowings', 33), ('bank facilities', 30), ('debt', 25), ('bonds', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('bonds', 75), ('Interest expenses', 67), ('  Other interest expense', 52), ('loan', 50), ('debt', 50), ('interest', 50), (' Lease interest expense', 50), (' Discount unwind on the provision for asset retirement obligation', 48), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest income', 43), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), (' Interest accrued on loans', 42), ('debenture', 38), (' Interest on leases', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33), (' Lease liabilities interest expense', 33), ('bank facilities', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [('debt', 50), ('bonds', 50), (' Discount unwind on the provision for asset retirement obligation', 50), ('  Other interest expense', 48), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest accrued on loans', 42), ('Interest expenses', 40), (' Lease interest expense', 40), (' Lease liabilities interest expense', 39), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest expense on financial liabilities using the effective interest rate method - other', 36), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 36), (' Interest income', 36), (' Interest accrued on lease liabilities', 35), ('borrowings', 33), ('bank facilities', 30), ('cash credit', 27), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [('  Other interest expense', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), ('interest', 60), ('Interest expenses', 60), (' Discount unwind on the provision for asset retirement obligation', 60), (' Interest on leases', 60), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), (' Lease interest expense', 60), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 60), (' Interest income', 60), (' Lease liabilities interest expense', 60), ('debenture', 40), ('borrowings', 40), ('debt', 25), ('cash credit', 20), ('loan', 0), ('bank facilities', 0), ('bonds', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 60), ('  Other interest expense', 57), (' Interest income', 57), (' Lease liabilities interest expense', 53), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), (' Discount unwind on the provision for asset retirement obligation', 35), (' Interest on bank overdrafts and loans (other than those from related parties)', 35), ('bank facilities', 30), (' Interest accrued on lease liabilities', 30), ('cash credit', 27), ('loan', 25), ('debt', 25), ('bonds', 25), ('borrowings', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': [100, 100], 'value': [79761.0, -59115.0], 'label': [' Others', ' Others'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [('bank facilities', 60), (' Interest income', 57), ('debt', 50), ('debenture', 50), ('bonds', 50), ('interest', 50), (' Interest accrued on loans', 47), (' Interest on leases', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest expense on financial liabilities using the effective interest rate method - other', 41), (' Lease liabilities interest expense', 41), ('Interest expenses', 40), (' Lease interest expense', 40), ('  Other interest expense', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 38), ('cash credit', 36), ('borrowings', 33), ('loan', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('debenture', 62), (' Interest on leases', 54), (' Discount unwind on the provision for asset retirement obligation', 53), ('loan', 50), ('debt', 50), ('bonds', 50), ('Interest expenses', 47), (' Interest accrued on loans', 47), (' Interest expense on financial liabilities using the effective interest rate method - other', 43), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 43), (' Interest income', 43), (' Lease liabilities interest expense', 41), ('bank facilities', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), (' Lease interest expense', 40), ('interest', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), ('borrowings', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 100), (' Lease liabilities interest expense', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 67), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), ('debt', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('loan', 25), ('bonds', 25), ('borrowings', 17), ('bank facilities', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest on lease liabilities (note 15) , res_fuzz_match = [('interest', 100), (' Interest on leases', 100), (' Interest accrued on lease liabilities', 76), ('Interest expenses', 73), (' Interest accrued on loans', 68), (' Interest expense on financial liabilities using the effective interest rate method - other', 64), (' Interest income', 64), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 60), (' Lease liabilities interest expense', 60), (' Lease interest expense', 55), ('  Other interest expense', 52), (' Interest on bank overdrafts and loans (other than those from related parties)', 52), ('loan', 50), ('bank facilities', 50), ('debenture', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('borrowings', 33), ('debt', 25), ('bonds', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 100), (' Lease liabilities interest expense', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 67), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), ('debt', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('loan', 25), ('bonds', 25), ('borrowings', 17), ('bank facilities', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest on lease liabilities (note 15) , res_fuzz_match = [('interest', 100), (' Interest on leases', 100), (' Interest accrued on lease liabilities', 76), ('Interest expenses', 73), (' Interest accrued on loans', 68), (' Interest expense on financial liabilities using the effective interest rate method - other', 64), (' Interest income', 64), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 60), (' Lease liabilities interest expense', 60), (' Lease interest expense', 55), ('  Other interest expense', 52), (' Interest on bank overdrafts and loans (other than those from related parties)', 52), ('loan', 50), ('bank facilities', 50), ('debenture', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('borrowings', 33), ('debt', 25), ('bonds', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [29943.0, 408657.0, 0.0, 309961.0], 'label': [' Interest expense', ' Interest on lease liabilities (Note 15)', ' Interest expense', ' Interest on lease liabilities (Note 15)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -309961.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['5.3'], 'line_item_value': [-309961.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses', 42), (' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -438600.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['5.3'], 'line_item_value': [-438600.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' share of jv income', 73), (' margin charge income', 67), (' sundry income', 67), (' other income', 64), (' net of tax', 57), (' secondment income (tw recovery)', 52), ('other revenue', 50), (' foreign exchange gain', 50), (' net foreign exchange gain', 50), (' quota lease income', 50), (' dividend from other parties', 48), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' other miscellaneous - net (loss)/gain', 45), (' net other foreign exchange (losses)/gains', 44), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 37), (' commission revenue', 36), (' insurance proceeds', 36), (' japan recoveries', 36), (' net ppe disposal (loss)/gain', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' share of jv income', 73), (' margin charge income', 61), (' sundry income', 58), (' net of tax', 57), (' insurance proceeds', 55), (' net foreign exchange gain', 54), (' dividend from other parties', 52), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), ('other revenue', 50), ('  government grants', 50), (' foreign exchange gain', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' other income', 45), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), (' effective portion of changes in fair value of cash flow', 42), (' other', 40), (' paid by customers - at amortised cost', 38), (' net ppe disposal (loss)/gain', 38), (' other miscellaneous - net (loss)/gain', 38), (' profit from discontinued operation', 37), (' commission revenue', 36), (' net (loss)/profit on disposal of non-current assets', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [(' net of tax', 57), (' japan recoveries', 57), (' other income', 55), (' net other foreign exchange (losses)/gains', 54), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), ('other revenue', 50), (' dividend from other parties', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' margin charge income', 44), (' quota lease income', 44), (' commission revenue', 43), ('  government grants', 42), (' effective portion of changes in fair value of cash flow', 42), (' paid by customers - at amortised cost', 42), (' other', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 37), (' share of jv income', 36), (' net ppe disposal (loss)/gain', 33), (' sundry income', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' profit from discontinued operation', 56), (' margin charge income', 56), (' quota lease income', 56), (' other miscellaneous - net (loss)/gain', 55), (' net ppe disposal (loss)/gain', 54), ('other revenue', 50), (' commission revenue', 50), (' japan recoveries', 50), (' net (loss)/profit on disposal of non-current assets', 50), (' net other foreign exchange (losses)/gains', 49), (' dividend from other parties', 48), (' secondment income (tw recovery)', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' effective portion of changes in fair value of cash flow', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), ('  government grants', 42), (' paid by customers - at amortised cost', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' share of jv income', 73), (' margin charge income', 67), (' sundry income', 67), (' other income', 64), (' net of tax', 57), (' secondment income (tw recovery)', 52), ('other revenue', 50), (' foreign exchange gain', 50), (' net foreign exchange gain', 50), (' quota lease income', 50), (' dividend from other parties', 48), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' other miscellaneous - net (loss)/gain', 45), (' net other foreign exchange (losses)/gains', 44), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 37), (' commission revenue', 36), (' insurance proceeds', 36), (' japan recoveries', 36), (' net ppe disposal (loss)/gain', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' share of jv income', 73), (' margin charge income', 61), (' sundry income', 58), (' net of tax', 57), (' insurance proceeds', 55), (' net foreign exchange gain', 54), (' dividend from other parties', 52), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), ('other revenue', 50), ('  government grants', 50), (' foreign exchange gain', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' other income', 45), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), (' effective portion of changes in fair value of cash flow', 42), (' other', 40), (' paid by customers - at amortised cost', 38), (' net ppe disposal (loss)/gain', 38), (' other miscellaneous - net (loss)/gain', 38), (' profit from discontinued operation', 37), (' commission revenue', 36), (' net (loss)/profit on disposal of non-current assets', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [(' net of tax', 57), (' japan recoveries', 57), (' other income', 55), (' net other foreign exchange (losses)/gains', 54), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), ('other revenue', 50), (' dividend from other parties', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' margin charge income', 44), (' quota lease income', 44), (' commission revenue', 43), ('  government grants', 42), (' effective portion of changes in fair value of cash flow', 42), (' paid by customers - at amortised cost', 42), (' other', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 37), (' share of jv income', 36), (' net ppe disposal (loss)/gain', 33), (' sundry income', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' profit from discontinued operation', 56), (' margin charge income', 56), (' quota lease income', 56), (' other miscellaneous - net (loss)/gain', 55), (' net ppe disposal (loss)/gain', 54), ('other revenue', 50), (' commission revenue', 50), (' japan recoveries', 50), (' net (loss)/profit on disposal of non-current assets', 50), (' net other foreign exchange (losses)/gains', 49), (' dividend from other parties', 48), (' secondment income (tw recovery)', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' effective portion of changes in fair value of cash flow', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), ('  government grants', 42), (' paid by customers - at amortised cost', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' other income', 73), (' share of jv income', 64), (' quota lease income', 62), (' sundry income', 58), (' net of tax', 57), (' margin charge income', 56), (' profit from discontinued operation', 52), (' net (loss)/profit on disposal of non-current assets', 50), (' secondment income (tw recovery)', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 44), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' foreign exchange gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net foreign exchange gains/(losses)', 40), (' other miscellaneous - net (loss)/gain', 37), (' commission revenue', 36), (' dividend from other parties', 36), (' japan recoveries', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [(' sundry income', 75), (' other income', 73), (' share of jv income', 64), (' net of tax', 57), (' margin charge income', 56), (' paid by customers - at amortised cost', 54), (' quota lease income', 50), (' secondment income (tw recovery)', 48), (' commission revenue', 43), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' foreign exchange gain', 40), (' other', 40), (' dividend from other parties', 40), (' net foreign exchange gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' net (loss)/profit on disposal of non-current assets', 35), (' net foreign exchange gains/(losses)', 34), (' net foreign exchange (loss)/gain', 34), (' other miscellaneous - net (loss)/gain', 34), (' effective portion of changes in fair value of cash flow', 32), (' net other foreign exchange (losses)/gains', 32), (' net ppe disposal (loss)/gain', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [(' net of tax', 57), (' dividend from other parties', 48), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' net other foreign exchange (losses)/gains', 45), (' quota lease income', 44), ('other revenue', 42), ('  government grants', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 39), (' net (loss)/profit on disposal of non-current assets', 39), (' net foreign exchange gain', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' other miscellaneous - net (loss)/gain', 31), (' margin charge income', 28), (' other income', 27), (' share of jv income', 27), (' sundry income', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [(' insurance proceeds', 55), ('other revenue', 50), ('  government grants', 50), (' sundry income', 50), (' other income', 45), (' dividend from other parties', 44), (' commission revenue', 43), (' effective portion of changes in fair value of cash flow', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), (' profit from discontinued operation', 41), (' other', 40), (' margin charge income', 39), (' other miscellaneous - net (loss)/gain', 39), (' net other foreign exchange (losses)/gains', 39), (' quota lease income', 38), (' share of jv income', 36), (' net foreign exchange gains/(losses)', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' foreign exchange gain', 35), (' net foreign exchange gain', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' net ppe disposal (loss)/gain', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [('other revenue', 100), (' other', 100), (' dividend from other parties', 100), (' other income', 100), (' other miscellaneous - net (loss)/gain', 100), (' net other foreign exchange (losses)/gains', 100), ('  government grants', 60), (' profit from discontinued operation', 60), (' secondment income (tw recovery)', 60), (' japan recoveries', 60), (' insurance proceeds', 40), (' foreign exchange gain', 40), (' net foreign exchange gain', 40), (' effective portion of changes in fair value of cash flow', 40), (' share of jv income', 40), (' margin charge income', 40), (' net foreign exchange gains/(losses)', 40), (' paid by customers - at amortised cost', 40), (' net foreign exchange (loss)/gain', 40), (' quota lease income', 40), (' commission revenue', 20), (' net of tax', 20), (' net ppe disposal (loss)/gain', 20), (' sundry income', 20), (' net (loss)/profit on disposal of non-current assets', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [(' share of jv income', 73), (' other income', 64), (' sundry income', 58), (' net of tax', 57), ('other revenue', 50), (' commission revenue', 50), (' margin charge income', 50), (' secondment income (tw recovery)', 48), (' quota lease income', 44), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' other', 40), (' net foreign exchange gains/(losses)', 39), (' paid by customers - at amortised cost', 39), (' net foreign exchange (loss)/gain', 39), (' net other foreign exchange (losses)/gains', 39), (' insurance proceeds', 36), (' net foreign exchange gain', 36), (' dividend from other parties', 35), (' effective portion of changes in fair value of cash flow', 35), (' other miscellaneous - net (loss)/gain', 35), (' net (loss)/profit on disposal of non-current assets', 35), ('  government grants', 33), (' net ppe disposal (loss)/gain', 31), (' japan recoveries', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' other income', 73), (' share of jv income', 64), (' quota lease income', 62), (' sundry income', 58), (' net of tax', 57), (' margin charge income', 56), (' profit from discontinued operation', 52), (' net (loss)/profit on disposal of non-current assets', 50), (' secondment income (tw recovery)', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 44), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' foreign exchange gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net foreign exchange gains/(losses)', 40), (' other miscellaneous - net (loss)/gain', 37), (' commission revenue', 36), (' dividend from other parties', 36), (' japan recoveries', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [(' sundry income', 75), (' other income', 73), (' share of jv income', 64), (' net of tax', 57), (' margin charge income', 56), (' paid by customers - at amortised cost', 54), (' quota lease income', 50), (' secondment income (tw recovery)', 48), (' commission revenue', 43), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' foreign exchange gain', 40), (' other', 40), (' dividend from other parties', 40), (' net foreign exchange gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' net (loss)/profit on disposal of non-current assets', 35), (' net foreign exchange gains/(losses)', 34), (' net foreign exchange (loss)/gain', 34), (' other miscellaneous - net (loss)/gain', 34), (' effective portion of changes in fair value of cash flow', 32), (' net other foreign exchange (losses)/gains', 32), (' net ppe disposal (loss)/gain', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [(' net of tax', 57), (' dividend from other parties', 48), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' net other foreign exchange (losses)/gains', 45), (' quota lease income', 44), ('other revenue', 42), ('  government grants', 42), (' net foreign exchange gains/(losses)', 41), (' net foreign exchange (loss)/gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 39), (' net (loss)/profit on disposal of non-current assets', 39), (' net foreign exchange gain', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), (' profit from discontinued operation', 33), (' secondment income (tw recovery)', 33), (' other miscellaneous - net (loss)/gain', 31), (' margin charge income', 28), (' other income', 27), (' share of jv income', 27), (' sundry income', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [(' insurance proceeds', 55), ('other revenue', 50), ('  government grants', 50), (' sundry income', 50), (' other income', 45), (' dividend from other parties', 44), (' commission revenue', 43), (' effective portion of changes in fair value of cash flow', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), (' profit from discontinued operation', 41), (' other', 40), (' margin charge income', 39), (' other miscellaneous - net (loss)/gain', 39), (' net other foreign exchange (losses)/gains', 39), (' quota lease income', 38), (' share of jv income', 36), (' net foreign exchange gains/(losses)', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' foreign exchange gain', 35), (' net foreign exchange gain', 33), (' paid by customers - at amortised cost', 33), (' net foreign exchange (loss)/gain', 33), (' net ppe disposal (loss)/gain', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [('other revenue', 100), (' other', 100), (' dividend from other parties', 100), (' other income', 100), (' other miscellaneous - net (loss)/gain', 100), (' net other foreign exchange (losses)/gains', 100), ('  government grants', 60), (' profit from discontinued operation', 60), (' secondment income (tw recovery)', 60), (' japan recoveries', 60), (' insurance proceeds', 40), (' foreign exchange gain', 40), (' net foreign exchange gain', 40), (' effective portion of changes in fair value of cash flow', 40), (' share of jv income', 40), (' margin charge income', 40), (' net foreign exchange gains/(losses)', 40), (' paid by customers - at amortised cost', 40), (' net foreign exchange (loss)/gain', 40), (' quota lease income', 40), (' commission revenue', 20), (' net of tax', 20), (' net ppe disposal (loss)/gain', 20), (' sundry income', 20), (' net (loss)/profit on disposal of non-current assets', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [(' share of jv income', 73), (' other income', 64), (' sundry income', 58), (' net of tax', 57), ('other revenue', 50), (' commission revenue', 50), (' margin charge income', 50), (' secondment income (tw recovery)', 48), (' quota lease income', 44), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' other', 40), (' net foreign exchange gains/(losses)', 39), (' paid by customers - at amortised cost', 39), (' net foreign exchange (loss)/gain', 39), (' net other foreign exchange (losses)/gains', 39), (' insurance proceeds', 36), (' net foreign exchange gain', 36), (' dividend from other parties', 35), (' effective portion of changes in fair value of cash flow', 35), (' other miscellaneous - net (loss)/gain', 35), (' net (loss)/profit on disposal of non-current assets', 35), ('  government grants', 33), (' net ppe disposal (loss)/gain', 31), (' japan recoveries', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': [100, 100], 'value': [79761.0, -59115.0], 'label': [' Others', ' Others'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' paid by customers - at amortised cost', 46), (' other income', 45), (' share of jv income', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' quota lease income', 44), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), ('  government grants', 42), (' net foreign exchange gain', 42), (' sundry income', 42), (' other miscellaneous - net (loss)/gain', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' net other foreign exchange (losses)/gains', 41), (' other', 40), (' margin charge income', 39), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' japan recoveries', 36), (' foreign exchange gain', 35), ('other revenue', 33), (' net ppe disposal (loss)/gain', 33), (' dividend from other parties', 32)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [(' paid by customers - at amortised cost', 50), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' other miscellaneous - net (loss)/gain', 45), (' commission revenue', 43), (' net of tax', 43), (' secondment income (tw recovery)', 43), (' japan recoveries', 43), ('  government grants', 42), (' other', 40), (' effective portion of changes in fair value of cash flow', 40), (' net other foreign exchange (losses)/gains', 40), (' profit from discontinued operation', 38), (' net foreign exchange (loss)/gain', 38), (' dividend from other parties', 36), (' other income', 36), (' share of jv income', 36), ('other revenue', 33), (' net foreign exchange gain', 33), (' margin charge income', 33), (' sundry income', 33), (' quota lease income', 31), (' foreign exchange gain', 30)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest expense , res_fuzz_match = [(' other', 60), ('other revenue', 58), (' net of tax', 57), (' net foreign exchange gain', 47), (' net foreign exchange gains/(losses)', 47), (' net foreign exchange (loss)/gain', 47), (' net ppe disposal (loss)/gain', 47), (' net other foreign exchange (losses)/gains', 47), (' insurance proceeds', 45), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 40), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' margin charge income', 34), (' quota lease income', 34), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 27), (' paid by customers - at amortised cost', 27), (' sundry income', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest on lease liabilities (note 15) , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' quota lease income', 50), (' net (loss)/profit on disposal of non-current assets', 48), (' net foreign exchange gain', 46), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' net foreign exchange gains/(losses)', 44), (' other miscellaneous - net (loss)/gain', 44), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' net other foreign exchange (losses)/gains', 42), (' paid by customers - at amortised cost', 38), (' other income', 36), (' effective portion of changes in fair value of cash flow', 36), (' profit from discontinued operation', 36), (' share of jv income', 36), (' japan recoveries', 36), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' margin charge income', 33), (' sundry income', 33), (' dividend from other parties', 32), (' commission revenue', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest expense , res_fuzz_match = [(' other', 60), ('other revenue', 58), (' net of tax', 57), (' net foreign exchange gain', 47), (' net foreign exchange gains/(losses)', 47), (' net foreign exchange (loss)/gain', 47), (' net ppe disposal (loss)/gain', 47), (' net other foreign exchange (losses)/gains', 47), (' insurance proceeds', 45), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 40), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' margin charge income', 34), (' quota lease income', 34), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 27), (' paid by customers - at amortised cost', 27), (' sundry income', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = interest on lease liabilities (note 15) , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' quota lease income', 50), (' net (loss)/profit on disposal of non-current assets', 48), (' net foreign exchange gain', 46), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' net foreign exchange gains/(losses)', 44), (' other miscellaneous - net (loss)/gain', 44), ('other revenue', 42), (' net foreign exchange (loss)/gain', 42), (' net other foreign exchange (losses)/gains', 42), (' paid by customers - at amortised cost', 38), (' other income', 36), (' effective portion of changes in fair value of cash flow', 36), (' profit from discontinued operation', 36), (' share of jv income', 36), (' japan recoveries', 36), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' margin charge income', 33), (' sundry income', 33), (' dividend from other parties', 32), (' commission revenue', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('NULL', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('NULL', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('amount transferred to retained earnings', 38), ('minimum alternate tax credit entitlement', 35), ('provision for taxation previous year', 34), ('current tax', 30), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 30), (' income tax expense', 28), (' income tax benefit', 27), (' income tax', 24), ('prior year ', 23), ('earlier year', 19), ('deferred tax', 16)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('provision for taxation previous year', 45), ('deferred tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('earlier year', 35), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -649317.0, 'line_item_label': ['Income tax expenses'], 'note_numbers': ['6'], 'line_item_value': [-649317.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('amount transferred to retained earnings', 38), ('minimum alternate tax credit entitlement', 35), ('provision for taxation previous year', 34), ('current tax', 30), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 30), (' income tax expense', 28), (' income tax benefit', 27), (' income tax', 24), ('prior year ', 23), ('earlier year', 19), ('deferred tax', 16)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('provision for taxation previous year', 45), ('deferred tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('earlier year', 35), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -1101271.0, 'line_item_label': ['Income tax expenses'], 'note_numbers': ['6'], 'line_item_value': [-1101271.0]}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 62), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 50)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 62), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total tax (expense)/benefit in income statement', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 60), (' current income tax', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' deferred income tax', 53)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: current income tax charge , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 62), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 50)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = current income tax charge: prior year (over)/under provision , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 62), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total tax (expense)/benefit in income statement', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = deferred tax: relating to the origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = income tax expense reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 60), (' current income tax', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' deferred income tax', 53)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 5, 7], 'score': [100, 100, 100, 100, 100, 100], 'value': [2121041.0, -211296.0, 1101271.0, 1300838.0, 334577.0, 649317.0], 'label': ['Current income tax charge: Current income tax charge', 'Current income tax charge: Prior year (over)/under provision', 'Income tax expense reported in the statement of profit or loss and other comprehensive income', 'Current income tax charge: Current income tax charge', 'Current income tax charge: Prior year (over)/under provision', 'Income tax expense reported in the statement of profit or loss and other comprehensive income'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), ('income tax expense', 56), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense / (benefit)', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' income tax expense on continuing operations', 34)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 41)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 45)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 38), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), (' deferred income tax', 33), (' current income tax', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 78), (' total income tax expense / (benefit)', 78), (' deferred income tax', 73), (' current income tax', 71), (' income tax expense on continuing operations', 70), (' total tax (expense)/benefit in income statement', 59)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = accounting profit before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), ('income tax expense', 56), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense / (benefit)', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' income tax expense on continuing operations', 34)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2020: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 41)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = non-deductible expenses for tax purpose , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' total income tax expense / (benefit)', 47), (' total tax (expense)/benefit in income statement', 45)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under provision , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 38), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), (' deferred income tax', 33), (' current income tax', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = aggregate income tax expenses , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 78), (' total income tax expense / (benefit)', 78), (' deferred income tax', 73), (' current income tax', 71), (' income tax expense on continuing operations', 70), (' total tax (expense)/benefit in income statement', 59)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 6, 11], 'score': [87, 100, 87, 100], 'value': [4066588.0, 1101271.0, 1236359.0, 649317.0], 'label': [' Accounting profit before income tax', ' Aggregate income tax expenses', ' Accounting profit before income tax', ' Aggregate income tax expenses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 467976 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 95085 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 560657 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 201745 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 348031 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 597032 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 56424 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 152158 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = 2479108 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 43), (' current income tax', 35), (' deferred income tax', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = tax income during the period recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), ('income tax expense', 56), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' current income tax', 47), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 38)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = tax income during the period recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), ('income tax expense', 56), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' current income tax', 47), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 38)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('prior period', 22), ('exceptional', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('exceptional', 40), ('prior period', 38)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('prior period', 61), ('exceptional', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 34), ('exceptional', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('prior period', 22), ('exceptional', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('exceptional', 40), ('prior period', 38)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('prior period', 61), ('exceptional', 35)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 29)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 34), ('exceptional', 20)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-18 18:36:11+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-18 18:36:11+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('NULL', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-18 18:36:11+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-18 18:36:11+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers cost of sales , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = employee benefit expenses , res_fuzz_match = [('NULL', 15)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = depreciation expenses , res_fuzz_match = [('NULL', 11)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = income tax expenses , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-18 18:36:11+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

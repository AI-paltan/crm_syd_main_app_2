2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-06-26 09:38:22+0530 - sLogger - DEBUG - process_main_pages started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-06-26 09:38:22+0530 - sLogger - DEBUG - start_refactoring started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-06-26 09:38:22+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-06-26 09:38:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-06-26 09:38:22+0530 - sLogger - DEBUG - start_refactoring started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-06-26 09:38:22+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-06-26 09:38:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-06-26 09:38:22+0530 - sLogger - DEBUG - start_refactoring started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-06-26 09:38:22+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-06-26 09:38:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-06-26 09:38:22+0530 - sLogger - DEBUG - set_section_details started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-06-26 09:38:22+0530 - sLogger - DEBUG - set_section_details started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-06-26 09:38:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-06-26 09:38:22+0530 - sLogger - DEBUG - set_section_details started
2023-06-26 09:38:22+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 December | changes in operating assets and liabilities
2023-06-26 09:38:24+0530 - sLogger - DEBUG - process_main_pages completed
2023-06-26 09:39:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-06-26 09:39:14+0530 - sLogger - DEBUG - process_main_pages started
2023-06-26 09:39:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-06-26 09:39:14+0530 - sLogger - DEBUG - start_refactoring started
2023-06-26 09:39:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-06-26 09:39:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-06-26 09:39:14+0530 - sLogger - DEBUG - start_refactoring started
2023-06-26 09:39:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-06-26 09:39:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-06-26 09:39:14+0530 - sLogger - DEBUG - start_refactoring started
2023-06-26 09:39:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-06-26 09:39:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-06-26 09:39:14+0530 - sLogger - DEBUG - set_section_details started
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 31
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 28
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 47), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('current liabilities', 17), ('liabilities', 7), ('noncurrent liabilities', 6)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 29
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 46
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('current liabilities', 28), ('noncurrent assets', 23), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14), ('noncurrent liabilities', 11)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 35
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Inventories | [('noncurrent assets', 36), ('current liabilities', 35), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity', 27), ('equity and liabilities', 23), ('equity liabilities', 18), ('noncurrent liabilities', 17)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 45
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Prepayments | [('current liabilities', 30), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 24
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 55), ('assets', 42), ('noncurrent liabilities', 36), ('equity liabilities', 31), ('equity and liabilities', 28), ('equity', 24), ('liabilities', 8)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 29
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 29
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 49), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('equity liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 13), ('noncurrent liabilities', 11)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 24
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('noncurrent liabilities', 32), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equity and liabilities', 21), ('liabilities', 12)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 29
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 27
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity liabilities', 33), ('current liabilities', 32), ('equity and liabilities', 29), ('equity', 24), ('liabilities', 12), ('noncurrent liabilities', 8)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 22
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 16
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 29
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 29
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current assets', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrent assets', 23), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 37
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 28
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 28
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Lease liabili ities | [('equity liabilities', 69), ('equity and liabilities', 61), ('liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 40), ('equity', 27), ('current assets', 21), ('noncurrent assets', 21), ('assets', 19)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD current assets | score 24
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD current liabilities | score 68
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD noncurrent assets | score 22
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD noncurrent liabilities | score 63
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD non current assets | score 22
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD non current liabilities | score 62
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD equity and liabilities | score 68
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabili ities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Current tax liability | [('current liabilities', 88), ('equity liabilities', 58), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current liabilities | score 80
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent assets | score 53
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent liabilities | score 74
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current assets | score 53
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current liabilities | score 73
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity and liabilities | score 60
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity | score 45
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 52
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 57
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 26
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 24
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 23
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Employee benefits | [('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('equity', 29), ('equity and liabilities', 25), ('assets', 20), ('noncurrent liabilities', 14), ('liabilities', 10)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 28
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 25
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('assets', 19), ('current assets', 14), ('noncurrent assets', 14)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('equity liabilities', 36), ('current liabilities', 35), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 60
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current liabilities', 30), ('current assets', 21), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 31
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 31
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('equity', 24), ('current liabilities', 24), ('noncurrent liabilities', 24)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 27
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 26
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Retained earnings | [('assets', 38), ('equity and liabilities', 36), ('current assets', 33), ('noncurrent assets', 33), ('current liabilities', 32), ('equity', 24), ('equity liabilities', 17), ('noncurrent liabilities', 16), ('liabilities', 12)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 33
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 31
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 34
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 36
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-06-26 09:39:14+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 15
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 21
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 32
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-06-26 09:39:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-06-26 09:39:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-06-26 09:39:14+0530 - sLogger - DEBUG - set_section_details started
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash paid to suppliers and employees | adjustments for increase decrease in operating liabilities
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operations | movements in working capital
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | working capital adjustments
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/from operating activities | adjustments for increase decrease in operating liabilities
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment | adiustments for movements in working capital
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from discontinued operations | operating cash flow before working capital changes
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/from investing activities | operating cash flow before working capital changes
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities | changes in operating assets and liabilities
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | movements in working capital
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | operating cash flow before working capital changes
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decreasel/ncrease in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of year | changes in operating assets and liabilities
2023-06-26 09:39:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at end of year | changes in operating assets and liabilities
2023-06-26 09:39:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-06-26 09:39:15+0530 - sLogger - ERROR - error occured: ord() expected a character, but string of length 2 found
2023-06-26 09:39:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-06-26 09:39:15+0530 - sLogger - ERROR - error occured: ord() expected a character, but string of length 2 found
2023-06-26 09:39:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-06-26 09:39:16+0530 - sLogger - ERROR - error occured: ord() expected a character, but string of length 2 found
2023-06-26 09:39:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-06-26 09:39:16+0530 - sLogger - ERROR - error occured: ord() expected a character, but string of length 2 found
2023-06-26 09:39:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-06-26 09:39:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-06-26 09:39:16+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-06-26 09:39:16+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-06-26 09:39:16+0530 - sLogger - ERROR - error occured: 'year'
2023-06-26 09:39:16+0530 - sLogger - DEBUG - process_main_pages completed
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 12), ('other bank balances', 9), ('cash and bank balances', 8), ('cash and cash equivalents', 7), (' cash and cash equivalents', 7), ('bank balances other than above', 6), ('bank balances other than cash and cash equivalents', 4)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash and short term deposits', 38), ('bank balances other than above', 33), ('bank balances other than cash and cash equivalents', 31), ('other bank balances', 25), ('cash and cash equivalents', 22), (' cash and cash equivalents', 22), ('cash and bank balances', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('other bank balances', 39), ('cash and short term deposits', 39), ('cash and bank balances', 36)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 42), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25), ('cash and bank balances', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 92315.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': [nan], 'line_item_value': [92315.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('other bank balances', 18), ('cash and bank balances', 16), ('bank balances other than above', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and short term deposits', 54), ('cash and bank balances', 39), ('bank balances other than above', 17), ('other bank balances', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('bank balances other than above', 45), ('cash and cash equivalents', 42), (' cash and cash equivalents', 42), ('other bank balances', 41), ('bank balances other than cash and cash equivalents', 36), ('cash and short term deposits', 33), ('cash and bank balances', 24)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('cash and bank balances', 14), ('bank balances other than cash and cash equivalents', 11), ('bank balances other than above', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 12), ('other bank balances', 9), ('cash and bank balances', 8), ('cash and cash equivalents', 7), (' cash and cash equivalents', 7), ('bank balances other than above', 6), ('bank balances other than cash and cash equivalents', 4)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash and short term deposits', 38), ('bank balances other than above', 33), ('bank balances other than cash and cash equivalents', 31), ('other bank balances', 25), ('cash and cash equivalents', 22), (' cash and cash equivalents', 22), ('cash and bank balances', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('other bank balances', 39), ('cash and short term deposits', 39), ('cash and bank balances', 36)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 42), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 25), (' cash and cash equivalents', 25), ('cash and bank balances', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 41842.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': [nan], 'line_item_value': [41842.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 27635.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [27635.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 31)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 36)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 34319.0, 'line_item_label': ['Inventories'], 'note_numbers': ['10'], 'line_item_value': [34319.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' inventories', 100), (' finished goods at cost', 81), (' provision for inventory obsolescence', 62), (' goods in transit', 50), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' stores and other consumables at cost', 29), (' spare parts', 24), (' cranes - in transit', 23), (' cranes', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories goods in transit , res_fuzz_match = [(' goods in transit', 100), (' inventories', 100), (' provision for inventory obsolescence', 65), (' finished goods at cost', 62), (' cranes - in transit', 62), (' cranes', 60), (' finished goods', 55), (' finished goods', 55), (' stores and other consumables at cost', 45), ('raw materials', 38), (' raw materials', 38), (' work in progress', 31), (' spare parts', 31)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories provision for inventory obsolescence , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' work in progress', 54), (' spare parts', 40), (' stores and other consumables at cost', 37), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' cranes', 33), (' finished goods at cost', 31), ('raw materials', 30), (' raw materials', 30), (' cranes - in transit', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories nan , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 77), (' stores and other consumables at cost', 46), (' cranes', 44), (' goods in transit', 40), (' finished goods', 36), (' finished goods', 36), (' finished goods at cost', 31), ('raw materials', 30), (' raw materials', 30), (' cranes - in transit', 30), (' work in progress', 29), (' spare parts', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods', 100), (' inventories', 100), (' finished goods at cost', 81), (' provision for inventory obsolescence', 62), (' goods in transit', 50), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' stores and other consumables at cost', 29), (' spare parts', 24), (' cranes - in transit', 23), (' cranes', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories goods in transit , res_fuzz_match = [(' goods in transit', 100), (' inventories', 100), (' provision for inventory obsolescence', 65), (' finished goods at cost', 62), (' cranes - in transit', 62), (' cranes', 60), (' finished goods', 55), (' finished goods', 55), (' stores and other consumables at cost', 45), ('raw materials', 38), (' raw materials', 38), (' work in progress', 31), (' spare parts', 31)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories provision for inventory obsolescence , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' work in progress', 54), (' spare parts', 40), (' stores and other consumables at cost', 37), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' cranes', 33), (' finished goods at cost', 31), ('raw materials', 30), (' raw materials', 30), (' cranes - in transit', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 10 inventories nan , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 77), (' stores and other consumables at cost', 46), (' cranes', 44), (' goods in transit', 40), (' finished goods', 36), (' finished goods', 36), (' finished goods at cost', 31), ('raw materials', 30), (' raw materials', 30), (' cranes - in transit', 30), (' work in progress', 29), (' spare parts', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [21156.0, 13236.0, -73.0, 34319.0, 14472.0, 13324.0, -161.0, 27635.0], 'label': ['10 Inventories Finished goods', '10 Inventories Goods in transit', '10 Inventories Provision for inventory obsolescence', '10 Inventories nan', '10 Inventories Finished goods', '10 Inventories Goods in transit', '10 Inventories Provision for inventory obsolescence', '10 Inventories nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other assets', 12), ('other financial assets', 8)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other assets', 40), ('other current financial assets', 35), ('other financial assets', 33), ('prepayments', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8], 'score': 100, 'value': 880.0, 'line_item_label': ['Prepayments', 'Other assets'], 'note_numbers': [nan, nan], 'line_item_value': [815.0, 65.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other financial assets', 30), ('other current financial assets', 29), ('other current assets', 25), ('other assets', 25), ('prepayments', 15)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current assets', 39), ('other financial assets', 39), ('other current financial assets', 33), ('prepayments', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 29), ('other current financial assets', 22), ('prepayments', 13)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other assets', 12), ('other financial assets', 8)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other assets', 40), ('other current financial assets', 35), ('other financial assets', 33), ('prepayments', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8], 'score': 100, 'value': 745.0, 'line_item_label': ['Prepayments', 'Other assets'], 'note_numbers': [nan, nan], 'line_item_value': [680.0, 65.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' income tax receivable from related parties', 15), (' deferred operating expenditure', 15), ('other assets', 12), (' financial assets', 11), (' biological assets', 11), (' other financial assets', 8)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' deferred operating expenditure', 39), (' trade and other receivables', 38), (' income tax receivable from related parties', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), ('other current assets', 42), (' other current assets', 42), ('other assets', 40), (' trade and other receivables', 35), (' other financial assets', 33), (' biological assets', 28), (' financial assets', 27), (' income tax receivable from related parties', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 8], 'score': 100, 'value': 25794.0, 'line_item_label': ['Trade and other receivables', 'Other assets'], 'note_numbers': [nan, nan], 'line_item_value': [25729.0, 65.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' deferred operating expenditure', 15), (' trade and other receivables', 15), (' income tax receivable from related parties', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 42), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), (' other financial assets', 30), ('other current assets', 25), ('other assets', 25), (' other current assets', 25), (' deferred operating expenditure', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets', 42), (' income tax receivable from related parties', 40), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' deferred operating expenditure', 37), (' financial assets', 23), (' biological assets', 18)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' biological assets', 29), (' other financial assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24), (' deferred operating expenditure', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' income tax receivable from related parties', 15), (' deferred operating expenditure', 15), ('other assets', 12), (' financial assets', 11), (' biological assets', 11), (' other financial assets', 8)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' deferred operating expenditure', 39), (' trade and other receivables', 38), (' income tax receivable from related parties', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), ('other current assets', 42), (' other current assets', 42), ('other assets', 40), (' trade and other receivables', 35), (' other financial assets', 33), (' biological assets', 28), (' financial assets', 27), (' income tax receivable from related parties', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 8], 'score': 100, 'value': 25275.0, 'line_item_label': ['Trade and other receivables', 'Other assets'], 'note_numbers': [nan, nan], 'line_item_value': [25210.0, 65.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('current assets', 57)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('current assets', 38)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('current assets', 57)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('current assets', 38)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('lease liabilities', 81), (' leases', 40), (' loans and borrowings', 19), ('short term debt', 13), ('short-term debt', 13), ('shortterm debt', 13), ('borrowings', 9), (' bank overdraft', 7), ('shortterm borrowings', 6)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('short term debt', 32), (' loans and borrowings', 32), ('short-term debt', 27), ('shortterm debt', 27), (' bank overdraft', 27), (' leases', 20), ('shortterm borrowings', 12), ('borrowings', 9)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 17], 'score': 100, 'value': 11043.0, 'line_item_label': ['Lease liabili ities', 'Lease liabilities'], 'note_numbers': ['13', '13'], 'line_item_value': [4090.0, 6953.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' bank overdraft', 44), (' loans and borrowings', 38), ('lease liabilities', 30), ('shortterm borrowings', 21), (' leases', 15), ('borrowings', 14), ('short term debt', 11), ('short-term debt', 11), ('shortterm debt', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('lease liabilities', 81), (' leases', 40), (' loans and borrowings', 19), ('short term debt', 13), ('short-term debt', 13), ('shortterm debt', 13), ('borrowings', 9), (' bank overdraft', 7), ('shortterm borrowings', 6)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17), (' bank overdraft', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), ('short-term debt', 16), ('shortterm debt', 16), ('short term debt', 15), ('borrowings', 12), (' bank overdraft', 8), ('shortterm borrowings', 7)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19), ('lease liabilities', 15)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('short term debt', 32), (' loans and borrowings', 32), ('short-term debt', 27), ('shortterm debt', 27), (' bank overdraft', 27), (' leases', 20), ('shortterm borrowings', 12), ('borrowings', 9)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 17], 'score': 100, 'value': 7638.0, 'line_item_label': ['Lease liabili ities', 'Lease liabilities'], 'note_numbers': ['13', '13'], 'line_item_value': [3652.0, 3986.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities opening balance , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 74), (' secured long-term bank loans', 48), (' balance at the end of period', 44), (' utilised – bank borrowings', 40), (' not later than 1 year', 37), ('bank borrowings', 35), (' bank overdraft', 30), ('current', 29), (' current', 29), (' loans from related party', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities additions , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 71), (' bank overdraft', 35), (' secured long-term bank loans', 32), (' loans from related party', 30), (' utilised – bank borrowings', 29), (' balance at the end of period', 27), ('bank borrowings', 20), (' not later than 1 year', 19), ('current', 14), (' current', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities payments , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 79), ('current', 43), (' current', 43), (' loans from related party', 41), (' secured long-term bank loans', 38), (' bank overdraft', 32), (' balance at the end of period', 32), (' utilised – bank borrowings', 28), ('bank borrowings', 27), (' not later than 1 year', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities closing balance , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 74), (' secured long-term bank loans', 48), (' balance at the end of period', 44), (' utilised – bank borrowings', 40), ('bank borrowings', 35), (' not later than 1 year', 32), (' bank overdraft', 30), ('current', 29), (' current', 29), (' loans from related party', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities current , res_fuzz_match = [('current', 100), (' leases', 100), (' current', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' utilised – bank borrowings', 39), (' loans from related party', 37), ('bank borrowings', 36), (' secured long-term bank loans', 32), (' balance at the end of period', 26), (' bank overdraft', 24), (' not later than 1 year', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities non-current , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 84), ('current', 73), (' current', 73), ('bank borrowings', 45), (' utilised – bank borrowings', 44), (' bank overdraft', 40), (' loans from related party', 32), (' not later than 1 year', 31), (' secured long-term bank loans', 26), (' balance at the end of period', 26)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = amounts recognised in profit or loss interest on lease liabilities , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 73), (' secured long-term bank loans', 46), ('current', 43), (' current', 43), (' loans from related party', 43), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 35), (' bank overdraft', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = amounts recognised in profit or loss depreciation of right-of use assets , res_fuzz_match = [(' leases', 75), ('current', 43), (' current', 43), (' loans from related party', 43), (' lease liabilities - current', 38), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 35), (' secured long-term bank loans', 33), (' lease liabilities', 33), (' bank overdraft', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = amounts recognised in the statement of cash flows total cash outflow for leases , res_fuzz_match = [(' leases', 100), (' lease liabilities', 53), ('current', 43), (' current', 43), (' balance at the end of period', 43), (' not later than 1 year', 42), (' loans from related party', 38), ('bank borrowings', 36), (' utilised – bank borrowings', 35), (' lease liabilities - current', 35), (' secured long-term bank loans', 29), (' bank overdraft', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities opening balance , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 74), (' secured long-term bank loans', 48), (' balance at the end of period', 44), (' utilised – bank borrowings', 40), (' not later than 1 year', 37), ('bank borrowings', 35), (' bank overdraft', 30), ('current', 29), (' current', 29), (' loans from related party', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities additions , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 71), (' bank overdraft', 35), (' secured long-term bank loans', 32), (' loans from related party', 30), (' utilised – bank borrowings', 29), (' balance at the end of period', 27), ('bank borrowings', 20), (' not later than 1 year', 19), ('current', 14), (' current', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities payments , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 79), ('current', 43), (' current', 43), (' loans from related party', 41), (' secured long-term bank loans', 38), (' bank overdraft', 32), (' balance at the end of period', 32), (' utilised – bank borrowings', 28), ('bank borrowings', 27), (' not later than 1 year', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities closing balance , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 74), (' secured long-term bank loans', 48), (' balance at the end of period', 44), (' utilised – bank borrowings', 40), ('bank borrowings', 35), (' not later than 1 year', 32), (' bank overdraft', 30), ('current', 29), (' current', 29), (' loans from related party', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities current , res_fuzz_match = [('current', 100), (' leases', 100), (' current', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' utilised – bank borrowings', 39), (' loans from related party', 37), ('bank borrowings', 36), (' secured long-term bank loans', 32), (' balance at the end of period', 26), (' bank overdraft', 24), (' not later than 1 year', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = 13 lease liabilities non-current , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 84), ('current', 73), (' current', 73), ('bank borrowings', 45), (' utilised – bank borrowings', 44), (' bank overdraft', 40), (' loans from related party', 32), (' not later than 1 year', 31), (' secured long-term bank loans', 26), (' balance at the end of period', 26)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = amounts recognised in profit or loss interest on lease liabilities , res_fuzz_match = [(' leases', 100), (' lease liabilities', 100), (' lease liabilities - current', 73), (' secured long-term bank loans', 46), ('current', 43), (' current', 43), (' loans from related party', 43), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 35), (' bank overdraft', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = amounts recognised in profit or loss depreciation of right-of use assets , res_fuzz_match = [(' leases', 75), ('current', 43), (' current', 43), (' loans from related party', 43), (' lease liabilities - current', 38), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' utilised – bank borrowings', 35), (' secured long-term bank loans', 33), (' lease liabilities', 33), (' bank overdraft', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = amounts recognised in the statement of cash flows total cash outflow for leases , res_fuzz_match = [(' leases', 100), (' lease liabilities', 53), ('current', 43), (' current', 43), (' balance at the end of period', 43), (' not later than 1 year', 42), (' loans from related party', 38), ('bank borrowings', 36), (' utilised – bank borrowings', 35), (' lease liabilities - current', 35), (' secured long-term bank loans', 29), (' bank overdraft', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [11043.0, 888.0, -4452.0, 7638.0, 3652.0, 3986.0, 159.0, 4293.0, 1289.0, 11685.0, -2009.0, 11.043, 4090.0, 6953.0, 78.0, 1931.0], 'label': ['13 Lease liabilities Opening balance', '13 Lease liabilities Additions', '13 Lease liabilities Payments', '13 Lease liabilities Closing balance', '13 Lease liabilities Current', '13 Lease liabilities Non-current', 'Amounts recognised in profit or loss Interest on lease liabilities', 'Amounts recognised in the statement of cash flows Total cash outflow for leases', '13 Lease liabilities Opening balance', '13 Lease liabilities Additions', '13 Lease liabilities Payments', '13 Lease liabilities Closing balance', '13 Lease liabilities Current', '13 Lease liabilities Non-current', 'Amounts recognised in profit or loss Interest on lease liabilities', 'Amounts recognised in the statement of cash flows Total cash outflow for leases'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 44), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other financial liabilities', 56), ('other current liabilities', 56), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 84, 'value': 16698.0, 'line_item_label': ['Current tax liability'], 'note_numbers': [nan], 'line_item_value': [16698.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('other financial liabilities', 38), ('other current liabilities', 33), ('current maturities', 17), ('current maturities of long-term debt', 16), ('current maturities of longterm debt', 16)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 44), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other financial liabilities', 56), ('other current liabilities', 56), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 84, 'value': 1779.0, 'line_item_label': ['Current tax liability'], 'note_numbers': [nan], 'line_item_value': [1779.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('note payable(debt)', 38)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('note payable(debt)', 41)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('note payable(debt)', 38)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('note payable(debt)', 38)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('note payable(debt)', 41)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('note payable(debt)', 38)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('other trade payables', 35), ('accounts payable', 33), ('small enterprises', 32), ('trade payable', 29), ('trade and other payables', 26), ('micro enterprises', 26), ('outstanding dues of creditors other than', 25), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 21), ('total outstanding due of other creditors other than micro and small', 21), ('outstanding dues of micro enterprises and small enterprises', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('trade and other payables', 53), ('other trade payables', 53), ('trade payable', 43), ('small enterprises', 39), ('other than micro and small enterprises', 38), ('micro enterprises', 32), ('micro enterprises and small enterprises', 31), ('accounts payable', 27), ('total outstanding due of other creditors other than micro and small', 26), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 35064.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [35064.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('total outstanding due of other creditors other than micro and small', 39), ('small enterprises', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36), ('micro enterprises and small enterprises', 35), ('micro enterprises', 32), ('outstanding dues of micro enterprises and small enterprises', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('other trade payables', 35), ('accounts payable', 33), ('small enterprises', 32), ('trade payable', 29), ('trade and other payables', 26), ('micro enterprises', 26), ('outstanding dues of creditors other than', 25), ('micro enterprises and small enterprises', 24), ('other than micro and small enterprises', 23), ('outstanding dues of creditors other than micro enterprises and small enterprises', 21), ('total outstanding due of other creditors other than micro and small', 21), ('outstanding dues of micro enterprises and small enterprises', 19)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('accounts payable', 50), ('other trade payables', 44), ('trade and other payables', 40), ('trade payable', 40), ('small enterprises', 36), ('other than micro and small enterprises', 33), ('micro enterprises', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 28), ('outstanding dues of creditors other than', 28), ('micro enterprises and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 23)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15), ('outstanding dues of creditors other than', 14), ('total outstanding due of other creditors other than micro and small', 14)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 40), ('small enterprises', 40), ('accounts payable', 34), ('trade and other payables', 22), ('trade payable', 22), ('outstanding dues of creditors other than', 21), ('outstanding dues of creditors other than micro enterprises and small enterprises', 17), ('micro enterprises and small enterprises', 16), ('outstanding dues of micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 16), ('other than micro and small enterprises', 16), ('other trade payables', 12)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('trade and other payables', 53), ('other trade payables', 53), ('trade payable', 43), ('small enterprises', 39), ('other than micro and small enterprises', 38), ('micro enterprises', 32), ('micro enterprises and small enterprises', 31), ('accounts payable', 27), ('total outstanding due of other creditors other than micro and small', 26), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 36669.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['12'], 'line_item_value': [36669.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' other trade payables', 82), (' trade payables - related parties', 71), (' trade payables - other parties', 71), (' trade and other payables', 65), (' related party payables', 59), (' amounts payable to controlling entity', 53), ('trade creditors', 46), ('current', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other trade payables', 80), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 73), (' trade payables - related parties', 55), ('trade creditors', 50), (' related party payables', 50), (' amounts payable to controlling entity', 36), ('current', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [(' amounts payable to controlling entity', 100), (' trade payables', 67), (' trade payables', 67), (' trade payables - other parties', 58), ('current', 57), (' related party payables', 56), (' trade and other payables', 55), (' trade payables - related parties', 54), (' other trade payables', 50), ('trade creditors', 43)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other trade payables', 80), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 73), (' trade payables - related parties', 55), ('trade creditors', 50), (' related party payables', 50), (' amounts payable to controlling entity', 36), ('current', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('trade creditors', 79), ('current', 57), (' other trade payables', 56), (' trade payables', 50), (' trade payables', 50), (' trade and other payables', 45), (' trade payables - related parties', 40), (' related party payables', 39), (' trade payables - other parties', 38), (' amounts payable to controlling entity', 32)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other trade payables', 80), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 73), (' trade payables - related parties', 55), ('trade creditors', 50), (' related party payables', 50), (' amounts payable to controlling entity', 36), ('current', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [(' trade and other payables', 50), (' related party payables', 38), (' trade payables', 38), (' trade payables - related parties', 38), (' trade payables - other parties', 38), (' trade payables', 38), (' amounts payable to controlling entity', 38), (' other trade payables', 38), ('current', 29), ('trade creditors', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other trade payables', 80), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 73), (' trade payables - related parties', 55), ('trade creditors', 50), (' related party payables', 50), (' amounts payable to controlling entity', 36), ('current', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' other trade payables', 82), (' trade payables - related parties', 71), (' trade payables - other parties', 71), (' trade and other payables', 65), (' related party payables', 59), (' amounts payable to controlling entity', 53), ('trade creditors', 46), ('current', 29)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [(' amounts payable to controlling entity', 100), (' trade payables', 67), (' trade payables', 67), (' trade payables - other parties', 58), ('current', 57), (' related party payables', 56), (' trade and other payables', 55), (' trade payables - related parties', 54), (' other trade payables', 50), ('trade creditors', 43)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('trade creditors', 79), ('current', 57), (' other trade payables', 56), (' trade payables', 50), (' trade payables', 50), (' trade and other payables', 45), (' trade payables - related parties', 40), (' related party payables', 39), (' trade payables - other parties', 38), (' amounts payable to controlling entity', 32)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [(' trade and other payables', 50), (' related party payables', 38), (' trade payables', 38), (' trade payables - related parties', 38), (' trade payables - other parties', 38), (' trade payables', 38), (' amounts payable to controlling entity', 38), (' other trade payables', 38), ('current', 29), ('trade creditors', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [1564.0, 1564.0, 19828.0, 19828.0, 15277.0, 36669.0, 3752.0, 19220.0], 'label': ['None Trade payables', 'Trade and other payables', 'None Amounts payable to controlling entity (Refer Note 19)', 'Trade and other payables', 'Trade and other payables', 'Trade and other payables', 'None Trade payables', 'None Amounts payable to controlling entity (Refer Note 19)'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'rows']}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 44), ('other liabilities', 43), ('other current financial liabilities', 41), ('trade and other payables', 26)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other liabilities', 57), ('other current liabilities', 56), ('other financial liabilities', 56), ('trade and other payables', 53), ('other current financial liabilities', 45)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 15], 'score': 84, 'value': 51762.0, 'line_item_label': ['Trade and other payables', 'Current tax liability'], 'note_numbers': ['12', nan], 'line_item_value': [35064.0, 16698.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other liabilities', 41), ('other financial liabilities', 38), ('other current liabilities', 33), ('other current financial liabilities', 32)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 44), ('other liabilities', 43), ('other current financial liabilities', 41), ('trade and other payables', 26)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 40)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other financial liabilities', 34), ('other current financial liabilities', 33), ('trade and other payables', 22), ('other liabilities', 22)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other liabilities', 57), ('other current liabilities', 56), ('other financial liabilities', 56), ('trade and other payables', 53), ('other current financial liabilities', 45)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 15], 'score': 84, 'value': 38448.0, 'line_item_label': ['Trade and other payables', 'Current tax liability'], 'note_numbers': ['12', nan], 'line_item_value': [36669.0, 1779.0]}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:32+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [('accrued expenses', 42), ('interest accrued', 36)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 53)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 27)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [('accrued expenses', 42), ('interest accrued', 36)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('interest accrued', 57), ('accrued expenses', 53)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [('interest accrued', 38), ('accrued expenses', 20)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-06-26 09:39:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:32+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-06-26 09:39:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-06-26 09:39:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('current tax liabilities', 59), ('tax', 40), (' income tax payable', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('tax', 100), ('current tax liabilities', 77), (' income tax payable', 50)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [11, 15, 19], 'score': 100, 'value': 16698.0, 'line_item_label': ['Liabilities', 'Current tax liability', 'Deferred tax liabilities'], 'note_numbers': [nan, nan, '12'], 'line_item_value': [0.0, 16698.0, 0.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 55), ('tax', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 65), ('current tax liabilities', 41)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('current tax liabilities', 59), ('tax', 40), (' income tax payable', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 60)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 50), (' income tax payable', 21), ('current tax liabilities', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('tax', 100), ('current tax liabilities', 77), (' income tax payable', 50)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [11, 15, 19], 'score': 100, 'value': 1779.0, 'line_item_label': ['Liabilities', 'Current tax liability', 'Deferred tax liabilities'], 'note_numbers': [nan, nan, '12'], 'line_item_value': [0.0, 1779.0, 0.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [('income tax (refundable)/payable', 55)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('income tax (refundable)/payable', 62)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('income tax (refundable)/payable', 62)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('income tax (refundable)/payable', 40)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('income tax (refundable)/payable', 62)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [('income tax (refundable)/payable', 50)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('income tax (refundable)/payable', 62)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [('income tax (refundable)/payable', 55)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('income tax (refundable)/payable', 40)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [('income tax (refundable)/payable', 50)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [(' financial liabilities', 60), (' other financial liabilities', 50), ('other current liabilities', 44), (' other current liabilities', 44), (' foreign exchange contract liability', 38), (' employee benefits', 32), (' trade and other payables', 26), ('provisions', 18), (' deferred revenue', 14), (' customer deposits', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other current liabilities', 56), (' other current liabilities', 56), (' other financial liabilities', 56), (' financial liabilities', 53), (' trade and other payables', 53), (' deferred revenue', 43), (' foreign exchange contract liability', 34), (' customer deposits', 27), (' employee benefits', 26), ('provisions', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 14, 15, 18], 'score': 100, 'value': 53700.0, 'line_item_label': ['Trade and other payables', 'Employee benefits', 'Current tax liability', 'Employee benefits'], 'note_numbers': ['12', '14', nan, '14'], 'line_item_value': [35064.0, 1218.0, 16698.0, 720.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), (' other financial liabilities', 38), (' deferred revenue', 35), ('other current liabilities', 33), (' financial liabilities', 33), (' other current liabilities', 33), (' customer deposits', 22), (' foreign exchange contract liability', 19), ('provisions', 14), (' employee benefits', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [(' financial liabilities', 60), (' other financial liabilities', 50), ('other current liabilities', 44), (' other current liabilities', 44), (' foreign exchange contract liability', 38), (' employee benefits', 32), (' trade and other payables', 26), ('provisions', 18), (' deferred revenue', 14), (' customer deposits', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 41), (' trade and other payables', 40), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 38), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 34), (' deferred revenue', 30), (' financial liabilities', 28), (' foreign exchange contract liability', 26), (' trade and other payables', 22), (' customer deposits', 21), ('provisions', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('other current liabilities', 56), (' other current liabilities', 56), (' other financial liabilities', 56), (' financial liabilities', 53), (' trade and other payables', 53), (' deferred revenue', 43), (' foreign exchange contract liability', 34), (' customer deposits', 27), (' employee benefits', 26), ('provisions', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 14, 15, 18], 'score': 100, 'value': 40374.0, 'line_item_label': ['Trade and other payables', 'Employee benefits', 'Current tax liability', 'Employee benefits'], 'note_numbers': ['12', '14', nan, '14'], 'line_item_value': [36669.0, 1139.0, 1779.0, 787.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 65), (' derivative contracts - at fair value', 53), (' contract liabilites - current', 53), (' employee benefits - payroll', 53), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' forward exchange contracts', 43), (' gst liabilities', 42), (' secured long-term bank loans', 41), (' loans from related party', 41), (' abandonment and decommissioning costs', 41), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 37), (' other related parties', 36), (' gst', 33), (' make good provisions', 31), (' current - liability for annual and long service leave', 30), (' restructuring', 30), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' employee benefits - current', 29), (' other creditors', 29), (' total current employee benefits', 28), (' warranty', 25), (' ultimate parent entity', 24), (' provision for associate funding', 21), (' provisions - current', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 64), (' other related parties', 55), (' current - liability for annual and long service leave', 50), (' derivative contracts - at fair value', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), ('other creditors and accruals', 45), (' secured long-term bank loans', 44), (' gst payable and accruals', 44), (' gst liabilities', 42), (' loan payable to relayed party under tax funding agreement', 41), (' abandonment and decommissioning costs', 41), (' employee benefits - payroll', 40), (' rebates', 40), (' make good provisions', 38), (' warranty', 38), (' loans from related party', 37), (' gst', 33), (' contract liabilites - current', 32), (' arising from service contracts', 30), (' forward exchange contracts', 30), ('current', 29), (' employee benefits - current', 29), (' ultimate parent entity', 26), (' total current employee benefits', 24), (' provision for associate funding', 23), (' restructuring', 20), (' provisions - current', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [(' gst payables', 80), (' other', 75), (' ultimate parent entity', 58), ('current', 57), (' gst payable and accruals', 50), (' employee benefits - payroll', 50), (' gst liabilities', 50), (' warranty', 50), (' share of joint venture payables', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 45), (' provisions - current', 43), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' rebates', 40), (' employee benefits - current', 39), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' other creditors', 36), (' secured long-term bank loans', 35), (' current - liability for annual and long service leave', 34), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' make good provisions', 31), (' restructuring', 30), (' abandonment and decommissioning costs', 23)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 64), (' other related parties', 55), (' current - liability for annual and long service leave', 50), (' derivative contracts - at fair value', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), ('other creditors and accruals', 45), (' secured long-term bank loans', 44), (' gst payable and accruals', 44), (' gst liabilities', 42), (' loan payable to relayed party under tax funding agreement', 41), (' abandonment and decommissioning costs', 41), (' employee benefits - payroll', 40), (' rebates', 40), (' make good provisions', 38), (' warranty', 38), (' loans from related party', 37), (' gst', 33), (' contract liabilites - current', 32), (' arising from service contracts', 30), (' forward exchange contracts', 30), ('current', 29), (' employee benefits - current', 29), (' ultimate parent entity', 26), (' total current employee benefits', 24), (' provision for associate funding', 23), (' restructuring', 20), (' provisions - current', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' rebates', 60), (' gst payable and accruals', 59), ('current', 57), (' other related parties', 53), (' derivative contracts - at fair value', 47), (' provisions - current', 43), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' abandonment and decommissioning costs', 40), (' arising from service contracts', 40), (' restructuring', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' loans from related party', 38), (' provision for associate funding', 38), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), (' gst', 33), (' ultimate parent entity', 32), (' make good provisions', 31), (' gst liabilities', 20), (' total current employee benefits', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 64), (' other related parties', 55), (' current - liability for annual and long service leave', 50), (' derivative contracts - at fair value', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), ('other creditors and accruals', 45), (' secured long-term bank loans', 44), (' gst payable and accruals', 44), (' gst liabilities', 42), (' loan payable to relayed party under tax funding agreement', 41), (' abandonment and decommissioning costs', 41), (' employee benefits - payroll', 40), (' rebates', 40), (' make good provisions', 38), (' warranty', 38), (' loans from related party', 37), (' gst', 33), (' contract liabilites - current', 32), (' arising from service contracts', 30), (' forward exchange contracts', 30), ('current', 29), (' employee benefits - current', 29), (' ultimate parent entity', 26), (' total current employee benefits', 24), (' provision for associate funding', 23), (' restructuring', 20), (' provisions - current', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [(' abandonment and decommissioning costs', 75), ('other creditors and accruals', 50), (' secured long-term bank loans', 50), (' employee benefits - current', 50), (' employee benefits - payroll', 50), (' total current employee benefits', 50), (' rebates', 40), (' other', 40), (' other related parties', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), ('current', 29), (' warranty', 29), (' ultimate parent entity', 25), (' gst payables', 25), (' make good provisions', 25), (' gst liabilities', 25), (' provisions - current', 20), (' provision for associate funding', 20), (' restructuring', 12), (' gst', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 64), (' other related parties', 55), (' current - liability for annual and long service leave', 50), (' derivative contracts - at fair value', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), ('other creditors and accruals', 45), (' secured long-term bank loans', 44), (' gst payable and accruals', 44), (' gst liabilities', 42), (' loan payable to relayed party under tax funding agreement', 41), (' abandonment and decommissioning costs', 41), (' employee benefits - payroll', 40), (' rebates', 40), (' make good provisions', 38), (' warranty', 38), (' loans from related party', 37), (' gst', 33), (' contract liabilites - current', 32), (' arising from service contracts', 30), (' forward exchange contracts', 30), ('current', 29), (' employee benefits - current', 29), (' ultimate parent entity', 26), (' total current employee benefits', 24), (' provision for associate funding', 23), (' restructuring', 20), (' provisions - current', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none trade payables , res_fuzz_match = [(' gst payables', 70), (' share of joint venture payables', 65), (' derivative contracts - at fair value', 53), (' contract liabilites - current', 53), (' employee benefits - payroll', 53), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' forward exchange contracts', 43), (' gst liabilities', 42), (' secured long-term bank loans', 41), (' loans from related party', 41), (' abandonment and decommissioning costs', 41), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 37), (' other related parties', 36), (' gst', 33), (' make good provisions', 31), (' current - liability for annual and long service leave', 30), (' restructuring', 30), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' employee benefits - current', 29), (' other creditors', 29), (' total current employee benefits', 28), (' warranty', 25), (' ultimate parent entity', 24), (' provision for associate funding', 21), (' provisions - current', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none amounts payable to controlling entity (refer note 19) , res_fuzz_match = [(' gst payables', 80), (' other', 75), (' ultimate parent entity', 58), ('current', 57), (' gst payable and accruals', 50), (' employee benefits - payroll', 50), (' gst liabilities', 50), (' warranty', 50), (' share of joint venture payables', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 45), (' provisions - current', 43), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' rebates', 40), (' employee benefits - current', 39), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' other creditors', 36), (' secured long-term bank loans', 35), (' current - liability for annual and long service leave', 34), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' make good provisions', 31), (' restructuring', 30), (' abandonment and decommissioning costs', 23)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none other creditors and accruals , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' rebates', 60), (' gst payable and accruals', 59), ('current', 57), (' other related parties', 53), (' derivative contracts - at fair value', 47), (' provisions - current', 43), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' abandonment and decommissioning costs', 40), (' arising from service contracts', 40), (' restructuring', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' loans from related party', 38), (' provision for associate funding', 38), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), (' gst', 33), (' ultimate parent entity', 32), (' make good provisions', 31), (' gst liabilities', 20), (' total current employee benefits', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = none nan , res_fuzz_match = [(' abandonment and decommissioning costs', 75), ('other creditors and accruals', 50), (' secured long-term bank loans', 50), (' employee benefits - current', 50), (' employee benefits - payroll', 50), (' total current employee benefits', 50), (' rebates', 40), (' other', 40), (' other related parties', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), ('current', 29), (' warranty', 29), (' ultimate parent entity', 25), (' gst payables', 25), (' make good provisions', 25), (' gst liabilities', 25), (' provisions - current', 20), (' provision for associate funding', 20), (' restructuring', 12), (' gst', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 1, 2, 2, 3, 5, 6], 'score': [100, 80, 100, 100, 100, 100, 80, 100], 'value': [1564.0, 19828.0, 19828.0, 15277.0, 15277.0, 36669.0, 19220.0, 12092.0], 'label': ['Trade and other payables', 'None Amounts payable to controlling entity (Refer Note 19)', 'Trade and other payables', 'None Other creditors and accruals', 'Trade and other payables', 'Trade and other payables', 'None Amounts payable to controlling entity (Refer Note 19)', 'None Other creditors and accruals'], 'year': [], 'colname_found': ['columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'rows', 'rows']}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('current liabilities', 53)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current liabilities', 88)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('current liabilities', 53)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 88, 'value': 16698.0, 'line_item_label': ['Current tax liability'], 'note_numbers': [nan], 'line_item_value': [16698.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabili ities , res_fuzz_match = [('current liabilities', 53)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current liabilities', 88)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('current liabilities', 53)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 88, 'value': 1779.0, 'line_item_label': ['Current tax liability'], 'note_numbers': [nan], 'line_item_value': [1779.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 26), ('(bond)', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('lease liabilities', 30), ('interest bearing loans and borrowings', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('share capital', 40), (' share capital', 40), ('equity share capital', 37), ('contributed equity', 32), (' issued capital', 32), ('perpetual equity instrument', 29), ('common stock', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), ('equity share capital', 76), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [24], 'score': 100, 'value': 15000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['15'], 'line_item_value': [15000.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), ('equity share capital', 76), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), ('common stock', 26), ('perpetual equity instrument', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [24], 'score': 100, 'value': 15000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['15'], 'line_item_value': [15000.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('additional paid in capital', 52), ('additional paid up capital', 52), ('other equity', 43), ('other reserves', 35), ('reserves and surplus', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('additional paid in capital', 52), ('additional paid up capital', 52), ('other equity', 43), ('other reserves', 35), ('reserves and surplus', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 27), (' accumulated losses', 26), ('reserves surplus', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [25], 'score': 100, 'value': 79823.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [79823.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 27), (' accumulated losses', 26), ('reserves surplus', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [25], 'score': 100, 'value': 50386.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [50386.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves', 35), ('reserves', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves', 35), ('reserves', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('government subsidies receivable', 33), ('trade receivables', 29), ('receivable', 22), ('account receivables', 19), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('unbilled', 50), ('trade and other receivables', 45), ('account receivables', 44), ('trade receivables', 42), ('receivable', 33), ('government subsidies receivable', 29), ('billed', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 25729.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': [nan], 'line_item_value': [25729.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('receivable', 50), ('billed', 50), ('trade and other receivables', 48), ('account receivables', 36), ('trade receivables', 35), ('government subsidies receivable', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 61), ('billed', 29), ('unbilled', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('receivable', 50), ('account receivables', 44), ('unbilled', 40), ('trade receivables', 36), ('trade and other receivables', 36), ('government subsidies receivable', 33), ('billed', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('government subsidies receivable', 33), ('trade receivables', 29), ('receivable', 22), ('account receivables', 19), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('unbilled', 50), ('trade and other receivables', 45), ('account receivables', 44), ('trade receivables', 42), ('receivable', 33), ('government subsidies receivable', 29), ('billed', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 25210.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': [nan], 'line_item_value': [25210.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-06-26 09:39:33+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-06-26 09:39:33+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('transmission and distribution business', 32), ('from trading business', 25), ('sale of products', 23), ('net sales', 21), (' Sale of coal', 21), ('revenue from contracts with customers', 20), ('Revenue from contract with customers', 20), ('revenue from operations', 19), (' Sales revenue', 17), (' Revenue', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('revenue from operations', 29), ('from trading business', 29), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), ('net sales', 22), ('transmission and distribution business', 21), ('sale of products', 19), (' Revenue', 16), (' Sales revenue', 13), (' Sale of coal', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('revenue from operations', 33), (' Sales revenue', 32), ('sale of products', 31), (' Revenue', 30), (' Sale of coal', 26), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('net sales', 18), ('transmission and distribution business', 14), ('from trading business', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 30), (' Sale of coal', 29), ('from trading business', 25), ('net sales', 18), ('sale of products', 16), ('revenue from operations', 15), (' Revenue', 13), (' Sales revenue', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Sales revenue', 38), ('revenue from operations', 29), (' Sale of coal', 29), ('transmission and distribution business', 26), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Revenue', 19), ('net sales', 18), ('sale of products', 16), ('from trading business', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('transmission and distribution business', 36), (' Sales revenue', 32), ('sale of products', 31), (' Revenue', 24), ('revenue from operations', 23), ('net sales', 23), ('from trading business', 19), ('revenue from contracts with customers', 17), ('Revenue from contract with customers', 17), (' Sale of coal', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('from trading business', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 33), ('sale of products', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), ('net sales', 21), (' Revenue', 7), (' Sales revenue', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('revenue from operations', 55), ('revenue from contracts with customers', 54), ('Revenue from contract with customers', 54), ('from trading business', 41), (' Sale of coal', 24), (' Sales revenue', 23), ('sale of products', 22), ('net sales', 19), ('transmission and distribution business', 15), (' Revenue', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('revenue from operations', 39), (' Sale of coal', 33), (' Sales revenue', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 23), ('from trading business', 20), (' Revenue', 19), ('net sales', 17), ('sale of products', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('from trading business', 40), ('transmission and distribution business', 32), ('sale of products', 26), ('net sales', 23), (' Sales revenue', 17), (' Sale of coal', 14), (' Revenue', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('sale of products', 25), (' Sales revenue', 25), ('net sales', 23), (' Sale of coal', 19), ('transmission and distribution business', 16), (' Revenue', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 123354.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [123354.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('transmission and distribution business', 32), ('from trading business', 25), ('sale of products', 23), ('net sales', 21), (' Sale of coal', 21), ('revenue from contracts with customers', 20), ('Revenue from contract with customers', 20), ('revenue from operations', 19), (' Sales revenue', 17), (' Revenue', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('revenue from operations', 29), ('from trading business', 29), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), ('net sales', 22), ('transmission and distribution business', 21), ('sale of products', 19), (' Revenue', 16), (' Sales revenue', 13), (' Sale of coal', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('revenue from operations', 33), (' Sales revenue', 32), ('sale of products', 31), (' Revenue', 30), (' Sale of coal', 26), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('net sales', 18), ('transmission and distribution business', 14), ('from trading business', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 30), (' Sale of coal', 29), ('from trading business', 25), ('net sales', 18), ('sale of products', 16), ('revenue from operations', 15), (' Revenue', 13), (' Sales revenue', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Sales revenue', 38), ('revenue from operations', 29), (' Sale of coal', 29), ('transmission and distribution business', 26), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Revenue', 19), ('net sales', 18), ('sale of products', 16), ('from trading business', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('transmission and distribution business', 36), (' Sales revenue', 32), ('sale of products', 31), (' Revenue', 24), ('revenue from operations', 23), ('net sales', 23), ('from trading business', 19), ('revenue from contracts with customers', 17), ('Revenue from contract with customers', 17), (' Sale of coal', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), (' Sales revenue', 17), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 11), ('sale of products', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('from trading business', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 33), ('sale of products', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), ('net sales', 21), (' Revenue', 7), (' Sales revenue', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('revenue from operations', 55), ('revenue from contracts with customers', 54), ('Revenue from contract with customers', 54), ('from trading business', 41), (' Sale of coal', 24), (' Sales revenue', 23), ('sale of products', 22), ('net sales', 19), ('transmission and distribution business', 15), (' Revenue', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('revenue from operations', 39), (' Sale of coal', 33), (' Sales revenue', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 23), ('from trading business', 20), (' Revenue', 19), ('net sales', 17), ('sale of products', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('from trading business', 40), ('transmission and distribution business', 32), ('sale of products', 26), ('net sales', 23), (' Sales revenue', 17), (' Sale of coal', 14), (' Revenue', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('sale of products', 25), (' Sales revenue', 25), ('net sales', 23), (' Sale of coal', 19), ('transmission and distribution business', 16), (' Revenue', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 127121.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [127121.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Cost of goods and services sold', 63), (' Cost of product sold', 43), (' cost of coal sold', 39), (' Cost of inventory sold', 39), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), ('cost of sales', 28), ('Cost of sales', 28), ('total expenditure', 25), ('total expenses', 20), ('expenditure', 17), ('expense', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), ('expense', 24), ('expenditure', 21), ('total expenses', 19), ('total expenditure', 17), ('cost of sales', 7), ('Cost of sales', 7), (' cost of coal sold', 6), (' Personnel costs', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of inventory sold', 30), (' cost of coal sold', 21), ('cost of sales', 17), ('Cost of sales', 17), (' Cost of product sold', 13), ('purchase of stock-in-trade', 12), (' Cost of goods and services sold', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('total expenses', 43), ('expenditure', 40), ('expense', 39), (' Personnel costs', 36), ('total expenditure', 34), (' Cost of goods and services sold', 28), (' Cost of inventory sold', 27), (' cost of coal sold', 26), ('purchase of stock-in-trade', 18), ('cost of sales', 18), ('Cost of sales', 18), (' Cost of product sold', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('total expenses', 42), ('expense', 38), ('expenditure', 33), (' Personnel costs', 30), ('total expenditure', 29), (' Cost of goods and services sold', 24), ('purchase of stock-in-trade', 22), (' cost of coal sold', 20), (' Cost of inventory sold', 18), ('cost of sales', 11), ('Cost of sales', 11), (' Cost of product sold', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('total expenses', 46), ('expenditure', 38), (' Cost of goods and services sold', 38), ('total expenditure', 37), ('expense', 36), ('purchase of stock-in-trade', 30), (' Personnel costs', 29), (' Cost of inventory sold', 26), ('cost of sales', 22), ('Cost of sales', 22), (' Cost of product sold', 18), (' cost of coal sold', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('cost of sales', 47), ('Cost of sales', 47), (' Personnel costs', 46), (' Cost of inventory sold', 45), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' cost of coal sold', 34), ('purchase of stock-in-trade', 30), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 11), ('expense', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Personnel costs', 42), (' Cost of product sold', 39), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' cost of coal sold', 26), ('expenditure', 24), ('purchase of stock-in-trade', 23), ('total expenses', 22), ('total expenditure', 20), ('expense', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Personnel costs', 48), ('cost of sales', 42), ('Cost of sales', 42), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('expense', 19), ('total expenditure', 19), ('total expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Cost of product sold', 35), (' Cost of goods and services sold', 33), (' Personnel costs', 33), ('total expenditure', 31), (' cost of coal sold', 29), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 22), ('expense', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Cost of inventory sold', 38), (' Cost of product sold', 35), ('purchase of stock-in-trade', 34), (' Personnel costs', 34), ('total expenses', 32), (' cost of coal sold', 31), (' Cost of goods and services sold', 29), ('cost of sales', 26), ('Cost of sales', 26), ('total expenditure', 23), ('expenditure', 18), ('expense', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Cost of goods and services sold', 63), (' Cost of product sold', 43), (' cost of coal sold', 39), (' Cost of inventory sold', 39), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), ('cost of sales', 28), ('Cost of sales', 28), ('total expenditure', 25), ('total expenses', 20), ('expenditure', 17), ('expense', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), ('expense', 24), ('expenditure', 21), ('total expenses', 19), ('total expenditure', 17), ('cost of sales', 7), ('Cost of sales', 7), (' cost of coal sold', 6), (' Personnel costs', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of inventory sold', 30), (' cost of coal sold', 21), ('cost of sales', 17), ('Cost of sales', 17), (' Cost of product sold', 13), ('purchase of stock-in-trade', 12), (' Cost of goods and services sold', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('total expenses', 43), ('expenditure', 40), ('expense', 39), (' Personnel costs', 36), ('total expenditure', 34), (' Cost of goods and services sold', 28), (' Cost of inventory sold', 27), (' cost of coal sold', 26), ('purchase of stock-in-trade', 18), ('cost of sales', 18), ('Cost of sales', 18), (' Cost of product sold', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('total expenses', 42), ('expense', 38), ('expenditure', 33), (' Personnel costs', 30), ('total expenditure', 29), (' Cost of goods and services sold', 24), ('purchase of stock-in-trade', 22), (' cost of coal sold', 20), (' Cost of inventory sold', 18), ('cost of sales', 11), ('Cost of sales', 11), (' Cost of product sold', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('total expenses', 46), ('expenditure', 38), (' Cost of goods and services sold', 38), ('total expenditure', 37), ('expense', 36), ('purchase of stock-in-trade', 30), (' Personnel costs', 29), (' Cost of inventory sold', 26), ('cost of sales', 22), ('Cost of sales', 22), (' Cost of product sold', 18), (' cost of coal sold', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of inventory sold', 32), (' Cost of goods and services sold', 27), ('total expenses', 25), ('total expenditure', 21), ('purchase of stock-in-trade', 19), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), (' cost of coal sold', 15), (' Personnel costs', 15), (' Cost of product sold', 14), ('expense', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('cost of sales', 47), ('Cost of sales', 47), (' Personnel costs', 46), (' Cost of inventory sold', 45), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' cost of coal sold', 34), ('purchase of stock-in-trade', 30), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 11), ('expense', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Personnel costs', 42), (' Cost of product sold', 39), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' cost of coal sold', 26), ('expenditure', 24), ('purchase of stock-in-trade', 23), ('total expenses', 22), ('total expenditure', 20), ('expense', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Personnel costs', 48), ('cost of sales', 42), ('Cost of sales', 42), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('expense', 19), ('total expenditure', 19), ('total expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Cost of product sold', 35), (' Cost of goods and services sold', 33), (' Personnel costs', 33), ('total expenditure', 31), (' cost of coal sold', 29), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 22), ('expense', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Cost of inventory sold', 38), (' Cost of product sold', 35), ('purchase of stock-in-trade', 34), (' Personnel costs', 34), ('total expenses', 32), (' cost of coal sold', 31), (' Cost of goods and services sold', 29), ('cost of sales', 26), ('Cost of sales', 26), ('total expenditure', 23), ('expenditure', 18), ('expense', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Logistics and distribution', 32), (' Sales and marketing', 32), (' Selling & distribution expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), ('Distribution expenses', 25), (' Advertising expenses', 25), (' Administrative and other expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Marketing expenses', 20), (' Selling Expenses', 20), (' Management expenses', 20), (' depreciation', 18), ('other expenses', 17), (' Occupancy expenses', 17), (' Other expenses', 17), (' Lease expenses', 17), (' Other expenses', 17), (' Occupancy ', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Amortisation expenses', 67), (' depreciation', 54), (' Administrative and other expenses', 53), (' Advertising expenses', 53), (' Depreciation expenses', 42), (' Depreciation expenses', 42), (' Sales and marketing', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Marketing expenses', 31), (' Logistics and distribution', 31), ('other expenses', 26), (' Other expenses', 26), (' Management expenses', 26), (' Other expenses', 26), ('Distribution expenses', 23), (' Selling & distribution expenses', 20), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' Depreciation expenses', 71), (' Depreciation expenses', 71), (' Amortisation expenses', 64), (' Advertising expenses', 55), (' Administrative expenses', 53), (' Administration expenses', 53), (' Lease expenses', 48), (' Selling Expenses', 48), ('Distribution expenses', 47), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Marketing expenses', 44), (' Selling & distribution expenses', 40), (' Administrative and other expenses', 40), (' depreciation', 29), (' Occupancy ', 21), (' Logistics and distribution', 18), (' Sales and marketing', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' Advertising expenses', 55), (' Marketing expenses', 53), (' Amortisation expenses', 51), (' Administrative expenses', 49), (' Administration expenses', 49), (' Selling & distribution expenses', 48), (' Administrative and other expenses', 47), (' Depreciation expenses', 46), (' Depreciation expenses', 46), ('Distribution expenses', 44), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Sales and marketing', 40), (' depreciation', 38), (' Occupancy expenses', 38), (' Logistics and distribution', 27), (' Occupancy ', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Advertising expenses', 73), (' Marketing expenses', 67), (' Administrative and other expenses', 65), (' Amortisation expenses', 60), (' Depreciation expenses', 55), (' Depreciation expenses', 55), (' Administrative expenses', 52), (' Administration expenses', 52), (' Selling & distribution expenses', 51), (' Sales and marketing', 49), ('Distribution expenses', 48), (' Management expenses', 47), (' Lease expenses', 43), (' Selling Expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Occupancy expenses', 37), (' depreciation', 30), (' Logistics and distribution', 26), (' Occupancy ', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' Occupancy expenses', 62), (' Administrative and other expenses', 49), ('other expenses', 46), (' Other expenses', 46), (' Other expenses', 46), (' Advertising expenses', 43), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Lease expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' Marketing expenses', 40), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Amortisation expenses', 39), ('Distribution expenses', 37), (' Management expenses', 36), (' depreciation', 35), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' Occupancy ', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative and other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 24), (' Occupancy ', 23), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19), (' Management expenses', 18), (' Advertising expenses', 17), (' Amortisation expenses', 17), ('other expenses', 12), (' Other expenses', 12), (' Other expenses', 12), (' depreciation', 7), (' Occupancy expenses', 6), (' Depreciation expenses', 6), (' Lease expenses', 6), (' Selling Expenses', 6), (' Depreciation expenses', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Amortisation expenses', 32), ('other expenses', 28), (' Other expenses', 28), (' Administrative and other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' Selling & distribution expenses', 27), (' depreciation', 26), (' Sales and marketing', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Logistics and distribution', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('Distribution expenses', 58), (' Selling & distribution expenses', 50), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Administrative expenses', 39), (' Administration expenses', 39), (' Administrative and other expenses', 34), (' Occupancy ', 30), (' Logistics and distribution', 29), (' depreciation', 27), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Marketing expenses', 21), (' Advertising expenses', 20), (' Sales and marketing', 20), (' Occupancy expenses', 15), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Selling & distribution expenses', 36), (' Logistics and distribution', 36), ('Distribution expenses', 35), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 28), (' Administrative expenses', 27), (' Administration expenses', 27), ('other expenses', 26), (' Other expenses', 26), (' Administrative and other expenses', 26), (' Other expenses', 26), (' depreciation', 24), (' Advertising expenses', 24), (' Lease expenses', 22), (' Marketing expenses', 21), (' Occupancy expenses', 21), (' Management expenses', 21), (' Selling Expenses', 17), (' Occupancy ', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Administrative and other expenses', 34), (' Marketing expenses', 28), (' Occupancy expenses', 28), (' Sales and marketing', 27), (' Lease expenses', 25), (' Management expenses', 25), (' Selling & distribution expenses', 21), (' Selling Expenses', 21), (' Administrative expenses', 20), (' Depreciation expenses', 20), (' Administration expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' depreciation', 19), ('Distribution expenses', 16), (' Logistics and distribution', 15), (' Advertising expenses', 13), (' Occupancy ', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -2895.0, 'line_item_label': ['Other expenses'], 'note_numbers': [nan], 'line_item_value': [-2895.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Logistics and distribution', 32), (' Sales and marketing', 32), (' Selling & distribution expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), ('Distribution expenses', 25), (' Advertising expenses', 25), (' Administrative and other expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Marketing expenses', 20), (' Selling Expenses', 20), (' Management expenses', 20), (' depreciation', 18), ('other expenses', 17), (' Occupancy expenses', 17), (' Other expenses', 17), (' Lease expenses', 17), (' Other expenses', 17), (' Occupancy ', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Amortisation expenses', 67), (' depreciation', 54), (' Administrative and other expenses', 53), (' Advertising expenses', 53), (' Depreciation expenses', 42), (' Depreciation expenses', 42), (' Sales and marketing', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Marketing expenses', 31), (' Logistics and distribution', 31), ('other expenses', 26), (' Other expenses', 26), (' Management expenses', 26), (' Other expenses', 26), ('Distribution expenses', 23), (' Selling & distribution expenses', 20), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' Depreciation expenses', 71), (' Depreciation expenses', 71), (' Amortisation expenses', 64), (' Advertising expenses', 55), (' Administrative expenses', 53), (' Administration expenses', 53), (' Lease expenses', 48), (' Selling Expenses', 48), ('Distribution expenses', 47), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Marketing expenses', 44), (' Selling & distribution expenses', 40), (' Administrative and other expenses', 40), (' depreciation', 29), (' Occupancy ', 21), (' Logistics and distribution', 18), (' Sales and marketing', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' Advertising expenses', 55), (' Marketing expenses', 53), (' Amortisation expenses', 51), (' Administrative expenses', 49), (' Administration expenses', 49), (' Selling & distribution expenses', 48), (' Administrative and other expenses', 47), (' Depreciation expenses', 46), (' Depreciation expenses', 46), ('Distribution expenses', 44), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Sales and marketing', 40), (' depreciation', 38), (' Occupancy expenses', 38), (' Logistics and distribution', 27), (' Occupancy ', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Advertising expenses', 73), (' Marketing expenses', 67), (' Administrative and other expenses', 65), (' Amortisation expenses', 60), (' Depreciation expenses', 55), (' Depreciation expenses', 55), (' Administrative expenses', 52), (' Administration expenses', 52), (' Selling & distribution expenses', 51), (' Sales and marketing', 49), ('Distribution expenses', 48), (' Management expenses', 47), (' Lease expenses', 43), (' Selling Expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Occupancy expenses', 37), (' depreciation', 30), (' Logistics and distribution', 26), (' Occupancy ', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' Occupancy expenses', 62), (' Administrative and other expenses', 49), ('other expenses', 46), (' Other expenses', 46), (' Other expenses', 46), (' Advertising expenses', 43), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Lease expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' Marketing expenses', 40), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Amortisation expenses', 39), ('Distribution expenses', 37), (' Management expenses', 36), (' depreciation', 35), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' Occupancy ', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Amortisation expenses', 15), (' Occupancy ', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative and other expenses', 30), (' Marketing expenses', 29), (' Logistics and distribution', 24), (' Occupancy ', 23), ('Distribution expenses', 22), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling & distribution expenses', 19), (' Management expenses', 18), (' Advertising expenses', 17), (' Amortisation expenses', 17), ('other expenses', 12), (' Other expenses', 12), (' Other expenses', 12), (' depreciation', 7), (' Occupancy expenses', 6), (' Depreciation expenses', 6), (' Lease expenses', 6), (' Selling Expenses', 6), (' Depreciation expenses', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Amortisation expenses', 32), ('other expenses', 28), (' Other expenses', 28), (' Administrative and other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' Selling & distribution expenses', 27), (' depreciation', 26), (' Sales and marketing', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Logistics and distribution', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('Distribution expenses', 58), (' Selling & distribution expenses', 50), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Administrative expenses', 39), (' Administration expenses', 39), (' Administrative and other expenses', 34), (' Occupancy ', 30), (' Logistics and distribution', 29), (' depreciation', 27), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Marketing expenses', 21), (' Advertising expenses', 20), (' Sales and marketing', 20), (' Occupancy expenses', 15), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Selling & distribution expenses', 36), (' Logistics and distribution', 36), ('Distribution expenses', 35), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 28), (' Administrative expenses', 27), (' Administration expenses', 27), ('other expenses', 26), (' Other expenses', 26), (' Administrative and other expenses', 26), (' Other expenses', 26), (' depreciation', 24), (' Advertising expenses', 24), (' Lease expenses', 22), (' Marketing expenses', 21), (' Occupancy expenses', 21), (' Management expenses', 21), (' Selling Expenses', 17), (' Occupancy ', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Administrative and other expenses', 34), (' Marketing expenses', 28), (' Occupancy expenses', 28), (' Sales and marketing', 27), (' Lease expenses', 25), (' Management expenses', 25), (' Selling & distribution expenses', 21), (' Selling Expenses', 21), (' Administrative expenses', 20), (' Depreciation expenses', 20), (' Administration expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' depreciation', 19), ('Distribution expenses', 16), (' Logistics and distribution', 15), (' Advertising expenses', 13), (' Occupancy ', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -2098.0, 'line_item_label': ['Other expenses'], 'note_numbers': [nan], 'line_item_value': [-2098.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 23), (' Occupancy expenses', 17), (' Occupancy', 8), ('Rent', 4)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 25), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 22), (' Occupancy', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' Rental expenses', 53), (' Administration expenses', 49), (' Occupancy expenses', 38), ('Rent', 21), (' Occupancy', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Administration expenses', 52), (' Rental expenses', 51), (' Occupancy expenses', 37), ('Rent', 27), (' Occupancy', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' Occupancy expenses', 62), (' Rental expenses', 45), (' Administration expenses', 42), (' Occupancy', 31), ('Rent', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Occupancy', 23), (' Administration expenses', 22), ('Rent', 16), (' Rental expenses', 12), (' Occupancy expenses', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Occupancy', 21), ('Rent', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Administration expenses', 39), (' Occupancy', 30), ('Rent', 21), (' Rental expenses', 21), (' Occupancy expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 27), (' Occupancy expenses', 21), (' Occupancy', 15), ('Rent', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Rental expenses', 31), (' Occupancy expenses', 28), (' Administration expenses', 20), ('Rent', 16), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Administration expenses', 28), (' Rental expenses', 23), (' Occupancy expenses', 17), (' Occupancy', 8), ('Rent', 4)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 25), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 22), (' Occupancy', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' Rental expenses', 53), (' Administration expenses', 49), (' Occupancy expenses', 38), ('Rent', 21), (' Occupancy', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Administration expenses', 52), (' Rental expenses', 51), (' Occupancy expenses', 37), ('Rent', 27), (' Occupancy', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' Occupancy expenses', 62), (' Rental expenses', 45), (' Administration expenses', 42), (' Occupancy', 31), ('Rent', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 12), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Occupancy', 23), (' Administration expenses', 22), ('Rent', 16), (' Rental expenses', 12), (' Occupancy expenses', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Occupancy', 21), ('Rent', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Administration expenses', 39), (' Occupancy', 30), ('Rent', 21), (' Rental expenses', 21), (' Occupancy expenses', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 27), (' Occupancy expenses', 21), (' Occupancy', 15), ('Rent', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Rental expenses', 31), (' Occupancy expenses', 28), (' Administration expenses', 20), ('Rent', 16), (' Occupancy', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Other income', 24), ('Other revenue', 20), ('other operating', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('Other revenue', 32), ('other operating', 21), (' Other income', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('Other revenue', 46), ('other operating', 25), (' Other income', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('Other revenue', 27), ('other operating', 23), (' Other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 22), (' Other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('other operating', 27), ('Other revenue', 21), (' Other income', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Other income', 44), ('other operating', 19), ('Other revenue', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Other income', 46), ('other operating', 41), ('Other revenue', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Other income', 46), ('other operating', 32), ('Other revenue', 30)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Other income', 35), ('other operating', 31), ('Other revenue', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Other income', 39), ('other operating', 36), ('Other revenue', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 0.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Other income', 24), ('Other revenue', 20), ('other operating', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('Other revenue', 32), ('other operating', 21), (' Other income', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('Other revenue', 46), ('other operating', 25), (' Other income', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('Other revenue', 27), ('other operating', 23), (' Other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 22), (' Other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('other operating', 27), ('Other revenue', 21), (' Other income', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 9), ('Other revenue', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Other income', 44), ('other operating', 19), ('Other revenue', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Other income', 46), ('other operating', 41), ('Other revenue', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Other income', 46), ('other operating', 32), ('Other revenue', 30)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Other income', 35), ('other operating', 31), ('Other revenue', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Other income', 39), ('other operating', 36), ('Other revenue', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 922.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [922.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Finance income and finance costs', 39), (' Finance income and costs', 38), (' Net finance costs', 25), ('other income', 24), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Net finance costs', 35), ('finance income', 32), ('Finance income', 32), (' Finance income and costs', 30), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('other income', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' Interest revenue', 41), (' Net finance costs', 14), (' Finance income and costs', 11), (' Finance income and finance costs', 10), ('other income', 8), ('finance income', 8), ('Finance income', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 34), (' Interest revenue', 30), (' Net finance costs', 30), ('finance income', 27), ('Finance income', 27), ('other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Net finance costs', 39), ('finance income', 32), ('Finance income', 32), (' Finance income and costs', 26), (' Interest revenue', 24), (' Finance income and finance costs', 22), ('other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' Finance income and costs', 46), (' Finance income and finance costs', 40), (' Net finance costs', 33), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 24), ('other income', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Net finance costs', 83), (' Finance income and costs', 81), ('finance income', 73), ('Finance income', 73), (' Finance income and finance costs', 69), ('other income', 44), (' Interest revenue', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('other income', 46), (' Net finance costs', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 11), ('Finance income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Net finance costs', 47), ('other income', 46), (' Finance income and costs', 44), (' Finance income and finance costs', 37), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Net finance costs', 36), ('other income', 35), (' Finance income and costs', 29), (' Interest revenue', 28), (' Finance income and finance costs', 25), ('finance income', 13), ('Finance income', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Net finance costs', 40), ('other income', 39), (' Finance income and costs', 33), (' Interest revenue', 30), (' Finance income and finance costs', 30), ('finance income', 25), ('Finance income', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 11, 12, 13], 'score': 83, 'value': -234.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance income 1 (costs)'], 'note_numbers': [nan, nan, nan, '5'], 'line_item_value': [0.0, 27.0, -144.0, -117.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' Finance income and finance costs', 39), (' Finance income and costs', 38), (' Net finance costs', 25), ('other income', 24), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [(' Net finance costs', 35), ('finance income', 32), ('Finance income', 32), (' Finance income and costs', 30), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('other income', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' Interest revenue', 41), (' Net finance costs', 14), (' Finance income and costs', 11), (' Finance income and finance costs', 10), ('other income', 8), ('finance income', 8), ('Finance income', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 34), (' Interest revenue', 30), (' Net finance costs', 30), ('finance income', 27), ('Finance income', 27), ('other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' Net finance costs', 39), ('finance income', 32), ('Finance income', 32), (' Finance income and costs', 26), (' Interest revenue', 24), (' Finance income and finance costs', 22), ('other income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' Finance income and costs', 46), (' Finance income and finance costs', 40), (' Net finance costs', 33), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 24), ('other income', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' Net finance costs', 83), (' Finance income and costs', 81), ('finance income', 73), ('Finance income', 73), (' Finance income and finance costs', 69), ('other income', 44), (' Interest revenue', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('other income', 46), (' Net finance costs', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 11), ('Finance income', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' Net finance costs', 47), ('other income', 46), (' Finance income and costs', 44), (' Finance income and finance costs', 37), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' Net finance costs', 36), ('other income', 35), (' Finance income and costs', 29), (' Interest revenue', 28), (' Finance income and finance costs', 25), ('finance income', 13), ('Finance income', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' Net finance costs', 40), ('other income', 39), (' Finance income and costs', 33), (' Interest revenue', 30), (' Finance income and finance costs', 30), ('finance income', 25), ('Finance income', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 11, 12, 13], 'score': 83, 'value': 1186.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance income 1 (costs)'], 'note_numbers': [nan, nan, nan, '5'], 'line_item_value': [922.0, 437.0, -305.0, 132.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 35), (' finance expenses', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' finance expenses', 44), ('finance cost', 16), ('finance costs', 16), (' net finance costs ', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 39), ('finance cost', 22), ('finance costs', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 33), ('finance cost', 26), ('finance costs', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 31), ('finance cost', 25), ('finance costs', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 83, 'value': -261.0, 'line_item_label': ['Finance costs', 'Net finance income 1 (costs)'], 'note_numbers': [nan, '5'], 'line_item_value': [-144.0, -117.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 35), (' finance expenses', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' finance expenses', 44), ('finance cost', 16), ('finance costs', 16), (' net finance costs ', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 39), ('finance cost', 22), ('finance costs', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 33), ('finance cost', 26), ('finance costs', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 31), ('finance cost', 25), ('finance costs', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 83, 'value': -173.0, 'line_item_label': ['Finance costs', 'Net finance income 1 (costs)'], 'note_numbers': [nan, '5'], 'line_item_value': [-305.0, 132.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 35), (' finance expenses', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' finance expenses', 44), ('finance cost', 16), ('finance costs', 16), (' net finance costs ', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 39), ('finance cost', 22), ('finance costs', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 33), ('finance cost', 26), ('finance costs', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 31), ('finance cost', 25), ('finance costs', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 83, 'value': -261.0, 'line_item_label': ['Finance costs', 'Net finance income 1 (costs)'], 'note_numbers': [nan, '5'], 'line_item_value': [-144.0, -117.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 35), (' finance expenses', 31)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' finance expenses', 44), ('finance cost', 16), ('finance costs', 16), (' net finance costs ', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 39), ('finance cost', 22), ('finance costs', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 33), ('finance cost', 26), ('finance costs', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' net finance costs ', 83), ('finance cost', 69), ('finance costs', 69), (' finance expenses', 47)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 29)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 31), ('finance cost', 25), ('finance costs', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 83, 'value': -173.0, 'line_item_label': ['Finance costs', 'Net finance income 1 (costs)'], 'note_numbers': [nan, '5'], 'line_item_value': [-305.0, 132.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('NULL', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('NULL', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('NULL', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('NULL', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('NULL', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('NULL', 4)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('NULL', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('NULL', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('NULL', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('NULL', 8)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('NULL', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('NULL', 4)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('amount transferred to retained earnings', 29), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 22), (' income tax', 21), ('minimum alternate tax credit entitlement', 20), ('earlier year', 20), ('deferred tax', 18), (' income tax benefit', 18), ('current tax', 17), (' income tax expense', 16), ('prior year ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('amount transferred to retained earnings', 39), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 24), (' tax (expense)/benefit', 22), ('deferred tax', 21), ('prior year ', 21), (' income tax', 21), ('current tax', 20), ('earlier year', 19), (' income tax benefit/(expense)', 19), (' income tax expense', 17), (' income tax benefit', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' tax (expense)/benefit', 56), (' income tax benefit/(expense)', 47), (' income tax expense', 40), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('prior year ', 33), ('earlier year', 31), ('minimum alternate tax credit entitlement', 22), ('current tax', 16), ('provision for taxation previous year', 14), (' income tax benefit', 13), (' income tax', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 49), (' income tax expense', 44), ('amount transferred to retained earnings', 38), ('deferred tax', 29), (' income tax', 29), ('current tax', 28), ('minimum alternate tax credit entitlement', 28), (' income tax benefit', 24), ('provision for taxation previous year', 19), ('prior year ', 17), ('earlier year', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 48), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 33), ('amount transferred to retained earnings', 30), ('deferred tax', 29), (' income tax', 23), ('current tax', 22), ('prior year ', 22), ('earlier year', 21), (' income tax benefit', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit/(expense)', 51), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('deferred tax', 28), (' income tax benefit', 27), (' income tax', 22), ('provision for taxation previous year', 21), ('current tax', 16), ('prior year ', 16), ('earlier year', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' income tax benefit', 53), (' income tax expense', 49), (' income tax benefit/(expense)', 49), (' income tax', 47), ('minimum alternate tax credit entitlement', 34), ('amount transferred to retained earnings', 33), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 20), (' tax (expense)/benefit', 15), ('deferred tax', 13), ('earlier year', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 35), ('deferred tax', 30), ('provision for taxation previous year', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), ('earlier year', 28), (' income tax benefit', 20), (' tax (expense)/benefit', 19), ('prior year ', 18), (' income tax benefit/(expense)', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit/(expense)', 26), ('deferred tax', 25), (' income tax', 25), ('earlier year', 22), ('prior year ', 16), (' income tax expense', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('current tax', 39), ('amount transferred to retained earnings', 39), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), (' income tax expense', 35), (' income tax benefit', 35), ('provision for taxation previous year', 34), (' tax (expense)/benefit', 34), (' income tax benefit/(expense)', 31), ('prior year ', 22), ('earlier year', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' income tax expense', 46), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 39), ('provision for taxation previous year', 38), (' income tax', 33), ('current tax', 32), ('deferred tax', 30), ('earlier year', 28), ('minimum alternate tax credit entitlement', 26), (' tax (expense)/benefit', 25), ('prior year ', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -2019.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6la)'], 'line_item_value': [-2019.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('amount transferred to retained earnings', 29), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 22), (' income tax', 21), ('minimum alternate tax credit entitlement', 20), ('earlier year', 20), ('deferred tax', 18), (' income tax benefit', 18), ('current tax', 17), (' income tax expense', 16), ('prior year ', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('amount transferred to retained earnings', 39), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 24), (' tax (expense)/benefit', 22), ('deferred tax', 21), ('prior year ', 21), (' income tax', 21), ('current tax', 20), ('earlier year', 19), (' income tax benefit/(expense)', 19), (' income tax expense', 17), (' income tax benefit', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [(' tax (expense)/benefit', 56), (' income tax benefit/(expense)', 47), (' income tax expense', 40), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('prior year ', 33), ('earlier year', 31), ('minimum alternate tax credit entitlement', 22), ('current tax', 16), ('provision for taxation previous year', 14), (' income tax benefit', 13), (' income tax', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 49), (' income tax expense', 44), ('amount transferred to retained earnings', 38), ('deferred tax', 29), (' income tax', 29), ('current tax', 28), ('minimum alternate tax credit entitlement', 28), (' income tax benefit', 24), ('provision for taxation previous year', 19), ('prior year ', 17), ('earlier year', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [(' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 48), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 33), ('amount transferred to retained earnings', 30), ('deferred tax', 29), (' income tax', 23), ('current tax', 22), ('prior year ', 22), ('earlier year', 21), (' income tax benefit', 19)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit/(expense)', 51), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('deferred tax', 28), (' income tax benefit', 27), (' income tax', 22), ('provision for taxation previous year', 21), ('current tax', 16), ('prior year ', 16), ('earlier year', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), (' tax (expense)/benefit', 27), ('amount transferred to retained earnings', 21), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 18), ('prior year ', 18), ('current tax', 17), ('earlier year', 17), ('provision for taxation previous year', 10)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [(' income tax benefit', 53), (' income tax expense', 49), (' income tax benefit/(expense)', 49), (' income tax', 47), ('minimum alternate tax credit entitlement', 34), ('amount transferred to retained earnings', 33), ('prior year ', 26), ('current tax', 25), ('provision for taxation previous year', 20), (' tax (expense)/benefit', 15), ('deferred tax', 13), ('earlier year', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 35), ('deferred tax', 30), ('provision for taxation previous year', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), ('earlier year', 28), (' income tax benefit', 20), (' tax (expense)/benefit', 19), ('prior year ', 18), (' income tax benefit/(expense)', 17)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit/(expense)', 26), ('deferred tax', 25), (' income tax', 25), ('earlier year', 22), ('prior year ', 16), (' income tax expense', 13)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('current tax', 39), ('amount transferred to retained earnings', 39), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), (' income tax expense', 35), (' income tax benefit', 35), ('provision for taxation previous year', 34), (' tax (expense)/benefit', 34), (' income tax benefit/(expense)', 31), ('prior year ', 22), ('earlier year', 21)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [(' income tax expense', 46), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 39), ('provision for taxation previous year', 38), (' income tax', 33), ('current tax', 32), ('deferred tax', 30), ('earlier year', 28), ('minimum alternate tax credit entitlement', 26), (' tax (expense)/benefit', 25), ('prior year ', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -3388.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6la)'], 'line_item_value': [-3388.0]}
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-06-26 09:39:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:33+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('share of', 6), ('share in', 6)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-06-26 09:39:33+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:34+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('share of', 6), ('share in', 6)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-06-26 09:39:34+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-06-26 09:39:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-06-26 09:39:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:34+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('prior period', 23), ('exceptional', 7)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('prior period', 45), ('exceptional', 16)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('exceptional', 30), ('prior period', 15)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('exceptional', 26), ('prior period', 22)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('exceptional', 25), ('prior period', 16)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('exceptional', 30), ('prior period', 26)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('exceptional', 15), ('prior period', 6)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('prior period', 39), ('exceptional', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('prior period', 22), ('exceptional', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('prior period', 30), ('exceptional', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('prior period', 25), ('exceptional', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:34+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('prior period', 23), ('exceptional', 7)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('prior period', 45), ('exceptional', 16)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('exceptional', 30), ('prior period', 15)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('exceptional', 26), ('prior period', 22)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('exceptional', 25), ('prior period', 16)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('exceptional', 30), ('prior period', 26)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('exceptional', 15), ('prior period', 6)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('prior period', 39), ('exceptional', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('prior period', 22), ('exceptional', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('prior period', 30), ('exceptional', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('prior period', 25), ('exceptional', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-06-26 09:39:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-06-26 09:39:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-06-26 09:39:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-06-26 09:39:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-06-26 09:39:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-06-26 09:39:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('NULL', 9)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('NULL', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('NULL', 19)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('NULL', 8)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('NULL', 21)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('NULL', 4)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-06-26 09:39:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-06-26 09:39:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = cost of good sold (raw materials, goods purchased and change in , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation , res_fuzz_match = [('NULL', 9)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = employee expenses , res_fuzz_match = [('NULL', 11)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = freight and cartage expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = marketing and advertisement expenses , res_fuzz_match = [('NULL', 7)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = occupancy, utilities and office expenses , res_fuzz_match = [('NULL', 19)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = net finance income 1 (costs) , res_fuzz_match = [('NULL', 8)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = discontinued operation , res_fuzz_match = [('NULL', 21)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operation, net of tax , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the period, net of tax , res_fuzz_match = [('NULL', 4)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-06-26 09:39:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

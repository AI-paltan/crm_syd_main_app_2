2023-08-28 13:45:58+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-28 13:45:58+0530 - sLogger - DEBUG - {'fileid': '331ef7f7-a121-4428-a707-8570ae54ebb0', 'filename': 'YAU Stat Accts 31 Mar 2023 (signed).pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/YAU Stat Accts 31 Mar 2023 (signed).pdf', 'status': 'Processing'}
2023-08-28 13:45:58+0530 - sLogger - DEBUG - save file completed
2023-08-28 13:45:58+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-28 13:45:58+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-28 13:45:58+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-28 13:45:58+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-28 13:45:58+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-28 13:45:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:45:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:30+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:30+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:34+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:34+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:46:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:46:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:46:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:46:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:46:57+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:46:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:46:57+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:17+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:17+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:42+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:47:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:47:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:47:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:47:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:47:57+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:47:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:47:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:33+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:42+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:42+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:46+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:46+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:48:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:48:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:48:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:48:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:48:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:48:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:48:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:49:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:49:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:49:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:49:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:49:20+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:30+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 13:49:30+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 13:49:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 13:49:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 13:49:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 13:49:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 13:49:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 13:49:33+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-28 13:49:33+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [7], 'predicted_cpl_pages': [6, 8, 22, 23], 'predicted_ccf_pages': [9], 'filtered_cbs_pages': [7], 'filtered_cpl_pages': [8, 6], 'filtered_ccf_pages': [9], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-28 13:49:33+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-28 13:49:33+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-28 13:49:33+0530 - sLogger - DEBUG - process file completed
2023-08-28 13:49:33+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-28 13:49:33+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-28 13:49:33+0530 - sLogger - DEBUG - TE process file started
2023-08-28 13:54:00+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-28 13:54:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-28 13:54:00+0530 - sLogger - DEBUG - process_main_pages started
2023-08-28 13:54:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 13:54:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 13:54:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 13:54:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 13:54:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 13:54:01+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 13:54:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-28 13:54:01+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-28 13:54:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-28 13:54:01+0530 - sLogger - ERROR - error occured: 'Notes'
2023-08-28 13:54:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-28 13:54:01+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Current tax asset | [('current assets', 87), ('noncurrent assets', 67), ('current liabilities', 58), ('currentassets', 55), ('currentliabilities', 54), ('noncurrentassets', 50), ('noncurrentliabilities', 48), ('assets', 45), ('noncurrent liabilities', 39), ('equity and liabilities', 35), ('equity liabilities', 33), ('equityandliabilities', 29), ('equity', 26), ('equityliabilities', 24), ('liabilities', 9)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD current assets | score 84
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD currentassets | score 80
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD current liabilities | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD currentliabilities | score 51
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD noncurrent assets | score 76
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD noncurrentassets | score 73
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD noncurrent liabilities | score 51
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD non current assets | score 76
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD non current liabilities | score 55
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD noncurrentliabilities | score 47
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD noncurrentassets | score 73
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD noncurrentliabilities | score 47
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD equity and liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax asset | MATCH WORD equityandliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Investments | [('noncurrentassets', 38), ('assets', 36), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('equityandliabilities', 24), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentassets | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentliabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equityandliabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Right of use assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD current assets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD currentassets | score 50
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD current liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD currentliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrent assets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentassets | score 51
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrent liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD non current assets | score 59
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD non current liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentassets | score 51
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD equity and liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Right of use assets | MATCH WORD equityandliabilities | score 26
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentassets | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equityandliabilities | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Reserves | [('currentassets', 44), ('noncurrentassets', 38), ('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentassets | score 48
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentliabilities | score 31
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equityandliabilities | score 22
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-28 13:54:01+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-28 13:54:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-28 13:54:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-28 13:54:01+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by operating activities | adjustments for increase decrease in operating assets
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Decrease in term deposits | adjustments for increase decrease in operating liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash utilised by investing activities | adjustments for increase decrease in operating liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments of lease liabilities - finance costs | adjustments for increase decrease in operating liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments of lease liabilities - principal amount | operating profit before changes in assets and liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | adjustments for increase decrease in operating assets
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of foreign exchange rate changes | changes in operating assets and liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-28 13:54:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset ', ' Term deposit']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits ', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24), (' Cash', 24)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits ', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33), (' Cash', 32)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits ', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), (' Cash', 15)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits ', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14), (' Cash', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits ', 47), (' Cash', 40), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits ', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29), (' Cash', 19)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 17015.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19(a)'], 'line_item_value': [17015.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits ', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24), (' Cash', 24)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits ', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33), (' Cash', 32)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits ', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), (' Cash', 15)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits ', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14), (' Cash', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits ', 47), (' Cash', 40), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits ', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29), (' Cash', 19)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 12268.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19(a)'], 'line_item_value': [12268.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['inventories ', ' Contract assets']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' Contract assets', 62), ('inventories ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 22)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories ', 100), (' Contract assets', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Contract assets', 73), ('inventories ', 22)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' Contract assets', 64), ('inventories ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': 100, 'value': 3753.0, 'line_item_label': ['Assets', 'Inventories'], 'note_numbers': [nan, '9'], 'line_item_value': [0.0, 3753.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' Contract assets', 62), ('inventories ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 22)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories ', 100), (' Contract assets', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Contract assets', 73), ('inventories ', 22)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' Contract assets', 64), ('inventories ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': 100, 'value': 4327.0, 'line_item_label': ['Assets', 'Inventories'], 'note_numbers': [nan, '9'], 'line_item_value': [0.0, 4327.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' Finished goods in transit', 80), (' cranes ', 60), (' goods in transit ', 58), (' stores and other consumables at cost ', 50), (' Stock in transit at cost ', 50), (' parts and accessories (at cost) ', 48), (' spare parts at cost ', 47), (' cranes - in transit ', 46), (' inventories ', 44), (' provision for inventory obsolescence ', 38), (' stock in transit ', 38), (' allowance for obsolescence ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current provision for obsolete goods , res_fuzz_match = [(' allowance for obsolescence ', 67), (' cranes ', 60), (' provision for inventory obsolescence ', 59), (' finished goods ', 55), (' finished goods at cost ', 50), (' spare parts ', 50), (' spare parts at cost ', 47), (' work in progress ', 46), (' cranes - in transit ', 46), (' inventories ', 44), (' parts and accessories (at cost) ', 43), (' stores and other consumables at cost ', 41), (' Stock in transit at cost ', 39), (' stock in transit ', 38), (' Finished goods in transit', 37), (' goods in transit ', 33), ('raw materials ', 30), (' raw materials ', 30)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' cranes ', 60), (' spare parts at cost ', 48), (' Stock in transit at cost ', 48), (' stores and other consumables at cost ', 46), (' provision for inventory obsolescence ', 46), (' cranes - in transit ', 46), (' inventories ', 44), (' spare parts ', 40), (' parts and accessories (at cost) ', 38), (' Finished goods in transit', 38), (' stock in transit ', 31), (' allowance for obsolescence ', 31), ('raw materials ', 30), (' raw materials ', 30), (' finished goods ', 27), (' goods in transit ', 25), (' finished goods at cost ', 23), (' work in progress ', 23)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current stock in transit at cost , res_fuzz_match = [(' stock in transit ', 100), (' Stock in transit at cost ', 100), (' goods in transit ', 75), (' cranes - in transit ', 69), (' cranes ', 60), (' Finished goods in transit', 58), (' stores and other consumables at cost ', 55), (' spare parts at cost ', 53), (' parts and accessories (at cost) ', 52), (' finished goods at cost ', 44), (' inventories ', 44), (' provision for inventory obsolescence ', 42), ('raw materials ', 40), (' raw materials ', 40), (' spare parts ', 40), (' work in progress ', 38), (' finished goods ', 36), (' allowance for obsolescence ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' cranes ', 60), (' spare parts at cost ', 48), (' Stock in transit at cost ', 48), (' stores and other consumables at cost ', 46), (' provision for inventory obsolescence ', 46), (' cranes - in transit ', 46), (' inventories ', 44), (' spare parts ', 40), (' parts and accessories (at cost) ', 38), (' Finished goods in transit', 38), (' stock in transit ', 31), (' allowance for obsolescence ', 31), ('raw materials ', 30), (' raw materials ', 30), (' finished goods ', 27), (' goods in transit ', 25), (' finished goods at cost ', 23), (' work in progress ', 23)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' Finished goods in transit', 80), (' cranes ', 60), (' goods in transit ', 58), (' stores and other consumables at cost ', 50), (' Stock in transit at cost ', 50), (' parts and accessories (at cost) ', 48), (' spare parts at cost ', 47), (' cranes - in transit ', 46), (' inventories ', 44), (' provision for inventory obsolescence ', 38), (' stock in transit ', 38), (' allowance for obsolescence ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current provision for obsolete goods , res_fuzz_match = [(' allowance for obsolescence ', 67), (' cranes ', 60), (' provision for inventory obsolescence ', 59), (' finished goods ', 55), (' finished goods at cost ', 50), (' spare parts ', 50), (' spare parts at cost ', 47), (' work in progress ', 46), (' cranes - in transit ', 46), (' inventories ', 44), (' parts and accessories (at cost) ', 43), (' stores and other consumables at cost ', 41), (' Stock in transit at cost ', 39), (' stock in transit ', 38), (' Finished goods in transit', 37), (' goods in transit ', 33), ('raw materials ', 30), (' raw materials ', 30)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' cranes ', 60), (' spare parts at cost ', 48), (' Stock in transit at cost ', 48), (' stores and other consumables at cost ', 46), (' provision for inventory obsolescence ', 46), (' cranes - in transit ', 46), (' inventories ', 44), (' spare parts ', 40), (' parts and accessories (at cost) ', 38), (' Finished goods in transit', 38), (' stock in transit ', 31), (' allowance for obsolescence ', 31), ('raw materials ', 30), (' raw materials ', 30), (' finished goods ', 27), (' goods in transit ', 25), (' finished goods at cost ', 23), (' work in progress ', 23)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current stock in transit at cost , res_fuzz_match = [(' stock in transit ', 100), (' Stock in transit at cost ', 100), (' goods in transit ', 75), (' cranes - in transit ', 69), (' cranes ', 60), (' Finished goods in transit', 58), (' stores and other consumables at cost ', 55), (' spare parts at cost ', 53), (' parts and accessories (at cost) ', 52), (' finished goods at cost ', 44), (' inventories ', 44), (' provision for inventory obsolescence ', 42), ('raw materials ', 40), (' raw materials ', 40), (' spare parts ', 40), (' work in progress ', 38), (' finished goods ', 36), (' allowance for obsolescence ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' cranes ', 60), (' spare parts at cost ', 48), (' Stock in transit at cost ', 48), (' stores and other consumables at cost ', 46), (' provision for inventory obsolescence ', 46), (' cranes - in transit ', 46), (' inventories ', 44), (' spare parts ', 40), (' parts and accessories (at cost) ', 38), (' Finished goods in transit', 38), (' stock in transit ', 31), (' allowance for obsolescence ', 31), ('raw materials ', 30), (' raw materials ', 30), (' finished goods ', 27), (' goods in transit ', 25), (' finished goods at cost ', 23), (' work in progress ', 23)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 5, 8], 'score': [100, 100, 100, 100], 'value': [3866.0, 1138.0, 3393.0, 1124.0], 'label': ['Current Finished goods at cost', 'Current Stock in transit at cost', 'Current Finished goods at cost', 'Current Stock in transit at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables ']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables ', 34), (' prepayments ', 21)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables ', 26), (' prepayments ', 13)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables ', 42), (' prepayments ', 12)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' other current assets ', 83), (' other current financial assets ', 68), ('other assets ', 50), (' other financial assets ', 50), (' trade and other receivables ', 41), (' prepayments ', 26)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6], 'score': 83, 'value': 28867.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets', 'Current tax asset'], 'note_numbers': [nan, '8', '10', '6(b)'], 'line_item_value': [0.0, 28049.0, 451.0, 367.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables ', 34), (' prepayments ', 21)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables ', 26), (' prepayments ', 13)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables ', 42), (' prepayments ', 12)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' other current assets ', 83), (' other current financial assets ', 68), ('other assets ', 50), (' other financial assets ', 50), (' trade and other receivables ', 41), (' prepayments ', 26)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6], 'score': 83, 'value': 34781.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets', 'Current tax asset'], 'note_numbers': [nan, '8', '10', '6(b)'], 'line_item_value': [0.0, 33933.0, 519.0, 329.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 46), (' prepaid expenditure ', 44), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 52), (' other prepayments ', 50), (' prepaid expenditure ', 44), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current ', 100), (' other prepayments ', 67), (' other receivables and prepayments ', 50), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expense ', 36), (' prepaid expenditure ', 34), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [('current ', 100), (' prepaid ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 41), (' prepaid expenditure ', 39), (' prepaid expense ', 36), (' charges paid in advance', 35), (' prepayments ', 33), (' other prepayments ', 25), (' in advance ', 17)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [('current ', 100), (' prepaid expense ', 50), (' other receivables and prepayments ', 48), (' charges paid in advance', 47), (' prepaid expenditure ', 44), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 46), (' prepaid expenditure ', 44), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 52), (' other prepayments ', 50), (' prepaid expenditure ', 44), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current ', 100), (' other prepayments ', 67), (' other receivables and prepayments ', 50), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expense ', 36), (' prepaid expenditure ', 34), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [('current ', 100), (' prepaid ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 41), (' prepaid expenditure ', 39), (' prepaid expense ', 36), (' charges paid in advance', 35), (' prepayments ', 33), (' other prepayments ', 25), (' in advance ', 17)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [('current ', 100), (' prepaid expense ', 50), (' other receivables and prepayments ', 48), (' charges paid in advance', 47), (' prepaid expenditure ', 44), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [18834.0, 3193.0, 45.0, 7861.0, 4000.0, 33933.0, 13010.0, 5456.0, 7.0, 5576.0, 4000.0, 28049.0], 'label': ['Current Trade receivables', 'Current Related party receivables (Note 22)', 'Current Other receivables', 'Current Unbilled receivables', 'Current Loan to related party (Note 22)', 'Current Total', 'Current Trade receivables', 'Current Related party receivables (Note 22)', 'Current Other receivables', 'Current Unbilled receivables', 'Current Loan to related party (Note 22)', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:03+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 13:54:03+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' Income tax refund due ', 42), (' Restricted deposits ', 41), (' trade and other receivables ', 34), (' Capitalised contract cost ', 33), (' Other investment including derivatives ', 32), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29), (' Income tax receivable', 28)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), (' Income tax receivable', 43), (' biological assets ', 36), (' financial assets ', 35), (' Income tax refund due ', 34), (' income tax receivable from related parties ', 33), (' Capitalised contract cost ', 32), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' Other investment including derivatives ', 30), (' Restricted deposits ', 27), (' deferred operating expenditure ', 19)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), (' Income tax receivable', 63), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' Income tax refund due ', 43), (' Other investment including derivatives ', 43), (' other assets ', 42), (' Restricted deposits ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' Capitalised contract cost ', 36), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' Other investment including derivatives ', 41), (' other assets ', 40), (' Restricted deposits ', 40), (' Income tax receivable', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' Income tax refund due ', 34), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables ', 26), (' Capitalised contract cost ', 25), (' income tax receivable from related parties ', 24)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' Other investment including derivatives ', 44), (' trade and other receivables ', 42), (' deferred operating expenditure ', 38), (' Restricted deposits ', 37), (' Capitalised contract cost ', 35), (' Income tax refund due ', 26), (' income tax receivable from related parties ', 23), (' Income tax receivable', 22)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets ', 83), (' Income tax refund due ', 54), (' financial assets ', 53), (' other assets ', 50), (' other financial assets ', 50), (' income tax receivable from related parties ', 44), (' Restricted deposits ', 42), (' Income tax receivable', 42), (' biological assets ', 41), (' trade and other receivables ', 41), (' Capitalised contract cost ', 40), (' Other investment including derivatives ', 38), (' deferred operating expenditure ', 32)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6], 'score': 83, 'value': 28867.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets', 'Current tax asset'], 'note_numbers': [nan, '8', '10', '6(b)'], 'line_item_value': [0.0, 28049.0, 451.0, 367.0]}
2023-08-28 13:54:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:03+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' Income tax refund due ', 42), (' Restricted deposits ', 41), (' trade and other receivables ', 34), (' Capitalised contract cost ', 33), (' Other investment including derivatives ', 32), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29), (' Income tax receivable', 28)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), (' Income tax receivable', 43), (' biological assets ', 36), (' financial assets ', 35), (' Income tax refund due ', 34), (' income tax receivable from related parties ', 33), (' Capitalised contract cost ', 32), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' Other investment including derivatives ', 30), (' Restricted deposits ', 27), (' deferred operating expenditure ', 19)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), (' Income tax receivable', 63), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' Income tax refund due ', 43), (' Other investment including derivatives ', 43), (' other assets ', 42), (' Restricted deposits ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' Capitalised contract cost ', 36), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' Other investment including derivatives ', 41), (' other assets ', 40), (' Restricted deposits ', 40), (' Income tax receivable', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' Income tax refund due ', 34), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables ', 26), (' Capitalised contract cost ', 25), (' income tax receivable from related parties ', 24)]
2023-08-28 13:54:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' Other investment including derivatives ', 44), (' trade and other receivables ', 42), (' deferred operating expenditure ', 38), (' Restricted deposits ', 37), (' Capitalised contract cost ', 35), (' Income tax refund due ', 26), (' income tax receivable from related parties ', 23), (' Income tax receivable', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets ', 83), (' Income tax refund due ', 54), (' financial assets ', 53), (' other assets ', 50), (' other financial assets ', 50), (' income tax receivable from related parties ', 44), (' Restricted deposits ', 42), (' Income tax receivable', 42), (' biological assets ', 41), (' trade and other receivables ', 41), (' Capitalised contract cost ', 40), (' Other investment including derivatives ', 38), (' deferred operating expenditure ', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6], 'score': 83, 'value': 34781.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets', 'Current tax asset'], 'note_numbers': [nan, '8', '10', '6(b)'], 'line_item_value': [0.0, 33933.0, 519.0, 329.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), (' other receivables ', 75), (' interest receivable', 73), (' GST receivable ', 70), (' related party receivable', 67), (' accrued interest receivable ', 67), (' current investments', 64), (' Intercompany receivable ', 58), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' Fuel tax credits ', 53), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments ', 46), (' Debtors retention ', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' Forward exchange contracts used for hedging keyword', 45), (' Income tax refund due ', 44), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' Prepaid subscription ', 41), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' Capitalised contract cost ', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29), (' Deposits ', 29), (' Accrued income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [('current', 100), (' related party receivable', 100), (' GST receivable ', 80), (' current investments', 71), (' related party disclosures', 67), (' interest receivable', 67), (' other receivables ', 67), (' other receivables - related party', 62), (' other', 60), (' Intercompany receivable ', 58), (' accrued interest receivable ', 57), (' rental bond', 55), (' accrued rebates', 55), (' Debtors retention ', 54), (' long service leave receivable', 52), (' accrued interest', 50), (' share of jv prepayments', 50), (' income tax receivable from related parties', 48), (' other deposits receivable - related party', 48), (' Fuel tax credits ', 47), (' derivative contracts - fair value', 46), (' amount receivable from controlling entity', 45), (' deposits', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' Capitalised contract cost ', 43), (' Deposits ', 43), (' electricity derivatives at fair value', 41), (' Prepaid subscription ', 41), (' Income tax refund due ', 40), ('foreign exchange derivatives at fair value', 39), (' other debtors and prepayments ', 39), (' Forward exchange contracts used for hedging keyword', 39), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' Accrued income ', 36), (' lng', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), (' other', 100), (' other receivables ', 100), (' interest receivable', 73), (' GST receivable ', 70), (' related party receivable', 67), (' accrued interest receivable ', 67), ('other assets', 64), (' current investments', 64), (' Intercompany receivable ', 58), (' other deposits receivable - related party', 55), (' rental bond', 55), (' Debtors retention ', 54), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' Fuel tax credits ', 47), ('foreign exchange derivatives at fair value', 45), (' accrued rebates', 45), (' Forward exchange contracts used for hedging keyword', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), (' share of jv prepayments', 42), (' other debtors and prepayments ', 41), (' electricity derivatives at fair value', 40), (' forward exchange contracts', 40), (' Capitalised contract cost ', 40), (' Accrued income ', 36), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' Income tax refund due ', 35), (' lng', 33), (' bank guarantee', 31), (' Prepaid subscription ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [('current', 100), (' GST receivable ', 70), (' related party receivable', 67), (' current investments', 64), (' accrued interest receivable ', 62), (' interest receivable', 60), (' Intercompany receivable ', 58), (' other receivables ', 58), (' rental bond', 55), (' long service leave receivable', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' income tax receivable from related parties', 45), (' accrued rebates', 45), (' condensate', 43), (' other debtors and prepayments ', 41), (' Prepaid subscription ', 41), ('foreign exchange derivatives at fair value', 40), (' other receivables - related party', 40), (' Fuel tax credits ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' bank guarantee', 38), (' Debtors retention ', 38), (' accrued interest', 36), (' Accrued income ', 36), (' electricity derivatives at fair value', 35), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' Income tax refund due ', 35), (' lng', 33), (' Capitalised contract cost ', 30), (' deposits', 29), (' Deposits ', 29), ('other assets', 27), (' share of jv prepayments', 25), (' other', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [('current', 100), (' related party receivable', 76), (' related party disclosures', 70), (' rental bond', 64), (' current investments', 64), (' other receivables - related party', 62), (' other', 60), (' income tax receivable from related parties', 60), (' other deposits receivable - related party', 55), (' accrued rebates', 55), (' bank guarantee', 54), (' share of jv prepayments', 50), (' other debtors and prepayments ', 48), (' interest receivable', 47), (' Fuel tax credits ', 47), (' derivative contracts - fair value', 46), (' Debtors retention ', 46), (' foreign exchange forward contracts', 45), (' Accrued income ', 45), (' Forward exchange contracts used for hedging keyword', 45), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' Capitalised contract cost ', 43), (' accrued interest receivable ', 43), (' forward exchange contracts', 42), (' Intercompany receivable ', 42), ('foreign exchange derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' Prepaid subscription ', 41), (' GST receivable ', 40), ('other assets', 36), (' Income tax refund due ', 35), (' lng', 33), (' other receivables ', 33), (' electricity derivatives at fair value', 32), (' deposits', 29), (' Deposits ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' Capitalised contract cost ', 46), (' Forward exchange contracts used for hedging keyword', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), (' Debtors retention ', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments ', 38), (' Fuel tax credits ', 38), (' accrued interest receivable ', 38), (' Accrued income ', 36), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' Income tax refund due ', 31), (' deposits', 29), (' Deposits ', 29), ('other assets', 27), (' other receivables ', 25), (' long service leave receivable', 23), (' related party receivable', 23), (' Prepaid subscription ', 23), (' Intercompany receivable ', 23), (' GST receivable ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), (' other receivables ', 75), (' interest receivable', 73), (' GST receivable ', 70), (' related party receivable', 67), (' accrued interest receivable ', 67), (' current investments', 64), (' Intercompany receivable ', 58), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' Fuel tax credits ', 53), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments ', 46), (' Debtors retention ', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' Forward exchange contracts used for hedging keyword', 45), (' Income tax refund due ', 44), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' Prepaid subscription ', 41), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' Capitalised contract cost ', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29), (' Deposits ', 29), (' Accrued income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [('current', 100), (' related party receivable', 100), (' GST receivable ', 80), (' current investments', 71), (' related party disclosures', 67), (' interest receivable', 67), (' other receivables ', 67), (' other receivables - related party', 62), (' other', 60), (' Intercompany receivable ', 58), (' accrued interest receivable ', 57), (' rental bond', 55), (' accrued rebates', 55), (' Debtors retention ', 54), (' long service leave receivable', 52), (' accrued interest', 50), (' share of jv prepayments', 50), (' income tax receivable from related parties', 48), (' other deposits receivable - related party', 48), (' Fuel tax credits ', 47), (' derivative contracts - fair value', 46), (' amount receivable from controlling entity', 45), (' deposits', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' Capitalised contract cost ', 43), (' Deposits ', 43), (' electricity derivatives at fair value', 41), (' Prepaid subscription ', 41), (' Income tax refund due ', 40), ('foreign exchange derivatives at fair value', 39), (' other debtors and prepayments ', 39), (' Forward exchange contracts used for hedging keyword', 39), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' Accrued income ', 36), (' lng', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), (' other', 100), (' other receivables ', 100), (' interest receivable', 73), (' GST receivable ', 70), (' related party receivable', 67), (' accrued interest receivable ', 67), ('other assets', 64), (' current investments', 64), (' Intercompany receivable ', 58), (' other deposits receivable - related party', 55), (' rental bond', 55), (' Debtors retention ', 54), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' Fuel tax credits ', 47), ('foreign exchange derivatives at fair value', 45), (' accrued rebates', 45), (' Forward exchange contracts used for hedging keyword', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), (' share of jv prepayments', 42), (' other debtors and prepayments ', 41), (' electricity derivatives at fair value', 40), (' forward exchange contracts', 40), (' Capitalised contract cost ', 40), (' Accrued income ', 36), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' Income tax refund due ', 35), (' lng', 33), (' bank guarantee', 31), (' Prepaid subscription ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [('current', 100), (' GST receivable ', 70), (' related party receivable', 67), (' current investments', 64), (' accrued interest receivable ', 62), (' interest receivable', 60), (' Intercompany receivable ', 58), (' other receivables ', 58), (' rental bond', 55), (' long service leave receivable', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' income tax receivable from related parties', 45), (' accrued rebates', 45), (' condensate', 43), (' other debtors and prepayments ', 41), (' Prepaid subscription ', 41), ('foreign exchange derivatives at fair value', 40), (' other receivables - related party', 40), (' Fuel tax credits ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' bank guarantee', 38), (' Debtors retention ', 38), (' accrued interest', 36), (' Accrued income ', 36), (' electricity derivatives at fair value', 35), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' Income tax refund due ', 35), (' lng', 33), (' Capitalised contract cost ', 30), (' deposits', 29), (' Deposits ', 29), ('other assets', 27), (' share of jv prepayments', 25), (' other', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [('current', 100), (' related party receivable', 76), (' related party disclosures', 70), (' rental bond', 64), (' current investments', 64), (' other receivables - related party', 62), (' other', 60), (' income tax receivable from related parties', 60), (' other deposits receivable - related party', 55), (' accrued rebates', 55), (' bank guarantee', 54), (' share of jv prepayments', 50), (' other debtors and prepayments ', 48), (' interest receivable', 47), (' Fuel tax credits ', 47), (' derivative contracts - fair value', 46), (' Debtors retention ', 46), (' foreign exchange forward contracts', 45), (' Accrued income ', 45), (' Forward exchange contracts used for hedging keyword', 45), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' Capitalised contract cost ', 43), (' accrued interest receivable ', 43), (' forward exchange contracts', 42), (' Intercompany receivable ', 42), ('foreign exchange derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' Prepaid subscription ', 41), (' GST receivable ', 40), ('other assets', 36), (' Income tax refund due ', 35), (' lng', 33), (' other receivables ', 33), (' electricity derivatives at fair value', 32), (' deposits', 29), (' Deposits ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' Capitalised contract cost ', 46), (' Forward exchange contracts used for hedging keyword', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), (' Debtors retention ', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments ', 38), (' Fuel tax credits ', 38), (' accrued interest receivable ', 38), (' Accrued income ', 36), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' Income tax refund due ', 31), (' deposits', 29), (' Deposits ', 29), ('other assets', 27), (' other receivables ', 25), (' long service leave receivable', 23), (' related party receivable', 23), (' Prepaid subscription ', 23), (' Intercompany receivable ', 23), (' GST receivable ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [18834.0, 3193.0, 45.0, 7861.0, 4000.0, 33933.0, 13010.0, 5456.0, 7.0, 5576.0, 4000.0, 28049.0], 'label': ['Current Trade receivables', 'Current Related party receivables (Note 22)', 'Current Other receivables', 'Current Unbilled receivables', 'Current Loan to related party (Note 22)', 'Current Total', 'Current Trade receivables', 'Current Related party receivables (Note 22)', 'Current Other receivables', 'Current Unbilled receivables', 'Current Loan to related party (Note 22)', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [18834.0, 3193.0, 45.0, 7861.0, 4000.0, 33933.0, 13010.0, 5456.0, 7.0, 5576.0, 4000.0, 28049.0], 'label': ['', '', '', '', '', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment ', 29), (' Property ', 29), (' plant and equipment ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 2626.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2626.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment ', 29), (' Property ', 29), (' plant and equipment ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 2420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2420.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 30), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Marine ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 31), (' Facilities ', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' Plant and equipment ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 30), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Marine ', 40), (' Leasehold buildings', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 31), (' Facilities ', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 8, 10, 11], 'score': [100, 100, 100, 100, 100, 100], 'value': [-1232.0, 5448.0, -4216.0, -2189.0, 5341.0, -4182.0], 'label': ['Non-current Accumulated depreciation', 'Non-current Plant and equipment at cost', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Plant and equipment at cost', 'Non-current Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 7, 10], 'score': [100, 100, 100, 100], 'value': [2420.0, 5448.0, 3656.0, 5341.0], 'label': ['Non-current Leasehold improvements at cost', 'Non-current Plant and equipment at cost', 'Non-current Leasehold improvements at cost', 'Non-current Plant and equipment at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('depreciation', 43), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciation', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciation', 100), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), ('depreciation', 29), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciation', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciation', 100), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), ('depreciation', 29), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings', 73), (' land and improvement ', 60), (' Development properties ', 45), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Plant and equipment ', 40), (' Marine ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), ('accumulated depreciation ', 34), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 31), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Mine infrastructure ', 25), (' under construction ', 20), (' Facilities ', 20), (' Other assets ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('depreciation', 43), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciation', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciation', 100), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), ('depreciation', 29), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciation', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciation', 100), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), ('depreciation', 29), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), ('depreciation', 43), (' Leasehold buildings', 41), (' Capitalised pre stripping costs ', 40), (' Assets under construction ', 40), (' Marine ', 40), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Asset Retirement Obligation ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Development properties ', 28), (' Construction in progress ', 27), (' Mine infrastructure ', 27), (' under construction ', 27), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), ('depreciation', 43), ('accumulated depreciation ', 41), (' Leasehold buildings', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 35), (' Capitalised pre stripping costs ', 35), (' Mine infrastructure ', 35), (' Building & mine infrastructure ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciation', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciation', 100), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), ('depreciation', 29), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Other assets ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Asset Retirement Obligation ', 30), (' Construction in progress ', 30), (' Capitalised pre stripping costs ', 30), (' Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29), (' Stripping WIP ', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), (' Other assets ', 45), (' Assets under construction ', 45), (' Mine infrastructure ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Construction in progress ', 36), (' Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), ('depreciation', 29), ('accumulated depreciation ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciation', 100), (' Mining properties ', 54), ('accumulated depreciation ', 53), (' Pipeline Asset ', 46), (' Construction in progress ', 44), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Capitalised pre stripping costs ', 37), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land and buildings ', 26), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Subsea ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Facilities ', 40), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Assets under construction ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Subsea ', 33), ('depreciation', 29), (' Construction in progress ', 29), (' Capitalised pre stripping costs ', 29), (' Leasehold buildings', 27), (' Development properties ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7, 9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 21, 25], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-200.0, -268.0, 1130.0, 478.0, 0.0, -449.0, -449.0, 1159.0, 570.0, -2.0, -495.0, -495.0, 1232.0, -649.0, -763.0], 'label': ['None Depreciation expense', 'None Depreciation expense', "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", 'None Depreciation expense', "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", 'None Depreciation expense', "Plant and equipment $'000", "Plant and equipment $'000", 'None Depreciation expense', 'None Depreciation expense'], 'year': [], 'colname_found': ['rows', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('cost', 25), ('gross', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('cost', 25), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 2626.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2626.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 2420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2420.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' investment property', 100), ('Work in progress ', 33), (' plant property equipment ', 33), (' property plant equipment ', 33), (' plant and equipment ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investment property', 34), (' plant property equipment ', 33), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 2626.0, 'line_item_label': ['Investments', 'Property, plant and equipment'], 'note_numbers': ['11', '12'], 'line_item_value': [0.0, 2626.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' investment property', 100), ('Work in progress ', 33), (' plant property equipment ', 33), (' property plant equipment ', 33), (' plant and equipment ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investment property', 34), (' plant property equipment ', 33), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 2420.0, 'line_item_label': ['Investments', 'Property, plant and equipment'], 'note_numbers': ['11', '12'], 'line_item_value': [0.0, 2420.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 37)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 37)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 35), (' capital works in progress', 24), (' work in progress ', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress', 18), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress', 18), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 35), (' capital works in progress', 24), (' work in progress ', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress', 18), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress', 18), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 35), (' capital works in progress', 24), (' work in progress ', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress', 18), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('construction in progress ', 30), (' work in progress ', 20), (' capital works in progress', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('construction in progress ', 36), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('construction in progress ', 44), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 29), (' capital works in progress', 18), (' work in progress ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 33), ('goodwill ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 20), ('goodwill ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 33), ('goodwill ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 20), ('goodwill ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets ', 50), (' intangible under development ', 50), (' intangible assets under development ', 50), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 47), (' intangible under development ', 40), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 2626.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2626.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets ', 50), (' intangible under development ', 50), (' intangible assets under development ', 50), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 47), (' intangible under development ', 40), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 2420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2420.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [(' carrying amounts ', 50), (' goodwill ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' consumer contracts ', 47), (' development and software ', 42), (' computer software ', 36), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [(' carrying amounts ', 50), (' goodwill ', 43), (' water licenses', 42), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' development and software ', 32), (' mining rights ', 30), (' software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' consumer contracts ', 47), (' development and software ', 42), (' computer software ', 36), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' carrying amounts ', 35), (' consumer contracts ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' carrying amounts ', 30), (' water licenses', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' goodwill ', 43), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29), (' carrying amounts ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' goodwill ', 29), (' computer software ', 21), (' software ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' carrying amounts ', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' carrying amounts ', 30), (' water licenses', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' goodwill ', 43), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29), (' carrying amounts ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' goodwill ', 29), (' computer software ', 21), (' software ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' carrying amounts ', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' goodwill ', 43), (' development and software ', 38), (' water licenses', 33), (' mining rights ', 30), (' software ', 29), (' computer software ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' carrying amounts ', 35), (' consumer contracts ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' carrying amounts ', 30), (' water licenses', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' goodwill ', 43), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29), (' carrying amounts ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' goodwill ', 29), (' computer software ', 21), (' software ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' carrying amounts ', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' carrying amounts ', 30), (' water licenses', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' goodwill ', 43), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29), (' carrying amounts ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' goodwill ', 29), (' computer software ', 21), (' software ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' carrying amounts ', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' development and software ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' water licenses', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' consumer contracts ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' mining rights ', 40), (' carrying amounts ', 35), (' consumer contracts ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' carrying amounts ', 30), (' water licenses', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' goodwill ', 43), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29), (' carrying amounts ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' goodwill ', 29), (' computer software ', 21), (' software ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' carrying amounts ', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('Other intangibles ', 50), (' mining rights ', 50), (' development and software ', 40), (' consumer contracts ', 40), (' carrying amounts ', 30), (' water licenses', 30), (' goodwill ', 29), (' software ', 29), (' computer software ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' development and software ', 45), (' goodwill ', 43), (' mining rights ', 40), ('Other intangibles ', 36), (' computer software ', 36), (' consumer contracts ', 36), (' water licenses', 36), (' software ', 29), (' carrying amounts ', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' water licenses', 42), (' mining rights ', 40), ('Other intangibles ', 33), (' carrying amounts ', 33), (' consumer contracts ', 33), (' development and software ', 32), (' goodwill ', 29), (' computer software ', 21), (' software ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' water licenses', 33), (' goodwill ', 29), (' software ', 29), (' computer software ', 29), (' carrying amounts ', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year ', ' Interest swap']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method ', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), (' Other investment including derivatives', 38), ('investment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method ', 100), (' Other investment including derivatives', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Other investment including derivatives', 50), ('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method ', 38), ('investment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method ', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33), (' Other investment including derivatives', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), (' Other investment including derivatives', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [0.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method ', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), (' Other investment including derivatives', 38), ('investment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method ', 100), (' Other investment including derivatives', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Other investment including derivatives', 50), ('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method ', 38), ('investment', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method ', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33), (' Other investment including derivatives', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), (' Other investment including derivatives', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [0.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year ', ' Interest swap'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year ', ' Interest swap'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 3693.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['6(c)'], 'line_item_value': [3693.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 3557.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['6(c)'], 'line_item_value': [3557.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 7. franking account balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 47)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = none 7. franking account balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 47)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('deferred tax assets', 12), (' deferred tax balances', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 accruals and provisions , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = opening balance $'000 , res_fuzz_match = [(' deferred tax balances', 64), ('deferred tax assets', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 right of use asset and leases , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = opening balance $'000 , res_fuzz_match = [(' deferred tax balances', 64), ('deferred tax assets', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 total , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = opening balance $'000 , res_fuzz_match = [(' deferred tax balances', 64), ('deferred tax assets', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 accruals and provisions , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = opening balance $'000 , res_fuzz_match = [(' deferred tax balances', 64), ('deferred tax assets', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 right of use asset and leases , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = opening balance $'000 , res_fuzz_match = [(' deferred tax balances', 64), ('deferred tax assets', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 total , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = opening balance $'000 , res_fuzz_match = [(' deferred tax balances', 64), ('deferred tax assets', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 accruals and provisions , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = charge to profit or loss $'000 , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 right of use asset and leases , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = charge to profit or loss $'000 , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 total , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = charge to profit or loss $'000 , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 accruals and provisions , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = charge to profit or loss $'000 , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 right of use asset and leases , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = charge to profit or loss $'000 , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 total , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = charge to profit or loss $'000 , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 accruals and provisions , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = closing balance $'000 , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 right of use asset and leases , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = closing balance $'000 , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2023 total , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = closing balance $'000 , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 accruals and provisions , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = closing balance $'000 , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 right of use asset and leases , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = closing balance $'000 , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = 2022 total , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = closing balance $'000 , res_fuzz_match = [(' deferred tax balances', 58), ('deferred tax assets', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation ']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' Lease obligation ', 33), (' cash and cash equivalents ', 29), ('  leases ', 22), (' cash ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' Lease obligation ', 31), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' Lease obligation ', 25), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), ('short term debt ', 30), (' loans and borrowings ', 30), (' Lease obligation ', 29), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' cash ', 18), (' borrowings ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1811.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['16'], 'line_item_value': [1811.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' Lease obligation ', 33), (' cash and cash equivalents ', 29), ('  leases ', 22), (' cash ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' Lease obligation ', 31), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' Lease obligation ', 25), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), ('short term debt ', 30), (' loans and borrowings ', 30), (' Lease obligation ', 29), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' cash ', 18), (' borrowings ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1671.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['16'], 'line_item_value': [1671.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 24109.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [24109.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 24787.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [24787.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' trade payables - other parties ', 58), (' other trade payables ', 56), (' Trade payable due to related partiees', 56), (' trade and other payables ', 55), (' trade payables ', 52), (' payables to related parties ', 50), (' accounts payable - trade ', 50), (' trade payables - related parties ', 50), (' amounts payable to controlling entity ', 46), (' Related party payables ', 46), ('trade creditors ', 43), (' payables ', 33), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' payables ', 100), (' Related party payables ', 100), (' trade payables ', 67), (' payables to related parties ', 67), (' accounts payable - trade ', 62), (' trade and other payables ', 59), (' trade payables - related parties ', 58), (' other trade payables ', 56), (' trade payables - other parties ', 54), (' Trade payable due to related partiees', 53), (' amounts payable to controlling entity ', 48), ('trade creditors ', 43), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [('trade creditors ', 50), (' amounts payable to controlling entity ', 50), (' trade and other payables ', 41), (' accounts payable - trade ', 40), (' other trade payables ', 39), (' trade payables - other parties ', 38), (' Trade payable due to related partiees', 38), (' trade payables ', 33), (' Related party payables ', 33), (' trade payables - related parties ', 33), (' payables to related parties ', 28), (' payables ', 17), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' other trade payables ', 56), (' Related party payables ', 56), (' trade and other payables ', 55), ('trade creditors ', 50), (' amounts payable to controlling entity ', 50), (' accounts payable - trade ', 45), (' trade payables - other parties ', 42), (' trade payables - related parties ', 42), (' Trade payable due to related partiees', 41), (' payables to related parties ', 33), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' Related party payables ', 67), (' accounts payable - trade ', 65), (' payables to related parties ', 61), (' trade and other payables ', 59), (' other trade payables ', 56), (' trade payables - related parties ', 54), (' Trade payable due to related partiees', 52), ('trade creditors ', 50), (' trade payables - other parties ', 50), (' amounts payable to controlling entity ', 50), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [('trade creditors ', 50), (' amounts payable to controlling entity ', 50), (' trade and other payables ', 45), (' other trade payables ', 44), (' trade payables ', 42), (' accounts payable - trade ', 40), (' Related party payables ', 40), (' trade payables - other parties ', 38), (' Trade payable due to related partiees', 38), (' payables ', 33), (' trade payables - related parties ', 33), (' payables to related parties ', 28), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' trade payables - other parties ', 58), (' other trade payables ', 56), (' Trade payable due to related partiees', 56), (' trade and other payables ', 55), (' trade payables ', 52), (' payables to related parties ', 50), (' accounts payable - trade ', 50), (' trade payables - related parties ', 50), (' amounts payable to controlling entity ', 46), (' Related party payables ', 46), ('trade creditors ', 43), (' payables ', 33), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' payables ', 100), (' Related party payables ', 100), (' trade payables ', 67), (' payables to related parties ', 67), (' accounts payable - trade ', 62), (' trade and other payables ', 59), (' trade payables - related parties ', 58), (' other trade payables ', 56), (' trade payables - other parties ', 54), (' Trade payable due to related partiees', 53), (' amounts payable to controlling entity ', 48), ('trade creditors ', 43), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [('trade creditors ', 50), (' amounts payable to controlling entity ', 50), (' trade and other payables ', 41), (' accounts payable - trade ', 40), (' other trade payables ', 39), (' trade payables - other parties ', 38), (' Trade payable due to related partiees', 38), (' trade payables ', 33), (' Related party payables ', 33), (' trade payables - related parties ', 33), (' payables to related parties ', 28), (' payables ', 17), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' other trade payables ', 56), (' Related party payables ', 56), (' trade and other payables ', 55), ('trade creditors ', 50), (' amounts payable to controlling entity ', 50), (' accounts payable - trade ', 45), (' trade payables - other parties ', 42), (' trade payables - related parties ', 42), (' Trade payable due to related partiees', 41), (' payables to related parties ', 33), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' Related party payables ', 67), (' accounts payable - trade ', 65), (' payables to related parties ', 61), (' trade and other payables ', 59), (' other trade payables ', 56), (' trade payables - related parties ', 54), (' Trade payable due to related partiees', 52), ('trade creditors ', 50), (' trade payables - other parties ', 50), (' amounts payable to controlling entity ', 50), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [('trade creditors ', 50), (' amounts payable to controlling entity ', 50), (' trade and other payables ', 45), (' other trade payables ', 44), (' trade payables ', 42), (' accounts payable - trade ', 40), (' Related party payables ', 40), (' trade payables - other parties ', 38), (' Trade payable due to related partiees', 38), (' payables ', 33), (' trade payables - related parties ', 33), (' payables to related parties ', 28), (' ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [3173.0, 10633.0, 10633.0, 8388.0, 967.0, 967.0, 1626.0, 1626.0, 24787.0, 3000.0, 5951.0, 5951.0, 12887.0, 626.0, 626.0, 1645.0, 1645.0, 24109.0], 'label': ['', 'Current Related party payables (Note 22)', '', '', 'Amounts due customers under construction Good and services tax (GST) payable', '', 'Amounts due customers under construction Sundry payables and accrued expenses', '', '', '', 'Current Related party payables (Note 22)', '', '', 'Amounts due customers under construction Good and services tax (GST) payable', '', 'Amounts due customers under construction Sundry payables and accrued expenses', '', ''], 'year': [], 'colname_found': ['columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued ', ' accruals']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 24109.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [24109.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 24787.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [24787.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued ', ' accruals'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued ', ' accruals'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' interest accrued ', 36), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' interest accrued ', 57), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [(' interest accrued ', 50), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' interest accrued ', 50), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' interest accrued ', 50), (' accruals', 43)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [(' interest accrued ', 50), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' interest accrued ', 36), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' interest accrued ', 57), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [(' interest accrued ', 50), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' interest accrued ', 50), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' interest accrued ', 50), (' accruals', 43)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [(' interest accrued ', 50), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': [100, 100], 'value': [1626.0, 1645.0], 'label': ['Amounts due customers under construction Sundry payables and accrued expenses', 'Amounts due customers under construction Sundry payables and accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' Current tax payables ', 64), (' income tax payable ', 43), (' Trade and other payables', 37), (' tax ', 33), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' Trade and other payables', 100), (' tax ', 67), (' income tax payable ', 62), (' Current tax payables ', 61), ('current tax liabilities ', 44), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision ', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' Current tax payables ', 17), (' Trade and other payables', 17), (' tax ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' Current tax payables ', 83), (' income tax payable ', 56), (' Trade and other payables', 44), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 5], 'score': 100, 'value': 31000.0, 'line_item_label': ['Liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '14', '15', '6(b)'], 'line_item_value': [0.0, 24109.0, 6891.0, 0.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' Current tax payables ', 64), (' income tax payable ', 43), (' Trade and other payables', 37), (' tax ', 33), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' Trade and other payables', 100), (' tax ', 67), (' income tax payable ', 62), (' Current tax payables ', 61), ('current tax liabilities ', 44), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision ', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' Current tax payables ', 17), (' Trade and other payables', 17), (' tax ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' Current tax payables ', 83), (' income tax payable ', 56), (' Trade and other payables', 44), (' provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 5], 'score': 100, 'value': 31974.0, 'line_item_label': ['Liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '14', '15', '6(b)'], 'line_item_value': [0.0, 24787.0, 7117.0, 70.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 52), (' provision for income tax ', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [(' provision for income tax ', 45), ('income tax (refundable)/payable ', 39), (' tax receivable/payable', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 61), (' provision for income tax ', 45)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 61), (' provision for income tax ', 35)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 52), (' provision for income tax ', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [(' provision for income tax ', 45), ('income tax (refundable)/payable ', 39), (' tax receivable/payable', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 61), (' provision for income tax ', 45)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 61), (' provision for income tax ', 35)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current employee benefits (a) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' tax receivable/payable', 35), (' provision for income tax ', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current projected losses on contracts (b) , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (a) , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current warranty provision (c) , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current make good provision (d) , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 30), (' tax receivable/payable', 24)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' provision for income tax ', 46), ('income tax (refundable)/payable ', 38), (' tax receivable/payable', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current employee benefits (a) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' tax receivable/payable', 35), (' provision for income tax ', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current projected losses on contracts (b) , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (a) , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current warranty provision (c) , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current make good provision (d) , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 30), (' tax receivable/payable', 24)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' provision for income tax ', 46), ('income tax (refundable)/payable ', 38), (' tax receivable/payable', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41), (' provision for income tax ', 35)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised , res_fuzz_match = [(' provision for income tax ', 51), (' tax receivable/payable', 35), ('income tax (refundable)/payable ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total provisions utilised , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 37), ('income tax (refundable)/payable ', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' tax receivable/payable', 41), (' provision for income tax ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41), (' provision for income tax ', 35)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised , res_fuzz_match = [(' provision for income tax ', 51), (' tax receivable/payable', 35), ('income tax (refundable)/payable ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total provisions utilised , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 37), ('income tax (refundable)/payable ', 32)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' tax receivable/payable', 41), (' provision for income tax ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41), (' provision for income tax ', 35)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised provisions utilised , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total (308) , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [('income tax (refundable)/payable ', 48), (' tax receivable/payable', 41), (' provision for income tax ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' provision for income tax ', 38), ('income tax (refundable)/payable ', 25), (' tax receivable/payable', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' Contract Liabilities ', 69), (' derivative liabilities ', 62), (' financial liabilities', 57), (' foreign exchange contract liability ', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), (' Derivative financial instruments ', 26), (' Deferred income', 24), ('provisions', 20), (' Provision ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' derivative liabilities ', 41), (' Derivative financial instruments ', 39), (' Contract Liabilities ', 38), (' deferred revenue', 35), (' foreign exchange contract liability ', 34), (' financial liabilities', 33), (' employee benefits', 32), (' Deferred income', 24), (' customer deposits', 22), ('provisions', 14), (' Provision ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' Provision ', 100), (' derivative liabilities ', 33), (' customer deposits', 30), (' Derivative financial instruments ', 27), (' Deferred income', 24), (' deferred revenue', 22), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' Contract Liabilities ', 61), (' other financial liabilities', 53), (' derivative liabilities ', 53), (' financial liabilities', 50), (' foreign exchange contract liability ', 49), (' trade and other payables', 45), (' customer deposits', 38), (' Derivative financial instruments ', 33), (' employee benefits', 30), (' deferred revenue', 27), (' Deferred income', 21), ('provisions', 17), (' Provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 5], 'score': 84, 'value': 31000.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '14', '15', '6(b)'], 'line_item_value': [0.0, 24109.0, 6891.0, 0.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' Contract Liabilities ', 69), (' derivative liabilities ', 62), (' financial liabilities', 57), (' foreign exchange contract liability ', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), (' Derivative financial instruments ', 26), (' Deferred income', 24), ('provisions', 20), (' Provision ', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' derivative liabilities ', 41), (' Derivative financial instruments ', 39), (' Contract Liabilities ', 38), (' deferred revenue', 35), (' foreign exchange contract liability ', 34), (' financial liabilities', 33), (' employee benefits', 32), (' Deferred income', 24), (' customer deposits', 22), ('provisions', 14), (' Provision ', 14)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' Provision ', 100), (' derivative liabilities ', 33), (' customer deposits', 30), (' Derivative financial instruments ', 27), (' Deferred income', 24), (' deferred revenue', 22), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' Contract Liabilities ', 61), (' other financial liabilities', 53), (' derivative liabilities ', 53), (' financial liabilities', 50), (' foreign exchange contract liability ', 49), (' trade and other payables', 45), (' customer deposits', 38), (' Derivative financial instruments ', 33), (' employee benefits', 30), (' deferred revenue', 27), (' Deferred income', 21), ('provisions', 17), (' Provision ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 5], 'score': 84, 'value': 31974.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '14', '15', '6(b)'], 'line_item_value': [0.0, 24787.0, 7117.0, 70.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' rebates', 60), (' other', 60), (' others ', 60), (' other related parties', 59), (' loans from related party', 52), (' share of joint venture payables', 52), (' Trade payables ', 52), (' Warranty and after sales service ', 52), (' current - liability for annual and long service leave', 50), (' warranty', 50), (' current- liability for long service leave ', 50), (' total current employee benefits ', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 47), (' Current- liability for annual leave ', 47), (' Forward currency contract ', 46), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Employee entitlements ', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' employee benefits - payroll', 42), (' Stock and feright payables ', 42), (' employee benefits - current', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' service contracts ', 40), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' arising from service contracts', 37), (' provision for annual and long service leave ', 37), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' Deferred income ', 36), (' gst', 33), (' accrued expenses ', 33), (' gst payables', 32), (' GST Payable', 32), (' gst liabilities', 30), (' Employee payables ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' gst payables', 80), (' rebates', 80), (' GST Payable', 80), (' other related parties', 76), (' Trade payables ', 67), (' loans from related party', 62), (' share of joint venture payables', 60), (' other', 60), (' others ', 60), (' current - liability for annual and long service leave', 58), (' Current- liability for annual leave ', 57), (' Employee payables ', 57), (' Stock and feright payables ', 54), (' ultimate parent entity', 53), (' contract liabilites - current', 52), (' current- liability for long service leave ', 52), (' derivative contracts - at fair value', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 48), (' Warranty and after sales service ', 47), (' gst payable and accruals', 45), (' total current employee benefits ', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' Forward currency contract ', 42), (' employee benefits - payroll', 41), (' service contracts ', 40), (' secured long-term bank loans', 38), (' make good provisions', 38), (' provisions - current', 36), (' Employee entitlements ', 36), (' provision for annual and long service leave ', 35), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' Deferred income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [(' service contracts ', 80), (' gst', 67), (' derivative contracts - at fair value', 60), (' arising from service contracts', 60), (' rebates', 60), (' restructuring', 60), (' Forward currency contract ', 58), (' Deferred income ', 55), (' forward exchange contracts', 54), ('other creditors and accruals', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' abandonment and decommissioning costs', 46), (' contract liabilites - current', 44), (' secured long-term bank loans', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' Stock and feright payables ', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' other', 40), (' current- liability for long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' employee benefits - current', 39), (' provision for annual and long service leave ', 39), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' total current employee benefits ', 38), (' Employee entitlements ', 36), (' Current- liability for annual leave ', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' Employee payables ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' GST Payable', 100), (' gst liabilities', 70), (' Trade payables ', 67), (' service contracts ', 67), (' Stock and feright payables ', 62), (' restructuring', 60), (' derivative contracts - at fair value', 58), (' arising from service contracts', 56), (' make good provisions', 56), (' Deferred income ', 55), (' share of joint venture payables', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' provision for annual and long service leave ', 50), (' Forward currency contract ', 50), (' Employee payables ', 50), (' Warranty and after sales service ', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' current- liability for long service leave ', 46), (' gst payable and accruals', 45), (' loans from related party', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' other', 40), (' others ', 40), (' employee benefits - current', 39), (' total current employee benefits ', 38), (' Current- liability for annual leave ', 37), (' provisions - current', 36), (' Employee entitlements ', 36), (' gst', 33), (' accrued expenses ', 33), (' warranty', 25), (' rebates', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [(' accrued expenses ', 100), (' gst payable and accruals', 77), (' gst payables', 70), (' restructuring', 70), (' GST Payable', 70), (' gst', 67), (' Trade payables ', 67), (' service contracts ', 67), (' derivative contracts - at fair value', 62), (' Stock and feright payables ', 62), (' share of joint venture payables', 60), (' arising from service contracts', 56), (' Deferred income ', 55), (' contract liabilites - current', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' Forward currency contract ', 50), (' Employee payables ', 50), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 43), (' Current- liability for annual leave ', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' provision for annual and long service leave ', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' current- liability for long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' employee benefits - current', 39), (' loans from related party', 38), (' warranty', 38), (' total current employee benefits ', 38), (' provisions - current', 36), (' Employee entitlements ', 36), (' make good provisions', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [(' gst', 67), (' service contracts ', 67), (' derivative contracts - at fair value', 64), (' restructuring', 60), (' arising from service contracts', 56), (' Deferred income ', 55), ('other creditors and accruals', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' Forward currency contract ', 50), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 44), (' provisions - current', 43), (' current- liability for long service leave ', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' Stock and feright payables ', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' provision for annual and long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' total current employee benefits ', 38), (' share of joint venture payables', 37), (' Employee entitlements ', 36), (' Current- liability for annual leave ', 33), (' accrued expenses ', 33), (' employee benefits - payroll', 32), (' Employee payables ', 29), (' rebates', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current amounts due to third parties , res_fuzz_match = [(' rebates', 60), (' other', 60), (' others ', 60), (' other related parties', 59), (' loans from related party', 52), (' share of joint venture payables', 52), (' Trade payables ', 52), (' Warranty and after sales service ', 52), (' current - liability for annual and long service leave', 50), (' warranty', 50), (' current- liability for long service leave ', 50), (' total current employee benefits ', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 47), (' Current- liability for annual leave ', 47), (' Forward currency contract ', 46), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Employee entitlements ', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' employee benefits - payroll', 42), (' Stock and feright payables ', 42), (' employee benefits - current', 41), (' contract liabilites - current', 40), (' restructuring', 40), (' service contracts ', 40), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' arising from service contracts', 37), (' provision for annual and long service leave ', 37), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' Deferred income ', 36), (' gst', 33), (' accrued expenses ', 33), (' gst payables', 32), (' GST Payable', 32), (' gst liabilities', 30), (' Employee payables ', 30)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current related party payables (note 22) , res_fuzz_match = [(' gst payables', 80), (' rebates', 80), (' GST Payable', 80), (' other related parties', 76), (' Trade payables ', 67), (' loans from related party', 62), (' share of joint venture payables', 60), (' other', 60), (' others ', 60), (' current - liability for annual and long service leave', 58), (' Current- liability for annual leave ', 57), (' Employee payables ', 57), (' Stock and feright payables ', 54), (' ultimate parent entity', 53), (' contract liabilites - current', 52), (' current- liability for long service leave ', 52), (' derivative contracts - at fair value', 50), (' gst liabilities', 50), (' restructuring', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 48), (' Warranty and after sales service ', 47), (' gst payable and accruals', 45), (' total current employee benefits ', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' Forward currency contract ', 42), (' employee benefits - payroll', 41), (' service contracts ', 40), (' secured long-term bank loans', 38), (' make good provisions', 38), (' provisions - current', 36), (' Employee entitlements ', 36), (' provision for annual and long service leave ', 35), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' Deferred income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction contracts , res_fuzz_match = [(' service contracts ', 80), (' gst', 67), (' derivative contracts - at fair value', 60), (' arising from service contracts', 60), (' rebates', 60), (' restructuring', 60), (' Forward currency contract ', 58), (' Deferred income ', 55), (' forward exchange contracts', 54), ('other creditors and accruals', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' abandonment and decommissioning costs', 46), (' contract liabilites - current', 44), (' secured long-term bank loans', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' Stock and feright payables ', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' other', 40), (' current- liability for long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' employee benefits - current', 39), (' provision for annual and long service leave ', 39), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' total current employee benefits ', 38), (' Employee entitlements ', 36), (' Current- liability for annual leave ', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' Employee payables ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction good and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' GST Payable', 100), (' gst liabilities', 70), (' Trade payables ', 67), (' service contracts ', 67), (' Stock and feright payables ', 62), (' restructuring', 60), (' derivative contracts - at fair value', 58), (' arising from service contracts', 56), (' make good provisions', 56), (' Deferred income ', 55), (' share of joint venture payables', 52), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' provision for annual and long service leave ', 50), (' Forward currency contract ', 50), (' Employee payables ', 50), (' Warranty and after sales service ', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' current- liability for long service leave ', 46), (' gst payable and accruals', 45), (' loans from related party', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' other', 40), (' others ', 40), (' employee benefits - current', 39), (' total current employee benefits ', 38), (' Current- liability for annual leave ', 37), (' provisions - current', 36), (' Employee entitlements ', 36), (' gst', 33), (' accrued expenses ', 33), (' warranty', 25), (' rebates', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction sundry payables and accrued expenses , res_fuzz_match = [(' accrued expenses ', 100), (' gst payable and accruals', 77), (' gst payables', 70), (' restructuring', 70), (' GST Payable', 70), (' gst', 67), (' Trade payables ', 67), (' service contracts ', 67), (' derivative contracts - at fair value', 62), (' Stock and feright payables ', 62), (' share of joint venture payables', 60), (' arising from service contracts', 56), (' Deferred income ', 55), (' contract liabilites - current', 52), ('other creditors and accruals', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' Forward currency contract ', 50), (' Employee payables ', 50), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 43), (' Current- liability for annual leave ', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' provision for annual and long service leave ', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' current- liability for long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' employee benefits - current', 39), (' loans from related party', 38), (' warranty', 38), (' total current employee benefits ', 38), (' provisions - current', 36), (' Employee entitlements ', 36), (' make good provisions', 31)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = amounts due customers under construction total , res_fuzz_match = [(' gst', 67), (' service contracts ', 67), (' derivative contracts - at fair value', 64), (' restructuring', 60), (' arising from service contracts', 56), (' Deferred income ', 55), ('other creditors and accruals', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' Forward currency contract ', 50), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' loan payable to relayed party under tax funding agreement', 44), (' current - liability for annual and long service leave', 44), (' provisions - current', 43), (' current- liability for long service leave ', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' Stock and feright payables ', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' provision for annual and long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' total current employee benefits ', 38), (' share of joint venture payables', 37), (' Employee entitlements ', 36), (' Current- liability for annual leave ', 33), (' accrued expenses ', 33), (' employee benefits - payroll', 32), (' Employee payables ', 29), (' rebates', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 4, 7, 8, 9, 10], 'score': [80, 80, 100, 100, 80, 80, 100, 100], 'value': [10633.0, 8388.0, 967.0, 1626.0, 5951.0, 12887.0, 626.0, 1645.0], 'label': ['Current Related party payables (Note 22)', 'Amounts due customers under construction contracts', 'Amounts due customers under construction Good and services tax (GST) payable', 'Amounts due customers under construction Sundry payables and accrued expenses', 'Current Related party payables (Note 22)', 'Amounts due customers under construction contracts', 'Amounts due customers under construction Good and services tax (GST) payable', 'Amounts due customers under construction Sundry payables and accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current employee benefits (a) , res_fuzz_match = [(' total current employee benefits ', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' current- liability for long service leave ', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' Forward currency contract ', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' Warranty and after sales service ', 39), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' provision for annual and long service leave ', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' Stock and feright payables ', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current projected losses on contracts (b) , res_fuzz_match = [(' service contracts ', 67), (' rebates', 60), (' other', 60), (' others ', 60), (' arising from service contracts', 56), (' Forward currency contract ', 54), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), (' contract liabilites - current', 48), (' total current employee benefits ', 48), (' current- liability for long service leave ', 48), (' other related parties', 47), (' current - liability for annual and long service leave', 45), (' Current- liability for annual leave ', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' Trade payables ', 42), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' loans from related party', 38), (' make good provisions', 38), (' Warranty and after sales service ', 38), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 34), (' gst', 33), (' accrued expenses ', 33), (' provision for annual and long service leave ', 31), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' Stock and feright payables ', 29), (' Deferred income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits ', 69), (' Current- liability for annual leave ', 69), (' current- liability for long service leave ', 69), (' Forward currency contract ', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' Warranty and after sales service ', 46), (' Trade payables ', 43), (' gst payables', 42), (' gst liabilities', 42), (' GST Payable', 42), (' restructuring', 40), (' other', 40), (' others ', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provision for annual and long service leave ', 31), (' Employee payables ', 31), (' Deferred income ', 27), (' make good provisions', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (a) , res_fuzz_match = [(' total current employee benefits ', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' current- liability for long service leave ', 39), (' provision for annual and long service leave ', 39), (' Forward currency contract ', 39), (' loans from related party', 38), (' Warranty and after sales service ', 36), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), (' Stock and feright payables ', 31), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current warranty provision (c) , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' other related parties', 53), (' loans from related party', 52), (' provisions - current', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' abandonment and decommissioning costs', 43), (' total current employee benefits ', 43), (' current- liability for long service leave ', 43), (' provision for annual and long service leave ', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 40), (' restructuring', 40), (' other', 40), (' others ', 40), ('other creditors and accruals', 39), (' forward exchange contracts', 39), (' Current- liability for annual leave ', 39), (' Warranty and after sales service ', 39), (' Forward currency contract ', 39), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Stock and feright payables ', 36), (' derivative contracts - at fair value', 35), (' employee benefits - current', 35), (' contract liabilites - current', 35), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' share of joint venture payables', 30), (' gst payables', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' GST Payable', 30), (' Employee entitlements ', 29), (' Employee payables ', 29), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' Deferred income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current make good provision (d) , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 46), (' provision for annual and long service leave ', 46), (' provisions - current', 43), (' abandonment and decommissioning costs', 43), (' current- liability for long service leave ', 42), (' Warranty and after sales service ', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' others ', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' warranty', 38), (' total current employee benefits ', 38), (' Current- liability for annual leave ', 38), (' Forward currency contract ', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' forward exchange contracts', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' Stock and feright payables ', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' derivative contracts - at fair value', 29), (' contract liabilites - current', 29), (' arising from service contracts', 29), (' Employee entitlements ', 29), (' Employee payables ', 29), (' gst payable and accruals', 28), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' ultimate parent entity', 26), (' share of joint venture payables', 25), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Forward currency contract ', 54), (' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits ', 46), (' provision for annual and long service leave ', 46), (' rebates', 40), (' other', 40), (' Current- liability for annual leave ', 40), (' others ', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' current- liability for long service leave ', 38), (' Warranty and after sales service ', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Trade payables ', 35), (' gst', 33), (' gst payables', 32), (' GST Payable', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' Employee payables ', 31), (' Stock and feright payables ', 31), (' gst liabilities', 30), (' restructuring', 30), (' Deferred income ', 27), (' accrued expenses ', 26), (' make good provisions', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current employee benefits (a) , res_fuzz_match = [(' total current employee benefits ', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' current- liability for long service leave ', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' Forward currency contract ', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' Warranty and after sales service ', 39), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' provision for annual and long service leave ', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' Stock and feright payables ', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current projected losses on contracts (b) , res_fuzz_match = [(' service contracts ', 67), (' rebates', 60), (' other', 60), (' others ', 60), (' arising from service contracts', 56), (' Forward currency contract ', 54), (' forward exchange contracts', 50), (' restructuring', 50), (' warranty', 50), (' contract liabilites - current', 48), (' total current employee benefits ', 48), (' current- liability for long service leave ', 48), (' other related parties', 47), (' current - liability for annual and long service leave', 45), (' Current- liability for annual leave ', 45), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' Trade payables ', 42), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' loans from related party', 38), (' make good provisions', 38), (' Warranty and after sales service ', 38), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' loan payable to relayed party under tax funding agreement', 34), (' gst', 33), (' accrued expenses ', 33), (' provision for annual and long service leave ', 31), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' Stock and feright payables ', 29), (' Deferred income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits ', 69), (' Current- liability for annual leave ', 69), (' current- liability for long service leave ', 69), (' Forward currency contract ', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' Warranty and after sales service ', 46), (' Trade payables ', 43), (' gst payables', 42), (' gst liabilities', 42), (' GST Payable', 42), (' restructuring', 40), (' other', 40), (' others ', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provision for annual and long service leave ', 31), (' Employee payables ', 31), (' Deferred income ', 27), (' make good provisions', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (a) , res_fuzz_match = [(' total current employee benefits ', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' current- liability for long service leave ', 39), (' provision for annual and long service leave ', 39), (' Forward currency contract ', 39), (' loans from related party', 38), (' Warranty and after sales service ', 36), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), (' Stock and feright payables ', 31), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current warranty provision (c) , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' other related parties', 53), (' loans from related party', 52), (' provisions - current', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' abandonment and decommissioning costs', 43), (' total current employee benefits ', 43), (' current- liability for long service leave ', 43), (' provision for annual and long service leave ', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 40), (' restructuring', 40), (' other', 40), (' others ', 40), ('other creditors and accruals', 39), (' forward exchange contracts', 39), (' Current- liability for annual leave ', 39), (' Warranty and after sales service ', 39), (' Forward currency contract ', 39), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Stock and feright payables ', 36), (' derivative contracts - at fair value', 35), (' employee benefits - current', 35), (' contract liabilites - current', 35), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' share of joint venture payables', 30), (' gst payables', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' GST Payable', 30), (' Employee entitlements ', 29), (' Employee payables ', 29), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' Deferred income ', 27)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current make good provision (d) , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 46), (' provision for annual and long service leave ', 46), (' provisions - current', 43), (' abandonment and decommissioning costs', 43), (' current- liability for long service leave ', 42), (' Warranty and after sales service ', 42), (' other related parties', 41), (' rebates', 40), (' other', 40), (' others ', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' warranty', 38), (' total current employee benefits ', 38), (' Current- liability for annual leave ', 38), (' Forward currency contract ', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' forward exchange contracts', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' Stock and feright payables ', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' derivative contracts - at fair value', 29), (' contract liabilites - current', 29), (' arising from service contracts', 29), (' Employee entitlements ', 29), (' Employee payables ', 29), (' gst payable and accruals', 28), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' ultimate parent entity', 26), (' share of joint venture payables', 25), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Forward currency contract ', 54), (' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits ', 46), (' provision for annual and long service leave ', 46), (' rebates', 40), (' other', 40), (' Current- liability for annual leave ', 40), (' others ', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' current- liability for long service leave ', 38), (' Warranty and after sales service ', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Trade payables ', 35), (' gst', 33), (' gst payables', 32), (' GST Payable', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' Employee payables ', 31), (' Stock and feright payables ', 31), (' gst liabilities', 30), (' restructuring', 30), (' Deferred income ', 27), (' accrued expenses ', 26), (' make good provisions', 23)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 5, 7, 10, 11, 12], 'score': [100, 87, 100, 100, 100, 87, 100, 100], 'value': [7011.0, 516.0, 54.0, 2283.0, 6803.0, 781.0, 77.0, 2328.0], 'label': ['Current Employee benefits (a)', 'Non-current Employee benefits (a)', 'Non-current Warranty provision (c)', 'Non-current Make good provision (d)', 'Current Employee benefits (a)', 'Non-current Employee benefits (a)', 'Non-current Warranty provision (c)', 'Non-current Make good provision (d)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [(' other', 60), (' others ', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' total current employee benefits ', 48), (' other related parties', 47), (' contract liabilites - current', 44), (' ultimate parent entity', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' provision for annual and long service leave ', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' Warranty and after sales service ', 40), (' GST Payable', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current- liability for long service leave ', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' Stock and feright payables ', 38), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' Current- liability for annual leave ', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' gst payable and accruals', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' provisions - current', 29), (' provision for associate funding', 27), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' total current employee benefits ', 48), (' service contracts ', 47), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 45), (' arising from service contracts', 44), (' loans from related party', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' provision for annual and long service leave ', 42), (' loan payable to relayed party under tax funding agreement', 41), (' current - liability for annual and long service leave', 41), (' current- liability for long service leave ', 41), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' employee benefits - current', 39), (' warranty', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' Warranty and after sales service ', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' share of joint venture payables', 32), (' gst payables', 30), (' Current- liability for annual leave ', 30), (' GST Payable', 30), (' secured long-term bank loans', 29), (' Employee payables ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total provisions utilised , res_fuzz_match = [(' provisions - current', 67), (' make good provisions', 50), (' other related parties', 47), (' total current employee benefits ', 47), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' Current- liability for annual leave ', 42), (' current- liability for long service leave ', 42), (' provision for annual and long service leave ', 42), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' abandonment and decommissioning costs', 38), ('other creditors and accruals', 37), (' derivative contracts - at fair value', 37), (' loans from related party', 37), (' employee benefits - payroll', 37), (' provision for associate funding', 37), (' arising from service contracts', 37), (' Warranty and after sales service ', 37), (' Stock and feright payables ', 37), (' service contracts ', 36), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' employee benefits - current', 32), (' share of joint venture payables', 32), (' Forward currency contract ', 32), (' gst payables', 30), (' GST Payable', 30), (' Employee payables ', 29), (' Deferred income ', 27), (' secured long-term bank loans', 26), (' forward exchange contracts', 26), (' warranty', 25), (' rebates', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [(' other', 60), (' others ', 60), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits ', 45), (' Warranty and after sales service ', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' Trade payables ', 42), (' accrued expenses ', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' current- liability for long service leave ', 41), (' provision for annual and long service leave ', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' Stock and feright payables ', 38), (' gst payable and accruals', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' Current- liability for annual leave ', 35), (' gst', 33), (' forward exchange contracts', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' derivative contracts - at fair value', 29), (' provisions - current', 29), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [(' other', 60), (' others ', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' total current employee benefits ', 48), (' other related parties', 47), (' contract liabilites - current', 44), (' ultimate parent entity', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' provision for annual and long service leave ', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' Warranty and after sales service ', 40), (' GST Payable', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current- liability for long service leave ', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' Stock and feright payables ', 38), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' Current- liability for annual leave ', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' gst payable and accruals', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' provisions - current', 29), (' provision for associate funding', 27), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' total current employee benefits ', 48), (' service contracts ', 47), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 45), (' arising from service contracts', 44), (' loans from related party', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' provision for annual and long service leave ', 42), (' loan payable to relayed party under tax funding agreement', 41), (' current - liability for annual and long service leave', 41), (' current- liability for long service leave ', 41), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' employee benefits - current', 39), (' warranty', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' Warranty and after sales service ', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' share of joint venture payables', 32), (' gst payables', 30), (' Current- liability for annual leave ', 30), (' GST Payable', 30), (' secured long-term bank loans', 29), (' Employee payables ', 21)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total provisions utilised , res_fuzz_match = [(' provisions - current', 67), (' make good provisions', 50), (' other related parties', 47), (' total current employee benefits ', 47), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' Current- liability for annual leave ', 42), (' current- liability for long service leave ', 42), (' provision for annual and long service leave ', 42), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' abandonment and decommissioning costs', 38), ('other creditors and accruals', 37), (' derivative contracts - at fair value', 37), (' loans from related party', 37), (' employee benefits - payroll', 37), (' provision for associate funding', 37), (' arising from service contracts', 37), (' Warranty and after sales service ', 37), (' Stock and feright payables ', 37), (' service contracts ', 36), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' employee benefits - current', 32), (' share of joint venture payables', 32), (' Forward currency contract ', 32), (' gst payables', 30), (' GST Payable', 30), (' Employee payables ', 29), (' Deferred income ', 27), (' secured long-term bank loans', 26), (' forward exchange contracts', 26), (' warranty', 25), (' rebates', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [(' other', 60), (' others ', 60), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits ', 45), (' Warranty and after sales service ', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' Trade payables ', 42), (' accrued expenses ', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' current- liability for long service leave ', 41), (' provision for annual and long service leave ', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' Stock and feright payables ', 38), (' gst payable and accruals', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' Current- liability for annual leave ', 35), (' gst', 33), (' forward exchange contracts', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' derivative contracts - at fair value', 29), (' provisions - current', 29), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [(' other', 60), (' others ', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' total current employee benefits ', 48), (' other related parties', 47), (' contract liabilites - current', 44), (' ultimate parent entity', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' provision for annual and long service leave ', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' Warranty and after sales service ', 40), (' GST Payable', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current- liability for long service leave ', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' abandonment and decommissioning costs', 38), (' Stock and feright payables ', 38), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' Current- liability for annual leave ', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' gst payable and accruals', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' provisions - current', 29), (' provision for associate funding', 27), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised provisions utilised , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 62), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' provision for associate funding', 50), (' other creditors', 50), (' contract liabilites - current', 48), (' arising from service contracts', 48), (' total current employee benefits ', 48), (' service contracts ', 47), (' abandonment and decommissioning costs', 46), (' employee benefits - payroll', 45), (' loans from related party', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' provision for annual and long service leave ', 42), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' current- liability for long service leave ', 40), (' Warranty and after sales service ', 40), (' others ', 40), (' current - liability for annual and long service leave', 39), ('other creditors and accruals', 38), (' warranty', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' share of joint venture payables', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' loan payable to relayed party under tax funding agreement', 34), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' Current- liability for annual leave ', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' gst payables', 30), (' restructuring', 30), (' GST Payable', 30), (' Employee payables ', 29)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total (308) , res_fuzz_match = [(' total current employee benefits ', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' Employee entitlements ', 60), (' service contracts ', 60), (' Forward currency contract ', 60), (' other', 44), (' others ', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' Current- liability for annual leave ', 40), (' current- liability for long service leave ', 40), (' provision for annual and long service leave ', 40), (' Trade payables ', 40), (' Warranty and after sales service ', 40), (' Employee payables ', 40), (' Stock and feright payables ', 40), (' GST Payable', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20), (' Deferred income ', 20), (' accrued expenses ', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [(' other', 60), (' others ', 60), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' loans from related party', 48), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 45), (' total current employee benefits ', 45), (' Warranty and after sales service ', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' Trade payables ', 42), (' accrued expenses ', 42), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' current- liability for long service leave ', 41), (' provision for annual and long service leave ', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' Stock and feright payables ', 38), (' gst payable and accruals', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' Current- liability for annual leave ', 35), (' gst', 33), (' forward exchange contracts', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' derivative contracts - at fair value', 29), (' provisions - current', 29), (' restructuring', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' current- liability for long service leave ', 38), (' provision for annual and long service leave ', 38), (' service contracts ', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits ', 25), (' Current- liability for annual leave ', 25), (' accrued expenses ', 25), (' Warranty and after sales service ', 25), (' Employee entitlements ', 25), (' Deferred income ', 25), (' other', 20), (' others ', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' Trade payables ', 12), (' Employee payables ', 12), (' GST Payable', 12), (' rebates', 0)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': [100], 'value': [-150.0], 'label': ['Total (308)'], 'year': [], 'colname_found': ['rows']}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_liabilities
2023-08-28 13:54:04+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' Lease obligation', 40), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' Lease obligation', 33), (' lease liabilities ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation', 70), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 9803.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['16'], 'line_item_value': [9803.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' Lease obligation', 40), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' Lease obligation', 33), (' lease liabilities ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation', 70), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 7860.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['16'], 'line_item_value': [7860.0]}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:04+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-28 13:54:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 13:54:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' Deferred income', 24), (' deferred revenue ', 23), (' provisions ', 10), (' Provisions ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' Provisions ', 100), (' provision for associate funding ', 43), (' Deferred income', 24), (' deferred revenue ', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' Deferred income', 27), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue ', 17), (' provisions ', 12), (' Provisions ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 3186.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 3186.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' Deferred income', 24), (' deferred revenue ', 23), (' provisions ', 10), (' Provisions ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' Provisions ', 100), (' provision for associate funding ', 43), (' Deferred income', 24), (' deferred revenue ', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' Deferred income', 27), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue ', 17), (' provisions ', 12), (' Provisions ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 2853.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 2853.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current employee benefits (a) , res_fuzz_match = [(' total non-current employee benefits ', 87), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), (' non-current-liability for long service leave ', 52), ('non-current trade and other payables ', 43), (' non-current - liability for long-service leave ', 43), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' trade payables - related parties ', 35), (' provision for long service leave ', 35), (' abandonment and decommissioning costs ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current projected losses on contracts (b) , res_fuzz_match = [(' non-current-liability for long service leave ', 52), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' abandonment and decommissioning costs ', 42), (' employee benefits - non current ', 41), (' non-current - liability for long-service leave ', 41), (' provision for associate funding ', 41), (' make good provisions ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits ', 38), (' provision for long service leave ', 37), (' employee benefits - payroll ', 36), (' electricity derivatives at fair value through oci ', 34), (' Deferred income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' non-current-liability for long service leave ', 69), ('non-current trade and other payables ', 54), (' employee benefits - non current ', 54), (' non-current - liability for long-service leave ', 54), (' employee benefits - payroll ', 46), (' total non-current employee benefits ', 46), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' contract liabilites - non-current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 31), (' abandonment and decommissioning costs ', 31), (' provision for associate funding ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' provision for long service leave ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (a) , res_fuzz_match = [(' total non-current employee benefits ', 100), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 52), (' non-current-liability for long service leave ', 52), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' abandonment and decommissioning costs ', 35), (' provision for long service leave ', 35), (' trade payables - related parties ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current warranty provision (c) , res_fuzz_match = [(' non-current-liability for long service leave ', 61), ('non-current trade and other payables ', 57), (' non-current - liability for long-service leave ', 57), (' make good provisions ', 50), (' total non-current employee benefits ', 48), (' provisions - non-current ', 43), (' abandonment and decommissioning costs ', 43), (' trade payables - related parties ', 43), (' electricity derivatives at fair value through oci ', 39), (' employee benefits - non current ', 39), (' employee benefits - payroll ', 36), (' derivative contracts - at fair value ', 35), (' contract liabilites - non-current ', 35), (' provision for long service leave ', 35), (' provision for associate funding ', 27), (' Deferred income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current make good provision (d) , res_fuzz_match = [(' make good provisions ', 100), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' non-current-liability for long service leave ', 54), (' total non-current employee benefits ', 51), (' provisions - non-current ', 43), (' abandonment and decommissioning costs ', 43), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 33), (' contract liabilites - non-current ', 33), (' trade payables - related parties ', 33), (' provision for long service leave ', 33), (' employee benefits - payroll ', 32), (' derivative contracts - at fair value ', 29), (' provision for associate funding ', 27), (' Deferred income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables ', 77), (' non-current - liability for long-service leave ', 69), (' total non-current employee benefits ', 69), (' non-current-liability for long service leave ', 69), (' employee benefits - non current ', 67), (' provisions - non-current ', 54), (' contract liabilites - non-current ', 54), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - payroll ', 31), (' provision for associate funding ', 31), (' provision for long service leave ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' trade payables - related parties ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current employee benefits (a) , res_fuzz_match = [(' total non-current employee benefits ', 87), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), (' non-current-liability for long service leave ', 52), ('non-current trade and other payables ', 43), (' non-current - liability for long-service leave ', 43), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' trade payables - related parties ', 35), (' provision for long service leave ', 35), (' abandonment and decommissioning costs ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current projected losses on contracts (b) , res_fuzz_match = [(' non-current-liability for long service leave ', 52), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' abandonment and decommissioning costs ', 42), (' employee benefits - non current ', 41), (' non-current - liability for long-service leave ', 41), (' provision for associate funding ', 41), (' make good provisions ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits ', 38), (' provision for long service leave ', 37), (' employee benefits - payroll ', 36), (' electricity derivatives at fair value through oci ', 34), (' Deferred income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' non-current-liability for long service leave ', 69), ('non-current trade and other payables ', 54), (' employee benefits - non current ', 54), (' non-current - liability for long-service leave ', 54), (' employee benefits - payroll ', 46), (' total non-current employee benefits ', 46), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' contract liabilites - non-current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 31), (' abandonment and decommissioning costs ', 31), (' provision for associate funding ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' provision for long service leave ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (a) , res_fuzz_match = [(' total non-current employee benefits ', 100), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 52), (' non-current-liability for long service leave ', 52), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' abandonment and decommissioning costs ', 35), (' provision for long service leave ', 35), (' trade payables - related parties ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current warranty provision (c) , res_fuzz_match = [(' non-current-liability for long service leave ', 61), ('non-current trade and other payables ', 57), (' non-current - liability for long-service leave ', 57), (' make good provisions ', 50), (' total non-current employee benefits ', 48), (' provisions - non-current ', 43), (' abandonment and decommissioning costs ', 43), (' trade payables - related parties ', 43), (' electricity derivatives at fair value through oci ', 39), (' employee benefits - non current ', 39), (' employee benefits - payroll ', 36), (' derivative contracts - at fair value ', 35), (' contract liabilites - non-current ', 35), (' provision for long service leave ', 35), (' provision for associate funding ', 27), (' Deferred income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current make good provision (d) , res_fuzz_match = [(' make good provisions ', 100), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' non-current-liability for long service leave ', 54), (' total non-current employee benefits ', 51), (' provisions - non-current ', 43), (' abandonment and decommissioning costs ', 43), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 33), (' contract liabilites - non-current ', 33), (' trade payables - related parties ', 33), (' provision for long service leave ', 33), (' employee benefits - payroll ', 32), (' derivative contracts - at fair value ', 29), (' provision for associate funding ', 27), (' Deferred income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables ', 77), (' non-current - liability for long-service leave ', 69), (' total non-current employee benefits ', 69), (' non-current-liability for long service leave ', 69), (' employee benefits - non current ', 67), (' provisions - non-current ', 54), (' contract liabilites - non-current ', 54), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - payroll ', 31), (' provision for associate funding ', 31), (' provision for long service leave ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' trade payables - related parties ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 5, 7, 10, 12], 'score': [87, 100, 100, 87, 100, 100], 'value': [7011.0, 516.0, 2283.0, 6803.0, 781.0, 2328.0], 'label': ['Current Employee benefits (a)', 'Non-current Employee benefits (a)', 'Non-current Make good provision (d)', 'Current Employee benefits (a)', 'Non-current Employee benefits (a)', 'Non-current Make good provision (d)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [(' total non-current employee benefits ', 52), ('non-current trade and other payables ', 51), (' employee benefits - payroll ', 41), (' trade payables - related parties ', 39), (' non-current-liability for long service leave ', 39), (' abandonment and decommissioning costs ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' electricity derivatives at fair value through oci ', 35), (' derivative contracts - at fair value ', 33), (' employee benefits - non current ', 33), (' provision for long service leave ', 33), (' non-current - liability for long-service leave ', 32), (' make good provisions ', 31), (' provisions - non-current ', 29), (' provision for associate funding ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 62), (' abandonment and decommissioning costs ', 46), (' provision for associate funding ', 45), (' total non-current employee benefits ', 44), (' trade payables - related parties ', 42), (' provision for long service leave ', 42), (' electricity derivatives at fair value through oci ', 41), (' contract liabilites - non-current ', 40), (' employee benefits - non current ', 37), (' non-current - liability for long-service leave ', 37), (' non-current-liability for long service leave ', 37), (' employee benefits - payroll ', 36), (' Deferred income', 36), ('non-current trade and other payables ', 33), (' derivative contracts - at fair value ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total provisions utilised , res_fuzz_match = [(' provisions - non-current ', 59), (' make good provisions ', 50), (' total non-current employee benefits ', 47), (' non-current - liability for long-service leave ', 42), (' contract liabilites - non-current ', 42), (' non-current-liability for long service leave ', 42), (' provision for long service leave ', 42), (' abandonment and decommissioning costs ', 38), (' electricity derivatives at fair value through oci ', 37), (' derivative contracts - at fair value ', 37), (' employee benefits - payroll ', 37), (' provision for associate funding ', 37), (' trade payables - related parties ', 37), (' employee benefits - non current ', 32), (' Deferred income', 27), ('non-current trade and other payables ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [('non-current trade and other payables ', 55), (' total non-current employee benefits ', 48), (' employee benefits - payroll ', 41), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' electricity derivatives at fair value through oci ', 34), (' non-current - liability for long-service leave ', 34), (' non-current-liability for long service leave ', 34), (' employee benefits - non current ', 33), (' provision for associate funding ', 32), (' make good provisions ', 31), (' provision for long service leave ', 30), (' derivative contracts - at fair value ', 29), (' provisions - non-current ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [(' total non-current employee benefits ', 52), ('non-current trade and other payables ', 51), (' employee benefits - payroll ', 41), (' trade payables - related parties ', 39), (' non-current-liability for long service leave ', 39), (' abandonment and decommissioning costs ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' electricity derivatives at fair value through oci ', 35), (' derivative contracts - at fair value ', 33), (' employee benefits - non current ', 33), (' provision for long service leave ', 33), (' non-current - liability for long-service leave ', 32), (' make good provisions ', 31), (' provisions - non-current ', 29), (' provision for associate funding ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 62), (' abandonment and decommissioning costs ', 46), (' provision for associate funding ', 45), (' total non-current employee benefits ', 44), (' trade payables - related parties ', 42), (' provision for long service leave ', 42), (' electricity derivatives at fair value through oci ', 41), (' contract liabilites - non-current ', 40), (' employee benefits - non current ', 37), (' non-current - liability for long-service leave ', 37), (' non-current-liability for long service leave ', 37), (' employee benefits - payroll ', 36), (' Deferred income', 36), ('non-current trade and other payables ', 33), (' derivative contracts - at fair value ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total provisions utilised , res_fuzz_match = [(' provisions - non-current ', 59), (' make good provisions ', 50), (' total non-current employee benefits ', 47), (' non-current - liability for long-service leave ', 42), (' contract liabilites - non-current ', 42), (' non-current-liability for long service leave ', 42), (' provision for long service leave ', 42), (' abandonment and decommissioning costs ', 38), (' electricity derivatives at fair value through oci ', 37), (' derivative contracts - at fair value ', 37), (' employee benefits - payroll ', 37), (' provision for associate funding ', 37), (' trade payables - related parties ', 37), (' employee benefits - non current ', 32), (' Deferred income', 27), ('non-current trade and other payables ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [('non-current trade and other payables ', 55), (' total non-current employee benefits ', 48), (' employee benefits - payroll ', 41), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' electricity derivatives at fair value through oci ', 34), (' non-current - liability for long-service leave ', 34), (' non-current-liability for long service leave ', 34), (' employee benefits - non current ', 33), (' provision for associate funding ', 32), (' make good provisions ', 31), (' provision for long service leave ', 30), (' derivative contracts - at fair value ', 29), (' provisions - non-current ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total balance at the beginning of the year , res_fuzz_match = [(' total non-current employee benefits ', 52), ('non-current trade and other payables ', 51), (' employee benefits - payroll ', 41), (' trade payables - related parties ', 39), (' non-current-liability for long service leave ', 39), (' abandonment and decommissioning costs ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' electricity derivatives at fair value through oci ', 35), (' derivative contracts - at fair value ', 33), (' employee benefits - non current ', 33), (' provision for long service leave ', 33), (' non-current - liability for long-service leave ', 32), (' make good provisions ', 31), (' provisions - non-current ', 29), (' provision for associate funding ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total additional provisions recognised provisions utilised , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 62), (' provision for long service leave ', 59), (' provision for associate funding ', 50), (' abandonment and decommissioning costs ', 46), (' employee benefits - payroll ', 45), (' total non-current employee benefits ', 45), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - non current ', 41), (' non-current - liability for long-service leave ', 41), (' contract liabilites - non-current ', 40), (' non-current-liability for long service leave ', 39), ('non-current trade and other payables ', 37), (' Deferred income', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total (308) , res_fuzz_match = [(' total non-current employee benefits ', 100), (' derivative contracts - at fair value ', 60), (' contract liabilites - non-current ', 60), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 40), (' employee benefits - non current ', 40), (' non-current - liability for long-service leave ', 40), (' employee benefits - payroll ', 40), (' abandonment and decommissioning costs ', 40), (' provision for associate funding ', 40), (' trade payables - related parties ', 40), (' non-current-liability for long service leave ', 40), (' provisions - non-current ', 20), (' make good provisions ', 20), (' provision for long service leave ', 20), (' Deferred income', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total balance at the end of the year , res_fuzz_match = [('non-current trade and other payables ', 55), (' total non-current employee benefits ', 48), (' employee benefits - payroll ', 41), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' electricity derivatives at fair value through oci ', 34), (' non-current - liability for long-service leave ', 34), (' non-current-liability for long service leave ', 34), (' employee benefits - non current ', 33), (' provision for associate funding ', 32), (' make good provisions ', 31), (' provision for long service leave ', 30), (' derivative contracts - at fair value ', 29), (' provisions - non-current ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = consolidated $'000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 50), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' provisions - non-current ', 38), (' contract liabilites - non-current ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 38), (' make good provisions ', 38), (' total non-current employee benefits ', 38), (' non-current-liability for long service leave ', 38), (' provision for long service leave ', 38), ('non-current trade and other payables ', 25), (' employee benefits - non current ', 25), (' employee benefits - payroll ', 25), (' Deferred income', 25), (' trade payables - related parties ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': [100], 'value': [-150.0], 'label': ['Total (308)'], 'year': [], 'colname_found': ['rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_liabilities
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' share capital ', 40), (' share capital ', 40), (' equity share capital ', 37), (' perpetual equity instrument ', 35), (' contributed equity ', 32), (' issued capital ', 32), (' contributed equity', 32), ('common stock ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' perpetual equity instrument ', 26), (' equity share capital ', 25), (' share capital ', 24), (' share capital ', 24), (' contributed equity ', 18), (' contributed equity', 18), (' issued capital ', 12), ('common stock ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 5000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['17'], 'line_item_value': [5000.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' share capital ', 40), (' share capital ', 40), (' equity share capital ', 37), (' perpetual equity instrument ', 35), (' contributed equity ', 32), (' issued capital ', 32), (' contributed equity', 32), ('common stock ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' perpetual equity instrument ', 26), (' equity share capital ', 25), (' share capital ', 24), (' share capital ', 24), (' contributed equity ', 18), (' contributed equity', 18), (' issued capital ', 12), ('common stock ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 5000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['17'], 'line_item_value': [5000.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares 5000000 , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares 5000000 , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares 5000000 , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2], 'score': [100, 100, 100], 'value': [5000.0, 5000000.0, 5000.0], 'label': ['None Fully paid ordinary shares 5000000', 'None Fully paid ordinary shares 5000000', 'None Fully paid ordinary shares 5000000'], 'year': [], 'colname_found': ['rows', 'rows', 'rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('Share premium', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('Share premium', 42)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('Share premium', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('Share premium', 42)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments ', ' movements in retained earnings']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' retained earnings ', 40), ('other equity ', 38), (' retained profits', 36), (' accumulated losses ', 29), (' reserves surplus ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves surplus ', 63), ('other equity ', 33), (' retained earnings ', 24), (' retained profits', 21), (' accumulated losses ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 16505.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [16505.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' retained earnings ', 40), ('other equity ', 38), (' retained profits', 36), (' accumulated losses ', 29), (' reserves surplus ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves surplus ', 63), ('other equity ', 33), (' retained earnings ', 24), (' retained profits', 21), (' accumulated losses ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 16697.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [16697.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 35), (' minority interest ', 35), (' non controlling interest ', 34)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 32), (' non-controlling interest', 32), (' non controlling interest ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 35), (' minority interest ', 35), (' non controlling interest ', 34)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 32), (' non-controlling interest', 32), (' non controlling interest ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('shareholders equity(a)', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('shareholders equity(a)', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity ', ' hedge reserve']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' hedge reserve ', 30), ('other reserves ', 29), (' reserves ', 27), (' foreign currency translation reserve ', 25), (' Foreign currency translation reserves', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24), (' hedge reserve ', 19), (' reserves ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves ', 100), (' hedge reserve ', 71), ('other reserves ', 67), (' foreign currency translation reserve ', 32), (' Foreign currency translation reserves', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': -70.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [-70.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' hedge reserve ', 30), ('other reserves ', 29), (' reserves ', 27), (' foreign currency translation reserve ', 25), (' Foreign currency translation reserves', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24), (' hedge reserve ', 19), (' reserves ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves ', 100), (' hedge reserve ', 71), ('other reserves ', 67), (' foreign currency translation reserve ', 32), (' Foreign currency translation reserves', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': -62.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [-62.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_Reserves_equity
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' investment property ', 57), ('plant property equipment ', 31), (' property plant equipment ', 31), (' plant and equipment ', 29), (' property ', 29), (' oil and gas properties ', 24), (' Exploration and evaluation assets', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' Exploration and evaluation assets', 43), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 29), (' plant and equipment ', 27), (' property ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 2626.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2626.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' investment property ', 57), ('plant property equipment ', 31), (' property plant equipment ', 31), (' plant and equipment ', 29), (' property ', 29), (' oil and gas properties ', 24), (' Exploration and evaluation assets', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' Exploration and evaluation assets', 43), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 29), (' plant and equipment ', 27), (' property ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 2420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [2420.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('cost ', 100), (' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Freehold land and buildings ', 39), (' Mining properties ', 38), (' Workshop tooling ', 38), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 30), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 100), (' land and improvement ', 67), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Asset Retirement Obligation ', 36), (' Other assets in progress ', 35), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 31), (' Buildings ', 20), (' Facilities ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('cost ', 100), (' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Assets under construction ', 48), (' under construction ', 47), (' Fishing vessels & equipment ', 47), (' Capitalised pre stripping costs ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' gross ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Freehold land and buildings ', 39), (' Mining properties ', 38), (' Workshop tooling ', 38), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 30), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 100), (' land and improvement ', 67), (' under construction ', 53), (' Freehold land and buildings ', 52), (' Assets under construction ', 52), (' Capitalised pre stripping costs ', 50), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Pipeline Asset ', 46), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' Leasehold buildings ', 40), (' Mining properties ', 38), (' Asset Retirement Obligation ', 36), (' Other assets in progress ', 35), (' investment property ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Workshop tooling ', 31), (' Buildings ', 20), (' Facilities ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2420.0, 2420.0, -1232.0, 1188.0, 5448.0, 5448.0, -4216.0, 1232.0, 2420.0, 3656.0, 3656.0, -2189.0, 1467.0, 5341.0, 5341.0, -4182.0, 1159.0, 2626.0], 'label': ['Non-current Leasehold improvements at cost', '', '', '', 'Non-current Plant and equipment at cost', '', '', '', '', 'Non-current Leasehold improvements at cost', '', '', '', 'Non-current Plant and equipment at cost', '', '', '', ''], 'year': [], 'colname_found': ['rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current leasehold improvements at cost , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current plant and equipment at cost , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 8, 11], 'score': [100, 100, 100, 100], 'value': [-1232.0, -4216.0, -2189.0, -4182.0], 'label': ['Non-current Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Other assets in progress ', 50), (' Fishing vessels & equipment ', 45), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 44), (' Marine  Development properties ', 44), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Mining properties ', 38), (' Workshop tooling ', 38), (' Stripping WIP ', 33), (' Subsea ', 33), (' Building & mine infrastructure ', 31), (' Pipeline Asset ', 31), ('cost ', 25), (' Mine infrastructure ', 25), (' Construction ', 22), (' under construction ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Freehold land and buildings ', 67), (' Fishing vessels & equipment ', 47), (' Pipeline Asset ', 46), (' Buildings ', 44), (' Leasehold buildings ', 41), (' Assets under construction ', 40), (' Capitalised pre stripping costs ', 40), (' Marine  Development properties ', 40), (' Freehold land ', 38), (' investment property ', 33), (' Asset Retirement Obligation ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Mining properties ', 31), (' Mine infrastructure ', 27), (' under construction ', 27), ('cost ', 25), (' Construction ', 22), (' Facilities ', 20), (' Subsea ', 17), (' Workshop tooling ', 8), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' Freehold land and buildings ', 53), (' land and improvement ', 48), (' Buildings ', 44), (' Other assets in progress ', 41), (' Leasehold buildings ', 41), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Mine infrastructure ', 35), (' Capitalised pre stripping costs ', 35), (' Building & mine infrastructure ', 35), (' Marine  Development properties ', 35), (' under construction ', 33), (' Subsea ', 33), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' Construction ', 22), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [(' land and improvement ', 50), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Other assets in progress ', 40), (' Building & mine infrastructure ', 40), (' Mining properties ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction ', 33), (' Subsea ', 33), (' investment property ', 30), (' Asset Retirement Obligation ', 30), (' Capitalised pre stripping costs ', 30), (' Marine  Development properties ', 30), (' Workshop tooling ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), ('cost ', 25), (' Stripping WIP ', 22), (' Buildings ', 20), (' gross ', 0), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [(' Capitalised pre stripping costs ', 55), ('cost ', 50), (' investment property ', 45), (' Mine infrastructure ', 45), (' Assets under construction ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Building & mine infrastructure ', 45), (' Mining properties ', 45), (' under construction ', 45), (' gross ', 40), (' Freehold land and buildings ', 36), (' Plant and equipment ', 36), (' Asset Retirement Obligation ', 36), (' Marine  Development properties ', 36), (' Pipeline Asset ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [(' Mining properties ', 54), (' investment property ', 47), (' Pipeline Asset ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Other assets in progress ', 42), (' Marine  Development properties ', 42), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 37), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' Building & mine infrastructure ', 32), (' Freehold land ', 31), (' Freehold land and buildings ', 26), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [(' land and improvement ', 47), (' Freehold land and buildings ', 41), (' Mine infrastructure ', 41), (' Building & mine infrastructure ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Pipeline Asset ', 38), (' Assets under construction ', 35), (' Other assets in progress ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Subsea ', 33), (' Capitalised pre stripping costs ', 29), (' Marine  Development properties ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), ('cost ', 25), (' Asset Retirement Obligation ', 24), (' Mining properties ', 23), (' Workshop tooling ', 23), (' gross ', 20), (' Fishing vessels & equipment ', 18), (' Stripping WIP ', 11), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10, 11, 12, 13, 14, 15, 16, 17], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1130.0, 478.0, 0.0, -449.0, 1159.0, 570.0, -2.0, -495.0, 1232.0], 'label': ["Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000", "Plant and equipment $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = leasehold improvements $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2021 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2022 balance at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none additions , res_fuzz_match = [('net value', 50), ('net book value', 32), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none disposals , res_fuzz_match = [('net value', 38), ('net book value', 36), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 53), ('net value', 38), ('net book value', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = none 2023 balance at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 46), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers ', ' Less allowance for impairment']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' unbilled ', 40), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 28049.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [28049.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' unbilled ', 40), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 33933.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [33933.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers ', ' Less allowance for impairment'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('trade receivables ', 100), (' related party receivables ', 67), (' net trade debtors ', 62), (' share of joint venture receivables ', 60), (' trade debtors ', 58), (' other debtors ', 42), ('charges paid in advance ', 41), (' receivables from related parties ', 40), (' allowance for expected credit loss ', 35), (' trade debtors from contracts with customers ', 35), (' Less allowance for impairment', 30), (' provision for impairment losses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [(' related party receivables ', 100), ('trade receivables ', 67), (' receivables from related parties ', 61), (' share of joint venture receivables ', 60), (' net trade debtors ', 44), (' trade debtors ', 42), (' other debtors ', 42), ('charges paid in advance ', 41), (' allowance for expected credit loss ', 39), (' trade debtors from contracts with customers ', 39), (' Less allowance for impairment', 38), (' provision for impairment losses ', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' share of joint venture receivables ', 60), (' other debtors ', 58), (' net trade debtors ', 44), (' allowance for expected credit loss ', 40), (' trade debtors from contracts with customers ', 40), (' receivables from related parties ', 36), (' trade debtors ', 33), (' provision for impairment losses ', 30), (' Less allowance for impairment', 30), ('charges paid in advance ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [(' related party receivables ', 67), ('trade receivables ', 58), (' share of joint venture receivables ', 55), (' trade debtors ', 42), (' net trade debtors ', 38), ('charges paid in advance ', 35), (' receivables from related parties ', 35), (' allowance for expected credit loss ', 35), (' trade debtors from contracts with customers ', 35), (' other debtors ', 33), (' Less allowance for impairment', 30), (' provision for impairment losses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [(' related party receivables ', 76), (' receivables from related parties ', 70), (' Less allowance for impairment', 48), ('charges paid in advance ', 47), (' share of joint venture receivables ', 44), (' net trade debtors ', 44), ('trade receivables ', 42), (' trade debtors ', 42), (' provision for impairment losses ', 41), (' trade debtors from contracts with customers ', 41), (' allowance for expected credit loss ', 40), (' other debtors ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' allowance for expected credit loss ', 46), (' trade debtors from contracts with customers ', 46), (' trade debtors ', 42), (' share of joint venture receivables ', 38), (' net trade debtors ', 38), (' receivables from related parties ', 38), (' other debtors ', 33), ('charges paid in advance ', 31), (' provision for impairment losses ', 31), ('trade receivables ', 25), (' related party receivables ', 23), (' Less allowance for impairment', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('trade receivables ', 100), (' related party receivables ', 67), (' net trade debtors ', 62), (' share of joint venture receivables ', 60), (' trade debtors ', 58), (' other debtors ', 42), ('charges paid in advance ', 41), (' receivables from related parties ', 40), (' allowance for expected credit loss ', 35), (' trade debtors from contracts with customers ', 35), (' Less allowance for impairment', 30), (' provision for impairment losses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current related party receivables (note 22) , res_fuzz_match = [(' related party receivables ', 100), ('trade receivables ', 67), (' receivables from related parties ', 61), (' share of joint venture receivables ', 60), (' net trade debtors ', 44), (' trade debtors ', 42), (' other debtors ', 42), ('charges paid in advance ', 41), (' allowance for expected credit loss ', 39), (' trade debtors from contracts with customers ', 39), (' Less allowance for impairment', 38), (' provision for impairment losses ', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' share of joint venture receivables ', 60), (' other debtors ', 58), (' net trade debtors ', 44), (' allowance for expected credit loss ', 40), (' trade debtors from contracts with customers ', 40), (' receivables from related parties ', 36), (' trade debtors ', 33), (' provision for impairment losses ', 30), (' Less allowance for impairment', 30), ('charges paid in advance ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current unbilled receivables , res_fuzz_match = [(' related party receivables ', 67), ('trade receivables ', 58), (' share of joint venture receivables ', 55), (' trade debtors ', 42), (' net trade debtors ', 38), ('charges paid in advance ', 35), (' receivables from related parties ', 35), (' allowance for expected credit loss ', 35), (' trade debtors from contracts with customers ', 35), (' other debtors ', 33), (' Less allowance for impairment', 30), (' provision for impairment losses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current loan to related party (note 22) , res_fuzz_match = [(' related party receivables ', 76), (' receivables from related parties ', 70), (' Less allowance for impairment', 48), ('charges paid in advance ', 47), (' share of joint venture receivables ', 44), (' net trade debtors ', 44), ('trade receivables ', 42), (' trade debtors ', 42), (' provision for impairment losses ', 41), (' trade debtors from contracts with customers ', 41), (' allowance for expected credit loss ', 40), (' other debtors ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' allowance for expected credit loss ', 46), (' trade debtors from contracts with customers ', 46), (' trade debtors ', 42), (' share of joint venture receivables ', 38), (' net trade debtors ', 38), (' receivables from related parties ', 38), (' other debtors ', 33), ('charges paid in advance ', 31), (' provision for impairment losses ', 31), ('trade receivables ', 25), (' related party receivables ', 23), (' Less allowance for impairment', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 6, 7], 'score': [100, 100, 100, 100], 'value': [18834.0, 3193.0, 13010.0, 5456.0], 'label': ['Current Trade receivables', 'Current Related party receivables (Note 22)', 'Current Trade receivables', 'Current Related party receivables (Note 22)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities ', 33), (' Rendering of services ', 33), (' net sales ', 32), (' Revenue from rendering of services', 28), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' revenue from contracts with customers ', 53), (' Sale of coal ', 45), (' sale of products ', 40), (' net sales ', 38), (' revenue from continuing activities ', 37), (' Rendering of services ', 31), (' transmission and distribution business ', 29), (' from trading business ', 29), (' Revenue from rendering of services', 26), (' Sales revenue ', 25), ('revenue from operations ', 21), (' Revenue ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 55), (' revenue from continuing activities ', 39), (' Sales revenue ', 37), (' sale of products ', 36), (' Revenue ', 36), (' Revenue from rendering of services', 34), (' revenue from contracts with customers ', 33), ('revenue from operations ', 31), (' Rendering of services ', 28), (' from trading business ', 26), (' net sales ', 25), (' Sale of coal ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations ', 42), (' net sales ', 40), (' Revenue from rendering of services', 38), (' revenue from continuing activities ', 34), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' Sales revenue ', 30), (' Rendering of services ', 29), (' sale of products ', 24), (' transmission and distribution business ', 24), (' Revenue ', 21), (' Sale of coal ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' revenue from continuing activities ', 34), (' revenue from contracts with customers ', 33), (' Sale of coal ', 32), ('revenue from operations ', 31), (' sale of products ', 27), (' from trading business ', 24), (' net sales ', 22), (' Rendering of services ', 17), (' Revenue from rendering of services', 17), (' transmission and distribution business ', 16), (' Revenue ', 12), (' Sales revenue ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities ', 33), (' net sales ', 32), (' from trading business ', 31), (' Revenue from rendering of services', 28), (' transmission and distribution business ', 26), (' Rendering of services ', 25), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' from trading business ', 45), (' sale of products ', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' Rendering of services ', 34), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' Revenue from rendering of services', 29), (' Sale of coal ', 24), (' revenue from continuing activities ', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' Revenue from rendering of services', 41), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 105595.0, 'line_item_label': ['Revenue'], 'note_numbers': ['3'], 'line_item_value': [105595.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities ', 33), (' Rendering of services ', 33), (' net sales ', 32), (' Revenue from rendering of services', 28), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' revenue from contracts with customers ', 53), (' Sale of coal ', 45), (' sale of products ', 40), (' net sales ', 38), (' revenue from continuing activities ', 37), (' Rendering of services ', 31), (' transmission and distribution business ', 29), (' from trading business ', 29), (' Revenue from rendering of services', 26), (' Sales revenue ', 25), ('revenue from operations ', 21), (' Revenue ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 55), (' revenue from continuing activities ', 39), (' Sales revenue ', 37), (' sale of products ', 36), (' Revenue ', 36), (' Revenue from rendering of services', 34), (' revenue from contracts with customers ', 33), ('revenue from operations ', 31), (' Rendering of services ', 28), (' from trading business ', 26), (' net sales ', 25), (' Sale of coal ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations ', 42), (' net sales ', 40), (' Revenue from rendering of services', 38), (' revenue from continuing activities ', 34), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' Sales revenue ', 30), (' Rendering of services ', 29), (' sale of products ', 24), (' transmission and distribution business ', 24), (' Revenue ', 21), (' Sale of coal ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' revenue from continuing activities ', 34), (' revenue from contracts with customers ', 33), (' Sale of coal ', 32), ('revenue from operations ', 31), (' sale of products ', 27), (' from trading business ', 24), (' net sales ', 22), (' Rendering of services ', 17), (' Revenue from rendering of services', 17), (' transmission and distribution business ', 16), (' Revenue ', 12), (' Sales revenue ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities ', 33), (' net sales ', 32), (' from trading business ', 31), (' Revenue from rendering of services', 28), (' transmission and distribution business ', 26), (' Rendering of services ', 25), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' from trading business ', 45), (' sale of products ', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' Rendering of services ', 34), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' Revenue from rendering of services', 29), (' Sale of coal ', 24), (' revenue from continuing activities ', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' Revenue from rendering of services', 41), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 116175.0, 'line_item_label': ['Revenue'], 'note_numbers': ['3'], 'line_item_value': [116175.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue project , res_fuzz_match = [(' revenue from continuing activities ', 71), (' revenue form contracts with customers ', 64), (' Goods sold to customer direct from supplier ', 43), (' contribution from joint venture', 43), (' Total Revenue ', 42), (' Gas transportation income ', 36), (' Sale of goods - Spareparts ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Cars ', 32), (' Feed gas income ', 31), (' Condensate ', 29), (' Sale of goods - Motorcycles ', 29), (' Goods sold to customer from warehouse ', 29), (' Sale of goods - Marine ', 21), (' hedge loss / gain ', 21), (' Domgas ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue service and maintenance , res_fuzz_match = [(' Domgas ', 60), (' Sale of goods - Marine ', 53), (' revenue from continuing activities ', 52), (' revenue form contracts with customers ', 52), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Total Revenue ', 42), (' contribution from joint venture', 41), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Sale of goods - Cars ', 38), (' Sale of goods - Motorcycles ', 37), (' Sale of goods - Spareparts ', 37), ('Sale of goods ', 33), (' LNG ', 33), (' Goods sold to customer direct from supplier ', 32), (' Goods sold to customer from warehouse ', 28)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue product sale , res_fuzz_match = [(' revenue from continuing activities ', 58), (' revenue form contracts with customers ', 58), (' Goods sold to customer direct from supplier ', 47), ('Sale of goods ', 44), (' Sale of goods - Spareparts ', 44), (' Condensate ', 43), (' Total Revenue ', 42), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer from warehouse ', 37), (' contribution from joint venture', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Motorcycles ', 33), (' Feed gas income ', 31), (' Domgas ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue total , res_fuzz_match = [(' revenue from continuing activities ', 67), (' revenue form contracts with customers ', 67), (' Total Revenue ', 50), (' Domgas ', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Feed gas income ', 33), (' Gas transportation income ', 33), (' Sale of goods - Cars ', 33), (' Sale of goods - Motorcycles ', 33), (' Sale of goods - Marine ', 33), (' Sale of goods - Spareparts ', 33), (' Goods sold to customer direct from supplier ', 33), (' hedge loss / gain ', 33), (' contribution from joint venture', 33), (' Condensate ', 29), (' Goods sold to customer from warehouse ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue project , res_fuzz_match = [(' revenue from continuing activities ', 71), (' revenue form contracts with customers ', 64), (' Goods sold to customer direct from supplier ', 43), (' contribution from joint venture', 43), (' Total Revenue ', 42), (' Gas transportation income ', 36), (' Sale of goods - Spareparts ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Cars ', 32), (' Feed gas income ', 31), (' Condensate ', 29), (' Sale of goods - Motorcycles ', 29), (' Goods sold to customer from warehouse ', 29), (' Sale of goods - Marine ', 21), (' hedge loss / gain ', 21), (' Domgas ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue service and maintenance , res_fuzz_match = [(' Domgas ', 60), (' Sale of goods - Marine ', 53), (' revenue from continuing activities ', 52), (' revenue form contracts with customers ', 52), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Total Revenue ', 42), (' contribution from joint venture', 41), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Sale of goods - Cars ', 38), (' Sale of goods - Motorcycles ', 37), (' Sale of goods - Spareparts ', 37), ('Sale of goods ', 33), (' LNG ', 33), (' Goods sold to customer direct from supplier ', 32), (' Goods sold to customer from warehouse ', 28)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue product sale , res_fuzz_match = [(' revenue from continuing activities ', 58), (' revenue form contracts with customers ', 58), (' Goods sold to customer direct from supplier ', 47), ('Sale of goods ', 44), (' Sale of goods - Spareparts ', 44), (' Condensate ', 43), (' Total Revenue ', 42), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer from warehouse ', 37), (' contribution from joint venture', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Motorcycles ', 33), (' Feed gas income ', 31), (' Domgas ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = revenue total , res_fuzz_match = [(' revenue from continuing activities ', 67), (' revenue form contracts with customers ', 67), (' Total Revenue ', 50), (' Domgas ', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Feed gas income ', 33), (' Gas transportation income ', 33), (' Sale of goods - Cars ', 33), (' Sale of goods - Motorcycles ', 33), (' Sale of goods - Marine ', 33), (' Sale of goods - Spareparts ', 33), (' Goods sold to customer direct from supplier ', 33), (' hedge loss / gain ', 33), (' contribution from joint venture', 33), (' Condensate ', 29), (' Goods sold to customer from warehouse ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), (' Premises cost ', 36), ('total expenses', 35), (' Cost of rendering services', 34), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory ', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' cost of coal sold', 59), (' Cost of product sold', 53), ('cost of sales', 45), ('Cost of sales', 45), (' Cost of inventory sold', 44), (' cost of goods sold ', 44), (' Premises cost ', 42), ('total expenditure', 41), (' Cost of rendering services', 39), ('purchase of stock-in-trade', 38), (' Cost of goods and services sold', 37), (' Personnel costs', 37), ('total expenses', 32), (' change in inventory ', 29), ('expenditure', 26), ('expense', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 26), ('purchase of stock-in-trade', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Premises cost ', 30), (' Cost of rendering services', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), (' change in inventory ', 22), ('purchase of stock-in-trade', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Premises cost ', 57), ('cost of sales', 53), ('Cost of sales', 53), (' Cost of product sold', 52), (' cost of coal sold', 50), (' Personnel costs', 50), (' cost of goods sold ', 50), (' Cost of rendering services', 43), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 34), ('total expenses', 27), (' change in inventory ', 24), ('total expenditure', 23), ('expenditure', 20), ('expense', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Premises cost ', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory ', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), (' Premises cost ', 37), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' Cost of rendering services', 29), (' cost of goods sold ', 27), (' change in inventory ', 26), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Cost of rendering services', 38), (' Personnel costs', 36), ('total expenditure', 34), (' Premises cost ', 33), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory ', 24), ('expense', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), (' Premises cost ', 36), ('total expenses', 35), (' Cost of rendering services', 34), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory ', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' cost of coal sold', 59), (' Cost of product sold', 53), ('cost of sales', 45), ('Cost of sales', 45), (' Cost of inventory sold', 44), (' cost of goods sold ', 44), (' Premises cost ', 42), ('total expenditure', 41), (' Cost of rendering services', 39), ('purchase of stock-in-trade', 38), (' Cost of goods and services sold', 37), (' Personnel costs', 37), ('total expenses', 32), (' change in inventory ', 29), ('expenditure', 26), ('expense', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 26), ('purchase of stock-in-trade', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Premises cost ', 30), (' Cost of rendering services', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), (' change in inventory ', 22), ('purchase of stock-in-trade', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Premises cost ', 57), ('cost of sales', 53), ('Cost of sales', 53), (' Cost of product sold', 52), (' cost of coal sold', 50), (' Personnel costs', 50), (' cost of goods sold ', 50), (' Cost of rendering services', 43), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 34), ('total expenses', 27), (' change in inventory ', 24), ('total expenditure', 23), ('expenditure', 20), ('expense', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Premises cost ', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory ', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), (' Premises cost ', 37), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' Cost of rendering services', 29), (' cost of goods sold ', 27), (' change in inventory ', 26), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Cost of rendering services', 38), (' Personnel costs', 36), ('total expenditure', 34), (' Premises cost ', 33), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory ', 24), ('expense', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs ', ' Salary & wages expense ', ' Superannuation expense ', ' other administration']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Servicing expenses', 33), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Salaries and employee benefits ', 27), (' marketing and advertising expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Selling and marketting expenses ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies ', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Logistics and distribution ', 48), (' Amortisation expenses ', 37), (' Administrative and other expenses ', 36), (' Sales and marketing ', 36), (' Distribution expenses ', 34), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' Occupancy ', 33), (' other expenses ', 32), (' Other expenses ', 32), (' Other expenses ', 32), (' Depreciation and amortisation expenses ', 31), (' Depreciation expenses ', 30), (' Royalties ', 30), (' Selling & distribution expenses ', 29), (' Advertising expenses ', 29), (' employee benefits expense ', 29), (' property espense ', 29), (' employee benefit espense ', 29), (' Selling and marketting expenses ', 29), (' Administration ', 27), (' Salaries and employee benefits ', 26), (' marketing and advertising expenses ', 26), (' Lease expenses ', 25), (' Selling Expenses ', 25), (' Occupancy expenses ', 24), (' Marketing expenses ', 23), (' Servicing expenses', 23), ('expenses ', 21), (' depreciation ', 20), (' Management expenses ', 16), (' levies ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Distribution expenses ', 100), (' Selling & distribution expenses ', 86), (' Administrative expenses ', 75), (' Administration expenses ', 75), (' Depreciation expenses ', 67), (' Advertising expenses ', 65), (' Logistics and distribution ', 61), (' Amortisation expenses ', 60), (' Administrative and other expenses ', 57), ('expenses ', 55), (' Depreciation and amortisation expenses ', 52), (' marketing and advertising expenses ', 48), (' employee benefits expense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' employee benefit espense ', 42), (' Selling and marketting expenses ', 42), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Administration ', 40), (' Salaries and employee benefits ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' property espense ', 32), (' Occupancy ', 19), (' Royalties ', 17), (' levies ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' employee benefits expense ', 100), (' employee benefit espense ', 95), (' Salaries and employee benefits ', 71), (' Depreciation expenses ', 56), (' Administrative expenses ', 53), (' Administration expenses ', 53), (' Depreciation and amortisation expenses ', 50), (' Amortisation expenses ', 50), (' Advertising expenses ', 49), (' Distribution expenses ', 47), (' Administrative and other expenses ', 46), ('expenses ', 43), (' Selling & distribution expenses ', 42), (' marketing and advertising expenses ', 42), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Selling and marketting expenses ', 36), (' other expenses ', 35), (' Occupancy expenses ', 35), (' Other expenses ', 35), (' Management expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Servicing expenses', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 21), (' Administration ', 19), (' Occupancy ', 15), (' levies ', 15), (' Royalties ', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Occupancy ', 67), (' Occupancy expenses ', 64), (' Amortisation expenses ', 33), (' property espense ', 32), (' Distribution expenses ', 31), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' Depreciation and amortisation expenses ', 28), (' other expenses ', 27), (' Other expenses ', 27), (' Logistics and distribution ', 27), (' Other expenses ', 27), (' Selling & distribution expenses ', 26), (' Servicing expenses', 26), (' Depreciation expenses ', 25), (' employee benefits expense ', 25), (' employee benefit espense ', 25), (' Advertising expenses ', 24), (' Royalties ', 24), (' Administrative and other expenses ', 22), (' Administration ', 21), (' Lease expenses ', 19), (' Selling Expenses ', 19), (' Selling and marketting expenses ', 19), (' Management expenses ', 18), (' Marketing expenses ', 17), (' Salaries and employee benefits ', 17), (' marketing and advertising expenses ', 17), (' Sales and marketing ', 16), ('expenses ', 12), (' depreciation ', 12), (' levies ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Servicing expenses', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Salaries and employee benefits ', 22), (' marketing and advertising expenses ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Selling and marketting expenses ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies ', 13), ('expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' employee benefits expense ', 42), (' Depreciation expenses ', 40), (' property espense ', 39), (' Depreciation and amortisation expenses ', 38), (' Salaries and employee benefits ', 38), (' employee benefit espense ', 37), (' depreciation ', 35), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Advertising expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' marketing and advertising expenses ', 29), (' Marketing expenses ', 28), (' Servicing expenses', 28), (' Selling & distribution expenses ', 27), (' Royalties ', 26), (' Selling and marketting expenses ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies ', 20), (' Occupancy ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Salaries and employee benefits ', 44), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' marketing and advertising expenses ', 31), (' Servicing expenses', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling and marketting expenses ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies ', 9)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 7], 'score': 100, 'value': -22386.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Employee benefits expense', 'Administration expenses'], 'note_numbers': [nan, nan, nan, nan], 'line_item_value': [-751.0, -116.0, -14130.0, -7389.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Servicing expenses', 33), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Salaries and employee benefits ', 27), (' marketing and advertising expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Selling and marketting expenses ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies ', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Logistics and distribution ', 48), (' Amortisation expenses ', 37), (' Administrative and other expenses ', 36), (' Sales and marketing ', 36), (' Distribution expenses ', 34), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' Occupancy ', 33), (' other expenses ', 32), (' Other expenses ', 32), (' Other expenses ', 32), (' Depreciation and amortisation expenses ', 31), (' Depreciation expenses ', 30), (' Royalties ', 30), (' Selling & distribution expenses ', 29), (' Advertising expenses ', 29), (' employee benefits expense ', 29), (' property espense ', 29), (' employee benefit espense ', 29), (' Selling and marketting expenses ', 29), (' Administration ', 27), (' Salaries and employee benefits ', 26), (' marketing and advertising expenses ', 26), (' Lease expenses ', 25), (' Selling Expenses ', 25), (' Occupancy expenses ', 24), (' Marketing expenses ', 23), (' Servicing expenses', 23), ('expenses ', 21), (' depreciation ', 20), (' Management expenses ', 16), (' levies ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Distribution expenses ', 100), (' Selling & distribution expenses ', 86), (' Administrative expenses ', 75), (' Administration expenses ', 75), (' Depreciation expenses ', 67), (' Advertising expenses ', 65), (' Logistics and distribution ', 61), (' Amortisation expenses ', 60), (' Administrative and other expenses ', 57), ('expenses ', 55), (' Depreciation and amortisation expenses ', 52), (' marketing and advertising expenses ', 48), (' employee benefits expense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' employee benefit espense ', 42), (' Selling and marketting expenses ', 42), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Administration ', 40), (' Salaries and employee benefits ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' property espense ', 32), (' Occupancy ', 19), (' Royalties ', 17), (' levies ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' employee benefits expense ', 100), (' employee benefit espense ', 95), (' Salaries and employee benefits ', 71), (' Depreciation expenses ', 56), (' Administrative expenses ', 53), (' Administration expenses ', 53), (' Depreciation and amortisation expenses ', 50), (' Amortisation expenses ', 50), (' Advertising expenses ', 49), (' Distribution expenses ', 47), (' Administrative and other expenses ', 46), ('expenses ', 43), (' Selling & distribution expenses ', 42), (' marketing and advertising expenses ', 42), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Selling and marketting expenses ', 36), (' other expenses ', 35), (' Occupancy expenses ', 35), (' Other expenses ', 35), (' Management expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Servicing expenses', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 21), (' Administration ', 19), (' Occupancy ', 15), (' levies ', 15), (' Royalties ', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Occupancy ', 67), (' Occupancy expenses ', 64), (' Amortisation expenses ', 33), (' property espense ', 32), (' Distribution expenses ', 31), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' Depreciation and amortisation expenses ', 28), (' other expenses ', 27), (' Other expenses ', 27), (' Logistics and distribution ', 27), (' Other expenses ', 27), (' Selling & distribution expenses ', 26), (' Servicing expenses', 26), (' Depreciation expenses ', 25), (' employee benefits expense ', 25), (' employee benefit espense ', 25), (' Advertising expenses ', 24), (' Royalties ', 24), (' Administrative and other expenses ', 22), (' Administration ', 21), (' Lease expenses ', 19), (' Selling Expenses ', 19), (' Selling and marketting expenses ', 19), (' Management expenses ', 18), (' Marketing expenses ', 17), (' Salaries and employee benefits ', 17), (' marketing and advertising expenses ', 17), (' Sales and marketing ', 16), ('expenses ', 12), (' depreciation ', 12), (' levies ', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Servicing expenses', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Salaries and employee benefits ', 22), (' marketing and advertising expenses ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Selling and marketting expenses ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies ', 13), ('expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' employee benefits expense ', 42), (' Depreciation expenses ', 40), (' property espense ', 39), (' Depreciation and amortisation expenses ', 38), (' Salaries and employee benefits ', 38), (' employee benefit espense ', 37), (' depreciation ', 35), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Advertising expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' marketing and advertising expenses ', 29), (' Marketing expenses ', 28), (' Servicing expenses', 28), (' Selling & distribution expenses ', 27), (' Royalties ', 26), (' Selling and marketting expenses ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies ', 20), (' Occupancy ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Salaries and employee benefits ', 44), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' marketing and advertising expenses ', 31), (' Servicing expenses', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling and marketting expenses ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies ', 9)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 7], 'score': 100, 'value': -22489.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Employee benefits expense', 'Administration expenses'], 'note_numbers': [nan, nan, nan, nan], 'line_item_value': [-1303.0, -192.0, -14737.0, -6257.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses ', ' Rental expense relating to operating leases lease expense']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other expense', 61), (' Premises cost ', 36), (' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses ', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Premises cost ', 42), (' Administration expenses ', 34), (' Occupancy ', 33), (' Other expense', 32), ('Rent ', 24), (' Occupancy expenses ', 24), (' Rental expenses ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses ', 75), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses ', 53), (' Occupancy expenses ', 35), (' Other expense', 35), (' Rental expenses ', 34), (' Premises cost ', 30), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Occupancy ', 67), (' Occupancy expenses ', 64), (' Premises cost ', 57), (' Administration expenses ', 31), (' Other expense', 27), (' Rental expenses ', 17), ('Rent ', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Premises cost ', 55), (' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses ', 26), (' Occupancy ', 25), (' Other expense', 17), ('Rent ', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Premises cost ', 37), (' Rental expenses ', 34), (' Other expense', 29), (' Administration expenses ', 25), (' Occupancy expenses ', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Other expense', 39), (' Premises cost ', 33), (' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses ', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -7389.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-7389.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other expense', 61), (' Premises cost ', 36), (' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses ', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Premises cost ', 42), (' Administration expenses ', 34), (' Occupancy ', 33), (' Other expense', 32), ('Rent ', 24), (' Occupancy expenses ', 24), (' Rental expenses ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses ', 75), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses ', 53), (' Occupancy expenses ', 35), (' Other expense', 35), (' Rental expenses ', 34), (' Premises cost ', 30), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Occupancy ', 67), (' Occupancy expenses ', 64), (' Premises cost ', 57), (' Administration expenses ', 31), (' Other expense', 27), (' Rental expenses ', 17), ('Rent ', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Premises cost ', 55), (' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses ', 26), (' Occupancy ', 25), (' Other expense', 17), ('Rent ', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Premises cost ', 37), (' Rental expenses ', 34), (' Other expense', 29), (' Administration expenses ', 25), (' Occupancy expenses ', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Other expense', 39), (' Premises cost ', 33), (' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses ', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -6257.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-6257.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue ', ' Other income']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Commission revenue ', ' Rent ', ' rental revenue']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue ', 43)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('other operating', 43), (' Other income', 42), ('Other revenue ', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue ', 43), ('other operating', 23), (' Other income', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue ', 35), ('other operating', 25), (' Other income', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Other income', 38), ('Other revenue ', 36), ('other operating', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue ', 35), (' Other income', 27), ('other operating', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue ', 39)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 33.0, 'line_item_label': ['Other income'], 'note_numbers': ['4'], 'line_item_value': [33.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue ', 43)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('other operating', 43), (' Other income', 42), ('Other revenue ', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue ', 43), ('other operating', 23), (' Other income', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue ', 35), ('other operating', 25), (' Other income', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Other income', 38), ('Other revenue ', 36), ('other operating', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue ', 35), (' Other income', 27), ('other operating', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue ', 39)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 1470.0, 'line_item_label': ['Other income'], 'note_numbers': ['4'], 'line_item_value': [1470.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Commission revenue ', ' Rent ', ' rental revenue'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [(' rental revenue', 54), ('Commission revenue ', 50), (' Rent ', 50)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [('Commission revenue ', 50), (' Rent ', 50), (' rental revenue', 46)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Rent ', 50), ('Commission revenue ', 43), (' rental revenue', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [(' Rent ', 50), (' rental revenue', 38), ('Commission revenue ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [(' rental revenue', 54), ('Commission revenue ', 50), (' Rent ', 50)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [('Commission revenue ', 50), (' Rent ', 50), (' rental revenue', 46)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Rent ', 50), ('Commission revenue ', 43), (' rental revenue', 31)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [(' Rent ', 50), (' rental revenue', 38), ('Commission revenue ', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Other revenue', 43), (' Interest revenue', 38), (' Net finance costs ', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Net finance costs ', 50), ('finance income', 48), ('Finance income and costs', 47), ('other income', 42), (' Finance income and finance costs', 39), (' Interest revenue', 36), (' Other revenue', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Net finance costs ', 32), (' Finance income and finance costs', 27), ('other income', 22), ('finance income', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), (' Other revenue', 35), ('other income', 24), ('finance income', 24), (' Finance income and finance costs', 24), ('Finance income and costs', 23), (' Net finance costs ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Net finance costs ', 48), ('Finance income and costs', 45), ('other income', 38), (' Finance income and finance costs', 37), (' Other revenue', 36), (' Interest revenue', 32), ('finance income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs ', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Other revenue', 35), (' Interest revenue', 31), ('other income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs ', 39), ('other income', 30), (' Other revenue', 29), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Other revenue', 39), (' Net finance costs ', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 8], 'score': 85, 'value': -268.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['4', nan], 'line_item_value': [33.0, -301.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Other revenue', 43), (' Interest revenue', 38), (' Net finance costs ', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Net finance costs ', 50), ('finance income', 48), ('Finance income and costs', 47), ('other income', 42), (' Finance income and finance costs', 39), (' Interest revenue', 36), (' Other revenue', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Net finance costs ', 32), (' Finance income and finance costs', 27), ('other income', 22), ('finance income', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), (' Other revenue', 35), ('other income', 24), ('finance income', 24), (' Finance income and finance costs', 24), ('Finance income and costs', 23), (' Net finance costs ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' Net finance costs ', 48), ('Finance income and costs', 45), ('other income', 38), (' Finance income and finance costs', 37), (' Other revenue', 36), (' Interest revenue', 32), ('finance income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs ', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Other revenue', 35), (' Interest revenue', 31), ('other income', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs ', 39), ('other income', 30), (' Other revenue', 29), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Other revenue', 39), (' Net finance costs ', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 8], 'score': 85, 'value': 1211.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['4', nan], 'line_item_value': [1470.0, -259.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('interest ', 100), (' Interest received - Bank ', 86), (' Interest received - Loan ', 86), (' interest revenue ', 80), (' Bank interest ', 77), (' Interest income ', 71), (' Share of JV interest received/(paid) ', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 59), (' Interest income from financial assets measured at amortised cost', 52), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 48), (' Bank Deposits - cash and cash equivalents ', 41)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [(' Interest income from cash and cash equivalents ', 54), (' Interest income from financial assets measured at amortised cost', 54), (' Bank interest ', 46), (' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Interest income ', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 43), (' Share of JV interest received/(paid) ', 42), (' Sublease interest income ', 41), (' Bank Deposits - cash and cash equivalents ', 41), (' interest revenue ', 40), ('interest ', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Interest income ', 64), (' Interest income from financial assets measured at amortised cost', 61), (' Sublease interest income ', 59), (' Interest income from cash and cash equivalents ', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 52), (' interest revenue ', 47), (' Share of JV interest received/(paid) ', 43), (' Interest received - Bank ', 40), (' Interest received - Loan ', 40), ('interest ', 38), (' Bank interest ', 38), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [(' Interest income from cash and cash equivalents ', 65), (' Interest income from financial assets measured at amortised cost', 65), (' Interest income ', 64), (' Sublease interest income ', 53), (' Interest received - Loan ', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 47), (' Interest received - Bank ', 41), (' Share of JV interest received/(paid) ', 41), (' Bank Deposits - cash and cash equivalents ', 41), ('interest ', 38), (' Bank interest ', 38), (' interest revenue ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('interest ', 100), (' Interest received - Bank ', 86), (' Interest received - Loan ', 86), (' interest revenue ', 80), (' Bank interest ', 77), (' Interest income ', 71), (' Share of JV interest received/(paid) ', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 59), (' Interest income from financial assets measured at amortised cost', 52), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 48), (' Bank Deposits - cash and cash equivalents ', 41)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [(' Interest income from cash and cash equivalents ', 54), (' Interest income from financial assets measured at amortised cost', 54), (' Bank interest ', 46), (' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Interest income ', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 43), (' Share of JV interest received/(paid) ', 42), (' Sublease interest income ', 41), (' Bank Deposits - cash and cash equivalents ', 41), (' interest revenue ', 40), ('interest ', 38)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Interest income ', 64), (' Interest income from financial assets measured at amortised cost', 61), (' Sublease interest income ', 59), (' Interest income from cash and cash equivalents ', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 52), (' interest revenue ', 47), (' Share of JV interest received/(paid) ', 43), (' Interest received - Bank ', 40), (' Interest received - Loan ', 40), ('interest ', 38), (' Bank interest ', 38), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [(' Interest income from cash and cash equivalents ', 65), (' Interest income from financial assets measured at amortised cost', 65), (' Interest income ', 64), (' Sublease interest income ', 53), (' Interest received - Loan ', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 47), (' Interest received - Bank ', 41), (' Share of JV interest received/(paid) ', 41), (' Bank Deposits - cash and cash equivalents ', 41), ('interest ', 38), (' Bank interest ', 38), (' interest revenue ', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [288.0, 29.0], 'label': ['4. Other income Interest received', '4. Other income Interest received'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('Interest expense', 73), ('interest expense', 73)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('Interest expense', 73), ('interest expense', 73)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Interest in finance leases', 45), (' net finance costs ', 38), (' interest expense ', 38), (' Interest on external debt ', 32), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' net finance costs ', 50), ('finance cost ', 42), (' Interest in finance leases', 42), (' interest expense ', 36), (' Interest on external debt ', 30), (' finance expenses ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest on external debt ', 50), (' finance expenses ', 41), (' interest expense ', 39), (' Interest in finance leases', 39), (' net finance costs ', 32), ('finance cost ', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest on external debt ', 43), (' interest expense ', 38), (' Interest in finance leases', 38), (' finance expenses ', 34), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('finance cost ', 57), (' net finance costs ', 48), (' Interest in finance leases', 27), (' finance expenses ', 26), (' interest expense ', 16), (' Interest on external debt ', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' Interest in finance leases', 39), (' interest expense ', 31), (' Interest on external debt ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), (' Interest on external debt ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' Interest in finance leases', 33), (' interest expense ', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Interest in finance leases', 41), (' Interest on external debt ', 36), (' net finance costs ', 35), ('finance cost ', 33), (' interest expense ', 29), (' finance expenses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -301.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-301.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Interest in finance leases', 45), (' net finance costs ', 38), (' interest expense ', 38), (' Interest on external debt ', 32), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' net finance costs ', 50), ('finance cost ', 42), (' Interest in finance leases', 42), (' interest expense ', 36), (' Interest on external debt ', 30), (' finance expenses ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest on external debt ', 50), (' finance expenses ', 41), (' interest expense ', 39), (' Interest in finance leases', 39), (' net finance costs ', 32), ('finance cost ', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest on external debt ', 43), (' interest expense ', 38), (' Interest in finance leases', 38), (' finance expenses ', 34), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('finance cost ', 57), (' net finance costs ', 48), (' Interest in finance leases', 27), (' finance expenses ', 26), (' interest expense ', 16), (' Interest on external debt ', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' Interest in finance leases', 39), (' interest expense ', 31), (' Interest on external debt ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), (' Interest on external debt ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' Interest in finance leases', 33), (' interest expense ', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Interest in finance leases', 41), (' Interest on external debt ', 36), (' net finance costs ', 35), ('finance cost ', 33), (' interest expense ', 29), (' finance expenses ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -259.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-259.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax ']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories ', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 34), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' net finance costs ', 50), (' finance income and costs ', 47), (' Finance income and costs ', 47), (' other opertaing income ', 45), ('finance cost ', 42), (' other income ', 42), (' Other income ', 42), (' interest gains and losses ', 40), (' net of tax ', 40), (' Profit from discontinued operation ', 40), (' net of tax ', 40), (' finance income and finance cost ', 39), (' Finance income and finance costs ', 39), (' other gains/losses ', 36), (' interest revenue ', 36), (' Loss on revaluation of inventories ', 35), (' Share of gain/(loss) of joint venture ', 34), (' share of profit of equity accounted investees ', 33), (' Impairment loss ', 33), (' Share of profit of equity-accounted investees, net of income tax ', 33), (' other income and revenue ', 29), (' Impairement (expenses)/reversal ', 24), (' finance expenses', 23), (' expenses ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' expenses ', 55), (' interest revenue ', 52), (' other income and revenue ', 42), (' Profit from discontinued operation ', 42), (' finance expenses', 41), (' interest gains and losses ', 37), (' Impairement (expenses)/reversal ', 33), (' net finance costs ', 32), (' finance income and costs ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' Impairment loss ', 30), (' other opertaing income ', 29), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance income and finance cost ', 27), (' Finance income and finance costs ', 27), (' other gains/losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' other income ', 22), (' Other income ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' expenses ', 43), (' interest revenue ', 43), (' Impairement (expenses)/reversal ', 43), (' other income and revenue ', 41), (' Share of gain/(loss) of joint venture ', 40), (' Loss on revaluation of inventories ', 37), (' Impairment loss ', 36), (' share of profit of equity accounted investees ', 35), (' finance expenses', 34), (' net of tax ', 34), (' net of tax ', 34), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' other opertaing income ', 30), (' other income ', 24), (' finance income and finance cost ', 24), (' Other income ', 24), (' Finance income and finance costs ', 24), (' finance income and costs ', 23), (' Finance income and costs ', 23), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('finance cost ', 57), (' net finance costs ', 48), (' finance income and costs ', 45), (' Finance income and costs ', 45), (' other income ', 38), (' Other income ', 38), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' other opertaing income ', 36), (' other gains/losses ', 32), (' interest revenue ', 32), (' Profit from discontinued operation ', 32), (' other income and revenue ', 31), (' share of profit of equity accounted investees ', 27), (' finance expenses', 26), (' Share of gain/(loss) of joint venture ', 26), (' Loss on revaluation of inventories ', 26), (' interest gains and losses ', 25), (' net of tax ', 24), (' net of tax ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 21), (' Impairement (expenses)/reversal ', 20), (' Impairment loss ', 19), (' expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories ', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net of tax ', 52), (' net of tax ', 52), (' Profit from discontinued operation ', 47), (' other opertaing income ', 41), (' Share of profit of equity-accounted investees, net of income tax ', 41), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), (' Loss on revaluation of inventories ', 38), ('finance cost ', 37), (' finance expenses', 34), (' other income ', 30), (' Other income ', 30), (' Impairement (expenses)/reversal ', 28), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Share of gain/(loss) of joint venture ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' other gains/losses ', 26), (' interest revenue ', 26), (' other income and revenue ', 26), (' Impairment loss ', 22), (' interest gains and losses ', 21), (' expenses ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' Other income ', 47), (' share of profit of equity accounted investees ', 44), (' Share of gain/(loss) of joint venture ', 43), (' Profit from discontinued operation ', 43), (' other gains/losses ', 41), (' other income and revenue ', 39), (' Share of profit of equity-accounted investees, net of income tax ', 39), (' Impairement (expenses)/reversal ', 36), (' net finance costs ', 35), (' Loss on revaluation of inventories ', 35), ('finance cost ', 33), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 29), (' interest gains and losses ', 29), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Impairment loss ', 20), (' expenses ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 8], 'score': 100, 'value': -268.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['4', nan], 'line_item_value': [33.0, -301.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories ', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 34), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' net finance costs ', 50), (' finance income and costs ', 47), (' Finance income and costs ', 47), (' other opertaing income ', 45), ('finance cost ', 42), (' other income ', 42), (' Other income ', 42), (' interest gains and losses ', 40), (' net of tax ', 40), (' Profit from discontinued operation ', 40), (' net of tax ', 40), (' finance income and finance cost ', 39), (' Finance income and finance costs ', 39), (' other gains/losses ', 36), (' interest revenue ', 36), (' Loss on revaluation of inventories ', 35), (' Share of gain/(loss) of joint venture ', 34), (' share of profit of equity accounted investees ', 33), (' Impairment loss ', 33), (' Share of profit of equity-accounted investees, net of income tax ', 33), (' other income and revenue ', 29), (' Impairement (expenses)/reversal ', 24), (' finance expenses', 23), (' expenses ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' expenses ', 55), (' interest revenue ', 52), (' other income and revenue ', 42), (' Profit from discontinued operation ', 42), (' finance expenses', 41), (' interest gains and losses ', 37), (' Impairement (expenses)/reversal ', 33), (' net finance costs ', 32), (' finance income and costs ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' Impairment loss ', 30), (' other opertaing income ', 29), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance income and finance cost ', 27), (' Finance income and finance costs ', 27), (' other gains/losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' other income ', 22), (' Other income ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' expenses ', 43), (' interest revenue ', 43), (' Impairement (expenses)/reversal ', 43), (' other income and revenue ', 41), (' Share of gain/(loss) of joint venture ', 40), (' Loss on revaluation of inventories ', 37), (' Impairment loss ', 36), (' share of profit of equity accounted investees ', 35), (' finance expenses', 34), (' net of tax ', 34), (' net of tax ', 34), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' other opertaing income ', 30), (' other income ', 24), (' finance income and finance cost ', 24), (' Other income ', 24), (' Finance income and finance costs ', 24), (' finance income and costs ', 23), (' Finance income and costs ', 23), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('finance cost ', 57), (' net finance costs ', 48), (' finance income and costs ', 45), (' Finance income and costs ', 45), (' other income ', 38), (' Other income ', 38), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' other opertaing income ', 36), (' other gains/losses ', 32), (' interest revenue ', 32), (' Profit from discontinued operation ', 32), (' other income and revenue ', 31), (' share of profit of equity accounted investees ', 27), (' finance expenses', 26), (' Share of gain/(loss) of joint venture ', 26), (' Loss on revaluation of inventories ', 26), (' interest gains and losses ', 25), (' net of tax ', 24), (' net of tax ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 21), (' Impairement (expenses)/reversal ', 20), (' Impairment loss ', 19), (' expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories ', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net of tax ', 52), (' net of tax ', 52), (' Profit from discontinued operation ', 47), (' other opertaing income ', 41), (' Share of profit of equity-accounted investees, net of income tax ', 41), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), (' Loss on revaluation of inventories ', 38), ('finance cost ', 37), (' finance expenses', 34), (' other income ', 30), (' Other income ', 30), (' Impairement (expenses)/reversal ', 28), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Share of gain/(loss) of joint venture ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' other gains/losses ', 26), (' interest revenue ', 26), (' other income and revenue ', 26), (' Impairment loss ', 22), (' interest gains and losses ', 21), (' expenses ', 18)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' Other income ', 47), (' share of profit of equity accounted investees ', 44), (' Share of gain/(loss) of joint venture ', 43), (' Profit from discontinued operation ', 43), (' other gains/losses ', 41), (' other income and revenue ', 39), (' Share of profit of equity-accounted investees, net of income tax ', 39), (' Impairement (expenses)/reversal ', 36), (' net finance costs ', 35), (' Loss on revaluation of inventories ', 35), ('finance cost ', 33), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 29), (' interest gains and losses ', 29), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Impairment loss ', 20), (' expenses ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 8], 'score': 100, 'value': 1211.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['4', nan], 'line_item_value': [1470.0, -259.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [(' other ', 100), (' other income ', 100), (' share of jv income ', 73), (' Other income - Bank guarantee ', 64), ('other revenue ', 58), (' sundry income ', 58), (' Commision rebate ', 58), (' secondment income (tw recovery) ', 57), (' Other expense - Loss on inventory obsolescence ', 56), (' insurance proceeds ', 55), (' commission revenue ', 50), (' japan recoveries ', 50), (' Arising from inventory of cranes ', 50), (' other miscellaneous - net (loss)/gain ', 48), (' Share of gain/(loss) of joint venture ', 48), (' Interest on unwinding of discount in provisions ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Other expense - Net loss on sale or property, plant and equipment ', 48), (' Investment in joint venture ', 47), (' Accretion expense ', 46), (' dividend from other parties ', 44), (' margin charge income ', 44), (' net other foreign exchange (losses)/gains ', 44), (' Remuneration from services linked to newly acquired entities ', 44), (' Power purchase agreement realised gain ', 44), (' Power purchase agreement unrelaised gain ', 44), (' net gain / loss on disposal of property plant and equipment  ', 44), (' Arising from inventory of spare parts ', 44), (' Net other foreign exchange (losses)/gains ', 44), (' Net foreign losses ', 44), (' net of tax ', 43), (' net of tax ', 43), (' net of tax ', 43), (' government grants ', 42), (' Asset impairment ', 42), (' Net loss on disposal of property ', 42), (' profit from discontinued operation ', 41), (' Profit on sale of assets ', 41), (' Profit from discontinued operation ', 41), (' Loss on loan refinancing ', 39), (' net foreign exchange gain ', 38), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' net (loss)/profit on disposal of non-current assets ', 38), (' Net (loss)/profit on disposal of non-current assets ', 38), (' effective portion of changes in fair value of cash flow ', 37), (' Derivaties at FVTPL- net change in fair value ', 37), (' Impairment loss ', 36), (' foreign exchange gain ', 35), (' net foreign exchange gains/(losses) ', 35), (' net foreign exchange (loss)/gain ', 35), (' Sub-lease rental income ', 35), (' Net foreign exchange gains/(losses) ', 35), (' Net foreign exchange (loss)/gain ', 35), (' net ppe disposal (loss)/gain ', 33), (' plant and equipment ', 33), (' Net PPE disposal (loss)/gain ', 33), (' Miscellanous income ', 33), (' Loss on sale of disposal of assets ', 32), (' Bank charges', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [(' foreign exchange gain ', 100), (' other ', 100), (' other income ', 100), (' net foreign exchange gains/(losses) ', 90), (' Net foreign exchange gains/(losses) ', 90), (' net foreign exchange gain ', 88), (' net foreign exchange (loss)/gain ', 76), (' Net foreign exchange (loss)/gain ', 76), (' share of jv income ', 73), (' net other foreign exchange (losses)/gains ', 69), (' Net other foreign exchange (losses)/gains ', 69), (' Impairment loss ', 64), (' Net foreign losses ', 62), (' margin charge income ', 61), (' Other income - Bank guarantee ', 60), (' Bank charges', 60), ('other revenue ', 58), (' secondment income (tw recovery) ', 52), (' effective portion of changes in fair value of cash flow ', 51), (' commission revenue ', 50), (' sundry income ', 50), (' Loss on loan refinancing ', 50), (' Commision rebate ', 50), (' Derivaties at FVTPL- net change in fair value ', 50), (' Power purchase agreement realised gain ', 49), (' other miscellaneous - net (loss)/gain ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Arising from inventory of cranes ', 48), (' Miscellanous income ', 47), (' Other expense - Loss on inventory obsolescence ', 47), (' Power purchase agreement unrelaised gain ', 46), (' Share of gain/(loss) of joint venture ', 46), (' Accretion expense ', 46), (' insurance proceeds ', 45), (' quota lease income ', 44), (' net of tax ', 43), (' net gain / loss on disposal of property plant and equipment  ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Other expense - Net loss on sale or property, plant and equipment ', 43), (' government grants ', 42), (' paid by customers - at amortised cost ', 42), (' net ppe disposal (loss)/gain ', 42), (' Asset impairment ', 42), (' Investment in joint venture ', 42), (' Net PPE disposal (loss)/gain ', 42), (' profit from discontinued operation ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Profit from discontinued operation ', 41), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' plant and equipment ', 40), (' Arising from inventory of spare parts ', 40), (' Interest on unwinding of discount in provisions ', 39), (' net (loss)/profit on disposal of non-current assets ', 37), (' Net (loss)/profit on disposal of non-current assets ', 37), (' japan recoveries ', 36), (' Profit on sale of assets ', 35), (' Net loss on disposal of property ', 33), (' Loss on sale of disposal of assets ', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' other ', 100), (' other income ', 100), (' share of jv income ', 73), (' margin charge income ', 63), (' Other income - Bank guarantee ', 61), ('other revenue ', 58), (' sundry income ', 58), (' secondment income (tw recovery) ', 57), (' quota lease income ', 56), (' Miscellanous income ', 53), (' dividend from other parties ', 52), (' other miscellaneous - net (loss)/gain ', 52), (' other miscellaneous - net (loss)/gain ', 52), (' Other expense - Loss on inventory obsolescence ', 52), (' Sub-lease rental income ', 50), (' profit from discontinued operation ', 48), (' net other foreign exchange (losses)/gains ', 48), (' Profit from discontinued operation ', 48), (' Net other foreign exchange (losses)/gains ', 48), (' Other expense - Net loss on sale or property, plant and equipment ', 48), (' insurance proceeds ', 45), (' Net foreign losses ', 44), (' commission revenue ', 43), (' net of tax ', 43), (' japan recoveries ', 43), (' net foreign exchange gains/(losses) ', 43), (' paid by customers - at amortised cost ', 43), (' net ppe disposal (loss)/gain ', 43), (' Remuneration from services linked to newly acquired entities ', 43), (' Share of gain/(loss) of joint venture ', 43), (' net of tax ', 43), (' Interest on unwinding of discount in provisions ', 43), (' net of tax ', 43), (' Net loss on disposal of property ', 43), (' Net foreign exchange gains/(losses) ', 43), (' Net PPE disposal (loss)/gain ', 43), (' government grants ', 42), (' Commision rebate ', 42), (' foreign exchange gain ', 40), (' net foreign exchange gain ', 40), (' Bank charges', 40), (' net foreign exchange (loss)/gain ', 39), (' net (loss)/profit on disposal of non-current assets ', 39), (' net gain / loss on disposal of property plant and equipment  ', 39), (' Loss on loan refinancing ', 39), (' Net foreign exchange (loss)/gain ', 39), (' Arising from inventory of cranes ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' Investment in joint venture ', 37), (' Impairment loss ', 36), (' effective portion of changes in fair value of cash flow ', 35), (' Power purchase agreement realised gain ', 35), (' Power purchase agreement unrelaised gain ', 35), (' Arising from inventory of spare parts ', 35), (' Asset impairment ', 33), (' plant and equipment ', 33), (' Accretion expense ', 31), (' Derivaties at FVTPL- net change in fair value ', 30), (' Profit on sale of assets ', 29), (' Loss on sale of disposal of assets ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [(' other ', 100), (' other income ', 100), (' Other income - Bank guarantee ', 76), (' share of jv income ', 73), ('other revenue ', 58), (' sundry income ', 58), (' quota lease income ', 56), (' secondment income (tw recovery) ', 53), (' other miscellaneous - net (loss)/gain ', 53), (' net other foreign exchange (losses)/gains ', 53), (' other miscellaneous - net (loss)/gain ', 53), (' Net other foreign exchange (losses)/gains ', 53), (' Other expense - Net loss on sale or property, plant and equipment ', 53), (' Other expense - Loss on inventory obsolescence ', 53), (' profit from discontinued operation ', 47), (' margin charge income ', 47), (' Sub-lease rental income ', 47), (' Share of gain/(loss) of joint venture ', 47), (' Profit from discontinued operation ', 47), (' Miscellanous income ', 47), (' net of tax ', 43), (' net of tax ', 43), (' net of tax ', 43), (' government grants ', 42), (' Commision rebate ', 42), (' foreign exchange gain ', 41), (' dividend from other parties ', 41), (' effective portion of changes in fair value of cash flow ', 41), (' paid by customers - at amortised cost ', 41), (' net ppe disposal (loss)/gain ', 41), (' net (loss)/profit on disposal of non-current assets ', 41), (' Loss on sale of disposal of assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Power purchase agreement realised gain ', 41), (' Power purchase agreement unrelaised gain ', 41), (' Interest on unwinding of discount in provisions ', 41), (' Net PPE disposal (loss)/gain ', 41), (' Arising from inventory of cranes ', 41), (' Arising from inventory of spare parts ', 41), (' Net (loss)/profit on disposal of non-current assets ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' Net foreign losses ', 38), (' insurance proceeds ', 36), (' Investment in joint venture ', 36), (' Impairment loss ', 36), (' net foreign exchange gain ', 35), (' net foreign exchange gains/(losses) ', 35), (' net foreign exchange (loss)/gain ', 35), (' net gain / loss on disposal of property plant and equipment  ', 35), (' Net loss on disposal of property ', 35), (' Net foreign exchange gains/(losses) ', 35), (' Net foreign exchange (loss)/gain ', 35), (' Asset impairment ', 33), (' Bank charges', 30), (' commission revenue ', 29), (' japan recoveries ', 29), (' Profit on sale of assets ', 29), (' Loss on loan refinancing ', 29), (' plant and equipment ', 27), (' Accretion expense ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [(' other ', 100), (' other income ', 100), (' share of jv income ', 73), (' Other income - Bank guarantee ', 64), ('other revenue ', 58), (' sundry income ', 58), (' Commision rebate ', 58), (' secondment income (tw recovery) ', 57), (' Other expense - Loss on inventory obsolescence ', 56), (' insurance proceeds ', 55), (' commission revenue ', 50), (' japan recoveries ', 50), (' Arising from inventory of cranes ', 50), (' other miscellaneous - net (loss)/gain ', 48), (' Share of gain/(loss) of joint venture ', 48), (' Interest on unwinding of discount in provisions ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Other expense - Net loss on sale or property, plant and equipment ', 48), (' Investment in joint venture ', 47), (' Accretion expense ', 46), (' dividend from other parties ', 44), (' margin charge income ', 44), (' net other foreign exchange (losses)/gains ', 44), (' Remuneration from services linked to newly acquired entities ', 44), (' Power purchase agreement realised gain ', 44), (' Power purchase agreement unrelaised gain ', 44), (' net gain / loss on disposal of property plant and equipment  ', 44), (' Arising from inventory of spare parts ', 44), (' Net other foreign exchange (losses)/gains ', 44), (' Net foreign losses ', 44), (' net of tax ', 43), (' net of tax ', 43), (' net of tax ', 43), (' government grants ', 42), (' Asset impairment ', 42), (' Net loss on disposal of property ', 42), (' profit from discontinued operation ', 41), (' Profit on sale of assets ', 41), (' Profit from discontinued operation ', 41), (' Loss on loan refinancing ', 39), (' net foreign exchange gain ', 38), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' net (loss)/profit on disposal of non-current assets ', 38), (' Net (loss)/profit on disposal of non-current assets ', 38), (' effective portion of changes in fair value of cash flow ', 37), (' Derivaties at FVTPL- net change in fair value ', 37), (' Impairment loss ', 36), (' foreign exchange gain ', 35), (' net foreign exchange gains/(losses) ', 35), (' net foreign exchange (loss)/gain ', 35), (' Sub-lease rental income ', 35), (' Net foreign exchange gains/(losses) ', 35), (' Net foreign exchange (loss)/gain ', 35), (' net ppe disposal (loss)/gain ', 33), (' plant and equipment ', 33), (' Net PPE disposal (loss)/gain ', 33), (' Miscellanous income ', 33), (' Loss on sale of disposal of assets ', 32), (' Bank charges', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income foreign exchange gain/(loss) , res_fuzz_match = [(' foreign exchange gain ', 100), (' other ', 100), (' other income ', 100), (' net foreign exchange gains/(losses) ', 90), (' Net foreign exchange gains/(losses) ', 90), (' net foreign exchange gain ', 88), (' net foreign exchange (loss)/gain ', 76), (' Net foreign exchange (loss)/gain ', 76), (' share of jv income ', 73), (' net other foreign exchange (losses)/gains ', 69), (' Net other foreign exchange (losses)/gains ', 69), (' Impairment loss ', 64), (' Net foreign losses ', 62), (' margin charge income ', 61), (' Other income - Bank guarantee ', 60), (' Bank charges', 60), ('other revenue ', 58), (' secondment income (tw recovery) ', 52), (' effective portion of changes in fair value of cash flow ', 51), (' commission revenue ', 50), (' sundry income ', 50), (' Loss on loan refinancing ', 50), (' Commision rebate ', 50), (' Derivaties at FVTPL- net change in fair value ', 50), (' Power purchase agreement realised gain ', 49), (' other miscellaneous - net (loss)/gain ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Arising from inventory of cranes ', 48), (' Miscellanous income ', 47), (' Other expense - Loss on inventory obsolescence ', 47), (' Power purchase agreement unrelaised gain ', 46), (' Share of gain/(loss) of joint venture ', 46), (' Accretion expense ', 46), (' insurance proceeds ', 45), (' quota lease income ', 44), (' net of tax ', 43), (' net gain / loss on disposal of property plant and equipment  ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Other expense - Net loss on sale or property, plant and equipment ', 43), (' government grants ', 42), (' paid by customers - at amortised cost ', 42), (' net ppe disposal (loss)/gain ', 42), (' Asset impairment ', 42), (' Investment in joint venture ', 42), (' Net PPE disposal (loss)/gain ', 42), (' profit from discontinued operation ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Profit from discontinued operation ', 41), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' plant and equipment ', 40), (' Arising from inventory of spare parts ', 40), (' Interest on unwinding of discount in provisions ', 39), (' net (loss)/profit on disposal of non-current assets ', 37), (' Net (loss)/profit on disposal of non-current assets ', 37), (' japan recoveries ', 36), (' Profit on sale of assets ', 35), (' Net loss on disposal of property ', 33), (' Loss on sale of disposal of assets ', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' other ', 100), (' other income ', 100), (' share of jv income ', 73), (' margin charge income ', 63), (' Other income - Bank guarantee ', 61), ('other revenue ', 58), (' sundry income ', 58), (' secondment income (tw recovery) ', 57), (' quota lease income ', 56), (' Miscellanous income ', 53), (' dividend from other parties ', 52), (' other miscellaneous - net (loss)/gain ', 52), (' other miscellaneous - net (loss)/gain ', 52), (' Other expense - Loss on inventory obsolescence ', 52), (' Sub-lease rental income ', 50), (' profit from discontinued operation ', 48), (' net other foreign exchange (losses)/gains ', 48), (' Profit from discontinued operation ', 48), (' Net other foreign exchange (losses)/gains ', 48), (' Other expense - Net loss on sale or property, plant and equipment ', 48), (' insurance proceeds ', 45), (' Net foreign losses ', 44), (' commission revenue ', 43), (' net of tax ', 43), (' japan recoveries ', 43), (' net foreign exchange gains/(losses) ', 43), (' paid by customers - at amortised cost ', 43), (' net ppe disposal (loss)/gain ', 43), (' Remuneration from services linked to newly acquired entities ', 43), (' Share of gain/(loss) of joint venture ', 43), (' net of tax ', 43), (' Interest on unwinding of discount in provisions ', 43), (' net of tax ', 43), (' Net loss on disposal of property ', 43), (' Net foreign exchange gains/(losses) ', 43), (' Net PPE disposal (loss)/gain ', 43), (' government grants ', 42), (' Commision rebate ', 42), (' foreign exchange gain ', 40), (' net foreign exchange gain ', 40), (' Bank charges', 40), (' net foreign exchange (loss)/gain ', 39), (' net (loss)/profit on disposal of non-current assets ', 39), (' net gain / loss on disposal of property plant and equipment  ', 39), (' Loss on loan refinancing ', 39), (' Net foreign exchange (loss)/gain ', 39), (' Arising from inventory of cranes ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' Investment in joint venture ', 37), (' Impairment loss ', 36), (' effective portion of changes in fair value of cash flow ', 35), (' Power purchase agreement realised gain ', 35), (' Power purchase agreement unrelaised gain ', 35), (' Arising from inventory of spare parts ', 35), (' Asset impairment ', 33), (' plant and equipment ', 33), (' Accretion expense ', 31), (' Derivaties at FVTPL- net change in fair value ', 30), (' Profit on sale of assets ', 29), (' Loss on sale of disposal of assets ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows = other income total , res_fuzz_match = [(' other ', 100), (' other income ', 100), (' Other income - Bank guarantee ', 76), (' share of jv income ', 73), ('other revenue ', 58), (' sundry income ', 58), (' quota lease income ', 56), (' secondment income (tw recovery) ', 53), (' other miscellaneous - net (loss)/gain ', 53), (' net other foreign exchange (losses)/gains ', 53), (' other miscellaneous - net (loss)/gain ', 53), (' Net other foreign exchange (losses)/gains ', 53), (' Other expense - Net loss on sale or property, plant and equipment ', 53), (' Other expense - Loss on inventory obsolescence ', 53), (' profit from discontinued operation ', 47), (' margin charge income ', 47), (' Sub-lease rental income ', 47), (' Share of gain/(loss) of joint venture ', 47), (' Profit from discontinued operation ', 47), (' Miscellanous income ', 47), (' net of tax ', 43), (' net of tax ', 43), (' net of tax ', 43), (' government grants ', 42), (' Commision rebate ', 42), (' foreign exchange gain ', 41), (' dividend from other parties ', 41), (' effective portion of changes in fair value of cash flow ', 41), (' paid by customers - at amortised cost ', 41), (' net ppe disposal (loss)/gain ', 41), (' net (loss)/profit on disposal of non-current assets ', 41), (' Loss on sale of disposal of assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Power purchase agreement realised gain ', 41), (' Power purchase agreement unrelaised gain ', 41), (' Interest on unwinding of discount in provisions ', 41), (' Net PPE disposal (loss)/gain ', 41), (' Arising from inventory of cranes ', 41), (' Arising from inventory of spare parts ', 41), (' Net (loss)/profit on disposal of non-current assets ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' Net foreign losses ', 38), (' insurance proceeds ', 36), (' Investment in joint venture ', 36), (' Impairment loss ', 36), (' net foreign exchange gain ', 35), (' net foreign exchange gains/(losses) ', 35), (' net foreign exchange (loss)/gain ', 35), (' net gain / loss on disposal of property plant and equipment  ', 35), (' Net loss on disposal of property ', 35), (' Net foreign exchange gains/(losses) ', 35), (' Net foreign exchange (loss)/gain ', 35), (' Asset impairment ', 33), (' Bank charges', 30), (' commission revenue ', 29), (' japan recoveries ', 29), (' Profit on sale of assets ', 29), (' Loss on loan refinancing ', 29), (' plant and equipment ', 27), (' Accretion expense ', 23)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [288.0, 1141.0, 41.0, 1470.0, 29.0, 0.0, 7.0, 36.0], 'label': ['4. Other income Interest received', '4. Other income Foreign exchange gain/(loss)', '4. Other income Other income', '4. Other income Total', '4. Other income Interest received', '4. Other income Foreign exchange gain/(loss)', '4. Other income Other income', '4. Other income Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 13:54:05+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('NULL', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('NULL', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('current tax', 42), (' income tax benefit', 40), (' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 34), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('provision for taxation previous year', 29), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 27), ('prior year ', 26), ('earlier year', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('minimum alternate tax credit entitlement', 29), ('earlier year', 29), ('provision for taxation previous year', 27), (' income tax', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' income tax', 32), ('current tax', 29), ('provision for taxation previous year', 26), (' income tax expense', 23), (' income tax benefit', 22), (' tax (expense)/benefit', 21), ('prior year ', 20), ('minimum alternate tax credit entitlement', 19), (' income tax benefit/(expense)', 18), ('amount transferred to retained earnings', 16), ('deferred tax', 11), ('earlier year', 9)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -3354.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6(a)'], 'line_item_value': [-3354.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('current tax', 42), (' income tax benefit', 40), (' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 34), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('provision for taxation previous year', 29), ('deferred tax', 27), ('minimum alternate tax credit entitlement', 27), ('prior year ', 26), ('earlier year', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('minimum alternate tax credit entitlement', 29), ('earlier year', 29), ('provision for taxation previous year', 27), (' income tax', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' income tax', 32), ('current tax', 29), ('provision for taxation previous year', 26), (' income tax expense', 23), (' income tax benefit', 22), (' tax (expense)/benefit', 21), ('prior year ', 20), ('minimum alternate tax credit entitlement', 19), (' income tax benefit/(expense)', 18), ('amount transferred to retained earnings', 16), ('deferred tax', 11), ('earlier year', 9)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -3376.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6(a)'], 'line_item_value': [-3376.0]}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 32), (' prior period ', 24), ('exceptional ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), (' prior period ', 29), ('exceptional ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 41), (' prior period ', 29), ('exceptional ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' prior period ', 27), ('exceptional ', 25), (' Actuarial gains / (losses) on retirement benefit obligation', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 32), (' prior period ', 24), ('exceptional ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), (' prior period ', 29), ('exceptional ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 41), (' prior period ', 29), ('exceptional ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [(' prior period ', 27), ('exceptional ', 25), (' Actuarial gains / (losses) on retirement benefit obligation', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 13:54:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 13:54:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('NULL', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 13:54:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 13:54:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = contract costs , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = occupancy costs , res_fuzz_match = [('NULL', 14)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 13:54:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

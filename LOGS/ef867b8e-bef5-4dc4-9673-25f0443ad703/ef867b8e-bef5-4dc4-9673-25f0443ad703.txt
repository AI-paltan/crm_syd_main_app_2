2023-05-24 17:11:01+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-24 17:11:01+0530 - sLogger - DEBUG - {'fileid': 'ef867b8e-bef5-4dc4-9673-25f0443ad703', 'filename': 'Asahi Diamond Industrial Australia Pty Limited 2022 Annual Report.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Asahi Diamond Industrial Australia Pty Limited 2022 Annual Report.pdf'}
2023-05-24 17:11:01+0530 - sLogger - DEBUG - save file completed
2023-05-24 17:11:01+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-24 17:11:01+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-24 17:11:01+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-24 17:11:01+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-24 17:11:01+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-24 17:11:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:01+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:03+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:03+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:10+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:10+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:12+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:12+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:16+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:16+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:30+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:34+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:34+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:44+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:11:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:11:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:11:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:11:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:11:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:11:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:11:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:02+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:11+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:30+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:34+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:34+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:38+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:38+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:42+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:42+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:44+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:44+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:51+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:12:51+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:12:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:12:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:12:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:12:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:12:56+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:12:56+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-24 17:12:56+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6, 16], 'predicted_cpl_pages': [5], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [8], 'month': 'december'}
2023-05-24 17:12:56+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-24 17:12:56+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-24 17:12:56+0530 - sLogger - DEBUG - process file completed
2023-05-24 17:12:56+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-24 17:12:56+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-24 17:12:56+0530 - sLogger - DEBUG - TE process file started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-24 17:15:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-24 17:15:14+0530 - sLogger - DEBUG - process_main_pages started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:15:14+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:15:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:15:14+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:15:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:15:14+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:15:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-24 17:15:14+0530 - sLogger - DEBUG - set_section_details started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Cash at bank | [('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('noncurrent assets', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equity liabilities', 18), ('liabilities', 13), ('equity', 0)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD current assets | score 31
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD noncurrent assets | score 32
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD noncurrent liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD non current assets | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD non current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD equity and liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Cash at bank | MATCH WORD equity | score 15
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Deferred tax | [('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent assets', 18), ('liabilities', 13), ('noncurrent liabilities', 9)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD current assets | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD current liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrent assets | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrent liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD non current assets | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD non current liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equity and liabilities | score 28
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Income tax | [('equity and liabilities', 31), ('liabilities', 27), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('current assets', 18), ('noncurrent assets', 18), ('assets', 14)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD current assets | score 33
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD current liabilities | score 28
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD noncurrent assets | score 45
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD non current assets | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD non current liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD equity and liabilities | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Income tax | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Retained profits | [('current liabilities', 44), ('current assets', 38), ('equity liabilities', 38), ('equity and liabilities', 33), ('liabilities', 32), ('equity', 32), ('noncurrent liabilities', 30), ('noncurrent assets', 23), ('assets', 22)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current assets | score 47
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD current liabilities | score 46
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent assets | score 42
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD noncurrent liabilities | score 42
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current assets | score 41
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD non current liabilities | score 41
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity and liabilities | score 47
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Retained profits | MATCH WORD equity | score 30
2023-05-24 17:15:14+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-24 17:15:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-24 17:15:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-24 17:15:14+0530 - sLogger - DEBUG - set_section_details started
2023-05-24 17:15:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the financial year | changes in operating assets and liabilities
2023-05-24 17:15:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the financial year | changes in operating assets and liabilities
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-24 17:15:15+0530 - sLogger - ERROR - error occured: 'value'
2023-05-24 17:15:15+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('cash and bank balances', 62), ('cash and cash equivalents', 47), (' cash and cash equivalents', 47), ('other bank balances', 46), ('cash and short term deposits', 39), ('bank balances other than cash and cash equivalents', 34), ('bank balances other than above', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('cash and bank balances', 62), ('cash and cash equivalents', 47), (' cash and cash equivalents', 47), ('other bank balances', 46), ('cash and short term deposits', 39), ('bank balances other than cash and cash equivalents', 34), ('bank balances other than above', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('inventories', 11)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 2493840.0, 'line_item_label': ['Inventories'], 'note_numbers': ['7'], 'line_item_value': [2493840.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('inventories', 11)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 2862415.0, 'line_item_label': ['Inventories'], 'note_numbers': ['7'], 'line_item_value': [2862415.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 67), (' stores and other consumables at cost', 50), (' provision for inventory obsolescence', 38), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' spare parts', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = finished goods at cost , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 67), (' stores and other consumables at cost', 50), (' provision for inventory obsolescence', 38), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 23), ('raw materials', 20), (' raw materials', 20), (' cranes', 20), (' spare parts', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [2862415.0, 2493840.0], 'label': [' Finished goods at cost', ' Finished goods at cost'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('other assets', 30), ('other current assets', 29), ('other financial assets', 29), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('other assets', 30), ('other current assets', 29), ('other financial assets', 29), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [(' trade and other receivables', 32), ('other assets', 30), ('other current assets', 29), (' other current assets', 29), (' other financial assets', 29), (' financial assets', 27), (' income tax receivable from related parties', 19), (' biological assets', 19), (' deferred operating expenditure', 13)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 730409.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '6'], 'line_item_value': [0.0, 730409.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [(' trade and other receivables', 32), ('other assets', 30), ('other current assets', 29), (' other current assets', 29), (' other financial assets', 29), (' financial assets', 27), (' income tax receivable from related parties', 19), (' biological assets', 19), (' deferred operating expenditure', 13)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 780833.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '6'], 'line_item_value': [0.0, 780833.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: allowance for expected credit losses , res_fuzz_match = [('current', 57), (' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' deposits', 43), (' current investments', 43), (' electricity derivatives at fair value', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' other deposits receivable - related party', 38), (' foreign exchange forward contracts', 38), (' amount receivable from controlling entity', 36), (' other debtors and prepayments', 35), (' income tax receivable from related parties', 34), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), (' electricity derivatives at fair value', 50), ('current', 43), (' share of jv prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' deposits', 29), (' condensate', 29), (' bank guarantee', 25), (' rental bond', 18), (' lng', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: allowance for expected credit losses , res_fuzz_match = [('current', 57), (' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' deposits', 43), (' current investments', 43), (' electricity derivatives at fair value', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' other deposits receivable - related party', 38), (' foreign exchange forward contracts', 38), (' amount receivable from controlling entity', 36), (' other debtors and prepayments', 35), (' income tax receivable from related parties', 34), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), (' electricity derivatives at fair value', 50), ('current', 43), (' share of jv prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' deposits', 29), (' condensate', 29), (' bank guarantee', 25), (' rental bond', 18), (' lng', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': [100, 100], 'value': [85206.0, 59534.0], 'label': [' Other receivables', ' Other receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('current assets', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('current assets', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 91, 'value': 46848.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['8'], 'line_item_value': [46848.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 91, 'value': 36501.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['8'], 'line_item_value': [36501.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('accumulated depreciation', 29), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 50)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('accumulated depreciation', 29), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 50)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('accumulated depreciation', 29), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 50)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 7, 10], 'score': [100, 100, 100, 100], 'value': [-322226.0, -217451.0, -312561.0, -217451.0], 'label': [' Less: Accumulated depreciation', ' Less: Accumulated depreciation', ' Less: Accumulated depreciation', ' Less: Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6, 9], 'score': [100, 100, 100, 100], 'value': [358727.0, 217451.0, 359409.0, 217451.0], 'label': [' Plant and equipment at cost', ' Motor vehicles at cost', ' Plant and equipment at cost', ' Motor vehicles at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 91, 'value': 46848.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['8'], 'line_item_value': [46848.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 91, 'value': 36501.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['8'], 'line_item_value': [36501.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible', 29), ('capital work in progress', 22), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22), ('work in progress', 22), ('capital work-in-progress', 11), ('capital workinprogress', 11)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 35118.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['9'], 'line_item_value': [35118.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible', 29), ('capital work in progress', 22), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22), ('work in progress', 22), ('capital work-in-progress', 11), ('capital workinprogress', 11)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 1058879.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['9'], 'line_item_value': [1058879.0]}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible assets', 36)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible assets', 36)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('goodwill on consolidatio', 22), ('goodwill', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('goodwill on consolidatio', 22), ('goodwill', 0)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('intangible under development', 44), ('intangible assets under development', 44), ('intangible', 36)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('intangible under development', 44), ('intangible assets under development', 44), ('intangible', 36)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('donations', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('donations', 29)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:15+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-24 17:15:15+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('joint ventures and associates', 44), ('derivative financial instruments', 44), ('investment', 33), (' investment in associate', 33), (' investments accounted for using the equity method', 33), (' investment in joint venture', 22)]
2023-05-24 17:15:15+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:15+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:15+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:15+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('joint ventures and associates', 44), ('derivative financial instruments', 44), ('investment', 33), (' investment in associate', 33), (' investments accounted for using the equity method', 33), (' investment in joint venture', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('deferred tax', 100), ('deferred tax assets', 75), ('deferred charges', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 163041.0, 'line_item_label': ['Deferred tax'], 'note_numbers': ['10'], 'line_item_value': [163041.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('deferred tax', 100), ('deferred tax assets', 75), ('deferred charges', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 126745.0, 'line_item_label': ['Deferred tax'], 'note_numbers': ['10'], 'line_item_value': [126745.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' exploration and evaluation expenditure', 33), (' leased assets', 32), (' leases', 31), ('other assets', 30), (' other assets', 30), (' other non-current assets', 29), (' other non-current assets', 29), (' financial assets', 27), (' loan receivables', 20), ('non-current', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' exploration and evaluation expenditure', 33), (' leased assets', 32), (' leases', 31), ('other assets', 30), (' other assets', 30), (' other non-current assets', 29), (' other non-current assets', 29), (' financial assets', 27), (' loan receivables', 20), ('non-current', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('non-current assets total', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('non-current assets total', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' loans and borrowings', 33), (' bank overdraft', 26), ('short term debt', 25), ('shortterm borrowings', 24), ('lease liabilities', 20), ('short-term debt', 17), ('shortterm debt', 17), (' leases', 15), ('borrowings', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 71787.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [71787.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' loans and borrowings', 33), (' bank overdraft', 26), ('short term debt', 25), ('shortterm borrowings', 24), ('lease liabilities', 20), ('short-term debt', 17), ('shortterm debt', 17), (' leases', 15), ('borrowings', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 190039.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [190039.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [(' leases', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' loans from related party', 45), (' utilised – bank borrowings', 36), (' not later than 1 year', 36), (' secured long-term bank loans', 36), ('bank borrowings', 27), (' balance at the end of period', 27), (' bank overdraft', 18), ('current', 0), (' current', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [(' leases', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' loans from related party', 45), (' utilised – bank borrowings', 36), (' not later than 1 year', 36), (' secured long-term bank loans', 36), ('bank borrowings', 27), (' balance at the end of period', 27), (' bank overdraft', 18), ('current', 0), (' current', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [887417.0, 0.0], 'label': [' Lease liability', ' Lease liability'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other financial liabilities', 34), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 27), ('other current liabilities', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other financial liabilities', 34), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 27), ('other current liabilities', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('note payable(debt)', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('note payable(debt)', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('accounts payable', 35), ('trade and other payables', 32), ('other than micro and small enterprises', 31), ('other trade payables', 30), ('trade payable', 29), ('micro enterprises and small enterprises', 27), ('outstanding dues of micro enterprises and small enterprises', 25), ('micro enterprises', 25), ('small enterprises', 25), ('outstanding dues of creditors other than', 24), ('outstanding dues of creditors other than micro enterprises and small enterprises', 21), ('total outstanding due of other creditors other than micro and small', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 640070.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['11'], 'line_item_value': [640070.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('accounts payable', 35), ('trade and other payables', 32), ('other than micro and small enterprises', 31), ('other trade payables', 30), ('trade payable', 29), ('micro enterprises and small enterprises', 27), ('outstanding dues of micro enterprises and small enterprises', 25), ('micro enterprises', 25), ('small enterprises', 25), ('outstanding dues of creditors other than', 24), ('outstanding dues of creditors other than micro enterprises and small enterprises', 21), ('total outstanding due of other creditors other than micro and small', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 348779.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['11'], 'line_item_value': [348779.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other financial liabilities', 34), ('trade and other payables', 32), ('other liabilities', 29), ('other current financial liabilities', 27), ('other current liabilities', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14], 'score': 100, 'value': 640070.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 640070.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other financial liabilities', 34), ('trade and other payables', 32), ('other liabilities', 29), ('other current financial liabilities', 27), ('other current liabilities', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14], 'score': 100, 'value': 348779.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '11'], 'line_item_value': [0.0, 348779.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 56)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 16], 'score': 100, 'value': 119674.0, 'line_item_label': ['Liabilities', 'Income tax'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 119674.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' income tax payable', 100), ('tax', 100), ('current tax liabilities', 56)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 16], 'score': 100, 'value': 10315.0, 'line_item_label': ['Liabilities', 'Income tax'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 10315.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' financial liabilities', 43), (' customer deposits', 43), (' other financial liabilities', 34), (' trade and other payables', 32), (' foreign exchange contract liability', 25), ('other current liabilities', 21), (' other current liabilities', 21), (' employee benefits', 17), ('provisions', 13), (' deferred revenue', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14, 17], 'score': 100, 'value': 851784.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '11', '14'], 'line_item_value': [0.0, 640070.0, 211714.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' financial liabilities', 43), (' customer deposits', 43), (' other financial liabilities', 34), (' trade and other payables', 32), (' foreign exchange contract liability', 25), ('other current liabilities', 21), (' other current liabilities', 21), (' employee benefits', 17), ('provisions', 13), (' deferred revenue', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14, 17], 'score': 100, 'value': 514854.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '11', '14'], 'line_item_value': [0.0, 348779.0, 166075.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 73), (' loan payable to relayed party under tax funding agreement', 55), ('other creditors and accruals', 45), (' secured long-term bank loans', 45), (' gst payable and accruals', 45), (' contract liabilites - current', 45), (' abandonment and decommissioning costs', 45), (' rebates', 40), (' ultimate parent entity', 36), (' derivative contracts - at fair value', 36), (' loans from related party', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), (' total current employee benefits', 36), (' gst liabilities', 30), ('current', 29), (' other related parties', 27), (' employee benefits - payroll', 27), (' arising from service contracts', 27), (' warranty', 25), (' gst payables', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' employee benefits - current', 18), (' provisions - current', 18), (' provision for associate funding', 18), (' make good provisions', 18), (' other creditors', 18), (' restructuring', 10), (' gst', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('other creditors and accruals', 100), (' other related parties', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' derivative contracts - at fair value', 60), (' secured long-term bank loans', 60), (' contract liabilites - current', 60), (' forward exchange contracts', 60), (' loan payable to relayed party under tax funding agreement', 40), (' loans from related party', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' make good provisions', 40), (' restructuring', 40), (' total current employee benefits', 40), ('current', 20), (' ultimate parent entity', 20), (' gst payable and accruals', 20), (' provisions - current', 20), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' warranty', 20), (' gst', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 73), (' loan payable to relayed party under tax funding agreement', 55), ('other creditors and accruals', 45), (' secured long-term bank loans', 45), (' gst payable and accruals', 45), (' contract liabilites - current', 45), (' abandonment and decommissioning costs', 45), (' rebates', 40), (' ultimate parent entity', 36), (' derivative contracts - at fair value', 36), (' loans from related party', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), (' total current employee benefits', 36), (' gst liabilities', 30), ('current', 29), (' other related parties', 27), (' employee benefits - payroll', 27), (' arising from service contracts', 27), (' warranty', 25), (' gst payables', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' employee benefits - current', 18), (' provisions - current', 18), (' provision for associate funding', 18), (' make good provisions', 18), (' other creditors', 18), (' restructuring', 10), (' gst', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('other creditors and accruals', 100), (' other related parties', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' derivative contracts - at fair value', 60), (' secured long-term bank loans', 60), (' contract liabilites - current', 60), (' forward exchange contracts', 60), (' loan payable to relayed party under tax funding agreement', 40), (' loans from related party', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' make good provisions', 40), (' restructuring', 40), (' total current employee benefits', 40), ('current', 20), (' ultimate parent entity', 20), (' gst payable and accruals', 20), (' provisions - current', 20), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' warranty', 20), (' gst', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [21000.0, 31000.0], 'label': [' Other', ' Other'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('current liabilities', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('current liabilities', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 887417.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [887417.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' bank loan', 44), (' secured finance debt', 36), ('later than 1 year', 36), ('not later than 5 years', 36), (' non current', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' bank loan', 44), (' secured finance debt', 36), ('later than 1 year', 36), ('not later than 5 years', 36), (' non current', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [887417.0, 0.0], 'label': [' Lease liability', ' Lease liability'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 887417.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [887417.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 887417.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['15'], 'line_item_value': [887417.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('deferred tax liabilities', 73), ('total deferred tax (assets) / liabilities', 73)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('deferred tax liabilities', 73), ('total deferred tax (assets) / liabilities', 73)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 21], 'score': 100, 'value': 245739.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 245739.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 21], 'score': 100, 'value': 226422.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 226422.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' trade payables - related parties', 55), (' non-current - liability for long-service leave', 45), (' contract liabilites - non-current', 45), (' abandonment and decommissioning costs', 45), (' total non-current employee benefits', 45), ('non-current trade and other payables', 36), (' electricity derivatives at fair value through oci', 36), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' provisions - non-current', 27), (' employee benefits - payroll', 27), (' provision for associate funding', 18), (' make good provisions', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('non-current trade and other payables', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' make good provisions', 40), (' total non-current employee benefits', 40), (' provisions - non-current', 20), (' trade payables - related parties', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' trade payables - related parties', 55), (' non-current - liability for long-service leave', 45), (' contract liabilites - non-current', 45), (' abandonment and decommissioning costs', 45), (' total non-current employee benefits', 45), ('non-current trade and other payables', 36), (' electricity derivatives at fair value through oci', 36), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' provisions - non-current', 27), (' employee benefits - payroll', 27), (' provision for associate funding', 18), (' make good provisions', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('non-current trade and other payables', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' make good provisions', 40), (' total non-current employee benefits', 40), (' provisions - non-current', 20), (' trade payables - related parties', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [21000.0, 31000.0], 'label': [' Other', ' Other'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('share capital', 50), ('equity share capital', 45), ('perpetual equity instrument', 32), ('common stock', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('share capital', 50), ('equity share capital', 45), ('perpetual equity instrument', 32), ('common stock', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('additional paid in capital', 41), ('additional paid up capital', 41), ('other reserves', 40), ('other equity', 32), ('reserves and surplus', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('additional paid in capital', 41), ('additional paid up capital', 41), ('other reserves', 40), ('other equity', 32), ('reserves and surplus', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('retained earnings', 67), ('other equity', 32), ('reserves surplus', 23), (' accumulated losses', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('retained earnings', 67), ('other equity', 32), ('reserves surplus', 23), (' accumulated losses', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves', 40), ('reserves', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [27], 'score': 100, 'value': 350785.0, 'line_item_label': ['Reserves'], 'note_numbers': ['18'], 'line_item_value': [350785.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('other reserves', 40), ('reserves', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [27], 'score': 100, 'value': 350785.0, 'line_item_label': ['Reserves'], 'note_numbers': ['18'], 'line_item_value': [350785.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = retained profits , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 91, 'value': 46848.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['8'], 'line_item_value': [46848.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 91, 'value': 36501.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['8'], 'line_item_value': [36501.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 50), ('net value', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27), ('net value', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment $ , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 50), ('net value', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27), ('net value', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 1 january 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = depreciation expense , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 50), ('net value', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = balance at 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27), ('net value', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6, 9], 'score': [100, 100, 100, 100], 'value': [358727.0, 217451.0, 359409.0, 217451.0], 'label': [' Plant and equipment at cost', ' Motor vehicles at cost', ' Plant and equipment at cost', ' Motor vehicles at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = plant and equipment at cost , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 7, 10], 'score': [100, 100, 100, 100], 'value': [-322226.0, -217451.0, -312561.0, -217451.0], 'label': [' Less: Accumulated depreciation', ' Less: Accumulated depreciation', ' Less: Accumulated depreciation', ' Less: Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('trade and other receivables', 44), ('billed', 25), ('account receivables', 22), ('trade receivables', 22), ('government subsidies receivable', 22), ('unbilled', 20), ('receivable', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 730409.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['6'], 'line_item_value': [730409.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = cash at bank , res_fuzz_match = [('trade and other receivables', 44), ('billed', 25), ('account receivables', 22), ('trade receivables', 22), ('government subsidies receivable', 22), ('unbilled', 20), ('receivable', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 780833.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['6'], 'line_item_value': [780833.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 75), (' related party receivables', 67), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: allowance for expected credit losses , res_fuzz_match = [('current', 57), (' net trade debtors', 50), (' related party receivables', 44), (' share of joint venture receivables', 44), ('trade receivables', 42), (' other debtors', 42)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 42)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 75), (' related party receivables', 67), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = less: allowance for expected credit losses , res_fuzz_match = [('current', 57), (' net trade debtors', 50), (' related party receivables', 44), (' share of joint venture receivables', 44), ('trade receivables', 42), (' other debtors', 42)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 42)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5], 'score': [100, 100], 'value': [730224.0, 705472.0], 'label': [' Trade receivables', ' Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('net sales', 43), ('revenue from contracts with customers', 43), ('Revenue from contract with customers', 43), ('revenue from operations', 39), ('transmission and distribution business', 33), ('from trading business', 33), (' Sales revenue', 31), ('sale of products', 30), (' Revenue', 29), (' Sale of coal', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('revenue from operations', 38), ('transmission and distribution business', 37), ('net sales', 33), ('from trading business', 32), (' Sale of coal', 32), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('sale of products', 27), (' Revenue', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('net sales', 52), (' Sales revenue', 38), ('from trading business', 33), ('sale of products', 30), ('revenue from operations', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 25), ('transmission and distribution business', 23), (' Revenue', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('transmission and distribution business', 41), ('sale of products', 36), ('net sales', 33), ('from trading business', 32), (' Sale of coal', 32), ('revenue from operations', 31), (' Sales revenue', 30), (' Revenue', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Sale of coal', 38), ('from trading business', 37), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('sale of products', 25), ('transmission and distribution business', 25), ('net sales', 20), (' Sales revenue', 17), (' Revenue', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('revenue from operations', 40), (' Sales revenue', 40), (' Revenue', 40), ('sale of products', 38), ('transmission and distribution business', 29), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 26), ('from trading business', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Sales revenue', 50), ('net sales', 38), ('revenue from operations', 34), ('sale of products', 32), (' Revenue', 32), ('transmission and distribution business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 27), ('from trading business', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('revenue from contracts with customers', 50), ('Revenue from contract with customers', 50), ('from trading business', 43), ('revenue from operations', 38), ('transmission and distribution business', 37), (' Sales revenue', 28), ('sale of products', 27), ('net sales', 25), (' Sale of coal', 24), (' Revenue', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('transmission and distribution business', 33), (' Sales revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), (' Sale of coal', 28), (' Revenue', 23), ('sale of products', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('from trading business', 41), ('revenue from operations', 36), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 23), ('net sales', 22), (' Sale of coal', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('revenue from contracts with customers', 34), ('transmission and distribution business', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 29), ('from trading business', 29), ('sale of products', 18), (' Sales revenue', 18), ('net sales', 16), (' Sale of coal', 13), (' Revenue', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('transmission and distribution business', 47), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('from trading business', 31), ('sale of products', 29), ('revenue from operations', 23), (' Sale of coal', 22), (' Sales revenue', 21), ('net sales', 18), (' Revenue', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('revenue from operations', 37), ('sale of products', 29), ('transmission and distribution business', 28), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 19), (' Revenue', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 30), ('from trading business', 25), ('revenue from operations', 19), ('sale of products', 18), (' Sales revenue', 17), (' Sale of coal', 15), ('net sales', 13), (' Revenue', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 6576791.0, 'line_item_label': ['Revenue'], 'note_numbers': ['3'], 'line_item_value': [6576791.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('net sales', 43), ('revenue from contracts with customers', 43), ('Revenue from contract with customers', 43), ('revenue from operations', 39), ('transmission and distribution business', 33), ('from trading business', 33), (' Sales revenue', 31), ('sale of products', 30), (' Revenue', 29), (' Sale of coal', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('revenue from operations', 38), ('transmission and distribution business', 37), ('net sales', 33), ('from trading business', 32), (' Sale of coal', 32), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('sale of products', 27), (' Revenue', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('net sales', 52), (' Sales revenue', 38), ('from trading business', 33), ('sale of products', 30), ('revenue from operations', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 25), ('transmission and distribution business', 23), (' Revenue', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('transmission and distribution business', 41), ('sale of products', 36), ('net sales', 33), ('from trading business', 32), (' Sale of coal', 32), ('revenue from operations', 31), (' Sales revenue', 30), (' Revenue', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Sale of coal', 38), ('from trading business', 37), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('sale of products', 25), ('transmission and distribution business', 25), ('net sales', 20), (' Sales revenue', 17), (' Revenue', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('revenue from operations', 40), (' Sales revenue', 40), (' Revenue', 40), ('sale of products', 38), ('transmission and distribution business', 29), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 26), ('from trading business', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Sales revenue', 50), ('net sales', 38), ('revenue from operations', 34), ('sale of products', 32), (' Revenue', 32), ('transmission and distribution business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 27), ('from trading business', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('revenue from contracts with customers', 50), ('Revenue from contract with customers', 50), ('from trading business', 43), ('revenue from operations', 38), ('transmission and distribution business', 37), (' Sales revenue', 28), ('sale of products', 27), ('net sales', 25), (' Sale of coal', 24), (' Revenue', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('transmission and distribution business', 33), (' Sales revenue', 32), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 28), (' Sale of coal', 28), (' Revenue', 23), ('sale of products', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('from trading business', 41), ('revenue from operations', 36), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 23), ('net sales', 22), (' Sale of coal', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('revenue from contracts with customers', 34), ('transmission and distribution business', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 29), ('from trading business', 29), ('sale of products', 18), (' Sales revenue', 18), ('net sales', 16), (' Sale of coal', 13), (' Revenue', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('transmission and distribution business', 47), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('from trading business', 31), ('sale of products', 29), ('revenue from operations', 23), (' Sale of coal', 22), (' Sales revenue', 21), ('net sales', 18), (' Revenue', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('revenue from operations', 37), ('sale of products', 29), ('transmission and distribution business', 28), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 19), (' Revenue', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 30), ('from trading business', 25), ('revenue from operations', 19), ('sale of products', 18), (' Sales revenue', 17), (' Sale of coal', 15), ('net sales', 13), (' Revenue', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 6200211.0, 'line_item_label': ['Revenue'], 'note_numbers': ['3'], 'line_item_value': [6200211.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = geographical regions australia , res_fuzz_match = [(' Domgas', 60), (' Sale of goods - Marine', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 36), ('Sale of goods', 33), (' LNG', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition goods transferred at a point in time , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 35), (' LNG', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = geographical regions australia , res_fuzz_match = [(' Domgas', 60), (' Sale of goods - Marine', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 36), ('Sale of goods', 33), (' LNG', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition goods transferred at a point in time , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 35), (' LNG', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = revenue from ordinary activities , res_fuzz_match = [(' Sale of goods - Marine', 47), (' Sale of goods - Cars', 46), ('Sale of goods', 44), (' Condensate', 43), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Domgas', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' Goods sold to customer from warehouse', 36), (' LNG', 33), (' Sale of goods - Motorcycles', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = revenue from ordinary activities , res_fuzz_match = [(' Sale of goods - Marine', 47), (' Sale of goods - Cars', 46), ('Sale of goods', 44), (' Condensate', 43), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Domgas', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' Goods sold to customer from warehouse', 36), (' LNG', 33), (' Sale of goods - Motorcycles', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' Cost of inventory sold', 35), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' Cost of product sold', 31), ('total expenses', 30), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), ('expense', 29), ('total expenditure', 26), (' cost of coal sold', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), ('expenditure', 30), ('total expenses', 27), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of product sold', 22), ('expense', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('total expenditure', 39), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), ('total expenses', 30), ('expense', 29), (' Cost of inventory sold', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' cost of coal sold', 21), ('purchase of stock-in-trade', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Cost of goods and services sold', 44), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expense', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('cost of sales', 48), ('Cost of sales', 48), (' Cost of product sold', 41), (' Cost of inventory sold', 39), (' cost of coal sold', 38), (' Personnel costs', 38), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('total expenses', 25), ('total expenditure', 21), ('expenditure', 18), ('expense', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('expense', 63), ('total expenses', 56), ('expenditure', 52), (' Cost of goods and services sold', 47), ('total expenditure', 41), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' cost of coal sold', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('total expenditure', 46), ('expenditure', 43), (' Cost of inventory sold', 43), ('total expenses', 41), (' Cost of goods and services sold', 39), (' Personnel costs', 39), (' Cost of product sold', 37), ('expense', 32), ('purchase of stock-in-trade', 31), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('purchase of stock-in-trade', 41), ('total expenses', 38), ('expenditure', 33), ('total expenditure', 33), ('expense', 31), (' Cost of goods and services sold', 31), (' Cost of inventory sold', 31), (' cost of coal sold', 29), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28), (' Cost of product sold', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 44), (' Cost of inventory sold', 38), ('expenditure', 36), (' Cost of product sold', 35), ('expense', 34), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('total expenditure', 27), (' Cost of goods and services sold', 26), ('total expenses', 25), (' Personnel costs', 25), ('purchase of stock-in-trade', 23), (' Cost of inventory sold', 23), ('expenditure', 21), (' Cost of product sold', 19), (' cost of coal sold', 17), ('expense', 16), ('cost of sales', 16), ('Cost of sales', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Cost of inventory sold', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 34), ('purchase of stock-in-trade', 33), (' cost of coal sold', 32), ('total expenditure', 31), (' Personnel costs', 28), ('expenditure', 22), ('cost of sales', 22), ('Cost of sales', 22), ('total expenses', 21), ('expense', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 35), (' Cost of inventory sold', 35), ('total expenditure', 34), ('total expenses', 33), (' Personnel costs', 32), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 23), ('expense', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Cost of goods and services sold', 26), (' Cost of inventory sold', 24), ('total expenditure', 23), ('purchase of stock-in-trade', 22), (' Cost of product sold', 21), (' cost of coal sold', 20), (' Personnel costs', 20), ('total expenses', 18), ('cost of sales', 15), ('Cost of sales', 15), ('expenditure', 13), ('expense', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 0.0, 'line_item_label': ['Expenses'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' Cost of inventory sold', 35), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' Cost of product sold', 31), ('total expenses', 30), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), ('expense', 29), ('total expenditure', 26), (' cost of coal sold', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), ('expenditure', 30), ('total expenses', 27), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of product sold', 22), ('expense', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('total expenditure', 39), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), ('total expenses', 30), ('expense', 29), (' Cost of inventory sold', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' cost of coal sold', 21), ('purchase of stock-in-trade', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Cost of goods and services sold', 44), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of inventory sold', 29), ('expense', 9)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('cost of sales', 48), ('Cost of sales', 48), (' Cost of product sold', 41), (' Cost of inventory sold', 39), (' cost of coal sold', 38), (' Personnel costs', 38), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('total expenses', 25), ('total expenditure', 21), ('expenditure', 18), ('expense', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('expense', 63), ('total expenses', 56), ('expenditure', 52), (' Cost of goods and services sold', 47), ('total expenditure', 41), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' cost of coal sold', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('total expenditure', 46), ('expenditure', 43), (' Cost of inventory sold', 43), ('total expenses', 41), (' Cost of goods and services sold', 39), (' Personnel costs', 39), (' Cost of product sold', 37), ('expense', 32), ('purchase of stock-in-trade', 31), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('purchase of stock-in-trade', 41), ('total expenses', 38), ('expenditure', 33), ('total expenditure', 33), ('expense', 31), (' Cost of goods and services sold', 31), (' Cost of inventory sold', 31), (' cost of coal sold', 29), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28), (' Cost of product sold', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 44), (' Cost of inventory sold', 38), ('expenditure', 36), (' Cost of product sold', 35), ('expense', 34), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('total expenditure', 27), (' Cost of goods and services sold', 26), ('total expenses', 25), (' Personnel costs', 25), ('purchase of stock-in-trade', 23), (' Cost of inventory sold', 23), ('expenditure', 21), (' Cost of product sold', 19), (' cost of coal sold', 17), ('expense', 16), ('cost of sales', 16), ('Cost of sales', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Cost of inventory sold', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 34), ('purchase of stock-in-trade', 33), (' cost of coal sold', 32), ('total expenditure', 31), (' Personnel costs', 28), ('expenditure', 22), ('cost of sales', 22), ('Cost of sales', 22), ('total expenses', 21), ('expense', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 35), (' Cost of inventory sold', 35), ('total expenditure', 34), ('total expenses', 33), (' Personnel costs', 32), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 23), ('expense', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Cost of goods and services sold', 26), (' Cost of inventory sold', 24), ('total expenditure', 23), ('purchase of stock-in-trade', 22), (' Cost of product sold', 21), (' cost of coal sold', 20), (' Personnel costs', 20), ('total expenses', 18), ('cost of sales', 15), ('Cost of sales', 15), ('expenditure', 13), ('expense', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 0.0, 'line_item_label': ['Expenses'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' depreciation', 45), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Marketing expenses', 43), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Advertising expenses', 40), (' Sales and marketing', 40), (' Selling & distribution expenses', 39), (' Administrative and other expenses', 39), (' Lease expenses', 38), (' Selling Expenses', 38), ('other expenses', 37), (' Occupancy expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Amortisation expenses', 34), (' Logistics and distribution', 34), (' Management expenses', 30), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [(' Advertising expenses', 40), (' Sales and marketing', 40), (' depreciation', 35), (' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Lease expenses', 29), (' Administrative and other expenses', 28), ('other expenses', 27), (' Other expenses', 27), (' Management expenses', 27), (' Other expenses', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Occupancy ', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Administrative expenses', 45), (' Administration expenses', 45), (' Advertising expenses', 40), (' Sales and marketing', 40), ('Distribution expenses', 39), (' Administrative and other expenses', 39), (' Lease expenses', 38), (' Selling Expenses', 38), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Logistics and distribution', 34), (' Selling & distribution expenses', 33), (' Occupancy expenses', 30), (' Management expenses', 30), (' depreciation', 27), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Sales and marketing', 58), (' Logistics and distribution', 50), (' Marketing expenses', 41), (' Advertising expenses', 39), (' depreciation', 35), (' Administrative and other expenses', 33), (' Amortisation expenses', 33), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 27), (' Selling & distribution expenses', 27), (' Depreciation expenses', 27), (' Lease expenses', 22), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Amortisation expenses', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Administrative and other expenses', 32), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Management expenses', 25), (' Logistics and distribution', 25), (' Marketing expenses', 24), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Sales and marketing', 22), (' depreciation', 21), ('other expenses', 17), (' Other expenses', 17), (' Selling Expenses', 17), (' Other expenses', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Depreciation expenses', 100), (' Depreciation expenses', 100), (' Advertising expenses', 76), (' depreciation', 67), ('Distribution expenses', 67), (' Amortisation expenses', 64), (' Administrative expenses', 60), (' Administration expenses', 60), (' Selling & distribution expenses', 57), (' Lease expenses', 48), (' Selling Expenses', 48), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Administrative and other expenses', 45), (' Marketing expenses', 44), (' Sales and marketing', 34), (' Logistics and distribution', 29), (' Occupancy ', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Selling Expenses', 75), ('other expenses', 72), (' Other expenses', 72), (' Other expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Management expenses', 56), (' Selling & distribution expenses', 53), (' Administrative and other expenses', 46), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' Occupancy ', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('other expenses', 55), (' Other expenses', 55), (' Other expenses', 55), (' Administrative and other expenses', 52), (' Marketing expenses', 49), (' Management expenses', 45), (' Advertising expenses', 43), (' Amortisation expenses', 43), (' Selling & distribution expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Administration expenses', 38), (' Logistics and distribution', 38), (' Lease expenses', 37), (' Selling Expenses', 37), (' Occupancy expenses', 36), (' Sales and marketing', 34), (' depreciation', 21), (' Occupancy ', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' Management expenses', 44), (' Logistics and distribution', 40), (' Sales and marketing', 40), (' Lease expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Marketing expenses', 36), (' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Amortisation expenses', 35), (' Selling Expenses', 32), (' Occupancy expenses', 31), (' depreciation', 30), (' Advertising expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Administrative and other expenses', 26), (' Selling & distribution expenses', 24), ('Distribution expenses', 22), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Marketing expenses', 48), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Depreciation expenses', 42), (' Depreciation expenses', 42), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Administrative and other expenses', 40), (' Lease expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Selling Expenses', 35), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 28), (' Occupancy ', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Administrative and other expenses', 39), (' Selling & distribution expenses', 36), ('Distribution expenses', 34), ('other expenses', 30), (' Other expenses', 30), (' Logistics and distribution', 30), (' Other expenses', 30), (' Advertising expenses', 29), (' Marketing expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Amortisation expenses', 27), (' Occupancy expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Management expenses', 25), (' Lease expenses', 23), (' Sales and marketing', 22), (' Selling Expenses', 21), (' depreciation', 14), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Logistics and distribution', 46), (' Administrative and other expenses', 42), (' Administrative expenses', 38), (' Administration expenses', 38), ('Distribution expenses', 35), (' Selling & distribution expenses', 32), (' Amortisation expenses', 28), (' Sales and marketing', 27), (' Advertising expenses', 24), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Marketing expenses', 20), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Occupancy ', 15), (' depreciation', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses', 41), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Selling & distribution expenses', 31), (' Marketing expenses', 29), (' Management expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Logistics and distribution', 25), (' Advertising expenses', 24), (' Selling Expenses', 22), (' depreciation', 16), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Administrative and other expenses', 31), (' Selling & distribution expenses', 27), (' Logistics and distribution', 24), (' Administrative expenses', 23), (' Administration expenses', 23), ('Distribution expenses', 21), (' Sales and marketing', 21), ('other expenses', 18), (' Other expenses', 18), (' Amortisation expenses', 18), (' Other expenses', 18), (' Occupancy expenses', 17), (' Marketing expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 16), (' Depreciation expenses', 16), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15), (' depreciation', 10), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 15], 'score': 100, 'value': -531828.0, 'line_item_label': ['Depreciation expense', 'Selling expense', 'Administration expense'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-201837.0, -144043.0, -185948.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' depreciation', 45), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Marketing expenses', 43), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Advertising expenses', 40), (' Sales and marketing', 40), (' Selling & distribution expenses', 39), (' Administrative and other expenses', 39), (' Lease expenses', 38), (' Selling Expenses', 38), ('other expenses', 37), (' Occupancy expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Amortisation expenses', 34), (' Logistics and distribution', 34), (' Management expenses', 30), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [(' Advertising expenses', 40), (' Sales and marketing', 40), (' depreciation', 35), (' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Lease expenses', 29), (' Administrative and other expenses', 28), ('other expenses', 27), (' Other expenses', 27), (' Management expenses', 27), (' Other expenses', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Occupancy ', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Administrative expenses', 45), (' Administration expenses', 45), (' Advertising expenses', 40), (' Sales and marketing', 40), ('Distribution expenses', 39), (' Administrative and other expenses', 39), (' Lease expenses', 38), (' Selling Expenses', 38), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Logistics and distribution', 34), (' Selling & distribution expenses', 33), (' Occupancy expenses', 30), (' Management expenses', 30), (' depreciation', 27), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Sales and marketing', 58), (' Logistics and distribution', 50), (' Marketing expenses', 41), (' Advertising expenses', 39), (' depreciation', 35), (' Administrative and other expenses', 33), (' Amortisation expenses', 33), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 27), (' Selling & distribution expenses', 27), (' Depreciation expenses', 27), (' Lease expenses', 22), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Amortisation expenses', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Administrative and other expenses', 32), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Management expenses', 25), (' Logistics and distribution', 25), (' Marketing expenses', 24), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Sales and marketing', 22), (' depreciation', 21), ('other expenses', 17), (' Other expenses', 17), (' Selling Expenses', 17), (' Other expenses', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Depreciation expenses', 100), (' Depreciation expenses', 100), (' Advertising expenses', 76), (' depreciation', 67), ('Distribution expenses', 67), (' Amortisation expenses', 64), (' Administrative expenses', 60), (' Administration expenses', 60), (' Selling & distribution expenses', 57), (' Lease expenses', 48), (' Selling Expenses', 48), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Administrative and other expenses', 45), (' Marketing expenses', 44), (' Sales and marketing', 34), (' Logistics and distribution', 29), (' Occupancy ', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Selling Expenses', 75), ('other expenses', 72), (' Other expenses', 72), (' Other expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Management expenses', 56), (' Selling & distribution expenses', 53), (' Administrative and other expenses', 46), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' Occupancy ', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('other expenses', 55), (' Other expenses', 55), (' Other expenses', 55), (' Administrative and other expenses', 52), (' Marketing expenses', 49), (' Management expenses', 45), (' Advertising expenses', 43), (' Amortisation expenses', 43), (' Selling & distribution expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Administration expenses', 38), (' Logistics and distribution', 38), (' Lease expenses', 37), (' Selling Expenses', 37), (' Occupancy expenses', 36), (' Sales and marketing', 34), (' depreciation', 21), (' Occupancy ', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' Management expenses', 44), (' Logistics and distribution', 40), (' Sales and marketing', 40), (' Lease expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Marketing expenses', 36), (' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Amortisation expenses', 35), (' Selling Expenses', 32), (' Occupancy expenses', 31), (' depreciation', 30), (' Advertising expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Administrative and other expenses', 26), (' Selling & distribution expenses', 24), ('Distribution expenses', 22), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Marketing expenses', 48), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Depreciation expenses', 42), (' Depreciation expenses', 42), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Administrative and other expenses', 40), (' Lease expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Selling Expenses', 35), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 28), (' Occupancy ', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Administrative and other expenses', 39), (' Selling & distribution expenses', 36), ('Distribution expenses', 34), ('other expenses', 30), (' Other expenses', 30), (' Logistics and distribution', 30), (' Other expenses', 30), (' Advertising expenses', 29), (' Marketing expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Amortisation expenses', 27), (' Occupancy expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Management expenses', 25), (' Lease expenses', 23), (' Sales and marketing', 22), (' Selling Expenses', 21), (' depreciation', 14), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Logistics and distribution', 46), (' Administrative and other expenses', 42), (' Administrative expenses', 38), (' Administration expenses', 38), ('Distribution expenses', 35), (' Selling & distribution expenses', 32), (' Amortisation expenses', 28), (' Sales and marketing', 27), (' Advertising expenses', 24), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Marketing expenses', 20), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Occupancy ', 15), (' depreciation', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses', 41), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Selling & distribution expenses', 31), (' Marketing expenses', 29), (' Management expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Logistics and distribution', 25), (' Advertising expenses', 24), (' Selling Expenses', 22), (' depreciation', 16), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Administrative and other expenses', 31), (' Selling & distribution expenses', 27), (' Logistics and distribution', 24), (' Administrative expenses', 23), (' Administration expenses', 23), ('Distribution expenses', 21), (' Sales and marketing', 21), ('other expenses', 18), (' Other expenses', 18), (' Amortisation expenses', 18), (' Other expenses', 18), (' Occupancy expenses', 17), (' Marketing expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 16), (' Depreciation expenses', 16), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15), (' depreciation', 10), (' Occupancy ', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 15], 'score': 100, 'value': -565871.0, 'line_item_label': ['Depreciation expense', 'Selling expense', 'Administration expense'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-220776.0, -155699.0, -189396.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' Administration expenses', 45), (' Rental expenses', 43), (' Occupancy expenses', 37), ('Rent', 32), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 31), (' Occupancy expenses', 18), ('Rent', 14), (' Occupancy', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' Administration expenses', 45), (' Rental expenses', 36), ('Rent', 32), (' Occupancy expenses', 30), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 31), ('Rent', 30), (' Occupancy expenses', 21), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Administration expenses', 60), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 33), (' Occupancy', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Occupancy expenses', 64), (' Rental expenses', 62), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' Rental expenses', 44), (' Administration expenses', 38), (' Occupancy expenses', 36), ('Rent', 17), (' Occupancy', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' Rental expenses', 48), (' Occupancy expenses', 31), (' Administration expenses', 28), ('Rent', 25), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Rental expenses', 48), (' Occupancy expenses', 44), (' Administration expenses', 36), ('Rent', 24), (' Occupancy', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 11), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Administration expenses', 38), (' Occupancy expenses', 21), (' Rental expenses', 20), ('Rent', 15), (' Occupancy', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 18), (' Occupancy expenses', 17), ('Rent', 8), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -185948.0, 'line_item_label': ['Administration expense'], 'note_numbers': [nan], 'line_item_value': [-185948.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' Administration expenses', 45), (' Rental expenses', 43), (' Occupancy expenses', 37), ('Rent', 32), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 31), (' Occupancy expenses', 18), ('Rent', 14), (' Occupancy', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' Administration expenses', 45), (' Rental expenses', 36), ('Rent', 32), (' Occupancy expenses', 30), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 31), ('Rent', 30), (' Occupancy expenses', 21), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Administration expenses', 60), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 33), (' Occupancy', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Occupancy expenses', 64), (' Rental expenses', 62), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' Rental expenses', 44), (' Administration expenses', 38), (' Occupancy expenses', 36), ('Rent', 17), (' Occupancy', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' Rental expenses', 48), (' Occupancy expenses', 31), (' Administration expenses', 28), ('Rent', 25), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Rental expenses', 48), (' Occupancy expenses', 44), (' Administration expenses', 36), ('Rent', 24), (' Occupancy', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 11), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Administration expenses', 38), (' Occupancy expenses', 21), (' Rental expenses', 20), ('Rent', 15), (' Occupancy', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 18), (' Occupancy expenses', 17), ('Rent', 8), (' Occupancy', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -189396.0, 'line_item_label': ['Administration expense'], 'note_numbers': [nan], 'line_item_value': [-189396.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('Other revenue', 52), (' Other income', 38), ('other operating', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('Other revenue', 45), ('other operating', 40), (' Other income', 38)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other operating', 32), (' Other income', 31), ('Other revenue', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Other income', 30), ('Other revenue', 29), ('other operating', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Other income', 35), ('other operating', 18), ('Other revenue', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('other operating', 43), (' Other income', 33), ('Other revenue', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' Other income', 47), ('other operating', 43), ('Other revenue', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('Other revenue', 31), ('other operating', 27), (' Other income', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Other income', 40), ('other operating', 31), ('Other revenue', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Other income', 28), ('other operating', 23), ('Other revenue', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('other operating', 22), ('Other revenue', 21), (' Other income', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Other income', 20), ('other operating', 19), ('Other revenue', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 94425.0, 'line_item_label': ['Other revenue'], 'note_numbers': [nan], 'line_item_value': [94425.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('Other revenue', 52), (' Other income', 38), ('other operating', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('Other revenue', 45), ('other operating', 40), (' Other income', 38)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other operating', 32), (' Other income', 31), ('Other revenue', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Other income', 30), ('Other revenue', 29), ('other operating', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Other income', 35), ('other operating', 18), ('Other revenue', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('other operating', 43), (' Other income', 33), ('Other revenue', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' Other income', 47), ('other operating', 43), ('Other revenue', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('Other revenue', 31), ('other operating', 27), (' Other income', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Other income', 40), ('other operating', 31), ('Other revenue', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Other income', 28), ('other operating', 23), ('Other revenue', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('other operating', 22), ('Other revenue', 21), (' Other income', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Other income', 20), ('other operating', 19), ('Other revenue', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 125167.0, 'line_item_label': ['Other revenue'], 'note_numbers': [nan], 'line_item_value': [125167.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' Interest revenue', 80), ('other income', 38), (' Finance income and costs', 33), (' Net finance costs', 33), ('finance income', 30), ('Finance income', 30), (' Finance income and finance costs', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [(' Interest revenue', 40), ('other income', 38), (' Finance income and costs', 26), (' Finance income and finance costs', 26), (' Net finance costs', 24), ('finance income', 18), ('Finance income', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' Interest revenue', 40), ('other income', 31), ('finance income', 30), ('Finance income', 30), (' Finance income and costs', 28), (' Net finance costs', 27), (' Finance income and finance costs', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Finance income and costs', 49), (' Finance income and finance costs', 41), (' Interest revenue', 39), (' Net finance costs', 39), ('finance income', 36), ('Finance income', 36), ('other income', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Net finance costs', 37), (' Finance income and costs', 36), ('other income', 35), (' Finance income and finance costs', 30), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Interest revenue', 48), (' Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 33), ('finance income', 32), ('Finance income', 32), (' Finance income and costs', 29), (' Net finance costs', 29), (' Finance income and finance costs', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('other income', 47), (' Finance income and finance costs', 40), (' Finance income and costs', 38), (' Net finance costs', 38), (' Interest revenue', 30), ('finance income', 27), ('Finance income', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' Finance income and costs', 44), (' Finance income and finance costs', 42), (' Net finance costs', 40), ('finance income', 38), ('Finance income', 38), (' Interest revenue', 29), ('other income', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and costs', 36), (' Net finance costs', 36), (' Finance income and finance costs', 35), (' Interest revenue', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Finance income and finance costs', 29), ('other income', 28), (' Finance income and costs', 27), (' Net finance costs', 27), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Finance income and finance costs', 41), (' Finance income and costs', 39), (' Net finance costs', 35), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 24), ('other income', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('other income', 41), (' Net finance costs', 41), (' Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Finance income and finance costs', 29), (' Finance income and costs', 25), (' Net finance costs', 21), ('other income', 20), (' Interest revenue', 20), ('finance income', 18), ('Finance income', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 10], 'score': 85, 'value': 42609.0, 'line_item_label': ['Interest received', 'Finance costs'], 'note_numbers': [nan, nan], 'line_item_value': [44034.0, -1425.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' Interest revenue', 80), ('other income', 38), (' Finance income and costs', 33), (' Net finance costs', 33), ('finance income', 30), ('Finance income', 30), (' Finance income and finance costs', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [(' Interest revenue', 40), ('other income', 38), (' Finance income and costs', 26), (' Finance income and finance costs', 26), (' Net finance costs', 24), ('finance income', 18), ('Finance income', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' Interest revenue', 40), ('other income', 31), ('finance income', 30), ('Finance income', 30), (' Finance income and costs', 28), (' Net finance costs', 27), (' Finance income and finance costs', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' Finance income and costs', 49), (' Finance income and finance costs', 41), (' Interest revenue', 39), (' Net finance costs', 39), ('finance income', 36), ('Finance income', 36), ('other income', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' Net finance costs', 37), (' Finance income and costs', 36), ('other income', 35), (' Finance income and finance costs', 30), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Interest revenue', 48), (' Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 33), ('finance income', 32), ('Finance income', 32), (' Finance income and costs', 29), (' Net finance costs', 29), (' Finance income and finance costs', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('other income', 47), (' Finance income and finance costs', 40), (' Finance income and costs', 38), (' Net finance costs', 38), (' Interest revenue', 30), ('finance income', 27), ('Finance income', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' Finance income and costs', 44), (' Finance income and finance costs', 42), (' Net finance costs', 40), ('finance income', 38), ('Finance income', 38), (' Interest revenue', 29), ('other income', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and costs', 36), (' Net finance costs', 36), (' Finance income and finance costs', 35), (' Interest revenue', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' Finance income and finance costs', 29), ('other income', 28), (' Finance income and costs', 27), (' Net finance costs', 27), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' Finance income and finance costs', 41), (' Finance income and costs', 39), (' Net finance costs', 35), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 24), ('other income', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('other income', 41), (' Net finance costs', 41), (' Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' Finance income and finance costs', 29), (' Finance income and costs', 25), (' Net finance costs', 21), ('other income', 20), (' Interest revenue', 20), ('finance income', 18), ('Finance income', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 10], 'score': 85, 'value': 32358.0, 'line_item_label': ['Interest received', 'Finance costs'], 'note_numbers': [nan, nan], 'line_item_value': [58532.0, -26174.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' finance expenses', 36), (' net finance costs ', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' finance expenses', 26), (' net finance costs ', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 27), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('finance cost', 43), ('finance costs', 43), (' net finance costs ', 37), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' finance expenses', 49), (' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' finance expenses', 55), ('finance cost', 45), ('finance costs', 45), (' net finance costs ', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 21), (' finance expenses', 16), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -1425.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-1425.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' finance expenses', 36), (' net finance costs ', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' finance expenses', 26), (' net finance costs ', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 27), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('finance cost', 43), ('finance costs', 43), (' net finance costs ', 37), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' finance expenses', 49), (' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' finance expenses', 55), ('finance cost', 45), ('finance costs', 45), (' net finance costs ', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 21), (' finance expenses', 16), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -26174.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-26174.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' finance expenses', 36), (' net finance costs ', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' finance expenses', 26), (' net finance costs ', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 27), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('finance cost', 43), ('finance costs', 43), (' net finance costs ', 37), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' finance expenses', 49), (' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' finance expenses', 55), ('finance cost', 45), ('finance costs', 45), (' net finance costs ', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 21), (' finance expenses', 16), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -1425.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-1425.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [(' finance expenses', 36), (' net finance costs ', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' finance expenses', 26), (' net finance costs ', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 27), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 28)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('finance cost', 43), ('finance costs', 43), (' net finance costs ', 37), (' finance expenses', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 33), ('finance costs', 33), (' net finance costs ', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' finance expenses', 49), (' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [(' finance expenses', 55), ('finance cost', 45), ('finance costs', 45), (' net finance costs ', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [(' net finance costs ', 21), (' finance expenses', 16), ('finance cost', 15), ('finance costs', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -26174.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-26174.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('NULL', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('NULL', 3)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('NULL', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('NULL', 3)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('amount transferred to retained earnings', 43), ('earlier year', 37), (' income tax benefit/(expense)', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('prior year ', 32), (' income tax expense', 32), ('current tax', 31), (' income tax benefit', 31), ('provision for taxation previous year', 27), ('deferred tax', 25), (' income tax', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('earlier year', 45), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('prior year ', 40), ('minimum alternate tax credit entitlement', 33), (' income tax', 32), (' income tax expense', 31), (' income tax benefit', 30), ('current tax', 29), (' income tax benefit/(expense)', 29), (' tax (expense)/benefit', 29), ('provision for taxation previous year', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax (expense)/benefit', 67), (' income tax benefit', 56), (' income tax benefit/(expense)', 56), ('earlier year', 37), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('prior year ', 32), ('current tax', 31), ('amount transferred to retained earnings', 29), (' income tax expense', 26), ('deferred tax', 25), (' income tax', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('amount transferred to retained earnings', 47), ('minimum alternate tax credit entitlement', 42), ('current tax', 37), ('deferred tax', 32), (' income tax', 32), (' income tax expense', 31), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), ('earlier year', 29), (' tax (expense)/benefit', 29), ('provision for taxation previous year', 27), ('prior year ', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' income tax', 48), (' income tax expense', 36), (' income tax benefit', 34), (' income tax benefit/(expense)', 28), ('prior year ', 27), (' tax (expense)/benefit', 27), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), ('deferred tax', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' income tax expense', 62), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 45), ('earlier year', 40), ('amount transferred to retained earnings', 35), ('prior year ', 35), (' income tax benefit', 33), ('provision for taxation previous year', 29), ('deferred tax', 27), ('current tax', 25), ('minimum alternate tax credit entitlement', 22), (' income tax', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' income tax expense', 46), (' income tax benefit/(expense)', 46), ('amount transferred to retained earnings', 44), ('minimum alternate tax credit entitlement', 41), (' tax (expense)/benefit', 40), ('provision for taxation previous year', 36), ('prior year ', 33), (' income tax benefit', 33), ('earlier year', 32), (' income tax', 29), ('current tax', 28), ('deferred tax', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('amount transferred to retained earnings', 47), (' income tax expense', 44), ('current tax', 39), ('minimum alternate tax credit entitlement', 38), ('earlier year', 38), (' income tax benefit', 38), (' tax (expense)/benefit', 37), (' income tax benefit/(expense)', 36), ('deferred tax', 34), ('provision for taxation previous year', 29), (' income tax', 28), ('prior year ', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 75), (' income tax expense', 71), (' tax (expense)/benefit', 60), ('provision for taxation previous year', 59), (' income tax benefit', 57), (' income tax', 47), ('minimum alternate tax credit entitlement', 46), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 36), ('prior year ', 31), ('earlier year', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax benefit/(expense)', 44), (' income tax expense', 39), ('minimum alternate tax credit entitlement', 38), (' income tax benefit', 33), (' tax (expense)/benefit', 33), ('amount transferred to retained earnings', 32), ('earlier year', 28), ('prior year ', 26), (' income tax', 24), ('current tax', 23), ('deferred tax', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('minimum alternate tax credit entitlement', 44), ('amount transferred to retained earnings', 35), ('provision for taxation previous year', 31), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), ('earlier year', 29), (' income tax expense', 27), ('current tax', 26), ('prior year ', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('deferred tax', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 50), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), ('prior year ', 38), ('earlier year', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('current tax', 33), ('deferred tax', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('minimum alternate tax credit entitlement', 33), ('provision for taxation previous year', 32), ('amount transferred to retained earnings', 29), (' income tax benefit/(expense)', 26), (' income tax expense', 23), (' income tax benefit', 23), (' tax (expense)/benefit', 23), ('earlier year', 22), ('prior year ', 19), ('current tax', 17), (' income tax', 15), ('deferred tax', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': -327554.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['4'], 'line_item_value': [-327554.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('amount transferred to retained earnings', 43), ('earlier year', 37), (' income tax benefit/(expense)', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('prior year ', 32), (' income tax expense', 32), ('current tax', 31), (' income tax benefit', 31), ('provision for taxation previous year', 27), ('deferred tax', 25), (' income tax', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('earlier year', 45), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('prior year ', 40), ('minimum alternate tax credit entitlement', 33), (' income tax', 32), (' income tax expense', 31), (' income tax benefit', 30), ('current tax', 29), (' income tax benefit/(expense)', 29), (' tax (expense)/benefit', 29), ('provision for taxation previous year', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax (expense)/benefit', 67), (' income tax benefit', 56), (' income tax benefit/(expense)', 56), ('earlier year', 37), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('prior year ', 32), ('current tax', 31), ('amount transferred to retained earnings', 29), (' income tax expense', 26), ('deferred tax', 25), (' income tax', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('amount transferred to retained earnings', 47), ('minimum alternate tax credit entitlement', 42), ('current tax', 37), ('deferred tax', 32), (' income tax', 32), (' income tax expense', 31), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), ('earlier year', 29), (' tax (expense)/benefit', 29), ('provision for taxation previous year', 27), ('prior year ', 23)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [(' income tax', 48), (' income tax expense', 36), (' income tax benefit', 34), (' income tax benefit/(expense)', 28), ('prior year ', 27), (' tax (expense)/benefit', 27), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), ('deferred tax', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [(' income tax expense', 62), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 45), ('earlier year', 40), ('amount transferred to retained earnings', 35), ('prior year ', 35), (' income tax benefit', 33), ('provision for taxation previous year', 29), ('deferred tax', 27), ('current tax', 25), ('minimum alternate tax credit entitlement', 22), (' income tax', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [(' income tax expense', 46), (' income tax benefit/(expense)', 46), ('amount transferred to retained earnings', 44), ('minimum alternate tax credit entitlement', 41), (' tax (expense)/benefit', 40), ('provision for taxation previous year', 36), ('prior year ', 33), (' income tax benefit', 33), ('earlier year', 32), (' income tax', 29), ('current tax', 28), ('deferred tax', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('amount transferred to retained earnings', 47), (' income tax expense', 44), ('current tax', 39), ('minimum alternate tax credit entitlement', 38), ('earlier year', 38), (' income tax benefit', 38), (' tax (expense)/benefit', 37), (' income tax benefit/(expense)', 36), ('deferred tax', 34), ('provision for taxation previous year', 29), (' income tax', 28), ('prior year ', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 75), (' income tax expense', 71), (' tax (expense)/benefit', 60), ('provision for taxation previous year', 59), (' income tax benefit', 57), (' income tax', 47), ('minimum alternate tax credit entitlement', 46), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 36), ('prior year ', 31), ('earlier year', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax benefit/(expense)', 44), (' income tax expense', 39), ('minimum alternate tax credit entitlement', 38), (' income tax benefit', 33), (' tax (expense)/benefit', 33), ('amount transferred to retained earnings', 32), ('earlier year', 28), ('prior year ', 26), (' income tax', 24), ('current tax', 23), ('deferred tax', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('minimum alternate tax credit entitlement', 44), ('amount transferred to retained earnings', 35), ('provision for taxation previous year', 31), (' income tax benefit', 30), (' income tax benefit/(expense)', 30), ('earlier year', 29), (' income tax expense', 27), ('current tax', 26), ('prior year ', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('deferred tax', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 50), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), ('prior year ', 38), ('earlier year', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('current tax', 33), ('deferred tax', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('minimum alternate tax credit entitlement', 33), ('provision for taxation previous year', 32), ('amount transferred to retained earnings', 29), (' income tax benefit/(expense)', 26), (' income tax expense', 23), (' income tax benefit', 23), (' tax (expense)/benefit', 23), ('earlier year', 22), ('prior year ', 19), ('current tax', 17), (' income tax', 15), ('deferred tax', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': -206878.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['4'], 'line_item_value': [-206878.0]}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = income tax expense current tax , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 75), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 61), (' deferred income tax', 47)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = income tax expense deferred tax - origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total tax (expense)/benefit in income statement', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' current income tax', 41)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = income tax expense aggregate income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' current income tax', 71), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 63), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = deferred tax included in income tax expense comprises: decrease/(increase) in deferred tax assets (note 10) , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 79), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 70), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' total tax (expense)/benefit in income statement', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate profit before income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 87), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate tax at the statutory tax rate of 30% , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: entertainment expenses , res_fuzz_match = [(' total income tax expense / (benefit)', 63), ('income tax expense', 62), (' deferred income tax', 60), (' current income tax', 53), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: unrealised forex gains , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), ('income tax expense', 50), (' total income tax expense / (benefit)', 50), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: other , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 67), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total tax (expense)/benefit in income statement', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = income tax expense current tax , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 75), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 61), (' deferred income tax', 47)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = income tax expense deferred tax - origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total tax (expense)/benefit in income statement', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' current income tax', 41)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = income tax expense aggregate income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' current income tax', 71), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 63), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = deferred tax included in income tax expense comprises: decrease/(increase) in deferred tax assets (note 10) , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 79), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 70), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' total tax (expense)/benefit in income statement', 50)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate profit before income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 87), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate tax at the statutory tax rate of 30% , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: entertainment expenses , res_fuzz_match = [(' total income tax expense / (benefit)', 63), ('income tax expense', 62), (' deferred income tax', 60), (' current income tax', 53), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: unrealised forex gains , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), ('income tax expense', 50), (' total income tax expense / (benefit)', 50), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: other , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 67), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total tax (expense)/benefit in income statement', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [170582.0, 36296.0, 206878.0, 36296.0, 711516.0, 213455.0, 206878.0, 329674.0, -2120.0, 327554.0, -2120.0, 1098270.0, 329481.0, 327554.0], 'label': ['Income tax expense Current tax', 'Income tax expense Deferred tax - origination and reversal of temporary differences', 'Income tax expense Aggregate income tax expense', 'Deferred tax included in income tax expense comprises: Decrease/(increase) in deferred tax assets (note 10)', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Profit before income tax expense', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Tax at the statutory tax rate of 30%', 'Tax effect amounts which are not deductible/taxable) in calculating taxable income: Income tax expense', 'Income tax expense Current tax', 'Income tax expense Deferred tax - origination and reversal of temporary differences', 'Income tax expense Aggregate income tax expense', 'Deferred tax included in income tax expense comprises: Decrease/(increase) in deferred tax assets (note 10)', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Profit before income tax expense', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Tax at the statutory tax rate of 30%', 'Tax effect amounts which are not deductible/taxable) in calculating taxable income: Income tax expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('prior period', 37), ('exceptional', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('prior period', 45), ('exceptional', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('prior period', 37), ('exceptional', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('exceptional', 40), ('prior period', 38)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('prior period', 40), ('exceptional', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('exceptional', 31), ('prior period', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('prior period', 39), ('exceptional', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('prior period', 29), ('exceptional', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('prior period', 20), ('exceptional', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('prior period', 37), ('exceptional', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('prior period', 45), ('exceptional', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('prior period', 37), ('exceptional', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('exceptional', 40), ('prior period', 38)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('prior period', 40), ('exceptional', 32)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('exceptional', 31), ('prior period', 31)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('prior period', 39), ('exceptional', 29)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('prior period', 29), ('exceptional', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('prior period', 20), ('exceptional', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:15:16+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-24 17:15:16+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('NULL', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('NULL', 3)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:15:16+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:15:16+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = interest received , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = raw materials , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('NULL', 21)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = freight and cart , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = commissions paid , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = service expense , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = selling expense , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary activities , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = foreign exchange gains , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = administration expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of asahi , res_fuzz_match = [('NULL', 3)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = diamond industrial australia pty limited , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of asahi diamond industrial australia pty limited , res_fuzz_match = [('NULL', 8)]
2023-05-24 17:15:16+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:17:14+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-24 17:17:14+0530 - sLogger - DEBUG - {'fileid': '93c524cc-09d6-432d-9b9c-073f153e0a80', 'filename': 'Shimano Australia Fishing Pty Ltd-Financial Statements-December 2022 pdf.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Shimano Australia Fishing Pty Ltd-Financial Statements-December 2022 pdf.pdf'}
2023-05-24 17:17:14+0530 - sLogger - DEBUG - save file completed
2023-05-24 17:17:14+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-24 17:17:14+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-24 17:17:14+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-24 17:17:14+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-24 17:17:14+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-24 17:17:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:14+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:16+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:16+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:21+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:21+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:29+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:29+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:32+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:32+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:38+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:38+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:42+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:42+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:47+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:47+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:51+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:51+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:17:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:17:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:17:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:17:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:17:55+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:17:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:17:55+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:18:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:18:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:18:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:18:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:18:04+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:18:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:18:04+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:18:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:18:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:18:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:18:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:18:12+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:18:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:18:13+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:18:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:18:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:18:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:18:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:18:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:18:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:18:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:18:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:18:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:18:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:18:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:18:32+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:18:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:18:33+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:18:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:18:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:18:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:18:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:18:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:18:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:18:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:18:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:18:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:18:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:18:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:18:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:18:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:18:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:00+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:00+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:04+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:04+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:09+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:09+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:13+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:13+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:18+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:18+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:28+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:28+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:41+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:41+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:47+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:47+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:19:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:19:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:19:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:19:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:19:55+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:19:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:19:55+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:20:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:20:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:20:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:20:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:20:01+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:20:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:20:01+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:20:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:20:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:20:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:20:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:20:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:20:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:20:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:20:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:20:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:20:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:20:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:20:10+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:20:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:20:10+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:20:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:20:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:20:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:20:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:20:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:20:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:20:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:20:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:20:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:20:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:20:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:20:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:20:27+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-24 17:20:27+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6], 'predicted_cpl_pages': [5], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [8], 'month': 'december'}
2023-05-24 17:20:27+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-24 17:20:27+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-24 17:20:27+0530 - sLogger - DEBUG - process file completed
2023-05-24 17:20:27+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-24 17:20:27+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-24 17:20:27+0530 - sLogger - DEBUG - TE process file started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-24 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-24 17:24:00+0530 - sLogger - DEBUG - process_main_pages started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:24:00+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:24:00+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:24:00+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-24 17:24:00+0530 - sLogger - DEBUG - set_section_details started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 12)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Deferred tax | [('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent assets', 18), ('liabilities', 13), ('noncurrent liabilities', 9)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD current assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD current liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrent assets | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD noncurrent liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD non current assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD non current liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equity and liabilities | score 28
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrent liabilities', 41), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-05-24 17:24:00+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-24 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-24 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-24 17:24:00+0530 - sLogger - DEBUG - set_section_details started
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- of | changes in operating assets and liabilities
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the financial year | changes in operating assets and liabilities
2023-05-24 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the financial year | changes in operating assets and liabilities
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-24 17:24:02+0530 - sLogger - ERROR - error occured: 'value'
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-24 17:24:02+0530 - sLogger - ERROR - error occured: list index out of range
2023-05-24 17:24:02+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 14119138.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['10'], 'line_item_value': [14119138.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 18929149.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['10'], 'line_item_value': [18929149.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 52), (' short term deposits', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 52), (' short term deposits', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [18929149.0, 14119138.0], 'label': [' Cash and cash equivalents', ' Cash and cash equivalents'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 18402190.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [18402190.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 13576866.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [13576866.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = stock in transit at cost , res_fuzz_match = [(' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 44), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33), (' spare parts', 30)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = provision for impairment , res_fuzz_match = [(' provision for inventory obsolescence', 71), ('raw materials', 50), (' raw materials', 50), (' spare parts', 50), (' inventories', 44), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' finished goods at cost', 31), (' cranes - in transit', 31), (' stores and other consumables at cost', 29), (' cranes', 20)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = stock in transit at cost , res_fuzz_match = [(' goods in transit', 75), (' cranes - in transit', 69), (' cranes', 60), (' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' provision for inventory obsolescence', 44), ('raw materials', 40), (' raw materials', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' inventories', 33), (' spare parts', 30)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = provision for impairment , res_fuzz_match = [(' provision for inventory obsolescence', 71), ('raw materials', 50), (' raw materials', 50), (' spare parts', 50), (' inventories', 44), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' finished goods at cost', 31), (' cranes - in transit', 31), (' stores and other consumables at cost', 29), (' cranes', 20)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [10893699.0, 14169514.0], 'label': [' Finished goods', ' Finished goods'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 408809.0, 'line_item_label': ['Current assets', 'Other assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 408809.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 550646.0, 'line_item_label': ['Current assets', 'Other assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 550646.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-24 17:24:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5], 'score': 100, 'value': 10560364.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets'], 'note_numbers': [nan, '11', '13'], 'line_item_value': [0.0, 10151555.0, 408809.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5], 'score': 100, 'value': 10503509.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other assets'], 'note_numbers': [nan, '11', '13'], 'line_item_value': [0.0, 9952863.0, 550646.0]}
2023-05-24 17:24:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:02+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term 30 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term 31-60 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term 61-90 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term >90 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term past due and impaired , res_fuzz_match = [('other assets', 64), (' other debtors and prepayments', 57), (' accrued interest', 50), (' related party receivable', 50), (' related party disclosures', 48), (' other deposits receivable - related party', 48), (' interest receivable', 47), (' income tax receivable from related parties', 46), (' other receivables - related party', 46), (' bank guarantee', 46), ('current', 43), (' deposits', 43), (' condensate', 43), (' derivative contracts - fair value', 42), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' forward exchange contracts', 38), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' lng', 33)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term total commitment , res_fuzz_match = [(' other', 60), (' amount receivable from controlling entity', 48), (' forward exchange contracts', 48), (' bank guarantee', 46), ('other assets', 45), (' rental bond', 45), (' foreign exchange forward contracts', 44), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' deposits', 43), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' other deposits receivable - related party', 38), (' current investments', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' condensate', 29)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term net commitment recognised as assets , res_fuzz_match = [('other assets', 64), (' other', 60), (' condensate', 57), (' accrued interest', 50), (' other deposits receivable - related party', 50), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' bank guarantee', 46), (' forward exchange contracts', 46), (' amount receivable from controlling entity', 45), (' rental bond', 45), ('current', 43), (' deposits', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' foreign exchange forward contracts', 41), (' long service leave receivable', 39), (' related party disclosures', 38), (' electricity derivatives at fair value', 36), (' accrued rebates', 36), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 32)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term 30 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows = within initial trade term 31-60 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = within initial trade term 61-90 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = within initial trade term >90 , res_fuzz_match = [(' other', 60), (' accrued interest', 50), (' interest receivable', 47), (' bank guarantee', 46), ('other assets', 45), ('current', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' foreign exchange forward contracts', 43), (' other debtors and prepayments', 40), (' other receivables - related party', 39), (' related party receivable', 39), (' forward exchange contracts', 39), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' derivative contracts - fair value', 35), (' amount receivable from controlling entity', 35), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), (' long service leave receivable', 31), (' condensate', 29), (' electricity derivatives at fair value', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = within initial trade term past due and impaired , res_fuzz_match = [('other assets', 64), (' other debtors and prepayments', 57), (' accrued interest', 50), (' related party receivable', 50), (' related party disclosures', 48), (' other deposits receivable - related party', 48), (' interest receivable', 47), (' income tax receivable from related parties', 46), (' other receivables - related party', 46), (' bank guarantee', 46), ('current', 43), (' deposits', 43), (' condensate', 43), (' derivative contracts - fair value', 42), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' forward exchange contracts', 38), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' lng', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = within initial trade term total commitment , res_fuzz_match = [(' other', 60), (' amount receivable from controlling entity', 48), (' forward exchange contracts', 48), (' bank guarantee', 46), ('other assets', 45), (' rental bond', 45), (' foreign exchange forward contracts', 44), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' deposits', 43), (' derivative contracts - fair value', 42), (' other receivables - related party', 42), (' electricity derivatives at fair value', 41), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' other deposits receivable - related party', 38), (' current investments', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' condensate', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = within initial trade term net commitment recognised as assets , res_fuzz_match = [('other assets', 64), (' other', 60), (' condensate', 57), (' accrued interest', 50), (' other deposits receivable - related party', 50), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' bank guarantee', 46), (' forward exchange contracts', 46), (' amount receivable from controlling entity', 45), (' rental bond', 45), ('current', 43), (' deposits', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' foreign exchange forward contracts', 41), (' long service leave receivable', 39), (' related party disclosures', 38), (' electricity derivatives at fair value', 36), (' accrued rebates', 36), (' share of jv prepayments', 33), (' lng', 33), ('foreign exchange derivatives at fair value', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts receivable from related party , res_fuzz_match = [(' income tax receivable from related parties', 87), (' other receivables - related party', 79), (' amount receivable from controlling entity', 77), (' other deposits receivable - related party', 76), (' related party receivable', 61), (' interest receivable', 60), (' accrued rebates', 55), (' related party disclosures', 52), (' derivative contracts - fair value', 50), (' electricity derivatives at fair value', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' other debtors and prepayments', 39), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' rental bond', 36), (' lng', 33), (' deposits', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = receivable from other affiliates , res_fuzz_match = [(' other', 100), (' amount receivable from controlling entity', 71), (' income tax receivable from related parties', 68), ('other assets', 64), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' derivative contracts - fair value', 47), ('foreign exchange derivatives at fair value', 46), (' electricity derivatives at fair value', 45), (' foreign exchange forward contracts', 42), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' related party disclosures', 33), (' interest receivable', 33), (' related party receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), (' other debtors and prepayments', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' bank guarantee', 23)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = allowance for expected credit losses , res_fuzz_match = [('current', 57), (' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' current investments', 43), (' foreign exchange forward contracts', 43), (' electricity derivatives at fair value', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' other debtors and prepayments', 36), (' share of jv prepayments', 33), (' lng', 33), (' condensate', 29), (' bank guarantee', 23)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts receivable from related party , res_fuzz_match = [(' income tax receivable from related parties', 87), (' other receivables - related party', 79), (' amount receivable from controlling entity', 77), (' other deposits receivable - related party', 76), (' related party receivable', 61), (' interest receivable', 60), (' accrued rebates', 55), (' related party disclosures', 52), (' derivative contracts - fair value', 50), (' electricity derivatives at fair value', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' accrued interest', 43), (' long service leave receivable', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' other', 40), (' other debtors and prepayments', 39), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' rental bond', 36), (' lng', 33), (' deposits', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = receivable from other affiliates , res_fuzz_match = [(' other', 100), (' amount receivable from controlling entity', 71), (' income tax receivable from related parties', 68), ('other assets', 64), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' derivative contracts - fair value', 47), ('foreign exchange derivatives at fair value', 46), (' electricity derivatives at fair value', 45), (' foreign exchange forward contracts', 42), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' long service leave receivable', 35), (' related party disclosures', 33), (' interest receivable', 33), (' related party receivable', 33), (' share of jv prepayments', 33), (' lng', 33), (' forward exchange contracts', 33), (' other debtors and prepayments', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' bank guarantee', 23)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = allowance for expected credit losses , res_fuzz_match = [('current', 57), (' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' current investments', 43), (' foreign exchange forward contracts', 43), (' electricity derivatives at fair value', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' income tax receivable from related parties', 36), (' amount receivable from controlling entity', 36), (' other debtors and prepayments', 36), (' share of jv prepayments', 33), (' lng', 33), (' condensate', 29), (' bank guarantee', 23)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 6, 7], 'score': [87, 100, 87, 100], 'value': [184367.0, 203314.0, 37702.0, 80109.0], 'label': [' Amounts receivable from related party', ' Receivable from other affiliates', ' Amounts receivable from related party', ' Receivable from other affiliates'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 230591.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['14'], 'line_item_value': [230591.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 367806.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['14'], 'line_item_value': [367806.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('net value', 50), ('cost', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('net value', 62), ('cost', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('net value', 38), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 13, 14, 15, 16, 22, 23, 24, 25, 35, 36, 37, 38, 44, 45, 46, 47, 57, 58, 59, 60, 66, 67, 68, 69, 79, 80, 81, 82, 88, 89, 90, 91, 101, 102, 103, 104], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [427214.0, 42711.0, 0.0, 469925.0, 469925.0, 26490.0, 0.0, 496415.0, 20427.0, 0.0, 0.0, 20427.0, 20427.0, 0.0, 0.0, 20427.0, 742580.0, 39417.0, -176234.0, 605763.0, 605763.0, 240538.0, -297795.0, 548506.0, 95153.0, 0.0, 0.0, 95153.0, 95153.0, 0.0, -58471.0, 36682.0, 1285374.0, 82128.0, -176234.0, 1191268.0, 1191268.0, 267028.0, -356266.0, 1102030.0], 'label': ['Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 230591.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['14'], 'line_item_value': [230591.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 367806.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['14'], 'line_item_value': [367806.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible', 29), ('capital work in progress', 22), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22), ('work in progress', 22), ('capital work-in-progress', 11), ('capital workinprogress', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible', 29), ('capital work in progress', 22), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22), ('work in progress', 22), ('capital work-in-progress', 11), ('capital workinprogress', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible assets', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('tangible assets', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('goodwill on consolidatio', 22), ('goodwill', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('goodwill on consolidatio', 22), ('goodwill', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('intangible under development', 44), ('intangible assets under development', 44), ('intangible', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('intangible under development', 44), ('intangible assets under development', 44), ('intangible', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('donations', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('donations', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('joint ventures and associates', 44), ('derivative financial instruments', 44), ('investment', 33), (' investment in associate', 33), (' investments accounted for using the equity method', 33), (' investment in joint venture', 22)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('joint ventures and associates', 44), ('derivative financial instruments', 44), ('investment', 33), (' investment in associate', 33), (' investments accounted for using the equity method', 33), (' investment in joint venture', 22)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('deferred tax', 100), ('deferred tax assets', 75), ('deferred charges', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 583665.0, 'line_item_label': ['Deferred tax'], 'note_numbers': ['15'], 'line_item_value': [583665.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('deferred tax', 100), ('deferred tax assets', 75), ('deferred charges', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 438131.0, 'line_item_label': ['Deferred tax'], 'note_numbers': ['15'], 'line_item_value': [438131.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = deferred tax asset , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 73)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = movements: opening balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = movements: credited/(charged) to profit or loss (note 9) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = movements: closing balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = deferred tax asset , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 73)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = movements: opening balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = movements: credited/(charged) to profit or loss (note 9) , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = movements: closing balance , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 40)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [438131.0, 583665.0], 'label': [' Deferred tax asset', ' Deferred tax asset'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' exploration and evaluation expenditure', 33), (' leased assets', 32), (' leases', 31), ('other assets', 30), (' other assets', 30), (' other non-current assets', 29), (' other non-current assets', 29), (' financial assets', 27), (' loan receivables', 20), ('non-current', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [(' exploration and evaluation expenditure', 33), (' leased assets', 32), (' leases', 31), ('other assets', 30), (' other assets', 30), (' other non-current assets', 29), (' other non-current assets', 29), (' financial assets', 27), (' loan receivables', 20), ('non-current', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('non-current assets total', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('non-current assets total', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [16], 'score': 100, 'value': 34704.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [34704.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [16], 'score': 100, 'value': 126367.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [126367.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [(' leases', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' loans from related party', 45), (' utilised – bank borrowings', 36), (' not later than 1 year', 36), (' secured long-term bank loans', 36), ('bank borrowings', 27), (' balance at the end of period', 27), (' bank overdraft', 18), ('current', 0), (' current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term liability , res_fuzz_match = [(' lease liabilities', 73), (' leases', 50), (' lease liabilities - current', 47), (' secured long-term bank loans', 43), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 38), ('bank borrowings', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), ('current', 29), (' current', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [(' leases', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' loans from related party', 45), (' utilised – bank borrowings', 36), (' not later than 1 year', 36), (' secured long-term bank loans', 36), ('bank borrowings', 27), (' balance at the end of period', 27), (' bank overdraft', 18), ('current', 0), (' current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total long term liability , res_fuzz_match = [(' lease liabilities', 73), (' secured long-term bank loans', 55), (' leases', 50), (' loans from related party', 48), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' balance at the end of period', 38), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liabilities - current', 67), (' leases', 50), (' not later than 1 year', 42), (' secured long-term bank loans', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), ('bank borrowings', 27), (' balance at the end of period', 25), (' bank overdraft', 17), ('current', 0), (' current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [(' leases', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' loans from related party', 45), (' utilised – bank borrowings', 36), (' not later than 1 year', 36), (' secured long-term bank loans', 36), ('bank borrowings', 27), (' balance at the end of period', 27), (' bank overdraft', 18), ('current', 0), (' current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term liability , res_fuzz_match = [(' lease liabilities', 73), (' leases', 50), (' lease liabilities - current', 47), (' secured long-term bank loans', 43), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 38), ('bank borrowings', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), ('current', 29), (' current', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [(' leases', 100), (' lease liabilities - current', 100), (' lease liabilities', 100), (' loans from related party', 45), (' utilised – bank borrowings', 36), (' not later than 1 year', 36), (' secured long-term bank loans', 36), ('bank borrowings', 27), (' balance at the end of period', 27), (' bank overdraft', 18), ('current', 0), (' current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total long term liability , res_fuzz_match = [(' lease liabilities', 73), (' secured long-term bank loans', 55), (' leases', 50), (' loans from related party', 48), (' not later than 1 year', 47), (' lease liabilities - current', 47), (' balance at the end of period', 38), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liabilities - current', 67), (' leases', 50), (' not later than 1 year', 42), (' secured long-term bank loans', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), ('bank borrowings', 27), (' balance at the end of period', 25), (' bank overdraft', 17), ('current', 0), (' current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [126367.0, 0.0, 34704.0, 129468.0], 'label': [' Lease liability', ' Lease liability', ' Lease liability', ' Lease liability'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other financial liabilities', 57), ('other current liabilities', 57), ('current maturities', 36), ('current maturities of long-term debt', 33), ('current maturities of longterm debt', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other financial liabilities', 57), ('other current liabilities', 57), ('current maturities', 36), ('current maturities of long-term debt', 33), ('current maturities of longterm debt', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 55), ('other trade payables', 42), ('small enterprises', 40), ('trade and other payables', 38), ('micro enterprises', 33), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('trade payable', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 9681946.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [9681946.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 55), ('other trade payables', 42), ('small enterprises', 40), ('trade and other payables', 38), ('micro enterprises', 33), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('trade payable', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 6502666.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [6502666.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 67), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' trade payables - related parties', 54), (' related party payables', 50), (' trade payables - other parties', 50), (' amounts payable to controlling entity', 50), (' other trade payables', 44), ('current', 43), ('trade creditors', 43), (' trade and other payables', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = payable to shimano oceania holdings , res_fuzz_match = [(' amounts payable to controlling entity', 54), ('current', 43), (' trade payables', 42), (' trade payables - related parties', 42), (' trade payables - other parties', 42), (' trade payables', 42), (' trade and other payables', 41), ('trade creditors', 36), (' related party payables', 33), (' other trade payables', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts due to related party , res_fuzz_match = [(' trade payables - related parties', 68), (' related party payables', 63), (' trade payables - other parties', 55), ('trade creditors', 50), (' amounts payable to controlling entity', 50), (' other trade payables', 50), ('current', 43), (' trade and other payables', 42), (' trade payables', 42), (' trade payables', 42)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gst payable , res_fuzz_match = [(' related party payables', 80), (' amounts payable to controlling entity', 80), (' trade and other payables', 70), (' trade payables', 70), (' trade payables - related parties', 70), (' trade payables - other parties', 70), (' trade payables', 70), (' other trade payables', 70), ('trade creditors', 10), ('current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = other payables , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables - related parties', 75), (' trade payables', 75), (' amounts payable to controlling entity', 75), (' other trade payables', 75), (' trade payables - other parties', 70), (' related party payables', 67), ('trade creditors', 17), ('current', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 67), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' trade payables - related parties', 54), (' related party payables', 50), (' trade payables - other parties', 50), (' amounts payable to controlling entity', 50), (' other trade payables', 44), ('current', 43), ('trade creditors', 43), (' trade and other payables', 41)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = payable to shimano oceania holdings , res_fuzz_match = [(' amounts payable to controlling entity', 54), ('current', 43), (' trade payables', 42), (' trade payables - related parties', 42), (' trade payables - other parties', 42), (' trade payables', 42), (' trade and other payables', 41), ('trade creditors', 36), (' related party payables', 33), (' other trade payables', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts due to related party , res_fuzz_match = [(' trade payables - related parties', 68), (' related party payables', 63), (' trade payables - other parties', 55), ('trade creditors', 50), (' amounts payable to controlling entity', 50), (' other trade payables', 50), ('current', 43), (' trade and other payables', 42), (' trade payables', 42), (' trade payables', 42)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gst payable , res_fuzz_match = [(' related party payables', 80), (' amounts payable to controlling entity', 80), (' trade and other payables', 70), (' trade payables', 70), (' trade payables - related parties', 70), (' trade payables - other parties', 70), (' trade payables', 70), (' other trade payables', 70), ('trade creditors', 10), ('current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = other payables , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables - related parties', 75), (' trade payables', 75), (' amounts payable to controlling entity', 75), (' other trade payables', 75), (' trade payables - other parties', 70), (' related party payables', 67), ('trade creditors', 17), ('current', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 5, 7, 11, 12], 'score': [100, 80, 100, 100, 80, 100], 'value': [893433.0, 485017.0, 244827.0, 1674589.0, 583149.0, 271859.0], 'label': [' Trade payables', ' GST payable', ' Other payables', ' Trade payables', ' GST payable', ' Other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14], 'score': 100, 'value': 9681946.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 9681946.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 38)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14], 'score': 100, 'value': 6502666.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 6502666.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = payable to shimano oceania holdings , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts due to related party , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gst payable , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = other payables , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = payable to shimano oceania holdings , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts due to related party , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gst payable , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = other payables , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 8], 'score': [100, 100], 'value': [684912.0, 666309.0], 'label': [' Sundry payables and accrued expenses', ' Sundry payables and accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14, 17], 'score': 100, 'value': 10360492.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '16', '20'], 'line_item_value': [0.0, 9681946.0, 678546.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 14, 17], 'score': 100, 'value': 7250312.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '16', '20'], 'line_item_value': [0.0, 6502666.0, 747646.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 75), (' gst payables', 70), (' gst payable and accruals', 67), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' employee benefits - payroll', 50), (' other related parties', 43), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' rebates', 40), (' ultimate parent entity', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' other', 20), (' provisions - current', 17), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' gst payable and accruals', 77), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 50), ('other creditors and accruals', 46), ('current', 43), (' current - liability for annual and long service leave', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 39), (' loans from related party', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' total current employee benefits', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' other', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = payable to shimano oceania holdings , res_fuzz_match = [(' gst payable and accruals', 55), (' loan payable to relayed party under tax funding agreement', 48), (' ultimate parent entity', 47), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' other', 40), (' loans from related party', 38), (' share of joint venture payables', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' gst', 33), ('other creditors and accruals', 32), (' arising from service contracts', 32), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' rebates', 20), (' restructuring', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts due to related party , res_fuzz_match = [(' other related parties', 82), (' rebates', 80), (' loans from related party', 71), (' loan payable to relayed party under tax funding agreement', 64), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' ultimate parent entity', 49), (' employee benefits - payroll', 47), (' share of joint venture payables', 45), ('current', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' contract liabilites - current', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 39), (' abandonment and decommissioning costs', 37), ('other creditors and accruals', 36), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' gst payable and accruals', 34), (' gst', 33), (' arising from service contracts', 32), (' provision for associate funding', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gst payable , res_fuzz_match = [(' gst payable and accruals', 100), (' gst payables', 100), (' gst', 100), (' share of joint venture payables', 80), (' loan payable to relayed party under tax funding agreement', 70), (' gst liabilities', 70), (' employee benefits - payroll', 60), (' current - liability for annual and long service leave', 50), (' contract liabilites - current', 50), (' other related parties', 42), (' loans from related party', 42), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' total current employee benefits', 40), (' provision for associate funding', 30), (' make good provisions', 30), (' forward exchange contracts', 30), (' warranty', 25), (' employee benefits - current', 20), (' provisions - current', 20), (' abandonment and decommissioning costs', 20), (' arising from service contracts', 20), (' rebates', 20), (' restructuring', 20), (' other', 20), (' other creditors', 10), (' other creditors', 10), (' other creditors', 10), ('current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = other payables , res_fuzz_match = [(' other', 100), (' share of joint venture payables', 75), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 67), (' gst payable and accruals', 67), (' other related parties', 58), ('other creditors and accruals', 50), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' current - liability for annual and long service leave', 50), (' contract liabilites - current', 50), (' employee benefits - payroll', 50), (' other creditors', 50), (' derivative contracts - at fair value', 42), (' loans from related party', 42), (' gst liabilities', 42), (' total current employee benefits', 42), (' rebates', 40), (' ultimate parent entity', 33), (' employee benefits - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' warranty', 25), (' restructuring', 20), (' provisions - current', 17), ('current', 14), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 75), (' gst payables', 70), (' gst payable and accruals', 67), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' employee benefits - payroll', 50), (' other related parties', 43), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' rebates', 40), (' ultimate parent entity', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' other', 20), (' provisions - current', 17), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' gst payable and accruals', 77), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 50), ('other creditors and accruals', 46), ('current', 43), (' current - liability for annual and long service leave', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 39), (' loans from related party', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' total current employee benefits', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' other', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = payable to shimano oceania holdings , res_fuzz_match = [(' gst payable and accruals', 55), (' loan payable to relayed party under tax funding agreement', 48), (' ultimate parent entity', 47), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' employee benefits - payroll', 41), (' other', 40), (' loans from related party', 38), (' share of joint venture payables', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' gst', 33), ('other creditors and accruals', 32), (' arising from service contracts', 32), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' rebates', 20), (' restructuring', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = amounts due to related party , res_fuzz_match = [(' other related parties', 82), (' rebates', 80), (' loans from related party', 71), (' loan payable to relayed party under tax funding agreement', 64), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' warranty', 50), (' ultimate parent entity', 49), (' employee benefits - payroll', 47), (' share of joint venture payables', 45), ('current', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' contract liabilites - current', 41), (' total current employee benefits', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 39), (' abandonment and decommissioning costs', 37), ('other creditors and accruals', 36), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' gst payable and accruals', 34), (' gst', 33), (' arising from service contracts', 32), (' provision for associate funding', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = gst payable , res_fuzz_match = [(' gst payable and accruals', 100), (' gst payables', 100), (' gst', 100), (' share of joint venture payables', 80), (' loan payable to relayed party under tax funding agreement', 70), (' gst liabilities', 70), (' employee benefits - payroll', 60), (' current - liability for annual and long service leave', 50), (' contract liabilites - current', 50), (' other related parties', 42), (' loans from related party', 42), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' total current employee benefits', 40), (' provision for associate funding', 30), (' make good provisions', 30), (' forward exchange contracts', 30), (' warranty', 25), (' employee benefits - current', 20), (' provisions - current', 20), (' abandonment and decommissioning costs', 20), (' arising from service contracts', 20), (' rebates', 20), (' restructuring', 20), (' other', 20), (' other creditors', 10), (' other creditors', 10), (' other creditors', 10), ('current', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = other payables , res_fuzz_match = [(' other', 100), (' share of joint venture payables', 75), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 67), (' gst payable and accruals', 67), (' other related parties', 58), ('other creditors and accruals', 50), (' other creditors', 50), (' secured long-term bank loans', 50), (' other creditors', 50), (' current - liability for annual and long service leave', 50), (' contract liabilites - current', 50), (' employee benefits - payroll', 50), (' other creditors', 50), (' derivative contracts - at fair value', 42), (' loans from related party', 42), (' gst liabilities', 42), (' total current employee benefits', 42), (' rebates', 40), (' ultimate parent entity', 33), (' employee benefits - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' warranty', 25), (' restructuring', 20), (' provisions - current', 17), ('current', 14), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 10, 11, 12], 'score': [82, 100, 100, 82, 100, 100], 'value': [4194477.0, 485017.0, 244827.0, 6448338.0, 583149.0, 271859.0], 'label': [' Amounts due to related party', ' GST payable', ' Other payables', ' Amounts due to related party', ' GST payable', ' Other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 73), (' loan payable to relayed party under tax funding agreement', 55), ('other creditors and accruals', 45), (' secured long-term bank loans', 45), (' gst payable and accruals', 45), (' contract liabilites - current', 45), (' abandonment and decommissioning costs', 45), (' rebates', 40), (' ultimate parent entity', 36), (' derivative contracts - at fair value', 36), (' loans from related party', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), (' total current employee benefits', 36), (' gst liabilities', 30), ('current', 29), (' other related parties', 27), (' employee benefits - payroll', 27), (' arising from service contracts', 27), (' warranty', 25), (' gst payables', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' employee benefits - current', 18), (' provisions - current', 18), (' provision for associate funding', 18), (' make good provisions', 18), (' other creditors', 18), (' restructuring', 10), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = long service leave , res_fuzz_match = [(' current - liability for annual and long service leave', 100), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 50), (' derivative contracts - at fair value', 44), (' loan payable to relayed party under tax funding agreement', 44), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' employee benefits - payroll', 44), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), ('other creditors and accruals', 31), (' ultimate parent entity', 31), (' other related parties', 31), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' forward exchange contracts', 31), (' total current employee benefits', 31), (' restructuring', 30), ('current', 29), (' warranty', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term employee benefits , res_fuzz_match = [(' employee benefits - payroll', 81), (' total current employee benefits', 72), (' employee benefits - current', 65), (' other', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' ultimate parent entity', 49), (' other related parties', 47), (' secured long-term bank loans', 46), (' share of joint venture payables', 44), ('current', 43), (' loans from related party', 43), (' provisions - current', 43), (' gst payables', 40), (' rebates', 40), (' restructuring', 40), (' loan payable to relayed party under tax funding agreement', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 36), (' arising from service contracts', 36), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' gst liabilities', 30), (' gst payable and accruals', 27), (' abandonment and decommissioning costs', 27), (' warranty', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current long service leave , res_fuzz_match = [(' current - liability for annual and long service leave', 75), (' gst', 67), (' secured long-term bank loans', 58), ('current', 57), (' arising from service contracts', 50), (' total current employee benefits', 46), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' share of joint venture payables', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 34), ('other creditors and accruals', 33), (' contract liabilites - current', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' gst payable and accruals', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 73), (' loan payable to relayed party under tax funding agreement', 55), ('other creditors and accruals', 45), (' secured long-term bank loans', 45), (' gst payable and accruals', 45), (' contract liabilites - current', 45), (' abandonment and decommissioning costs', 45), (' rebates', 40), (' ultimate parent entity', 36), (' derivative contracts - at fair value', 36), (' loans from related party', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), (' total current employee benefits', 36), (' gst liabilities', 30), ('current', 29), (' other related parties', 27), (' employee benefits - payroll', 27), (' arising from service contracts', 27), (' warranty', 25), (' gst payables', 20), (' other', 20), (' other creditors', 18), (' other creditors', 18), (' employee benefits - current', 18), (' provisions - current', 18), (' provision for associate funding', 18), (' make good provisions', 18), (' other creditors', 18), (' restructuring', 10), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = long service leave , res_fuzz_match = [(' current - liability for annual and long service leave', 100), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 50), (' derivative contracts - at fair value', 44), (' loan payable to relayed party under tax funding agreement', 44), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' employee benefits - payroll', 44), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), ('other creditors and accruals', 31), (' ultimate parent entity', 31), (' other related parties', 31), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' forward exchange contracts', 31), (' total current employee benefits', 31), (' restructuring', 30), ('current', 29), (' warranty', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term employee benefits , res_fuzz_match = [(' employee benefits - payroll', 81), (' total current employee benefits', 72), (' employee benefits - current', 65), (' other', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' ultimate parent entity', 49), (' other related parties', 47), (' secured long-term bank loans', 46), (' share of joint venture payables', 44), ('current', 43), (' loans from related party', 43), (' provisions - current', 43), (' gst payables', 40), (' rebates', 40), (' restructuring', 40), (' loan payable to relayed party under tax funding agreement', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 36), (' arising from service contracts', 36), ('other creditors and accruals', 35), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' make good provisions', 31), (' gst liabilities', 30), (' gst payable and accruals', 27), (' abandonment and decommissioning costs', 27), (' warranty', 25)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current long service leave , res_fuzz_match = [(' current - liability for annual and long service leave', 75), (' gst', 67), (' secured long-term bank loans', 58), ('current', 57), (' arising from service contracts', 50), (' total current employee benefits', 46), (' other related parties', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' share of joint venture payables', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 34), ('other creditors and accruals', 33), (' contract liabilites - current', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' employee benefits - current', 30), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' gst payable and accruals', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 6, 7], 'score': [100, 81, 100, 81], 'value': [354006.0, 747646.0, 302933.0, 678546.0], 'label': [' Long service leave', ' Total short term employee benefits', ' Long service leave', ' Total short term employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 129468.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [129468.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' bank loan', 44), (' secured finance debt', 36), ('later than 1 year', 36), ('not later than 5 years', 36), (' non current', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('leases', 50), (' lease liabilities - non-current', 47), ('not later than 5 years', 42), (' secured finance debt', 41), ('later than 1 year', 40), (' non current', 36), (' bank loan', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' bank loan', 44), (' secured finance debt', 36), ('later than 1 year', 36), ('not later than 5 years', 36), (' non current', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total long term liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), (' bank loan', 56), ('leases', 50), (' lease liabilities - non-current', 47), ('not later than 5 years', 47), ('later than 1 year', 40), (' non current', 36), (' secured finance debt', 35)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), (' lease liabilities - non-current', 67), ('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), (' secured finance debt', 33), ('later than 1 year', 33), (' non current', 18)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' bank loan', 44), (' secured finance debt', 36), ('later than 1 year', 36), ('not later than 5 years', 36), (' non current', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('leases', 50), (' lease liabilities - non-current', 47), ('not later than 5 years', 42), (' secured finance debt', 41), ('later than 1 year', 40), (' non current', 36), (' bank loan', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('leases', 100), (' lease liabilities', 100), (' lease liability', 100), (' lease liabilities - non-current', 100), (' bank loan', 44), (' secured finance debt', 36), ('later than 1 year', 36), ('not later than 5 years', 36), (' non current', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total long term liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), (' bank loan', 56), ('leases', 50), (' lease liabilities - non-current', 47), ('not later than 5 years', 47), ('later than 1 year', 40), (' non current', 36), (' secured finance debt', 35)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), (' lease liabilities - non-current', 67), ('leases', 50), (' bank loan', 44), ('not later than 5 years', 42), (' secured finance debt', 33), ('later than 1 year', 33), (' non current', 18)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [126367.0, 0.0, 34704.0, 129468.0], 'label': [' Lease liability', ' Lease liability', ' Lease liability', ' Lease liability'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 129468.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [129468.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 129468.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [129468.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['19'], 'line_item_value': [0.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('deferred tax liabilities', 73), ('total deferred tax (assets) / liabilities', 73)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term liability , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 52)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('deferred tax liabilities', 73), ('total deferred tax (assets) / liabilities', 73)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total long term liability , res_fuzz_match = [('deferred tax liabilities', 56), ('total deferred tax (assets) / liabilities', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total liability , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('deferred tax liabilities', 73), ('total deferred tax (assets) / liabilities', 73)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term liability , res_fuzz_match = [('deferred tax liabilities', 62), ('total deferred tax (assets) / liabilities', 52)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = lease liability , res_fuzz_match = [('deferred tax liabilities', 73), ('total deferred tax (assets) / liabilities', 73)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total long term liability , res_fuzz_match = [('deferred tax liabilities', 56), ('total deferred tax (assets) / liabilities', 50)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total liability , res_fuzz_match = [('deferred tax liabilities', 75), ('total deferred tax (assets) / liabilities', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 21], 'score': 100, 'value': 143352.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '20'], 'line_item_value': [0.0, 143352.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 21], 'score': 100, 'value': 161565.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '20'], 'line_item_value': [0.0, 161565.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' trade payables - related parties', 55), (' non-current - liability for long-service leave', 45), (' contract liabilites - non-current', 45), (' abandonment and decommissioning costs', 45), (' total non-current employee benefits', 45), ('non-current trade and other payables', 36), (' electricity derivatives at fair value through oci', 36), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' provisions - non-current', 27), (' employee benefits - payroll', 27), (' provision for associate funding', 18), (' make good provisions', 18)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 94), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' contract liabilites - non-current', 44), (' employee benefits - payroll', 44), ('non-current trade and other payables', 38), (' employee benefits - non current', 38), (' total non-current employee benefits', 38), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' trade payables - related parties', 31), (' provisions - non-current', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term employee benefits , res_fuzz_match = [(' employee benefits - payroll', 81), (' total non-current employee benefits', 76), (' employee benefits - non current', 56), ('non-current trade and other payables', 40), (' non-current - liability for long-service leave', 38), (' provisions - non-current', 36), (' derivative contracts - at fair value', 33), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' provision for associate funding', 32), (' electricity derivatives at fair value through oci', 31), (' make good provisions', 31), (' abandonment and decommissioning costs', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 77), (' total non-current employee benefits', 55), ('non-current trade and other payables', 54), (' derivative contracts - at fair value', 39), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' employee benefits - payroll', 34), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' provision for associate funding', 32), (' trade payables - related parties', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = annual leave , res_fuzz_match = [(' trade payables - related parties', 55), (' non-current - liability for long-service leave', 45), (' contract liabilites - non-current', 45), (' abandonment and decommissioning costs', 45), (' total non-current employee benefits', 45), ('non-current trade and other payables', 36), (' electricity derivatives at fair value through oci', 36), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' provisions - non-current', 27), (' employee benefits - payroll', 27), (' provision for associate funding', 18), (' make good provisions', 18)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 94), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' contract liabilites - non-current', 44), (' employee benefits - payroll', 44), ('non-current trade and other payables', 38), (' employee benefits - non current', 38), (' total non-current employee benefits', 38), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' trade payables - related parties', 31), (' provisions - non-current', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = total short term employee benefits , res_fuzz_match = [(' employee benefits - payroll', 81), (' total non-current employee benefits', 76), (' employee benefits - non current', 56), ('non-current trade and other payables', 40), (' non-current - liability for long-service leave', 38), (' provisions - non-current', 36), (' derivative contracts - at fair value', 33), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' provision for associate funding', 32), (' electricity derivatives at fair value through oci', 31), (' make good provisions', 31), (' abandonment and decommissioning costs', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows = non-current long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 77), (' total non-current employee benefits', 55), ('non-current trade and other payables', 54), (' derivative contracts - at fair value', 39), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' provisions - non-current', 36), (' employee benefits - payroll', 34), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' provision for associate funding', 32), (' trade payables - related parties', 29)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 6, 7, 8], 'score': [94, 81, 100, 94, 81, 100], 'value': [354006.0, 747646.0, 0.0, 302933.0, 678546.0, 0.0], 'label': [' Long service leave', ' Total short term employee benefits', 'Non-current ', ' Long service leave', ' Total short term employee benefits', 'Non-current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 28731654.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [28731654.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 32458949.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [32458949.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [27], 'score': 100, 'value': 25501.0, 'line_item_label': ['Reserves'], 'note_numbers': ['22'], 'line_item_value': [25501.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [27], 'score': 100, 'value': 25501.0, 'line_item_label': ['Reserves'], 'note_numbers': ['22'], 'line_item_value': [25501.0]}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:03+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:03+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-24 17:24:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 230591.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['14'], 'line_item_value': [230591.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = deferred tax , res_fuzz_match = [('plant property equipment', 28), ('property plant equipment', 28)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 367806.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['14'], 'line_item_value': [367806.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('gross', 100), ('cost', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('gross', 100), ('cost', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 13, 14, 15, 16, 22, 23, 24, 25, 35, 36, 37, 38, 44, 45, 46, 47, 57, 58, 59, 60, 66, 67, 68, 69, 79, 80, 81, 82, 88, 89, 90, 91, 101, 102, 103, 104], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [427214.0, 42711.0, 0.0, 469925.0, 469925.0, 26490.0, 0.0, 496415.0, 20427.0, 0.0, 0.0, 20427.0, 20427.0, 0.0, 0.0, 20427.0, 742580.0, 39417.0, -176234.0, 605763.0, 605763.0, 240538.0, -297795.0, 548506.0, 95153.0, 0.0, 0.0, 95153.0, 95153.0, 0.0, -58471.0, 36682.0, 1285374.0, 82128.0, -176234.0, 1191268.0, 1191268.0, 267028.0, -356266.0, 1102030.0], 'label': ['Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022', 'Gross carrying amount Balance 1 January 2021', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2021', 'Gross carrying amount Balance 1 January 2022', 'Gross carrying amount Additions', 'Gross carrying amount Disposals', 'Gross carrying amount Balance 31 December 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, office equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, fixtures and fittings $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, motor vehicles $ , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat equipment $ , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2021 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2021 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2021 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 47), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 1 january 2022 , res_fuzz_match = [('net value', 62), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount additions , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount disposals , res_fuzz_match = [('accumulated depreciation', 41), ('net value', 38), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = gross carrying amount balance 31 december 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 1 january 2022 , res_fuzz_match = [('depreciatio', 73), ('net value', 50), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment disposals , res_fuzz_match = [('depreciatio', 73), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment depreciation , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 60), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment balance 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 41), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = depreciation and impairment carrying amount 31 december 2022 , res_fuzz_match = [('depreciatio', 73), ('accumulated depreciation', 48), ('net value', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = furniture, boat and boat total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 10151555.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [10151555.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 9952863.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [9952863.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term 30 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term 31-60 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term 61-90 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term >90 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term past due and impaired , res_fuzz_match = [(' net trade debtors', 69), ('trade receivables', 58), (' related party receivables', 50), ('current', 43), (' other debtors', 42), (' share of joint venture receivables', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term total commitment , res_fuzz_match = [(' net trade debtors', 69), ('trade receivables', 58), (' other debtors', 50), (' share of joint venture receivables', 40), (' related party receivables', 39), ('current', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term net commitment recognised as assets , res_fuzz_match = [(' net trade debtors', 69), ('trade receivables', 58), (' other debtors', 58), (' related party receivables', 50), (' share of joint venture receivables', 44), ('current', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term 30 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term 31-60 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term 61-90 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term >90 , res_fuzz_match = [(' net trade debtors', 71), ('trade receivables', 58), (' other debtors', 50), ('current', 43), (' share of joint venture receivables', 43), (' related party receivables', 39)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term past due and impaired , res_fuzz_match = [(' net trade debtors', 69), ('trade receivables', 58), (' related party receivables', 50), ('current', 43), (' other debtors', 42), (' share of joint venture receivables', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term total commitment , res_fuzz_match = [(' net trade debtors', 69), ('trade receivables', 58), (' other debtors', 50), (' share of joint venture receivables', 40), (' related party receivables', 39), ('current', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = within initial trade term net commitment recognised as assets , res_fuzz_match = [(' net trade debtors', 69), ('trade receivables', 58), (' other debtors', 58), (' related party receivables', 50), (' share of joint venture receivables', 44), ('current', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 75), (' related party receivables', 67), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = amounts receivable from related party , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 61), (' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' other debtors', 42)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = receivable from other affiliates , res_fuzz_match = [('trade receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 38), (' net trade debtors', 38), (' related party receivables', 33), ('current', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = allowance for expected credit losses , res_fuzz_match = [('current', 57), (' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 75), (' related party receivables', 67), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = amounts receivable from related party , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 61), (' net trade debtors', 50), (' share of joint venture receivables', 44), ('current', 43), (' other debtors', 42)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = receivable from other affiliates , res_fuzz_match = [('trade receivables', 50), (' other debtors', 50), (' share of joint venture receivables', 38), (' net trade debtors', 38), (' related party receivables', 33), ('current', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = allowance for expected credit losses , res_fuzz_match = [('current', 57), (' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5], 'score': [100, 100], 'value': [9776186.0, 10208748.0], 'label': [' Trade receivables', ' Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('transmission and distribution business', 49), ('sale of products', 29), (' Revenue', 27), ('from trading business', 25), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Sales revenue', 20), ('revenue from operations', 16), ('net sales', 12), (' Sale of coal', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' Revenue', 33), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 27), (' Sale of coal', 27), (' Sales revenue', 24), ('sale of products', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('transmission and distribution business', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('revenue from operations', 19), (' Revenue', 18), (' Sale of coal', 14), (' Sales revenue', 12), ('from trading business', 10), ('transmission and distribution business', 6), ('net sales', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('transmission and distribution business', 38), ('from trading business', 25), ('net sales', 24), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Sale of coal', 22), (' Sales revenue', 20), ('sale of products', 19), ('revenue from operations', 16), (' Revenue', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('from trading business', 41), ('revenue from operations', 36), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 23), ('net sales', 22), (' Sale of coal', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 28), ('from trading business', 26), ('revenue from operations', 22), ('sale of products', 17), (' Sales revenue', 16), ('net sales', 14), (' Sale of coal', 14), (' Revenue', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 28), ('from trading business', 26), ('revenue from operations', 22), ('sale of products', 17), (' Sales revenue', 16), ('net sales', 14), (' Sale of coal', 14), (' Revenue', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('revenue from operations', 37), ('sale of products', 29), ('transmission and distribution business', 28), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 19), (' Revenue', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 28), ('from trading business', 28), ('revenue from operations', 22), ('sale of products', 21), (' Sales revenue', 19), ('net sales', 17), (' Sale of coal', 17), (' Revenue', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 28), ('from trading business', 28), ('revenue from operations', 22), ('sale of products', 21), (' Sales revenue', 19), ('net sales', 17), (' Sale of coal', 17), (' Revenue', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 62256411.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [62256411.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('transmission and distribution business', 49), ('sale of products', 29), (' Revenue', 27), ('from trading business', 25), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Sales revenue', 20), ('revenue from operations', 16), ('net sales', 12), (' Sale of coal', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' Revenue', 33), ('net sales', 29), ('from trading business', 29), ('revenue from operations', 27), (' Sale of coal', 27), (' Sales revenue', 24), ('sale of products', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('transmission and distribution business', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('revenue from operations', 19), (' Revenue', 18), (' Sale of coal', 14), (' Sales revenue', 12), ('from trading business', 10), ('transmission and distribution business', 6), ('net sales', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('transmission and distribution business', 38), ('from trading business', 25), ('net sales', 24), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Sale of coal', 22), (' Sales revenue', 20), ('sale of products', 19), ('revenue from operations', 16), (' Revenue', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('from trading business', 41), ('revenue from operations', 36), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 23), ('net sales', 22), (' Sale of coal', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 28), ('from trading business', 26), ('revenue from operations', 22), ('sale of products', 17), (' Sales revenue', 16), ('net sales', 14), (' Sale of coal', 14), (' Revenue', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 28), ('from trading business', 26), ('revenue from operations', 22), ('sale of products', 17), (' Sales revenue', 16), ('net sales', 14), (' Sale of coal', 14), (' Revenue', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('revenue from operations', 37), ('sale of products', 29), ('transmission and distribution business', 28), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 19), (' Revenue', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 28), ('from trading business', 28), ('revenue from operations', 22), ('sale of products', 21), (' Sales revenue', 19), ('net sales', 17), (' Sale of coal', 17), (' Revenue', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 28), ('from trading business', 28), ('revenue from operations', 22), ('sale of products', 21), (' Sales revenue', 19), ('net sales', 17), (' Sale of coal', 17), (' Revenue', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 60989750.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [60989750.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 100), (' Sale of goods - Motorcycles', 100), (' Sale of goods - Marine', 100), (' Sale of goods - Spareparts', 100), (' LNG', 33), (' Feed gas income', 33), (' Total Revenue', 33), (' Goods sold to customer from warehouse', 33), (' Goods sold to customer direct from supplier', 33), (' Condensate', 29), (' Gas transportation income', 22), (' Domgas', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: goods recognised at a point in time , res_fuzz_match = [('Sale of goods', 67), (' Total Revenue', 67), (' Sale of goods - Cars', 62), (' Domgas', 60), (' Condensate', 57), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Spareparts', 47), (' Goods sold to customer direct from supplier', 41), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' LNG', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Total Revenue', 67), (' Domgas', 60), (' Condensate', 43), (' Sale of goods - Spareparts', 42), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 33), (' Goods sold to customer from warehouse', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Cars', 31), (' Sale of goods - Marine', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Total Revenue', 67), (' Domgas', 60), (' Condensate', 43), (' Sale of goods - Spareparts', 42), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 33), (' Goods sold to customer from warehouse', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Cars', 31), (' Sale of goods - Marine', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [(' Feed gas income', 54), (' Gas transportation income', 44), (' Goods sold to customer direct from supplier', 44), (' Condensate', 43), (' Total Revenue', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Cars', 31)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income gain on sale of assets , res_fuzz_match = [(' Domgas', 80), ('Sale of goods', 56), (' Feed gas income', 54), (' Sale of goods - Marine', 47), (' Sale of goods - Cars', 46), (' Sale of goods - Spareparts', 42), (' Gas transportation income', 39), (' Goods sold to customer from warehouse', 38), (' Goods sold to customer direct from supplier', 37), (' LNG', 33), (' Total Revenue', 33), (' Sale of goods - Motorcycles', 32), (' Condensate', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Gas transportation income', 56), (' Feed gas income', 54), (' Goods sold to customer direct from supplier', 43), (' Sale of goods - Motorcycles', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 39), ('Sale of goods', 33), (' LNG', 33), (' Total Revenue', 33), (' Sale of goods - Spareparts', 32), (' Sale of goods - Cars', 31), (' Condensate', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 100), (' Sale of goods - Motorcycles', 100), (' Sale of goods - Marine', 100), (' Sale of goods - Spareparts', 100), (' LNG', 33), (' Feed gas income', 33), (' Total Revenue', 33), (' Goods sold to customer from warehouse', 33), (' Goods sold to customer direct from supplier', 33), (' Condensate', 29), (' Gas transportation income', 22), (' Domgas', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: goods recognised at a point in time , res_fuzz_match = [('Sale of goods', 67), (' Total Revenue', 67), (' Sale of goods - Cars', 62), (' Domgas', 60), (' Condensate', 57), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Spareparts', 47), (' Goods sold to customer direct from supplier', 41), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' LNG', 33)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Total Revenue', 67), (' Domgas', 60), (' Condensate', 43), (' Sale of goods - Spareparts', 42), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 33), (' Goods sold to customer from warehouse', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Cars', 31), (' Sale of goods - Marine', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Total Revenue', 67), (' Domgas', 60), (' Condensate', 43), (' Sale of goods - Spareparts', 42), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 33), (' Goods sold to customer from warehouse', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Cars', 31), (' Sale of goods - Marine', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [(' Feed gas income', 54), (' Gas transportation income', 44), (' Goods sold to customer direct from supplier', 44), (' Condensate', 43), (' Total Revenue', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Cars', 31)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income gain on sale of assets , res_fuzz_match = [(' Domgas', 80), ('Sale of goods', 56), (' Feed gas income', 54), (' Sale of goods - Marine', 47), (' Sale of goods - Cars', 46), (' Sale of goods - Spareparts', 42), (' Gas transportation income', 39), (' Goods sold to customer from warehouse', 38), (' Goods sold to customer direct from supplier', 37), (' LNG', 33), (' Total Revenue', 33), (' Sale of goods - Motorcycles', 32), (' Condensate', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Gas transportation income', 56), (' Feed gas income', 54), (' Goods sold to customer direct from supplier', 43), (' Sale of goods - Motorcycles', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 39), ('Sale of goods', 33), (' LNG', 33), (' Total Revenue', 33), (' Sale of goods - Spareparts', 32), (' Sale of goods - Cars', 31), (' Condensate', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 7, 12], 'score': [100, 80, 100, 80], 'value': [60989750.0, 131272.0, 62256411.0, 57410.0], 'label': [' Sale of goods', 'Other income Gain on sale of assets', ' Sale of goods', 'Other income Gain on sale of assets'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('expenditure', 42), ('total expenditure', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), (' Personnel costs', 26), ('cost of sales', 22), ('Cost of sales', 22), (' cost of coal sold', 17), ('expense', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 25), ('purchase of stock-in-trade', 24), ('total expenses', 22), (' cost of coal sold', 20), (' Personnel costs', 20), ('total expenditure', 18), ('expense', 17), (' Cost of product sold', 17), (' Cost of inventory sold', 16), (' Cost of goods and services sold', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' cost of coal sold', 21), (' Personnel costs', 21), ('expense', 18), (' Cost of product sold', 18), ('purchase of stock-in-trade', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expenditure', 13), (' Cost of goods and services sold', 13), ('total expenses', 12), ('total expenditure', 10), (' Cost of inventory sold', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('expenditure', 42), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('total expenses', 29), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), ('expense', 27), (' cost of coal sold', 26), (' Personnel costs', 26), (' Cost of product sold', 23), ('cost of sales', 22), ('Cost of sales', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 44), (' Cost of inventory sold', 38), ('expenditure', 36), (' Cost of product sold', 35), ('expense', 34), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 26), ('total expenditure', 24), ('purchase of stock-in-trade', 22), (' Cost of inventory sold', 22), ('total expenses', 21), (' Cost of product sold', 20), (' Personnel costs', 19), ('expenditure', 18), (' cost of coal sold', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expense', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 26), ('total expenditure', 24), ('purchase of stock-in-trade', 22), (' Cost of inventory sold', 22), ('total expenses', 21), (' Cost of product sold', 20), (' Personnel costs', 19), ('expenditure', 18), (' cost of coal sold', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expense', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 35), (' Cost of inventory sold', 35), ('total expenditure', 34), ('total expenses', 33), (' Personnel costs', 32), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 23), ('expense', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 31), (' Cost of inventory sold', 27), ('purchase of stock-in-trade', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenses', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 15), ('expense', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 31), (' Cost of inventory sold', 27), ('purchase of stock-in-trade', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenses', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 15), ('expense', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': 100, 'value': -42051641.0, 'line_item_label': ['Cost of Sales', 'Expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-42051641.0, 0.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('expenditure', 42), ('total expenditure', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), (' Personnel costs', 26), ('cost of sales', 22), ('Cost of sales', 22), (' cost of coal sold', 17), ('expense', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 25), ('purchase of stock-in-trade', 24), ('total expenses', 22), (' cost of coal sold', 20), (' Personnel costs', 20), ('total expenditure', 18), ('expense', 17), (' Cost of product sold', 17), (' Cost of inventory sold', 16), (' Cost of goods and services sold', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' cost of coal sold', 21), (' Personnel costs', 21), ('expense', 18), (' Cost of product sold', 18), ('purchase of stock-in-trade', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expenditure', 13), (' Cost of goods and services sold', 13), ('total expenses', 12), ('total expenditure', 10), (' Cost of inventory sold', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('expenditure', 42), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('total expenses', 29), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), ('expense', 27), (' cost of coal sold', 26), (' Personnel costs', 26), (' Cost of product sold', 23), ('cost of sales', 22), ('Cost of sales', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 44), (' Cost of inventory sold', 38), ('expenditure', 36), (' Cost of product sold', 35), ('expense', 34), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 26), ('total expenditure', 24), ('purchase of stock-in-trade', 22), (' Cost of inventory sold', 22), ('total expenses', 21), (' Cost of product sold', 20), (' Personnel costs', 19), ('expenditure', 18), (' cost of coal sold', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expense', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 26), ('total expenditure', 24), ('purchase of stock-in-trade', 22), (' Cost of inventory sold', 22), ('total expenses', 21), (' Cost of product sold', 20), (' Personnel costs', 19), ('expenditure', 18), (' cost of coal sold', 17), ('cost of sales', 14), ('Cost of sales', 14), ('expense', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 35), (' Cost of inventory sold', 35), ('total expenditure', 34), ('total expenses', 33), (' Personnel costs', 32), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 23), ('expense', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 31), (' Cost of inventory sold', 27), ('purchase of stock-in-trade', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenses', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 15), ('expense', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Cost of goods and services sold', 31), (' Cost of inventory sold', 27), ('purchase of stock-in-trade', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenses', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 15), ('expense', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': 100, 'value': -42132190.0, 'line_item_label': ['Cost of Sales', 'Expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-42132190.0, 0.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('Distribution expenses', 72), (' Logistics and distribution', 62), (' Selling & distribution expenses', 60), (' Administrative expenses', 40), (' Administration expenses', 40), (' depreciation', 38), (' Administrative and other expenses', 34), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Sales and marketing', 25), (' Occupancy expenses', 19), (' Amortisation expenses', 17), (' Occupancy ', 14), (' Lease expenses', 10), (' Selling Expenses', 10), (' Management expenses', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' Marketing expenses', 63), (' Sales and marketing', 57), (' depreciation', 31), (' Amortisation expenses', 30), (' Advertising expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' Administrative and other expenses', 25), (' Logistics and distribution', 23), ('other expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 20), (' Depreciation expenses', 20), ('Distribution expenses', 18), (' Selling & distribution expenses', 15), (' Lease expenses', 12), (' Selling Expenses', 12), (' Occupancy expenses', 11), (' Occupancy ', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy ', 100), (' Occupancy expenses', 59), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Amortisation expenses', 21), ('Distribution expenses', 19), (' depreciation', 17), (' Selling & distribution expenses', 15), ('other expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Administrative expenses', 10), (' Administration expenses', 10), (' Advertising expenses', 10), (' Logistics and distribution', 8), (' Administrative and other expenses', 6), (' Sales and marketing', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Administrative expenses', 72), (' Administration expenses', 72), (' Administrative and other expenses', 51), (' Amortisation expenses', 43), (' Advertising expenses', 42), (' Logistics and distribution', 41), ('Distribution expenses', 40), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), (' Marketing expenses', 27), (' depreciation', 25), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Management expenses', 19), (' Occupancy ', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Marketing expenses', 48), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Depreciation expenses', 42), (' Depreciation expenses', 42), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Administrative and other expenses', 40), (' Lease expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Selling Expenses', 35), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 28), (' Occupancy ', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Amortisation expenses', 23), (' Other expenses', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Marketing expenses', 21), (' Management expenses', 21), (' Occupancy expenses', 19), (' Depreciation expenses', 19), (' Lease expenses', 19), (' Depreciation expenses', 19), (' Sales and marketing', 19), (' Selling Expenses', 17), (' depreciation', 10), (' Occupancy ', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Amortisation expenses', 23), (' Other expenses', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Marketing expenses', 21), (' Management expenses', 21), (' Occupancy expenses', 19), (' Depreciation expenses', 19), (' Lease expenses', 19), (' Depreciation expenses', 19), (' Sales and marketing', 19), (' Selling Expenses', 17), (' depreciation', 10), (' Occupancy ', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses', 41), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Selling & distribution expenses', 31), (' Marketing expenses', 29), (' Management expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Logistics and distribution', 25), (' Advertising expenses', 24), (' Selling Expenses', 22), (' depreciation', 16), (' Occupancy ', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), (' Sales and marketing', 24), ('Distribution expenses', 22), ('other expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Advertising expenses', 20), (' Amortisation expenses', 20), (' Management expenses', 19), (' Marketing expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Occupancy expenses', 16), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' depreciation', 11), (' Occupancy ', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), (' Sales and marketing', 24), ('Distribution expenses', 22), ('other expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Advertising expenses', 20), (' Amortisation expenses', 20), (' Management expenses', 19), (' Marketing expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Occupancy expenses', 16), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' depreciation', 11), (' Occupancy ', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 11], 'score': 100, 'value': -1719814.0, 'line_item_label': ['Other expenses', 'Selling expenses', 'Occupancy'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-1008539.0, -428080.0, -283195.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('Distribution expenses', 72), (' Logistics and distribution', 62), (' Selling & distribution expenses', 60), (' Administrative expenses', 40), (' Administration expenses', 40), (' depreciation', 38), (' Administrative and other expenses', 34), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Sales and marketing', 25), (' Occupancy expenses', 19), (' Amortisation expenses', 17), (' Occupancy ', 14), (' Lease expenses', 10), (' Selling Expenses', 10), (' Management expenses', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' Marketing expenses', 63), (' Sales and marketing', 57), (' depreciation', 31), (' Amortisation expenses', 30), (' Advertising expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' Administrative and other expenses', 25), (' Logistics and distribution', 23), ('other expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 20), (' Depreciation expenses', 20), ('Distribution expenses', 18), (' Selling & distribution expenses', 15), (' Lease expenses', 12), (' Selling Expenses', 12), (' Occupancy expenses', 11), (' Occupancy ', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy ', 100), (' Occupancy expenses', 59), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Amortisation expenses', 21), ('Distribution expenses', 19), (' depreciation', 17), (' Selling & distribution expenses', 15), ('other expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Selling Expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Marketing expenses', 11), (' Administrative expenses', 10), (' Administration expenses', 10), (' Advertising expenses', 10), (' Logistics and distribution', 8), (' Administrative and other expenses', 6), (' Sales and marketing', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Administrative expenses', 72), (' Administration expenses', 72), (' Administrative and other expenses', 51), (' Amortisation expenses', 43), (' Advertising expenses', 42), (' Logistics and distribution', 41), ('Distribution expenses', 40), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Depreciation expenses', 35), (' Depreciation expenses', 35), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), (' Marketing expenses', 27), (' depreciation', 25), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Management expenses', 19), (' Occupancy ', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Marketing expenses', 48), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Depreciation expenses', 42), (' Depreciation expenses', 42), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Administrative and other expenses', 40), (' Lease expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Selling Expenses', 35), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 28), (' Occupancy ', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Amortisation expenses', 23), (' Other expenses', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Marketing expenses', 21), (' Management expenses', 21), (' Occupancy expenses', 19), (' Depreciation expenses', 19), (' Lease expenses', 19), (' Depreciation expenses', 19), (' Sales and marketing', 19), (' Selling Expenses', 17), (' depreciation', 10), (' Occupancy ', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Amortisation expenses', 23), (' Other expenses', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Marketing expenses', 21), (' Management expenses', 21), (' Occupancy expenses', 19), (' Depreciation expenses', 19), (' Lease expenses', 19), (' Depreciation expenses', 19), (' Sales and marketing', 19), (' Selling Expenses', 17), (' depreciation', 10), (' Occupancy ', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses', 41), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Selling & distribution expenses', 31), (' Marketing expenses', 29), (' Management expenses', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 26), (' Occupancy expenses', 25), (' Logistics and distribution', 25), (' Advertising expenses', 24), (' Selling Expenses', 22), (' depreciation', 16), (' Occupancy ', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), (' Sales and marketing', 24), ('Distribution expenses', 22), ('other expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Advertising expenses', 20), (' Amortisation expenses', 20), (' Management expenses', 19), (' Marketing expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Occupancy expenses', 16), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' depreciation', 11), (' Occupancy ', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Administrative and other expenses', 32), (' Selling & distribution expenses', 28), (' Logistics and distribution', 25), (' Sales and marketing', 24), ('Distribution expenses', 22), ('other expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Advertising expenses', 20), (' Amortisation expenses', 20), (' Management expenses', 19), (' Marketing expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Occupancy expenses', 16), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' depreciation', 11), (' Occupancy ', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 11], 'score': 100, 'value': -1864282.0, 'line_item_label': ['Other expenses', 'Selling expenses', 'Occupancy'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-1196471.0, -360132.0, -307679.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' Administration expenses', 40), ('Rent', 31), (' Rental expenses', 27), (' Occupancy expenses', 19), (' Occupancy', 14)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('Rent', 60), (' Rental expenses', 32), (' Administration expenses', 27), (' Occupancy expenses', 11), (' Occupancy', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy', 100), (' Occupancy expenses', 59), (' Rental expenses', 11), (' Administration expenses', 10), ('Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Administration expenses', 72), ('Rent', 31), (' Rental expenses', 27), (' Occupancy expenses', 19), (' Occupancy', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Rental expenses', 48), (' Occupancy expenses', 44), (' Administration expenses', 36), ('Rent', 24), (' Occupancy', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 23), (' Administration expenses', 22), (' Occupancy expenses', 19), ('Rent', 8), (' Occupancy', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 23), (' Administration expenses', 22), (' Occupancy expenses', 19), ('Rent', 8), (' Occupancy', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 22), (' Administration expenses', 20), (' Occupancy expenses', 16), ('Rent', 9), (' Occupancy', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 22), (' Administration expenses', 20), (' Occupancy expenses', 16), ('Rent', 9), (' Occupancy', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -283195.0, 'line_item_label': ['Occupancy'], 'note_numbers': [nan], 'line_item_value': [-283195.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' Administration expenses', 40), ('Rent', 31), (' Rental expenses', 27), (' Occupancy expenses', 19), (' Occupancy', 14)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('Rent', 60), (' Rental expenses', 32), (' Administration expenses', 27), (' Occupancy expenses', 11), (' Occupancy', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [(' Occupancy', 100), (' Occupancy expenses', 59), (' Rental expenses', 11), (' Administration expenses', 10), ('Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Administration expenses', 72), ('Rent', 31), (' Rental expenses', 27), (' Occupancy expenses', 19), (' Occupancy', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Rental expenses', 48), (' Occupancy expenses', 44), (' Administration expenses', 36), ('Rent', 24), (' Occupancy', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 23), (' Administration expenses', 22), (' Occupancy expenses', 19), ('Rent', 8), (' Occupancy', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 23), (' Administration expenses', 22), (' Occupancy expenses', 19), ('Rent', 8), (' Occupancy', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 22), (' Administration expenses', 20), (' Occupancy expenses', 16), ('Rent', 9), (' Occupancy', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Rental expenses', 22), (' Administration expenses', 20), (' Occupancy expenses', 16), ('Rent', 9), (' Occupancy', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -307679.0, 'line_item_label': ['Occupancy'], 'note_numbers': [nan], 'line_item_value': [-307679.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' Other income', 30), ('Other revenue', 29), ('other operating', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('other operating', 27), ('Other revenue', 24), (' Other income', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Other income', 40), ('other operating', 31), ('Other revenue', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 21), ('other operating', 18), ('Other revenue', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 21), ('other operating', 18), ('Other revenue', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 23), ('other operating', 21), ('Other revenue', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 23), ('other operating', 21), ('Other revenue', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 161847.0, 'line_item_label': ['Other income'], 'note_numbers': ['4'], 'line_item_value': [161847.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' Other income', 30), ('Other revenue', 29), ('other operating', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('other operating', 27), ('Other revenue', 24), (' Other income', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Other income', 40), ('other operating', 31), ('Other revenue', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 21), ('other operating', 18), ('Other revenue', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 21), ('other operating', 18), ('Other revenue', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 23), ('other operating', 21), ('Other revenue', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Other income', 23), ('other operating', 21), ('Other revenue', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 287516.0, 'line_item_label': ['Other income'], 'note_numbers': ['4'], 'line_item_value': [287516.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['Other income', ' Commission revenue', ' Rent'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = sale of goods , res_fuzz_match = [('Other income', 33), (' Rent', 25), (' Commission revenue', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: goods recognised at a point in time , res_fuzz_match = [(' Commission revenue', 79), ('Other income', 64), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Commission revenue', 79), ('Other income', 64), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Commission revenue', 79), ('Other income', 64), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('Other income', 100), (' Commission revenue', 50), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income gain on sale of assets , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = sale of goods , res_fuzz_match = [('Other income', 33), (' Rent', 25), (' Commission revenue', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: goods recognised at a point in time , res_fuzz_match = [(' Commission revenue', 79), ('Other income', 64), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Commission revenue', 79), ('Other income', 64), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Commission revenue', 79), ('Other income', 64), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('Other income', 100), (' Commission revenue', 50), (' Rent', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income gain on sale of assets , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100], 'value': [156244.0, 131272.0, 287516.0, 104437.0, 57410.0, 161847.0], 'label': ['Other income Interest received', 'Other income Gain on sale of assets', 'Other income Other income', 'Other income Interest received', 'Other income Gain on sale of assets', 'Other income Other income'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' Interest revenue', 42), (' Net finance costs', 33), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 22), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' Interest revenue', 29), (' Net finance costs', 29), ('other income', 24), (' Finance income and costs', 15), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance income', 24), ('Finance income', 24), (' Finance income and costs', 23), (' Net finance costs', 20), (' Finance income and finance costs', 18), ('other income', 12), (' Interest revenue', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Interest revenue', 42), ('other income', 40), (' Finance income and costs', 33), ('finance income', 29), ('Finance income', 29), (' Finance income and finance costs', 27), (' Net finance costs', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and costs', 36), (' Net finance costs', 36), (' Finance income and finance costs', 35), (' Interest revenue', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 27), (' Finance income and costs', 23), ('other income', 21), (' Net finance costs', 21), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 27), (' Finance income and costs', 23), ('other income', 21), (' Net finance costs', 21), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('other income', 41), (' Net finance costs', 41), (' Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 30), (' Finance income and costs', 26), (' Net finance costs', 24), ('other income', 23), (' Interest revenue', 20), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 30), (' Finance income and costs', 26), (' Net finance costs', 24), ('other income', 23), (' Interest revenue', 20), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 85, 'value': 128773.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['4', '6'], 'line_item_value': [161847.0, -33074.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' Interest revenue', 42), (' Net finance costs', 33), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 22), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' Interest revenue', 29), (' Net finance costs', 29), ('other income', 24), (' Finance income and costs', 15), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance income', 24), ('Finance income', 24), (' Finance income and costs', 23), (' Net finance costs', 20), (' Finance income and finance costs', 18), ('other income', 12), (' Interest revenue', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' Interest revenue', 42), ('other income', 40), (' Finance income and costs', 33), ('finance income', 29), ('Finance income', 29), (' Finance income and finance costs', 27), (' Net finance costs', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('other income', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and costs', 36), (' Net finance costs', 36), (' Finance income and finance costs', 35), (' Interest revenue', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 27), (' Finance income and costs', 23), ('other income', 21), (' Net finance costs', 21), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 27), (' Finance income and costs', 23), ('other income', 21), (' Net finance costs', 21), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('other income', 41), (' Net finance costs', 41), (' Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 30), (' Finance income and costs', 26), (' Net finance costs', 24), ('other income', 23), (' Interest revenue', 20), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' Finance income and finance costs', 30), (' Finance income and costs', 26), (' Net finance costs', 24), ('other income', 23), (' Interest revenue', 20), ('finance income', 19), ('Finance income', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 85, 'value': 254859.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['4', '6'], 'line_item_value': [287516.0, -32657.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = sale of goods , res_fuzz_match = [(' Sublease interest income', 44), (' Share of JV interest received/(paid)', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 33), (' Interest received - Loan', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Interest income', 33), ('Bank interest', 22), (' Interest received - Bank', 22), ('interest', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: goods recognised at a point in time , res_fuzz_match = [('interest', 50), (' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), (' Sublease interest income', 41), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 41), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), ('interest', 38), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 38), (' Sublease interest income', 32), (' Bank Deposits - cash and cash equivalents', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), ('interest', 38), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 38), (' Sublease interest income', 32), (' Bank Deposits - cash and cash equivalents', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('interest', 100), (' Interest received - Bank', 86), (' Interest received - Loan', 86), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Share of JV interest received/(paid)', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income gain on sale of assets , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), (' Sublease interest income', 41), (' Bank Deposits - cash and cash equivalents', 41), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 35)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Sublease interest income', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Share of JV interest received/(paid)', 43), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = sale of goods , res_fuzz_match = [(' Sublease interest income', 44), (' Share of JV interest received/(paid)', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 33), (' Interest received - Loan', 33), (' Bank Deposits - cash and cash equivalents', 33), (' Interest income', 33), ('Bank interest', 22), (' Interest received - Bank', 22), ('interest', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: goods recognised at a point in time , res_fuzz_match = [('interest', 50), (' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), (' Sublease interest income', 41), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 41), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 38)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), ('interest', 38), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 38), (' Sublease interest income', 32), (' Bank Deposits - cash and cash equivalents', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = the company's revenue recognition is as follows: , res_fuzz_match = [(' Interest received - Loan', 50), (' Interest received - Bank', 45), (' Interest income', 43), (' Interest income', 43), (' Share of JV interest received/(paid)', 42), ('interest', 38), ('Bank interest', 38), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 38), (' Sublease interest income', 32), (' Bank Deposits - cash and cash equivalents', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income interest received , res_fuzz_match = [('interest', 100), (' Interest received - Bank', 86), (' Interest received - Loan', 86), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Share of JV interest received/(paid)', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Sublease interest income', 50), (' Bank Deposits - cash and cash equivalents', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income gain on sale of assets , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 56), (' Sublease interest income', 41), (' Bank Deposits - cash and cash equivalents', 41), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), ('Bank interest', 38), (' Share of JV interest received/(paid)', 35)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other income other income , res_fuzz_match = [(' Interest income', 64), (' Interest income', 64), (' Sublease interest income', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Share of JV interest received/(paid)', 43), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), ('Bank interest', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 11], 'score': [100, 100], 'value': [156244.0, 104437.0], 'label': ['Other income Interest received', 'Other income Interest received'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' net finance costs ', 33), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 12), ('finance costs', 12), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -33074.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['6'], 'line_item_value': [-33074.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' net finance costs ', 33), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 12), ('finance costs', 12), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -32657.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['6'], 'line_item_value': [-32657.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = bank charges , res_fuzz_match = [('bank facilities', 60), (' Interest on bank overdrafts and loans (other than those from related parties)', 60), ('bonds', 50), ('cash credit', 40), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), (' Discount unwind on the provision for asset retirement obligation', 30), (' Interest accrued on loans', 30), (' Interest accrued on lease liabilities', 30), (' Lease interest expense', 30), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 30), (' Lease liabilities interest expense', 30), ('loan', 25), ('debenture', 25), ('interest', 25), (' Interest on leases', 21), ('  Other interest expense', 20), (' Interest income', 20), ('borrowings', 17), ('Interest expenses', 10), ('debt', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 85), (' Interest on leases', 77), (' Lease liabilities interest expense', 76), (' Interest income', 71), (' Interest expense on financial liabilities using the effective interest rate method - other', 62), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 62), (' Interest accrued on loans', 59), ('debenture', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), (' Interest accrued on lease liabilities', 48), (' Discount unwind on the provision for asset retirement obligation', 43), ('cash credit', 36), ('loan', 25), ('debt', 25), ('bonds', 25), ('bank facilities', 20), ('borrowings', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = bank charges , res_fuzz_match = [('bank facilities', 60), (' Interest on bank overdrafts and loans (other than those from related parties)', 60), ('bonds', 50), ('cash credit', 40), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), (' Discount unwind on the provision for asset retirement obligation', 30), (' Interest accrued on loans', 30), (' Interest accrued on lease liabilities', 30), (' Lease interest expense', 30), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 30), (' Lease liabilities interest expense', 30), ('loan', 25), ('debenture', 25), ('interest', 25), (' Interest on leases', 21), ('  Other interest expense', 20), (' Interest income', 20), ('borrowings', 17), ('Interest expenses', 10), ('debt', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 85), (' Interest on leases', 77), (' Lease liabilities interest expense', 76), (' Interest income', 71), (' Interest expense on financial liabilities using the effective interest rate method - other', 62), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 62), (' Interest accrued on loans', 59), ('debenture', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), (' Interest accrued on lease liabilities', 48), (' Discount unwind on the provision for asset retirement obligation', 43), ('cash credit', 36), ('loan', 25), ('debt', 25), ('bonds', 25), ('bank facilities', 20), ('borrowings', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [5145.0, 11959.0], 'label': [' Other interest expense', ' Other interest expense'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' net finance costs ', 33), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 12), ('finance costs', 12), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -33074.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['6'], 'line_item_value': [-33074.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [(' net finance costs ', 33), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 12), ('finance costs', 12), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' net finance costs ', 20), (' finance expenses', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' finance expenses', 48), (' net finance costs ', 36), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' finance expenses', 23), (' net finance costs ', 21), ('finance cost', 16), ('finance costs', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [(' net finance costs ', 24), (' finance expenses', 20), ('finance cost', 19), ('finance costs', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -32657.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['6'], 'line_item_value': [-32657.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = bank charges , res_fuzz_match = [(' margin charge income', 70), (' foreign exchange gain', 60), (' net foreign exchange gain', 60), (' net foreign exchange gains/(losses)', 60), (' net foreign exchange (loss)/gain', 60), (' net other foreign exchange (losses)/gains', 60), (' effective portion of changes in fair value of cash flow', 50), (' japan recoveries', 50), (' net of tax', 43), (' other', 40), (' secondment income (tw recovery)', 40), ('  government grants', 30), (' insurance proceeds', 30), (' dividend from other parties', 30), (' profit from discontinued operation', 30), (' share of jv income', 30), (' paid by customers - at amortised cost', 30), (' other miscellaneous - net (loss)/gain', 30), (' quota lease income', 30), (' sundry income', 30), (' net (loss)/profit on disposal of non-current assets', 30), ('other revenue', 20), (' commission revenue', 20), (' other income', 20), (' net ppe disposal (loss)/gain', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), (' net of tax', 57), (' net other foreign exchange (losses)/gains', 57), (' other miscellaneous - net (loss)/gain', 52), ('  government grants', 50), (' insurance proceeds', 45), (' share of jv income', 45), (' net foreign exchange (loss)/gain', 43), (' foreign exchange gain', 40), (' profit from discontinued operation', 39), (' dividend from other parties', 38), (' net foreign exchange gain', 38), (' net foreign exchange gains/(losses)', 38), (' quota lease income', 38), (' commission revenue', 36), (' effective portion of changes in fair value of cash flow', 33), (' secondment income (tw recovery)', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' paid by customers - at amortised cost', 29), (' sundry income', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = bank charges , res_fuzz_match = [(' margin charge income', 70), (' foreign exchange gain', 60), (' net foreign exchange gain', 60), (' net foreign exchange gains/(losses)', 60), (' net foreign exchange (loss)/gain', 60), (' net other foreign exchange (losses)/gains', 60), (' effective portion of changes in fair value of cash flow', 50), (' japan recoveries', 50), (' net of tax', 43), (' other', 40), (' secondment income (tw recovery)', 40), ('  government grants', 30), (' insurance proceeds', 30), (' dividend from other parties', 30), (' profit from discontinued operation', 30), (' share of jv income', 30), (' paid by customers - at amortised cost', 30), (' other miscellaneous - net (loss)/gain', 30), (' quota lease income', 30), (' sundry income', 30), (' net (loss)/profit on disposal of non-current assets', 30), ('other revenue', 20), (' commission revenue', 20), (' other income', 20), (' net ppe disposal (loss)/gain', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), (' net of tax', 57), (' net other foreign exchange (losses)/gains', 57), (' other miscellaneous - net (loss)/gain', 52), ('  government grants', 50), (' insurance proceeds', 45), (' share of jv income', 45), (' net foreign exchange (loss)/gain', 43), (' foreign exchange gain', 40), (' profit from discontinued operation', 39), (' dividend from other parties', 38), (' net foreign exchange gain', 38), (' net foreign exchange gains/(losses)', 38), (' quota lease income', 38), (' commission revenue', 36), (' effective portion of changes in fair value of cash flow', 33), (' secondment income (tw recovery)', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' paid by customers - at amortised cost', 29), (' sundry income', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [5145.0, 11959.0], 'label': [' Other interest expense', ' Other interest expense'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('deferred tax', 33), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 29), (' income tax expense', 24), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('provision for taxation previous year', 21), ('prior year ', 21), ('current tax', 20), ('earlier year', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('amount transferred to retained earnings', 30), ('deferred tax', 27), (' income tax', 27), ('prior year ', 25), ('minimum alternate tax credit entitlement', 21), (' income tax expense', 18), ('provision for taxation previous year', 17), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('current tax', 25), ('provision for taxation previous year', 18), (' income tax', 14), ('prior year ', 13), ('amount transferred to retained earnings', 12), ('minimum alternate tax credit entitlement', 11), (' income tax expense', 10), (' income tax benefit', 9), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('deferred tax', 0), ('earlier year', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('minimum alternate tax credit entitlement', 34), ('amount transferred to retained earnings', 33), (' income tax', 33), (' tax (expense)/benefit', 30), ('earlier year', 29), ('provision for taxation previous year', 26), (' income tax expense', 24), (' income tax benefit/(expense)', 24), (' income tax benefit', 23), ('deferred tax', 22), ('prior year ', 21), ('current tax', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 75), (' income tax expense', 71), (' tax (expense)/benefit', 60), ('provision for taxation previous year', 59), (' income tax benefit', 57), (' income tax', 47), ('minimum alternate tax credit entitlement', 46), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 36), ('prior year ', 31), ('earlier year', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 35), (' income tax benefit/(expense)', 34), ('amount transferred to retained earnings', 30), (' income tax expense', 30), (' income tax benefit', 28), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 20), (' income tax', 18), ('current tax', 17), ('deferred tax', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 35), (' income tax benefit/(expense)', 34), ('amount transferred to retained earnings', 30), (' income tax expense', 30), (' income tax benefit', 28), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 20), (' income tax', 18), ('current tax', 17), ('deferred tax', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 50), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), ('prior year ', 38), ('earlier year', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('current tax', 33), ('deferred tax', 31)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), (' income tax benefit/(expense)', 29), (' income tax benefit', 27), (' income tax expense', 26), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 21), ('current tax', 19), (' income tax', 17), ('deferred tax', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), (' income tax benefit/(expense)', 29), (' income tax benefit', 27), (' income tax expense', 26), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 21), ('current tax', 19), (' income tax', 17), ('deferred tax', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -2106496.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['9'], 'line_item_value': [-2106496.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('deferred tax', 33), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 29), (' income tax expense', 24), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('provision for taxation previous year', 21), ('prior year ', 21), ('current tax', 20), ('earlier year', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('amount transferred to retained earnings', 30), ('deferred tax', 27), (' income tax', 27), ('prior year ', 25), ('minimum alternate tax credit entitlement', 21), (' income tax expense', 18), ('provision for taxation previous year', 17), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax benefit/(expense)', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('current tax', 25), ('provision for taxation previous year', 18), (' income tax', 14), ('prior year ', 13), ('amount transferred to retained earnings', 12), ('minimum alternate tax credit entitlement', 11), (' income tax expense', 10), (' income tax benefit', 9), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('deferred tax', 0), ('earlier year', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('minimum alternate tax credit entitlement', 34), ('amount transferred to retained earnings', 33), (' income tax', 33), (' tax (expense)/benefit', 30), ('earlier year', 29), ('provision for taxation previous year', 26), (' income tax expense', 24), (' income tax benefit/(expense)', 24), (' income tax benefit', 23), ('deferred tax', 22), ('prior year ', 21), ('current tax', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 75), (' income tax expense', 71), (' tax (expense)/benefit', 60), ('provision for taxation previous year', 59), (' income tax benefit', 57), (' income tax', 47), ('minimum alternate tax credit entitlement', 46), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 36), ('prior year ', 31), ('earlier year', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 35), (' income tax benefit/(expense)', 34), ('amount transferred to retained earnings', 30), (' income tax expense', 30), (' income tax benefit', 28), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 20), (' income tax', 18), ('current tax', 17), ('deferred tax', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 38), ('minimum alternate tax credit entitlement', 35), (' income tax benefit/(expense)', 34), ('amount transferred to retained earnings', 30), (' income tax expense', 30), (' income tax benefit', 28), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 20), (' income tax', 18), ('current tax', 17), ('deferred tax', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 50), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), ('prior year ', 38), ('earlier year', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('current tax', 33), ('deferred tax', 31)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), (' income tax benefit/(expense)', 29), (' income tax benefit', 27), (' income tax expense', 26), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 21), ('current tax', 19), (' income tax', 17), ('deferred tax', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('provision for taxation previous year', 33), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), (' income tax benefit/(expense)', 29), (' income tax benefit', 27), (' income tax expense', 26), (' tax (expense)/benefit', 25), ('earlier year', 23), ('prior year ', 21), ('current tax', 19), (' income tax', 17), ('deferred tax', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -1599322.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['9'], 'line_item_value': [-1599322.0]}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = income tax expense current tax , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 75), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 61), (' deferred income tax', 47)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = income tax expense deferred tax - origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total tax (expense)/benefit in income statement', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' current income tax', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = income tax expense aggregate income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' current income tax', 71), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 63), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = deferred tax included in income tax expense comprises: decrease/(increase) in deferred tax assets (note 15) , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 79), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 70), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' total tax (expense)/benefit in income statement', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate profit before income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 87), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate tax at the statutory tax rate of 30% , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: entertainment expenses , res_fuzz_match = [(' total income tax expense / (benefit)', 63), ('income tax expense', 62), (' deferred income tax', 60), (' current income tax', 53), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: non-deductible legal expenses (trademark applications) , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 67), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total tax (expense)/benefit in income statement', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = income tax expense current tax , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 75), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 61), (' deferred income tax', 47)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = income tax expense deferred tax - origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' deferred income tax', 60), (' total income tax expense / (benefit)', 60), (' total tax (expense)/benefit in income statement', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' current income tax', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = income tax expense aggregate income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' current income tax', 71), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense / (benefit)', 63), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = deferred tax included in income tax expense comprises: decrease/(increase) in deferred tax assets (note 15) , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 79), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 70), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' total tax (expense)/benefit in income statement', 50)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate profit before income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 87), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = numerical reconciliation ofincome tax expense and tax at the statutory rate tax at the statutory tax rate of 30% , res_fuzz_match = [('income tax expense', 100), (' income tax expense on continuing operations', 72), (' total income tax expense / (benefit)', 70), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 53)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: entertainment expenses , res_fuzz_match = [(' total income tax expense / (benefit)', 63), ('income tax expense', 62), (' deferred income tax', 60), (' current income tax', 53), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: non-deductible legal expenses (trademark applications) , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows = tax effect amounts which are not deductible/taxable) in calculating taxable income: income tax expense , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 67), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total tax (expense)/benefit in income statement', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 17], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1453788.0, 145534.0, 1599322.0, 145534.0, 5326617.0, 1597985.0, 1599322.0, 2235677.0, -129181.0, 2106496.0, -129181.0, 7019068.0, 2105720.0, 2106496.0], 'label': ['Income tax expense Current tax', 'Income tax expense Deferred tax - origination and reversal of temporary differences', 'Income tax expense Aggregate income tax expense', 'Deferred tax included in income tax expense comprises: Decrease/(increase) in deferred tax assets (note 15)', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Profit before income tax expense', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Tax at the statutory tax rate of 30%', 'Tax effect amounts which are not deductible/taxable) in calculating taxable income: Income tax expense', 'Income tax expense Current tax', 'Income tax expense Deferred tax - origination and reversal of temporary differences', 'Income tax expense Aggregate income tax expense', 'Deferred tax included in income tax expense comprises: Decrease/(increase) in deferred tax assets (note 15)', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Profit before income tax expense', 'Numerical reconciliation ofincome tax expense and tax at the statutory rate Tax at the statutory tax rate of 30%', 'Tax effect amounts which are not deductible/taxable) in calculating taxable income: Income tax expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('share of', 55), ('share in', 55)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('share of', 0), ('share in', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('share of', 55), ('share in', 55)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('share of', 0), ('share in', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 8), ('share in', 8)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('prior period', 29), ('exceptional', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('exceptional', 36), ('prior period', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('prior period', 29), ('exceptional', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('prior period', 39), ('exceptional', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('prior period', 29), ('exceptional', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('exceptional', 36), ('prior period', 24)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('prior period', 29), ('exceptional', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('prior period', 39), ('exceptional', 29)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('prior period', 23), ('exceptional', 11)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-24 17:24:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-24 17:24:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:24:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-24 17:24:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = employee benefit expense , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = distribution , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = marketing , res_fuzz_match = [('NULL', 0)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = occupancy , res_fuzz_match = [('NULL', 22)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = administration , res_fuzz_match = [('NULL', 15)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 6)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to the owners of shimano australia fishing pty ltd , res_fuzz_match = [('NULL', 7)]
2023-05-24 17:24:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-24 17:25:12+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-24 17:25:12+0530 - sLogger - DEBUG - {'fileid': '38007077-d641-4cd0-933a-b21360c4a56d', 'filename': 'ICMA Financial Statements - December 2022.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/ICMA Financial Statements - December 2022.pdf'}
2023-05-24 17:25:12+0530 - sLogger - DEBUG - save file completed
2023-05-24 17:25:12+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-24 17:25:12+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-24 17:25:12+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-24 17:25:12+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-24 17:25:12+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-24 17:25:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:12+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:14+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:18+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:18+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:25+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:25+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:31+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:52+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:25:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:25:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:25:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:25:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:25:56+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:25:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:25:56+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:00+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:00+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:04+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:04+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:08+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:08+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:11+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:16+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:16+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:24+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:24+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:33+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:33+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:47+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:47+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:26:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:26:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:26:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:26:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:26:52+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:26:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:26:52+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:27:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:27:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:27:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:27:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:27:00+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:27:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:27:00+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:27:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:27:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:27:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:27:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:27:08+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:27:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-24 17:27:08+0530 - sLogger - DEBUG - filetype: pdf
2023-05-24 17:27:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-24 17:27:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-24 17:27:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-24 17:27:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-24 17:27:12+0530 - sLogger - DEBUG - function: predict completed.
2023-05-24 17:27:12+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-24 17:27:12+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [10], 'predicted_cpl_pages': [9], 'predicted_ccf_pages': [12], 'filtered_cbs_pages': [10], 'filtered_cpl_pages': [9], 'filtered_ccf_pages': [12], 'month': 'december'}
2023-05-24 17:27:12+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-24 17:27:12+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-24 17:27:12+0530 - sLogger - DEBUG - process file completed
2023-05-24 17:27:12+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-24 17:27:12+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-24 17:27:12+0530 - sLogger - DEBUG - TE process file started
2023-05-24 17:28:40+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-24 17:28:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-24 17:28:40+0530 - sLogger - DEBUG - process_main_pages started
2023-05-24 17:28:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:28:40+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:28:40+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:28:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:28:40+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:28:40+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-24 17:28:40+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-24 17:28:40+0530 - sLogger - DEBUG - start_refactoring started
2023-05-24 17:28:40+0530 - sLogger - DEBUG - start_refactoring completed

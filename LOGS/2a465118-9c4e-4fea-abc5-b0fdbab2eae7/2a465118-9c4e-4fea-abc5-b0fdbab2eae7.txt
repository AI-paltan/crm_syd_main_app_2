2023-08-17 09:49:54+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-17 09:49:54+0530 - sLogger - DEBUG - {'fileid': '2a465118-9c4e-4fea-abc5-b0fdbab2eae7', 'filename': 'Seiko Australia Pty Ltd Financial Accounts March 2023.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Seiko Australia Pty Ltd Financial Accounts March 2023.pdf', 'status': 'Processing'}
2023-08-17 09:49:54+0530 - sLogger - DEBUG - save file completed
2023-08-17 09:49:54+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-17 09:49:54+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-17 09:49:54+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-17 09:49:54+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-17 09:49:54+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-17 09:49:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:49:54+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:49:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:49:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:49:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:49:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:49:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:49:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:49:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:49:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:49:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:49:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:49:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:49:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:49:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:49:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:39+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:39+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:45+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:50:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:50:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:50:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:50:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:50:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:50:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:50:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:06+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:06+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:15+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:15+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:25+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:25+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:34+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:34+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:51:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:51:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:51:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:51:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:51:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:51:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:51:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:52:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:52:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:52:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:52:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:52:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:52:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:52:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:52:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:52:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:52:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:52:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:52:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:52:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:52:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:52:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:52:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:52:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:52:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:52:15+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:52:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:52:15+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:52:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:52:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:52:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:52:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:52:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:52:19+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-17 09:52:19+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [5], 'predicted_cpl_pages': [4, 17], 'predicted_ccf_pages': [7], 'filtered_cbs_pages': [5], 'filtered_cpl_pages': [4], 'filtered_ccf_pages': [7], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-17 09:52:19+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-17 09:52:19+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-17 09:52:19+0530 - sLogger - DEBUG - process file completed
2023-08-17 09:52:19+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-17 09:52:19+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-17 09:52:19+0530 - sLogger - DEBUG - TE process file started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-17 09:55:43+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-17 09:55:43+0530 - sLogger - DEBUG - process_main_pages started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 09:55:43+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 09:55:43+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 09:55:43+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 09:55:43+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 09:55:43+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 09:55:43+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-17 09:55:43+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Restricted deposits | [('current assets', 41), ('equity', 36), ('equity and liabilities', 36), ('noncurrentliabilities', 36), ('noncurrent assets', 34), ('equity liabilities', 34), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current liabilities', 27), ('noncurrent liabilities', 27), ('liabilities', 18)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD current assets | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD currentassets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD current liabilities | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD currentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD noncurrent assets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD noncurrentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD noncurrent liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD non current assets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD non current liabilities | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD noncurrentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD equity and liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD equity | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Restricted deposits | MATCH WORD equityandliabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total current a sse ts | [('currentassets', 76), ('noncurrentassets', 69), ('current liabilities', 65), ('currentliabilities', 62), ('noncurrentliabilities', 55), ('current assets', 47), ('assets', 36), ('equity and liabilities', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityandliabilities', 29), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 17), ('equity', 17)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD current assets | score 86
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD currentassets | score 76
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD current liabilities | score 56
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD currentliabilities | score 52
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD noncurrent assets | score 77
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD noncurrentassets | score 74
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD noncurrent liabilities | score 55
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD non current assets | score 80
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD non current liabilities | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD noncurrentliabilities | score 51
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD noncurrentassets | score 74
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD noncurrentliabilities | score 51
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD equity and liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current a sse ts | MATCH WORD equityandliabilities | score 29
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total noncurrent a sse ts | [('noncurrentassets', 69), ('noncurrentliabilities', 69), ('currentassets', 55), ('currentliabilities', 54), ('current liabilities', 52), ('noncurrent assets', 47), ('noncurrent liabilities', 45), ('current assets', 40), ('assets', 36), ('equity and liabilities', 35), ('equityandliabilities', 29), ('equity liabilities', 27), ('equityliabilities', 24), ('liabilities', 17), ('equity', 17)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD current assets | score 77
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD currentassets | score 76
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD current liabilities | score 52
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD currentliabilities | score 48
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD noncurrent assets | score 81
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD noncurrentassets | score 79
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD noncurrent liabilities | score 61
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD non current assets | score 79
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD non current liabilities | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD noncurrentliabilities | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD noncurrentassets | score 79
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD noncurrentliabilities | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD equity and liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent a sse ts | MATCH WORD equityandliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total a ssets | [('assets', 53), ('current assets', 52), ('noncurrent assets', 52), ('equity liabilities', 43), ('current liabilities', 42), ('equityandliabilities', 38), ('equity and liabilities', 37), ('currentassets', 36), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('noncurrentliabilities', 27), ('liabilities', 25), ('equity', 25), ('noncurrent liabilities', 17)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD current assets | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD currentassets | score 54
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD current liabilities | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD currentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD noncurrent assets | score 60
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD noncurrentassets | score 55
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD noncurrent liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD non current assets | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD non current liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD noncurrentassets | score 55
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD noncurrentliabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD equity and liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total a ssets | MATCH WORD equityandliabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Current tax payables | [('current liabilities', 69), ('currentassets', 60), ('currentliabilities', 59), ('noncurrentassets', 55), ('noncurrentliabilities', 53), ('current assets', 45), ('equity liabilities', 39), ('equity and liabilities', 34), ('equityandliabilities', 34), ('equityliabilities', 31), ('noncurrent assets', 26), ('liabilities', 25), ('noncurrent liabilities', 25), ('assets', 17), ('equity', 17)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD current assets | score 65
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD currentassets | score 61
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD current liabilities | score 67
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD currentliabilities | score 63
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD noncurrent assets | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD noncurrentassets | score 56
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD noncurrent liabilities | score 62
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD non current assets | score 60
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD non current liabilities | score 62
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD noncurrentliabilities | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD noncurrentassets | score 56
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD noncurrentliabilities | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD equity and liabilities | score 48
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Current tax payables | MATCH WORD equityandliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Lease obligation | [('liabilities', 50), ('equityandliabilities', 38), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('currentliabilities', 32), ('equity and liabilities', 30), ('assets', 27), ('currentassets', 27), ('noncurrentliabilities', 27), ('current assets', 26), ('equity', 25), ('noncurrentassets', 24)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD current assets | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD currentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD current liabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD currentliabilities | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrent assets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentassets | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrent liabilities | score 45
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD non current assets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD non current liabilities | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentassets | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD equity and liabilities | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD equityandliabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Lease obligation | [('liabilities', 50), ('equityandliabilities', 38), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('currentliabilities', 32), ('equity and liabilities', 30), ('assets', 27), ('currentassets', 27), ('noncurrentliabilities', 27), ('current assets', 26), ('equity', 25), ('noncurrentassets', 24)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD current assets | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD currentassets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD current liabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD currentliabilities | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrent assets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentassets | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrent liabilities | score 45
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD non current assets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD non current liabilities | score 44
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentassets | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD equity and liabilities | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Lease obligation | MATCH WORD equityandliabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total noncurrent lia bilities | [('noncurrent liabilities', 63), ('noncurrentliabilities', 50), ('noncurrent assets', 49), ('noncurrentassets', 46), ('equity liabilities', 43), ('equity and liabilities', 39), ('current assets', 38), ('current liabilities', 37), ('currentliabilities', 36), ('currentassets', 33), ('equityandliabilities', 29), ('liabilities', 27), ('equityliabilities', 25), ('equity', 20), ('assets', 14)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD current assets | score 58
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD currentassets | score 56
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD current liabilities | score 86
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD currentliabilities | score 80
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD noncurrent assets | score 86
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD noncurrentassets | score 62
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD noncurrent liabilities | score 86
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD non current assets | score 60
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD non current liabilities | score 85
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD noncurrentliabilities | score 84
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD noncurrentassets | score 62
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD noncurrentliabilities | score 84
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD equity and liabilities | score 59
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total noncurrent lia bilities | MATCH WORD equityandliabilities | score 57
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Net a ssets | [('assets', 62), ('noncurrentassets', 61), ('currentassets', 60), ('current assets', 48), ('noncurrent assets', 38), ('equity and liabilities', 32), ('noncurrentliabilities', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('equityandliabilities', 21), ('noncurrent liabilities', 9), ('liabilities', 0)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD current assets | score 72
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD currentassets | score 67
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD current liabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD currentliabilities | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD noncurrent assets | score 77
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD noncurrentassets | score 67
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD noncurrent liabilities | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD non current assets | score 77
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD non current liabilities | score 41
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD noncurrentassets | score 67
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD equity and liabilities | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Net a ssets | MATCH WORD equityandliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-17 09:55:43+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-17 09:55:43+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-17 09:55:43+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-17 09:55:43+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash paid to suppliers and employees | changes in operating assets and liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Lease interest paid | adjustments for increase decrease in operating liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net income taxes paid | changes in operating assets and liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated I (used in) from operating activities | adjustments for increase decrease in operating assets
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment | changes in operating assets and liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceed from sale of property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments into restricted deposits | adiustments for movements in working capital
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends Paid | changes in assets liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease principal | adjustments for increase decrease in operating assets
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | adjustments for increase decrease in operating assets
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase / (decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-17 09:55:43+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-08-17 09:55:44+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [('cash and short term deposits', 51), ('Cash and short term deposits', 51), ('cash asset', 31), ('cash and cash equivalents', 27), ('other bank balances', 24), ('bank balances other than cash and cash equivalents', 23), ('bank balances other than above', 23), ('cash and bank balances', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('cash and cash equivalents', 37), ('cash asset', 37), ('bank balances other than cash and cash equivalents', 33), ('bank balances other than above', 32), ('cash and short term deposits', 32), ('Cash and short term deposits', 32), ('other bank balances', 29), ('cash and bank balances', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [('cash and cash equivalents', 37), ('cash asset', 37), ('bank balances other than cash and cash equivalents', 36), ('bank balances other than above', 36), ('other bank balances', 35), ('cash and bank balances', 32), ('cash and short term deposits', 32), ('Cash and short term deposits', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5423.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['10'], 'line_item_value': [5423.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [('cash and short term deposits', 51), ('Cash and short term deposits', 51), ('cash asset', 31), ('cash and cash equivalents', 27), ('other bank balances', 24), ('bank balances other than cash and cash equivalents', 23), ('bank balances other than above', 23), ('cash and bank balances', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('cash and cash equivalents', 37), ('cash asset', 37), ('bank balances other than cash and cash equivalents', 33), ('bank balances other than above', 32), ('cash and short term deposits', 32), ('Cash and short term deposits', 32), ('other bank balances', 29), ('cash and bank balances', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [('cash and cash equivalents', 37), ('cash asset', 37), ('bank balances other than cash and cash equivalents', 36), ('bank balances other than above', 36), ('other bank balances', 35), ('cash and bank balances', 32), ('cash and short term deposits', 32), ('Cash and short term deposits', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 8374.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['10'], 'line_item_value': [8374.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none bank balances , res_fuzz_match = [(' bank balances ', 100), ('  cash and bank balances ', 81), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash on hand and at bank ', 50), (' cash at bank ', 44), (' cash and cash equivalents ', 38), ('cash on hand ', 33), (' cash asset', 30), (' short term deposits ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents ', 100), ('cash on hand ', 89), (' cash at bank ', 78), (' cash on hand and at bank ', 61), ('  cash and bank balances ', 60), (' cash asset', 60), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 46), (' short term deposits ', 39), (' bank balances ', 36)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none bank balances , res_fuzz_match = [(' bank balances ', 100), ('  cash and bank balances ', 81), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash on hand and at bank ', 50), (' cash at bank ', 44), (' cash and cash equivalents ', 38), ('cash on hand ', 33), (' cash asset', 30), (' short term deposits ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents ', 100), ('cash on hand ', 89), (' cash at bank ', 78), (' cash on hand and at bank ', 61), ('  cash and bank balances ', 60), (' cash asset', 60), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 46), (' short term deposits ', 39), (' bank balances ', 36)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': [100, 100, 100, 100], 'value': [8374.0, 8374.0, 5423.0, 5423.0], 'label': ['None Bank balances', 'None Cash and cash equivalents in the statement of cash flows', 'None Bank balances', 'None Cash and cash equivalents in the statement of cash flows'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 11455.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [11455.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [('inventories', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 10662.0, 'line_item_label': ['Inventories'], 'note_numbers': ['12'], 'line_item_value': [10662.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 58), (' stores and other consumables at cost ', 52), (' provision for inventory obsolescence ', 43), (' parts and accessories (at cost) ', 43), (' cranes - in transit ', 38), (' stock in transit ', 38), (' inventories ', 33), (' Vehicles ', 33), (' Training Vehicles', 33), (' work in progress ', 31), (' Demonstrator units ', 31), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' spare parts ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none less: provision for stock obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 81), (' stock in transit ', 54), (' finished goods at cost ', 50), (' parts and accessories (at cost) ', 48), (' work in progress ', 46), (' finished goods ', 45), (' goods in transit ', 42), (' stores and other consumables at cost ', 41), (' spare parts ', 40), (' cranes - in transit ', 38), (' Demonstrator units ', 38), (' inventories ', 33), (' Vehicles ', 33), ('raw materials ', 30), (' raw materials ', 30), (' Training Vehicles', 25), (' cranes ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 58), (' stores and other consumables at cost ', 52), (' provision for inventory obsolescence ', 43), (' parts and accessories (at cost) ', 43), (' cranes - in transit ', 38), (' stock in transit ', 38), (' inventories ', 33), (' Vehicles ', 33), (' Training Vehicles', 33), (' work in progress ', 31), (' Demonstrator units ', 31), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' spare parts ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none less: provision for stock obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 81), (' stock in transit ', 54), (' finished goods at cost ', 50), (' parts and accessories (at cost) ', 48), (' work in progress ', 46), (' finished goods ', 45), (' goods in transit ', 42), (' stores and other consumables at cost ', 41), (' spare parts ', 40), (' cranes - in transit ', 38), (' Demonstrator units ', 38), (' inventories ', 33), (' Vehicles ', 33), ('raw materials ', 30), (' raw materials ', 30), (' Training Vehicles', 25), (' cranes ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 81, 100, 81], 'value': [11130.0, -468.0, 11911.0, -456.0], 'label': ['None Finished goods at cost', 'None Less: Provision for stock obsolescence', 'None Finished goods at cost', 'None Less: Provision for stock obsolescence'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [(' other current financial assets ', 42), (' trade and other receivables', 42), (' other current assets ', 40), ('other assets ', 37), (' other financial assets ', 34), (' prepayments ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [(' other current assets ', 56), (' other current financial assets ', 50), ('other assets ', 43), (' trade and other receivables', 36), (' other financial assets ', 33), (' prepayments ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 53), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables', 43), (' prepayments ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade and other receivables', 43), (' other current assets ', 42), (' other financial assets ', 42), ('other assets ', 40), (' other current financial assets ', 39), (' prepayments ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets ', 54), (' other current assets ', 53), (' other financial assets ', 47), (' other current financial assets ', 43), (' trade and other receivables', 32), (' prepayments ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [(' other current assets ', 44), ('other assets ', 43), (' trade and other receivables', 41), (' other current financial assets ', 36), (' other financial assets ', 33), (' prepayments ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4004.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [4004.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [(' other current financial assets ', 42), (' trade and other receivables', 42), (' other current assets ', 40), ('other assets ', 37), (' other financial assets ', 34), (' prepayments ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [(' other current assets ', 56), (' other current financial assets ', 50), ('other assets ', 43), (' trade and other receivables', 36), (' other financial assets ', 33), (' prepayments ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 53), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables', 43), (' prepayments ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade and other receivables', 43), (' other current assets ', 42), (' other financial assets ', 42), ('other assets ', 40), (' other current financial assets ', 39), (' prepayments ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets ', 54), (' other current assets ', 53), (' other financial assets ', 47), (' other current financial assets ', 43), (' trade and other receivables', 32), (' prepayments ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [(' other current assets ', 44), ('other assets ', 43), (' trade and other receivables', 41), (' other current financial assets ', 36), (' other financial assets ', 33), (' prepayments ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5420.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [5420.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 46), (' prepaid expenditure ', 44), ('prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' other receivables and prepayments ', 39), ('prepaid expense ', 36), (' charges paid in advance', 35), (' prepayments ', 33), (' prepaid expenditure ', 28), (' in advance ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [(' prepayments ', 100), (' other receivables and prepayments ', 100), (' prepaid ', 77), (' prepaid ', 77), (' other prepayments ', 67), (' in advance ', 50), ('prepaid expense ', 43), (' charges paid in advance', 41), (' prepaid expenditure ', 39)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 46), (' prepaid expenditure ', 44), ('prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' other receivables and prepayments ', 39), ('prepaid expense ', 36), (' charges paid in advance', 35), (' prepayments ', 33), (' prepaid expenditure ', 28), (' in advance ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [(' prepayments ', 100), (' other receivables and prepayments ', 100), (' prepaid ', 77), (' prepaid ', 77), (' other prepayments ', 67), (' in advance ', 50), ('prepaid expense ', 43), (' charges paid in advance', 41), (' prepaid expenditure ', 39)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), ('prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': [100, 100], 'value': [703.0, 887.0], 'label': ['Current Other receivables and prepayments', 'Current Other receivables and prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [(' deferred operating expenditure ', 43), (' trade and other receivables', 42), ('other current assets ', 40), (' other assets ', 37), (' financial assets ', 34), (' other financial assets ', 34), (' income tax receivable from related parties ', 33), (' biological assets ', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('other current assets ', 56), (' other assets ', 43), (' biological assets ', 41), (' income tax receivable from related parties ', 36), (' trade and other receivables', 36), (' financial assets ', 33), (' other financial assets ', 33), (' deferred operating expenditure ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' other assets ', 62), (' financial assets ', 57), ('other current assets ', 53), (' other financial assets ', 53), (' biological assets ', 44), (' trade and other receivables', 43), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure ', 49), (' trade and other receivables', 43), ('other current assets ', 42), (' other financial assets ', 42), (' other assets ', 40), (' income tax receivable from related parties ', 39), (' financial assets ', 32), (' biological assets ', 28)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets ', 59), (' other assets ', 54), ('other current assets ', 53), (' financial assets ', 50), (' other financial assets ', 47), (' trade and other receivables', 32), (' deferred operating expenditure ', 28), (' income tax receivable from related parties ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [('other current assets ', 44), (' other assets ', 43), (' biological assets ', 41), (' trade and other receivables', 41), (' income tax receivable from related parties ', 40), (' financial assets ', 33), (' other financial assets ', 33), (' deferred operating expenditure ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4004.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [4004.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [(' deferred operating expenditure ', 43), (' trade and other receivables', 42), ('other current assets ', 40), (' other assets ', 37), (' financial assets ', 34), (' other financial assets ', 34), (' income tax receivable from related parties ', 33), (' biological assets ', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('other current assets ', 56), (' other assets ', 43), (' biological assets ', 41), (' income tax receivable from related parties ', 36), (' trade and other receivables', 36), (' financial assets ', 33), (' other financial assets ', 33), (' deferred operating expenditure ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' other assets ', 62), (' financial assets ', 57), ('other current assets ', 53), (' other financial assets ', 53), (' biological assets ', 44), (' trade and other receivables', 43), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure ', 49), (' trade and other receivables', 43), ('other current assets ', 42), (' other financial assets ', 42), (' other assets ', 40), (' income tax receivable from related parties ', 39), (' financial assets ', 32), (' biological assets ', 28)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets ', 59), (' other assets ', 54), ('other current assets ', 53), (' financial assets ', 50), (' other financial assets ', 47), (' trade and other receivables', 32), (' deferred operating expenditure ', 28), (' income tax receivable from related parties ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [('other current assets ', 44), (' other assets ', 43), (' biological assets ', 41), (' trade and other receivables', 41), (' income tax receivable from related parties ', 40), (' financial assets ', 33), (' other financial assets ', 33), (' deferred operating expenditure ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5420.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [5420.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' current investments', 71), (' rental bond', 55), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 41), (' income tax receivable from related parties', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' long service leave receivable', 35), (' interest receivable', 33), (' related party receivable', 33), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' deposits', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [(' other', 100), (' other debtors and prepayments', 78), (' interest receivable', 73), (' other receivables - related party', 72), (' related party receivable', 67), (' share of jv prepayments', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 48), (' electricity derivatives at fair value', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' forward exchange contracts', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' lng', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' current investments', 71), (' rental bond', 55), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 41), (' income tax receivable from related parties', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), ('other assets', 36), (' electricity derivatives at fair value', 36), (' long service leave receivable', 35), (' interest receivable', 33), (' related party receivable', 33), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' deposits', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [(' other', 100), (' other debtors and prepayments', 78), (' interest receivable', 73), (' other receivables - related party', 72), (' related party receivable', 67), (' share of jv prepayments', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 48), (' electricity derivatives at fair value', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' forward exchange contracts', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' lng', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': [100, 100], 'value': [703.0, 887.0], 'label': ['Current Other receivables and prepayments', 'Current Other receivables and prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [(' ', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [4827.0, -110.0, 703.0, 5420.0, 3222.0, -105.0, 887.0, 4004.0], 'label': ["$'000", "$'000", "$'000", "$'000", "$'000", "$'000", "$'000", "$'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-17 09:55:45+0530 - sLogger - ERROR - error occured: 2022
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_assets
2023-08-17 09:55:45+0530 - sLogger - ERROR - error occured: 2022
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [(' interest bearing liabilites ', 45), (' lease liabilities ', 34), (' cash and cash equivalents ', 31), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' lease liabilities ', 67), ('  leases ', 57), (' interest bearing liabilites ', 44), (' cash overdraft ', 33), (' loans and borrowings ', 32), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), ('short term debt ', 24), (' shortterm borrowings ', 15), (' borrowings ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' lease liabilities ', 67), ('  leases ', 57), (' interest bearing liabilites ', 44), (' cash overdraft ', 33), (' loans and borrowings ', 32), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), ('short term debt ', 24), (' shortterm borrowings ', 15), (' borrowings ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [(' loans and borrowings ', 41), (' short-term debt ', 37), (' shortterm debt ', 37), (' bank overdraft ', 37), ('short term debt ', 36), (' shortterm borrowings ', 35), (' interest bearing liabilites ', 35), (' lease liabilities ', 34), (' borrowings ', 33), (' cash overdraft ', 32), (' cash and cash equivalents ', 31), ('  leases ', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [(' short-term debt ', 45), (' shortterm debt ', 45), ('short term debt ', 43), (' bank overdraft ', 36), (' cash and cash equivalents ', 34), ('  leases ', 33), (' interest bearing liabilites ', 33), (' cash overdraft ', 27), (' shortterm borrowings ', 25), (' lease liabilities ', 21), (' loans and borrowings ', 17), (' borrowings ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [(' interest bearing liabilites ', 45), (' lease liabilities ', 34), (' cash and cash equivalents ', 31), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' lease liabilities ', 67), ('  leases ', 57), (' interest bearing liabilites ', 44), (' cash overdraft ', 33), (' loans and borrowings ', 32), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), ('short term debt ', 24), (' shortterm borrowings ', 15), (' borrowings ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' lease liabilities ', 67), ('  leases ', 57), (' interest bearing liabilites ', 44), (' cash overdraft ', 33), (' loans and borrowings ', 32), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), ('short term debt ', 24), (' shortterm borrowings ', 15), (' borrowings ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [(' loans and borrowings ', 41), (' short-term debt ', 37), (' shortterm debt ', 37), (' bank overdraft ', 37), ('short term debt ', 36), (' shortterm borrowings ', 35), (' interest bearing liabilites ', 35), (' lease liabilities ', 34), (' borrowings ', 33), (' cash overdraft ', 32), (' cash and cash equivalents ', 31), ('  leases ', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [(' short-term debt ', 45), (' shortterm debt ', 45), ('short term debt ', 43), (' bank overdraft ', 36), (' cash and cash equivalents ', 34), ('  leases ', 33), (' interest bearing liabilites ', 33), (' cash overdraft ', 27), (' shortterm borrowings ', 25), (' lease liabilities ', 21), (' loans and borrowings ', 17), (' borrowings ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('other trade payables', 61), ('trade and other payables', 60), ('trade payable', 60)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31), ('other trade payables', 29), ('trade payable', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31), ('other trade payables', 29), ('trade payable', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('trade and other payables', 30), ('other trade payables', 29), ('trade payable', 28)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('trade and other payables', 27), ('other trade payables', 23), ('trade payable', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2028.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [2028.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('other trade payables', 61), ('trade and other payables', 60), ('trade payable', 60)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31), ('other trade payables', 29), ('trade payable', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31), ('other trade payables', 29), ('trade payable', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('trade and other payables', 30), ('other trade payables', 29), ('trade payable', 28)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('trade and other payables', 27), ('other trade payables', 23), ('trade payable', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3017.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [3017.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none trade payables due to related parties , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 83), (' trade payables - related parties', 83), (' payables to related parties ', 78), (' trade payables - other parties ', 71), (' Related party payables ', 63), (' trade and other payables ', 55), ('  accounts payable - trade ', 55), ('trade creditors ', 50), (' amounts payable to controlling entity ', 50)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none other trade payables and accrued expenses , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 100), (' trade payables - related parties', 71), (' trade payables - other parties ', 67), (' payables to related parties ', 61), (' Related party payables ', 56), (' trade and other payables ', 55), ('  accounts payable - trade ', 55), (' amounts payable to controlling entity ', 50), ('trade creditors ', 43)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-trade payables and accrued ex penses , res_fuzz_match = [(' trade payables ', 92), (' other trade payables ', 78), (' trade payables - related parties', 67), ('  accounts payable - trade ', 65), (' trade payables - other parties ', 62), (' payables to related parties ', 61), (' amounts payable to controlling entity ', 57), (' Related party payables ', 56), (' trade and other payables ', 50), ('trade creditors ', 43)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity ', 50), (' other trade payables ', 50), ('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), ('  accounts payable - trade ', 40), (' payables to related parties ', 30), (' Related party payables ', 30), (' trade payables - related parties', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none trade payables due to related parties , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 83), (' trade payables - related parties', 83), (' payables to related parties ', 78), (' trade payables - other parties ', 71), (' Related party payables ', 63), (' trade and other payables ', 55), ('  accounts payable - trade ', 55), ('trade creditors ', 50), (' amounts payable to controlling entity ', 50)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none other trade payables and accrued expenses , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 100), (' trade payables - related parties', 71), (' trade payables - other parties ', 67), (' payables to related parties ', 61), (' Related party payables ', 56), (' trade and other payables ', 55), ('  accounts payable - trade ', 55), (' amounts payable to controlling entity ', 50), ('trade creditors ', 43)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-trade payables and accrued ex penses , res_fuzz_match = [(' trade payables ', 92), (' other trade payables ', 78), (' trade payables - related parties', 67), ('  accounts payable - trade ', 65), (' trade payables - other parties ', 62), (' payables to related parties ', 61), (' amounts payable to controlling entity ', 57), (' Related party payables ', 56), (' trade and other payables ', 50), ('trade creditors ', 43)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity ', 50), (' other trade payables ', 50), ('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), ('  accounts payable - trade ', 40), (' payables to related parties ', 30), (' Related party payables ', 30), (' trade payables - related parties', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 92, 100, 100, 92], 'value': [1538.0, 641.0, 838.0, 711.0, 758.0, 559.0], 'label': ['None Trade payables due to related parties', 'None Other trade payables and accrued expenses', 'None Non-trade payables and accrued ex penses', 'None Trade payables due to related parties', 'None Other trade payables and accrued expenses', 'None Non-trade payables and accrued ex penses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('trade and other payables', 60)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('trade and other payables', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2028.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [2028.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('trade and other payables', 60)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('trade and other payables', 31)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('trade and other payables', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3017.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [3017.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none trade payables due to related parties , res_fuzz_match = [(' interest accrued', 50), ('accrued expenses ', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none other trade payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' interest accrued', 50)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-trade payables and accrued ex penses , res_fuzz_match = [('accrued expenses ', 91), (' interest accrued', 50)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none trade payables due to related parties , res_fuzz_match = [(' interest accrued', 50), ('accrued expenses ', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none other trade payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' interest accrued', 50)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-trade payables and accrued ex penses , res_fuzz_match = [('accrued expenses ', 91), (' interest accrued', 50)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 5, 6], 'score': [100, 91, 100, 91], 'value': [641.0, 838.0, 758.0, 559.0], 'label': ['None Other trade payables and accrued expenses', 'None Non-trade payables and accrued ex penses', 'None Other trade payables and accrued expenses', 'None Non-trade payables and accrued ex penses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [(' tax ', 100), ('current tax liabilities ', 83), (' income tax payable ', 75), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('current tax liabilities ', 40), (' income tax payable ', 40), (' tax ', 33), (' provision', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('current tax liabilities ', 40), (' income tax payable ', 40), (' tax ', 33), (' provision', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [(' tax ', 67), ('current tax liabilities ', 61), (' income tax payable ', 44), (' provision', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('current tax liabilities ', 50), (' income tax payable ', 38), (' tax ', 33), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 7], 'score': 100, 'value': 1617.0, 'line_item_label': ['Liabilities', 'Current tax payables', 'Provisions', 'Provisions'], 'note_numbers': [nan, nan, '18', '18'], 'line_item_value': [0.0, 224.0, 966.0, 427.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [(' tax ', 100), ('current tax liabilities ', 83), (' income tax payable ', 75), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('current tax liabilities ', 40), (' income tax payable ', 40), (' tax ', 33), (' provision', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [('current tax liabilities ', 40), (' income tax payable ', 40), (' tax ', 33), (' provision', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [(' tax ', 67), ('current tax liabilities ', 61), (' income tax payable ', 44), (' provision', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [('current tax liabilities ', 50), (' income tax payable ', 38), (' tax ', 33), (' provision', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 7], 'score': 100, 'value': 1563.0, 'line_item_label': ['Liabilities', 'Current tax payables', 'Provisions', 'Provisions'], 'note_numbers': [nan, nan, '18', '18'], 'line_item_value': [0.0, 291.0, 896.0, 376.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 35), (' tax receivable/payable', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 41)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 35), (' tax receivable/payable', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' tax receivable/payable', 38), (' provision for income tax ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 35), (' tax receivable/payable', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 41)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 35), (' tax receivable/payable', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax (refundable)/payable ', 25), (' provision for income tax ', 25), (' tax receivable/payable', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 35), (' tax receivable/payable', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 41)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 35), (' tax receivable/payable', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax ', 50), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax ', 40), (' tax receivable/payable', 40)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('other current liabilities', 68), (' other current liabilities', 68), (' trade and other payables', 60), (' customer deposits', 38), (' other financial liabilities', 37), (' foreign exchange contract liability', 37), (' employee benefits', 36), (' financial liabilities', 31), (' deferred revenue', 27), ('provisions', 8)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 31), (' foreign exchange contract liability', 29), ('other current liabilities', 27), (' other current liabilities', 27), (' other financial liabilities', 27), ('provisions', 25), (' employee benefits', 24), (' deferred revenue', 18)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 31), (' foreign exchange contract liability', 29), ('other current liabilities', 27), (' other current liabilities', 27), (' other financial liabilities', 27), ('provisions', 25), (' employee benefits', 24), (' deferred revenue', 18)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [(' other financial liabilities', 41), (' financial liabilities', 37), ('other current liabilities', 36), (' other current liabilities', 36), (' foreign exchange contract liability', 33), (' employee benefits', 31), (' trade and other payables', 30), (' customer deposits', 26), (' deferred revenue', 17), ('provisions', 13)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [(' employee benefits', 43), (' customer deposits', 36), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' trade and other payables', 27), (' other financial liabilities', 21), (' foreign exchange contract liability', 21), (' financial liabilities', 18), ('provisions', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 4, 6, 7], 'score': 100, 'value': 4574.0, 'line_item_label': ['Trade and other payables', 'Employee benefits', 'Provisions', 'Employee benefits', 'Provisions'], 'note_numbers': ['15', '16', '18', '16', '18'], 'line_item_value': [2028.0, 1074.0, 966.0, 79.0, 427.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = current tax payables , res_fuzz_match = [('other current liabilities', 68), (' other current liabilities', 68), (' trade and other payables', 60), (' customer deposits', 38), (' other financial liabilities', 37), (' foreign exchange contract liability', 37), (' employee benefits', 36), (' financial liabilities', 31), (' deferred revenue', 27), ('provisions', 8)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 31), (' foreign exchange contract liability', 29), ('other current liabilities', 27), (' other current liabilities', 27), (' other financial liabilities', 27), ('provisions', 25), (' employee benefits', 24), (' deferred revenue', 18)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = lease obligation , res_fuzz_match = [(' financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 31), (' foreign exchange contract liability', 29), ('other current liabilities', 27), (' other current liabilities', 27), (' other financial liabilities', 27), ('provisions', 25), (' employee benefits', 24), (' deferred revenue', 18)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current lia bilities , res_fuzz_match = [(' other financial liabilities', 41), (' financial liabilities', 37), ('other current liabilities', 36), (' other current liabilities', 36), (' foreign exchange contract liability', 33), (' employee benefits', 31), (' trade and other payables', 30), (' customer deposits', 26), (' deferred revenue', 17), ('provisions', 13)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net a ssets , res_fuzz_match = [(' employee benefits', 43), (' customer deposits', 36), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' trade and other payables', 27), (' other financial liabilities', 21), (' foreign exchange contract liability', 21), (' financial liabilities', 18), ('provisions', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 4, 6, 7], 'score': 100, 'value': 5478.0, 'line_item_label': ['Trade and other payables', 'Employee benefits', 'Provisions', 'Employee benefits', 'Provisions'], 'note_numbers': ['15', '16', '18', '16', '18'], 'line_item_value': [3017.0, 1105.0, 896.0, 84.0, 376.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none trade payables due to related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 76), (' gst payables', 70), (' loans from related party', 67), (' loan payable to relayed party under tax funding agreement', 61), (' gst payable and accruals', 59), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 49), (' employee benefits - payroll', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' employee benefits - current', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' provisions - current', 36), (' share of joint venture payables', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' provision for associate funding', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none other trade payables and accrued expenses , res_fuzz_match = [(' other', 100), (' gst payable and accruals', 77), (' gst payables', 70), (' other related parties', 65), ('other creditors and accruals', 62), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' share of joint venture payables', 56), (' secured long-term bank loans', 50), (' restructuring', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 45), (' employee benefits - payroll', 45), (' contract liabilites - current', 44), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 40), (' rebates', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 38), (' forward exchange contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' provision for associate funding', 36), (' gst', 33), (' arising from service contracts', 32), (' make good provisions', 31), (' gst liabilities', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-trade payables and accrued ex penses , res_fuzz_match = [(' gst payable and accruals', 77), (' gst payables', 70), ('other creditors and accruals', 54), (' share of joint venture payables', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' current - liability for annual and long service leave', 44), (' loans from related party', 43), (' forward exchange contracts', 42), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' provision for associate funding', 36), (' other creditors', 36), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none trade payables due to related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 76), (' gst payables', 70), (' loans from related party', 67), (' loan payable to relayed party under tax funding agreement', 61), (' gst payable and accruals', 59), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 49), (' employee benefits - payroll', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' employee benefits - current', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' provisions - current', 36), (' share of joint venture payables', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' provision for associate funding', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none other trade payables and accrued expenses , res_fuzz_match = [(' other', 100), (' gst payable and accruals', 77), (' gst payables', 70), (' other related parties', 65), ('other creditors and accruals', 62), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' share of joint venture payables', 56), (' secured long-term bank loans', 50), (' restructuring', 50), (' loans from related party', 48), (' loan payable to relayed party under tax funding agreement', 45), (' employee benefits - payroll', 45), (' contract liabilites - current', 44), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 40), (' rebates', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 38), (' forward exchange contracts', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' provision for associate funding', 36), (' gst', 33), (' arising from service contracts', 32), (' make good provisions', 31), (' gst liabilities', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-trade payables and accrued ex penses , res_fuzz_match = [(' gst payable and accruals', 77), (' gst payables', 70), ('other creditors and accruals', 54), (' share of joint venture payables', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' current - liability for annual and long service leave', 44), (' loans from related party', 43), (' forward exchange contracts', 42), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' provision for associate funding', 36), (' other creditors', 36), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [80, 100, 80, 100], 'value': [1538.0, 641.0, 711.0, 758.0], 'label': ['None Trade payables due to related parties', 'None Other trade payables and accrued expenses', 'None Trade payables due to related parties', 'None Other trade payables and accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none liability for long service leave , res_fuzz_match = [(' gst liabilities', 70), (' current - liability for annual and long service leave', 69), (' gst', 67), (' arising from service contracts', 60), (' secured long-term bank loans', 49), (' loans from related party', 48), (' contract liabilites - current', 48), (' loan payable to relayed party under tax funding agreement', 47), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst payable and accruals', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none liability for annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 78), (' gst liabilities', 70), (' contract liabilites - current', 48), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' gst payables', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' warranty', 38), (' share of joint venture payables', 37), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' forward exchange contracts', 34), (' total current employee benefits', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' provisions - current', 29), (' make good provisions', 25), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = non current liability for long-service leave , res_fuzz_match = [(' gst liabilities', 80), (' current - liability for annual and long service leave', 68), (' gst', 67), (' warranty', 62), (' rebates', 60), (' arising from service contracts', 57), (' contract liabilites - current', 52), (' total current employee benefits', 52), (' gst payables', 50), (' secured long-term bank loans', 49), (' loans from related party', 48), (' other related parties', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' provision for associate funding', 41), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' make good provisions', 38), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none liability for long service leave , res_fuzz_match = [(' gst liabilities', 70), (' current - liability for annual and long service leave', 69), (' gst', 67), (' arising from service contracts', 60), (' secured long-term bank loans', 49), (' loans from related party', 48), (' contract liabilites - current', 48), (' loan payable to relayed party under tax funding agreement', 47), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst payable and accruals', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none liability for annual leave , res_fuzz_match = [(' current - liability for annual and long service leave', 78), (' gst liabilities', 70), (' contract liabilites - current', 48), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' gst payables', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' warranty', 38), (' share of joint venture payables', 37), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' forward exchange contracts', 34), (' total current employee benefits', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' provisions - current', 29), (' make good provisions', 25), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = non current liability for long-service leave , res_fuzz_match = [(' gst liabilities', 80), (' current - liability for annual and long service leave', 68), (' gst', 67), (' warranty', 62), (' rebates', 60), (' arising from service contracts', 57), (' contract liabilites - current', 52), (' total current employee benefits', 52), (' gst payables', 50), (' secured long-term bank loans', 49), (' loans from related party', 48), (' other related parties', 47), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' provision for associate funding', 41), (' other', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' make good provisions', 38), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' forward exchange contracts', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [80, 80], 'value': [84.0, 79.0], 'label': ['Non Current Liability for long-service leave', 'Non Current Liability for long-service leave'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 53), (' loans from related party', 48), ('other creditors and accruals', 47), (' derivative contracts - at fair value', 47), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' current - liability for annual and long service leave', 47), (' contract liabilites - current', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' employee benefits - current', 41), (' make good provisions', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 35), (' total current employee benefits', 35), (' gst payables', 30), (' ultimate parent entity', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' loans from related party', 45), (' provision for associate funding', 45), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' other related parties', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' provision for associate funding', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' total current employee benefits', 54), (' ultimate parent entity', 46), (' other related parties', 46), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' share of joint venture payables', 46), (' arising from service contracts', 46), (' forward exchange contracts', 46), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' employee benefits - current', 31), (' provisions - current', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 23), (' other creditors', 23), (' other creditors', 23), (' restructuring', 20), (' other', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 53), (' loans from related party', 48), ('other creditors and accruals', 47), (' derivative contracts - at fair value', 47), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' current - liability for annual and long service leave', 47), (' contract liabilites - current', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' employee benefits - current', 41), (' make good provisions', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 35), (' total current employee benefits', 35), (' gst payables', 30), (' ultimate parent entity', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' loans from related party', 45), (' provision for associate funding', 45), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' other related parties', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' provision for associate funding', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [(' make good provisions', 100), (' forward exchange contracts', 50), (' gst', 33), ('other creditors and accruals', 25), (' other creditors', 25), (' derivative contracts - at fair value', 25), (' loan payable to relayed party under tax funding agreement', 25), (' secured long-term bank loans', 25), (' loans from related party', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' current - liability for annual and long service leave', 25), (' provisions - current', 25), (' contract liabilites - current', 25), (' share of joint venture payables', 25), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' gst liabilities', 25), (' other creditors', 25), (' total current employee benefits', 25), (' ultimate parent entity', 0), (' other related parties', 0), (' rebates', 0), (' restructuring', 0), (' warranty', 0), (' other', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 53), (' secured long-term bank loans', 53), (' loans from related party', 48), ('other creditors and accruals', 47), (' derivative contracts - at fair value', 47), (' loan payable to relayed party under tax funding agreement', 47), (' gst payable and accruals', 47), (' current - liability for annual and long service leave', 47), (' contract liabilites - current', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' employee benefits - current', 41), (' make good provisions', 40), (' gst liabilities', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' share of joint venture payables', 35), (' total current employee benefits', 35), (' gst payables', 30), (' ultimate parent entity', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' forward exchange contracts', 29), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' other', 60), (' provisions - current', 57), (' make good provisions', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 47), (' loans from related party', 45), (' provision for associate funding', 45), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' other related parties', 50), (' make good provisions', 50), (' loan payable to relayed party under tax funding agreement', 48), (' provision for associate funding', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' share of joint venture payables', 40), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' derivative contracts - at fair value', 34), (' gst', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 29), (' warranty', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [(' rebates', 60), (' secured long-term bank loans', 53), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 47), (' abandonment and decommissioning costs', 47), (' loans from related party', 42), ('other creditors and accruals', 41), (' derivative contracts - at fair value', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' current - liability for annual and long service leave', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' total current employee benefits', 35), (' gst payables', 30), (' gst liabilities', 30), (' provision for associate funding', 29), (' make good provisions', 25), (' ultimate parent entity', 24), (' provisions - current', 21), (' restructuring', 20), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), (' warranty', 25), (' provisions - current', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1262.0, 454.0, -614.0, 1102.0, 896.0, 206.0, 1102.0, 131.0, 60.0, -21.0, 170.0, 0.0, 170.0, 170.0, 1393.0, 514.0, -635.0, 1272.0, 896.0, 376.0, 1272.0], 'label': ["$'000 Warranties Make", "$'000 Warranties Make", "$'000 Warranties Make", "$'000 Warranties Make", "$'000 Warranties Make", "$'000 Warranties Make", "$'000 Warranties Make", "$'000 good", "$'000 good", "$'000 good", "$'000 good", "$'000 good", "$'000 good", "$'000 good", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_liabilities
2023-08-17 09:55:45+0530 - sLogger - ERROR - error occured: 2022
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 8000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['20'], 'line_item_value': [8000.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 8000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['20'], 'line_item_value': [8000.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 19983.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [19983.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 23039.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [23039.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [(' receivable ', 50), (' trade receivables ', 42), (' government subsidies receivable ', 38), (' trade and other receivables', 38), ('account receivables ', 36), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('account receivables ', 50), (' trade receivables ', 42), (' government subsidies receivable ', 41), (' unbilled ', 40), (' trade and other receivables', 35), (' receivable ', 33), (' billed ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' trade and other receivables', 40), (' trade receivables ', 35), (' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 22), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade receivables ', 50), (' trade and other receivables', 44), ('account receivables ', 43), (' government subsidies receivable ', 43), (' unbilled ', 40), (' receivable ', 33), (' billed ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 30), (' trade and other receivables', 27), (' trade receivables ', 26), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [(' trade and other receivables', 41), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4004.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [4004.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = restricted deposits , res_fuzz_match = [(' receivable ', 50), (' trade receivables ', 42), (' government subsidies receivable ', 38), (' trade and other receivables', 38), ('account receivables ', 36), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total current a sse ts , res_fuzz_match = [('account receivables ', 50), (' trade receivables ', 42), (' government subsidies receivable ', 41), (' unbilled ', 40), (' trade and other receivables', 35), (' receivable ', 33), (' billed ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' trade and other receivables', 40), (' trade receivables ', 35), (' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 22), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade receivables ', 50), (' trade and other receivables', 44), ('account receivables ', 43), (' government subsidies receivable ', 43), (' unbilled ', 40), (' receivable ', 33), (' billed ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 30), (' trade and other receivables', 27), (' trade receivables ', 26), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total non-current a sse ts , res_fuzz_match = [(' trade and other receivables', 41), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5420.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['11'], 'line_item_value': [5420.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('trade receivables ', 100), (' related party receivables ', 67), (' net trade debtors ', 62), (' share of joint venture receivables ', 60), (' trade debtors ', 58), (' other debtors ', 42), ('charges paid in advance ', 41), (' receivables from related parties ', 40), (' allowance for expected credit loss ', 35), (' trade debtors from contracts with customers', 35), (' provision for impairment losses ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' provision for impairment losses ', 62), (' allowance for expected credit loss ', 44), (' receivables from related parties ', 40), (' net trade debtors ', 38), (' trade debtors from contracts with customers', 38), (' share of joint venture receivables ', 36), ('charges paid in advance ', 35), ('trade receivables ', 33), (' related party receivables ', 33), (' trade debtors ', 33), (' other debtors ', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' other debtors ', 58), (' share of joint venture receivables ', 56), (' receivables from related parties ', 52), (' net trade debtors ', 44), ('charges paid in advance ', 41), (' provision for impairment losses ', 36), (' trade debtors from contracts with customers', 35), (' trade debtors ', 33), (' allowance for expected credit loss ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' allowance for expected credit loss ', 46), (' trade debtors from contracts with customers', 46), (' trade debtors ', 42), (' share of joint venture receivables ', 38), (' net trade debtors ', 38), (' receivables from related parties ', 38), (' other debtors ', 33), ('charges paid in advance ', 31), (' provision for impairment losses ', 31), ('trade receivables ', 25), (' related party receivables ', 23)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('trade receivables ', 100), (' related party receivables ', 67), (' net trade debtors ', 62), (' share of joint venture receivables ', 60), (' trade debtors ', 58), (' other debtors ', 42), ('charges paid in advance ', 41), (' receivables from related parties ', 40), (' allowance for expected credit loss ', 35), (' trade debtors from contracts with customers', 35), (' provision for impairment losses ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current less: allowance for impairment , res_fuzz_match = [(' provision for impairment losses ', 62), (' allowance for expected credit loss ', 44), (' receivables from related parties ', 40), (' net trade debtors ', 38), (' trade debtors from contracts with customers', 38), (' share of joint venture receivables ', 36), ('charges paid in advance ', 35), ('trade receivables ', 33), (' related party receivables ', 33), (' trade debtors ', 33), (' other debtors ', 33)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' other debtors ', 58), (' share of joint venture receivables ', 56), (' receivables from related parties ', 52), (' net trade debtors ', 44), ('charges paid in advance ', 41), (' provision for impairment losses ', 36), (' trade debtors from contracts with customers', 35), (' trade debtors ', 33), (' allowance for expected credit loss ', 32)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' allowance for expected credit loss ', 46), (' trade debtors from contracts with customers', 46), (' trade debtors ', 42), (' share of joint venture receivables ', 38), (' net trade debtors ', 38), (' receivables from related parties ', 38), (' other debtors ', 33), ('charges paid in advance ', 31), (' provision for impairment losses ', 31), ('trade receivables ', 25), (' related party receivables ', 23)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [4827.0, 3222.0], 'label': ['Current Trade receivables', 'Current Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 64), (' Sales revenue ', 39), (' revenue from continuing activities', 36), (' revenue from contracts with customers ', 35), (' sale of products ', 32), (' net sales ', 30), ('revenue from operations ', 29), (' Revenue ', 26), (' from trading business ', 25), (' Sale of coal ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations ', 68), (' revenue from continuing activities', 60), (' from trading business ', 49), (' revenue from contracts with customers ', 48), (' Sale of coal ', 32), (' Sales revenue ', 30), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' net sales ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' revenue from continuing activities', 42), (' transmission and distribution business ', 34), (' revenue from contracts with customers ', 31), (' from trading business ', 29), ('revenue from operations ', 21), (' net sales ', 19), (' Sale of coal ', 18), (' Sales revenue ', 17), (' sale of products ', 16), (' Revenue ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Sales revenue ', 40), (' transmission and distribution business ', 33), (' Revenue ', 30), (' from trading business ', 28), ('revenue from operations ', 27), (' net sales ', 27), (' revenue from contracts with customers ', 26), (' sale of products ', 23), (' revenue from continuing activities', 21), (' Sale of coal ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities', 35), (' from trading business ', 33), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Revenue ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' from trading business ', 43), ('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' transmission and distribution business ', 36), (' sale of products ', 35), (' revenue from continuing activities', 30), (' net sales ', 27), (' Sale of coal ', 26), (' Sales revenue ', 24), (' Revenue ', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('revenue from operations ', 49), (' sale of products ', 42), (' from trading business ', 39), (' revenue from contracts with customers ', 38), (' transmission and distribution business ', 33), (' revenue from continuing activities', 30), (' net sales ', 28), (' Sales revenue ', 25), (' Revenue ', 22), (' Sale of coal ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Sales revenue ', 42), (' from trading business ', 38), ('revenue from operations ', 37), (' revenue from contracts with customers ', 37), (' sale of products ', 35), (' revenue from continuing activities', 34), (' Sale of coal ', 32), (' Revenue ', 29), (' transmission and distribution business ', 28), (' net sales ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 42847.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [42847.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 64), (' Sales revenue ', 39), (' revenue from continuing activities', 36), (' revenue from contracts with customers ', 35), (' sale of products ', 32), (' net sales ', 30), ('revenue from operations ', 29), (' Revenue ', 26), (' from trading business ', 25), (' Sale of coal ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations ', 68), (' revenue from continuing activities', 60), (' from trading business ', 49), (' revenue from contracts with customers ', 48), (' Sale of coal ', 32), (' Sales revenue ', 30), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' net sales ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' revenue from continuing activities', 42), (' transmission and distribution business ', 34), (' revenue from contracts with customers ', 31), (' from trading business ', 29), ('revenue from operations ', 21), (' net sales ', 19), (' Sale of coal ', 18), (' Sales revenue ', 17), (' sale of products ', 16), (' Revenue ', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Sales revenue ', 40), (' transmission and distribution business ', 33), (' Revenue ', 30), (' from trading business ', 28), ('revenue from operations ', 27), (' net sales ', 27), (' revenue from contracts with customers ', 26), (' sale of products ', 23), (' revenue from continuing activities', 21), (' Sale of coal ', 17)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities', 35), (' from trading business ', 33), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Revenue ', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' from trading business ', 43), ('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' transmission and distribution business ', 36), (' sale of products ', 35), (' revenue from continuing activities', 30), (' net sales ', 27), (' Sale of coal ', 26), (' Sales revenue ', 24), (' Revenue ', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('revenue from operations ', 49), (' sale of products ', 42), (' from trading business ', 39), (' revenue from contracts with customers ', 38), (' transmission and distribution business ', 33), (' revenue from continuing activities', 30), (' net sales ', 28), (' Sales revenue ', 25), (' Revenue ', 22), (' Sale of coal ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Sales revenue ', 42), (' from trading business ', 38), ('revenue from operations ', 37), (' revenue from contracts with customers ', 37), (' sale of products ', 35), (' revenue from continuing activities', 34), (' Sale of coal ', 32), (' Revenue ', 29), (' transmission and distribution business ', 28), (' net sales ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 51175.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [51175.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none sale of goods , res_fuzz_match = [('Sale of goods ', 100), (' Sale of goods - Cars ', 82), (' Sale of goods - Motorcycles ', 64), (' Sale of goods - Marine ', 64), (' Condensate ', 57), (' Feed gas income ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer from warehouse ', 36), (' Goods sold to customer direct from supplier ', 36), (' hedge loss / gain ', 36), (' LNG ', 33), (' Total Revenue ', 33), (' Gas transportation income ', 29), (' revenue from continuing activities ', 29), (' revenue form contracts with customers ', 29), (' contribution from joint venture', 29), (' Domgas ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none rendering of services , res_fuzz_match = [(' Condensate ', 57), (' Total Revenue ', 42), (' Gas transportation income ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Spareparts ', 39), (' Goods sold to customer direct from supplier ', 39), (' Feed gas income ', 38), (' Sale of goods - Cars ', 38), (' hedge loss / gain ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Motorcycles ', 33), (' revenue form contracts with customers ', 33), (' contribution from joint venture', 33), (' Goods sold to customer from warehouse ', 28), (' revenue from continuing activities ', 28), (' Domgas ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Total Revenue ', 50), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Cars ', 40), (' Sale of goods - Motorcycles ', 40), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Goods sold to customer direct from supplier ', 40), (' revenue from continuing activities ', 40), (' revenue form contracts with customers ', 40), (' contribution from joint venture', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Gas transportation income ', 30), (' Sale of goods - Spareparts ', 30), (' hedge loss / gain ', 30), (' Feed gas income ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none sale of goods , res_fuzz_match = [('Sale of goods ', 100), (' Sale of goods - Cars ', 82), (' Sale of goods - Motorcycles ', 64), (' Sale of goods - Marine ', 64), (' Condensate ', 57), (' Feed gas income ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer from warehouse ', 36), (' Goods sold to customer direct from supplier ', 36), (' hedge loss / gain ', 36), (' LNG ', 33), (' Total Revenue ', 33), (' Gas transportation income ', 29), (' revenue from continuing activities ', 29), (' revenue form contracts with customers ', 29), (' contribution from joint venture', 29), (' Domgas ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none rendering of services , res_fuzz_match = [(' Condensate ', 57), (' Total Revenue ', 42), (' Gas transportation income ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Spareparts ', 39), (' Goods sold to customer direct from supplier ', 39), (' Feed gas income ', 38), (' Sale of goods - Cars ', 38), (' hedge loss / gain ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Motorcycles ', 33), (' revenue form contracts with customers ', 33), (' contribution from joint venture', 33), (' Goods sold to customer from warehouse ', 28), (' revenue from continuing activities ', 28), (' Domgas ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Total Revenue ', 50), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Cars ', 40), (' Sale of goods - Motorcycles ', 40), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Goods sold to customer direct from supplier ', 40), (' revenue from continuing activities ', 40), (' revenue form contracts with customers ', 40), (' contribution from joint venture', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Gas transportation income ', 30), (' Sale of goods - Spareparts ', 30), (' hedge loss / gain ', 30), (' Feed gas income ', 20)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [50514.0, 42371.0], 'label': ['None Sale of goods', 'None Sale of goods'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:45+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 09:55:45+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Cost of goods and services sold', 44), ('total expenses', 43), (' Personnel costs', 41), ('expense', 39), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Cost of inventory sold', 36), (' change in inventory', 35), ('total expenditure', 34), (' cost of goods sold ', 31), ('expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold ', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 27), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' change in inventory', 43), (' Cost of inventory sold', 38), (' Cost of goods and services sold', 37), (' cost of coal sold', 30), ('total expenditure', 28), (' Cost of product sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' Personnel costs', 22), (' cost of goods sold ', 22), ('cost of sales', 18), ('Cost of sales', 18), ('expenditure', 17), ('expense', 11)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('total expenses', 62), ('expense', 60), ('expenditure', 50), ('total expenditure', 47), (' change in inventory', 41), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of goods and services sold', 26), (' Cost of product sold', 19), (' cost of coal sold', 14), (' cost of goods sold ', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' change in inventory', 47), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 30), (' cost of goods sold ', 28), ('expenditure', 25), ('expense', 14)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Cost of product sold', 42), (' Personnel costs', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of goods sold ', 34), ('expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), (' cost of coal sold', 29), (' change in inventory', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expense', 22)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('total expenses', 59), ('total expenditure', 53), (' Cost of inventory sold', 49), ('purchase of stock-in-trade', 44), (' cost of coal sold', 44), (' cost of goods sold ', 44), (' change in inventory', 43), (' Cost of product sold', 41), ('cost of sales', 39), ('Cost of sales', 39), (' Personnel costs', 39), (' Cost of goods and services sold', 38), ('expenditure', 31), ('expense', 29)]
2023-08-17 09:55:45+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -23823.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-23823.0]}
2023-08-17 09:55:45+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:45+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Cost of goods and services sold', 44), ('total expenses', 43), (' Personnel costs', 41), ('expense', 39), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Cost of inventory sold', 36), (' change in inventory', 35), ('total expenditure', 34), (' cost of goods sold ', 31), ('expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold ', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 27), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' change in inventory', 43), (' Cost of inventory sold', 38), (' Cost of goods and services sold', 37), (' cost of coal sold', 30), ('total expenditure', 28), (' Cost of product sold', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' Personnel costs', 22), (' cost of goods sold ', 22), ('cost of sales', 18), ('Cost of sales', 18), ('expenditure', 17), ('expense', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('total expenses', 62), ('expense', 60), ('expenditure', 50), ('total expenditure', 47), (' change in inventory', 41), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of goods and services sold', 26), (' Cost of product sold', 19), (' cost of coal sold', 14), (' cost of goods sold ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' change in inventory', 47), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 30), (' cost of goods sold ', 28), ('expenditure', 25), ('expense', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Cost of product sold', 42), (' Personnel costs', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of goods sold ', 34), ('expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), (' cost of coal sold', 29), (' change in inventory', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expense', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('total expenses', 59), ('total expenditure', 53), (' Cost of inventory sold', 49), ('purchase of stock-in-trade', 44), (' cost of coal sold', 44), (' cost of goods sold ', 44), (' change in inventory', 43), (' Cost of product sold', 41), ('cost of sales', 39), ('Cost of sales', 39), (' Personnel costs', 39), (' Cost of goods and services sold', 38), ('expenditure', 31), ('expense', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -27968.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-27968.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Selling & distribution expenses ', 91), (' Distribution expenses ', 78), (' Logistics and distribution ', 67), (' Administrative expenses ', 63), (' Administration expenses ', 63), (' Selling Expenses ', 61), (' Administrative and other expenses ', 59), (' Advertising expenses ', 55), (' Depreciation and amortisation expenses ', 55), (' Depreciation expenses ', 51), (' Amortisation expenses ', 51), (' Sales and marketing ', 45), (' Lease expenses ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' employee benefits expense ', 43), (' employee benefit espense ', 43), (' Marketing expenses ', 42), ('expenses ', 39), (' Occupancy expenses ', 38), (' Management expenses ', 38), (' property espense ', 35), (' Administration ', 35), (' depreciation ', 25), (' Royalties ', 19), (' Occupancy ', 13), (' levies', 7)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' Amortisation expenses ', 39), (' Advertising expenses ', 38), (' Sales and marketing ', 38), (' property espense ', 38), (' Administrative expenses ', 37), (' Selling & distribution expenses ', 37), (' Administration expenses ', 37), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Marketing expenses ', 34), (' Depreciation expenses ', 33), (' Administrative and other expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' Lease expenses ', 30), (' Selling Expenses ', 30), (' Royalties ', 28), (' Administration ', 26), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Other expenses ', 24), ('expenses ', 21), (' depreciation ', 21), (' Management expenses ', 18), (' Occupancy ', 15), (' levies', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 36), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' Depreciation expenses ', 30), (' Amortisation expenses ', 30), (' Logistics and distribution ', 30), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Distribution expenses ', 28), (' Administration ', 27), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Selling & distribution expenses ', 24), (' Management expenses ', 24), (' Other expenses ', 24), (' Marketing expenses ', 23), (' employee benefits expense ', 23), (' employee benefit espense ', 23), (' Occupancy ', 22), (' property espense ', 21), (' depreciation ', 20), (' Royalties ', 20), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Management expenses ', 69), (' Lease expenses ', 64), (' Occupancy expenses ', 62), ('expenses ', 60), (' Marketing expenses ', 59), (' Selling Expenses ', 56), (' other expenses ', 54), (' Other expenses ', 54), (' Other expenses ', 54), (' depreciation ', 48), (' property espense ', 48), (' Depreciation expenses ', 43), (' Amortisation expenses ', 43), (' Advertising expenses ', 41), (' Distribution expenses ', 40), (' Administrative expenses ', 40), (' Selling & distribution expenses ', 40), (' Administration expenses ', 40), (' Administrative and other expenses ', 35), (' employee benefits expense ', 33), (' Depreciation and amortisation expenses ', 30), (' employee benefit espense ', 28), (' Administration ', 26), (' Logistics and distribution ', 24), (' levies', 22), (' Sales and marketing ', 21), (' Royalties ', 19), (' Occupancy ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies', 11), ('expenses ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' employee benefits expense ', 41), (' property espense ', 38), (' employee benefit espense ', 36), (' Depreciation expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), (' other expenses ', 29), (' Marketing expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Other expenses ', 29), (' depreciation ', 28), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' Advertising expenses ', 27), (' Administration ', 26), (' Occupancy expenses ', 24), (' Lease expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 22), (' Royalties ', 21), (' Selling Expenses ', 18), (' levies', 15), ('expenses ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Depreciation and amortisation expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' property espense ', 39), (' Administrative and other expenses ', 38), (' Depreciation expenses ', 34), (' Amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Advertising expenses ', 33), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Distribution expenses ', 32), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Lease expenses ', 25), (' Selling Expenses ', 25), (' Occupancy expenses ', 24), ('expenses ', 22), (' Royalties ', 21), (' Administration ', 20), (' Management expenses ', 18), (' levies', 16), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' other expenses ', 41), (' Other expenses ', 41), (' Management expenses ', 41), (' Other expenses ', 41), (' Marketing expenses ', 40), (' Administrative and other expenses ', 38), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), ('expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Royalties ', 28), (' Advertising expenses ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Administration ', 26), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': -16243.0, 'line_item_label': ['Selling and distribution expenses', 'Administrative expenses'], 'note_numbers': ['6', '7'], 'line_item_value': [-5051.0, -11192.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Selling & distribution expenses ', 91), (' Distribution expenses ', 78), (' Logistics and distribution ', 67), (' Administrative expenses ', 63), (' Administration expenses ', 63), (' Selling Expenses ', 61), (' Administrative and other expenses ', 59), (' Advertising expenses ', 55), (' Depreciation and amortisation expenses ', 55), (' Depreciation expenses ', 51), (' Amortisation expenses ', 51), (' Sales and marketing ', 45), (' Lease expenses ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' employee benefits expense ', 43), (' employee benefit espense ', 43), (' Marketing expenses ', 42), ('expenses ', 39), (' Occupancy expenses ', 38), (' Management expenses ', 38), (' property espense ', 35), (' Administration ', 35), (' depreciation ', 25), (' Royalties ', 19), (' Occupancy ', 13), (' levies', 7)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' Amortisation expenses ', 39), (' Advertising expenses ', 38), (' Sales and marketing ', 38), (' property espense ', 38), (' Administrative expenses ', 37), (' Selling & distribution expenses ', 37), (' Administration expenses ', 37), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Marketing expenses ', 34), (' Depreciation expenses ', 33), (' Administrative and other expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' Lease expenses ', 30), (' Selling Expenses ', 30), (' Royalties ', 28), (' Administration ', 26), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Other expenses ', 24), ('expenses ', 21), (' depreciation ', 21), (' Management expenses ', 18), (' Occupancy ', 15), (' levies', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 36), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' Depreciation expenses ', 30), (' Amortisation expenses ', 30), (' Logistics and distribution ', 30), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Distribution expenses ', 28), (' Administration ', 27), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Selling & distribution expenses ', 24), (' Management expenses ', 24), (' Other expenses ', 24), (' Marketing expenses ', 23), (' employee benefits expense ', 23), (' employee benefit espense ', 23), (' Occupancy ', 22), (' property espense ', 21), (' depreciation ', 20), (' Royalties ', 20), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Management expenses ', 69), (' Lease expenses ', 64), (' Occupancy expenses ', 62), ('expenses ', 60), (' Marketing expenses ', 59), (' Selling Expenses ', 56), (' other expenses ', 54), (' Other expenses ', 54), (' Other expenses ', 54), (' depreciation ', 48), (' property espense ', 48), (' Depreciation expenses ', 43), (' Amortisation expenses ', 43), (' Advertising expenses ', 41), (' Distribution expenses ', 40), (' Administrative expenses ', 40), (' Selling & distribution expenses ', 40), (' Administration expenses ', 40), (' Administrative and other expenses ', 35), (' employee benefits expense ', 33), (' Depreciation and amortisation expenses ', 30), (' employee benefit espense ', 28), (' Administration ', 26), (' Logistics and distribution ', 24), (' levies', 22), (' Sales and marketing ', 21), (' Royalties ', 19), (' Occupancy ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies', 11), ('expenses ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' employee benefits expense ', 41), (' property espense ', 38), (' employee benefit espense ', 36), (' Depreciation expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), (' other expenses ', 29), (' Marketing expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Other expenses ', 29), (' depreciation ', 28), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' Advertising expenses ', 27), (' Administration ', 26), (' Occupancy expenses ', 24), (' Lease expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 22), (' Royalties ', 21), (' Selling Expenses ', 18), (' levies', 15), ('expenses ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Depreciation and amortisation expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' property espense ', 39), (' Administrative and other expenses ', 38), (' Depreciation expenses ', 34), (' Amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Advertising expenses ', 33), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Distribution expenses ', 32), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Lease expenses ', 25), (' Selling Expenses ', 25), (' Occupancy expenses ', 24), ('expenses ', 22), (' Royalties ', 21), (' Administration ', 20), (' Management expenses ', 18), (' levies', 16), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' other expenses ', 41), (' Other expenses ', 41), (' Management expenses ', 41), (' Other expenses ', 41), (' Marketing expenses ', 40), (' Administrative and other expenses ', 38), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), ('expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Royalties ', 28), (' Advertising expenses ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Administration ', 26), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': -18702.0, 'line_item_label': ['Selling and distribution expenses', 'Administrative expenses'], 'note_numbers': ['6', '7'], 'line_item_value': [-5408.0, -13294.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none advertising and marketing , res_fuzz_match = [(' Wages and salaries ', 53), (' analytical ', 50), (' Amortisation expense ', 50), (' plant and equipment ', 47), (' Contractors, subcontractors and employee related expenses ', 46), (' depreciation and amortisation expenses ', 46), (' Depreciation and Amortisation Expenses ', 46), (' machinery ', 44), (' miscellaneous ', 44), (' Depreciation property ', 44), (' Depreciation expense ', 43), (' Staff welfare ', 42), (' Other expenses ', 42), (' power ', 40), (' charges ', 40), (' equipment ', 40), (' donation ', 40), (' Defined contribution plans ', 40), (' Depreciation right-of-use assets ', 39), (' research ', 38), (' Administrative expenses ', 38), (' Compulsory superannuation contributions ', 38), (' Depreciation expense right-of-use asset ', 38), (' Research and development expenses ', 38), (' Other Expenses from Ordinary Activities ', 38), (' Included in administrative expenses ', 35), ('consum ', 33), (' csr ', 33), (' social ', 33), (' Payroll on-costs (excluding employee benefit provision) ', 33), (' Facilities Expense ', 33), (' Rental equipment expenses ', 32), (' employee benefits expenses ', 32), (' Distribution Expenses ', 31), (' loss allowance ', 30), (' exchange ', 29), (' Employee expenses ', 29), (' Other employement costs', 29), (' loss on ', 25), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none (reversal of) / impairment loss on trade receivables , res_fuzz_match = [(' loss on ', 100), (' loss allowance ', 60), (' research ', 50), (' Other expenses ', 50), (' Other employement costs', 47), (' machinery ', 44), (' Depreciation property ', 44), (' Research and development expenses ', 44), (' Other Expenses from Ordinary Activities ', 44), (' Depreciation right-of-use assets ', 43), (' Depreciation expense ', 43), (' Payroll on-costs (excluding employee benefit provision) ', 42), (' Contractors, subcontractors and employee related expenses ', 42), (' employee benefits expenses ', 41), (' power ', 40), (' charges ', 40), (' equipment ', 40), (' donation ', 40), (' plant and equipment ', 40), (' Wages and salaries ', 40), (' Depreciation expense right-of-use asset ', 40), (' Distribution Expenses ', 39), (' Administrative expenses ', 38), (' depreciation and amortisation expenses ', 38), (' Depreciation and Amortisation Expenses ', 38), (' Rental equipment expenses ', 37), (' Amortisation expense ', 36), (' Employee expenses ', 36), (' Included in administrative expenses ', 35), ('consum ', 33), (' analytical ', 33), (' csr ', 33), (' social ', 33), (' miscellaneous ', 33), (' Compulsory superannuation contributions ', 33), (' Staff welfare ', 33), (' Facilities Expense ', 33), (' Defined contribution plans ', 30), (' exchange ', 29), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none packaging & freight , res_fuzz_match = [(' charges ', 60), (' Depreciation right-of-use assets ', 47), (' Depreciation expense right-of-use asset ', 47), (' Depreciation property ', 44), (' exchange ', 43), (' power ', 40), (' equipment ', 40), (' donation ', 40), (' plant and equipment ', 40), (' Wages and salaries ', 40), (' research ', 38), (' Compulsory superannuation contributions ', 37), (' Payroll on-costs (excluding employee benefit provision) ', 37), (' Contractors, subcontractors and employee related expenses ', 37), (' depreciation and amortisation expenses ', 37), (' Depreciation and Amortisation Expenses ', 37), (' Other Expenses from Ordinary Activities ', 37), (' Depreciation expense ', 36), ('consum ', 33), (' machinery ', 33), (' analytical ', 33), (' csr ', 33), (' social ', 33), (' Staff welfare ', 33), (' Facilities Expense ', 33), (' Other expenses ', 33), (' Research and development expenses ', 32), (' employee benefits expenses ', 32), (' Defined contribution plans ', 32), (' loss allowance ', 30), (' Employee expenses ', 29), (' Other employement costs', 29), (' Included in administrative expenses ', 26), (' Rental equipment expenses ', 26), (' loss on ', 25), (' Administrative expenses ', 25), (' miscellaneous ', 22), (' Amortisation expense ', 21), (' Distribution Expenses ', 19), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none selling expenses , res_fuzz_match = [(' Contractors, subcontractors and employee related expenses ', 75), (' Facilities Expense ', 67), (' Other expenses ', 67), (' Depreciation expense ', 64), (' Employee expenses ', 64), (' Research and development expenses ', 62), (' employee benefits expenses ', 62), (' Amortisation expense ', 57), (' Included in administrative expenses ', 56), (' Administrative expenses ', 56), (' Rental equipment expenses ', 56), (' Depreciation expense right-of-use asset ', 56), (' depreciation and amortisation expenses ', 56), (' Depreciation and Amortisation Expenses ', 56), (' Other Expenses from Ordinary Activities ', 56), ('consum ', 50), (' Payroll on-costs (excluding employee benefit provision) ', 50), (' Distribution Expenses ', 50), (' miscellaneous ', 44), (' Other employement costs', 44), (' exchange ', 43), (' power ', 40), (' equipment ', 40), (' donation ', 40), (' loss allowance ', 40), (' research ', 38), (' Compulsory superannuation contributions ', 38), (' Defined contribution plans ', 38), (' csr ', 33), (' social ', 33), (' Depreciation property ', 33), (' plant and equipment ', 33), (' Wages and salaries ', 27), (' Depreciation right-of-use assets ', 26), (' loss on ', 25), (' Staff welfare ', 25), (' analytical ', 17), (' machinery ', 11), (' charges ', 0), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none warranty costs , res_fuzz_match = [(' csr ', 67), ('consum ', 50), (' analytical ', 50), (' loss on ', 50), (' Compulsory superannuation contributions ', 50), (' Contractors, subcontractors and employee related expenses ', 50), (' Other employement costs', 47), (' Payroll on-costs (excluding employee benefit provision) ', 44), (' depreciation and amortisation expenses ', 44), (' Depreciation and Amortisation Expenses ', 44), (' Other Expenses from Ordinary Activities ', 44), (' Amortisation expense ', 43), (' power ', 40), (' charges ', 40), (' donation ', 40), (' Wages and salaries ', 40), (' Included in administrative expenses ', 39), (' Depreciation property ', 39), (' Depreciation expense right-of-use asset ', 39), (' employee benefits expenses ', 39), (' research ', 38), (' machinery ', 33), (' miscellaneous ', 33), (' plant and equipment ', 33), (' Depreciation right-of-use assets ', 33), (' Staff welfare ', 33), (' Facilities Expense ', 33), (' Rental equipment expenses ', 33), (' Other expenses ', 33), (' Research and development expenses ', 33), (' Defined contribution plans ', 33), (' Administrative expenses ', 31), (' loss allowance ', 30), (' exchange ', 29), (' Depreciation expense ', 29), (' Employee expenses ', 29), (' Distribution Expenses ', 26), (' equipment ', 20), (' social ', 17), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' social ', 50), (' Compulsory superannuation contributions ', 50), (' power ', 40), (' donation ', 40), (' loss allowance ', 40), (' Wages and salaries ', 40), (' Payroll on-costs (excluding employee benefit provision) ', 40), (' Contractors, subcontractors and employee related expenses ', 40), (' Rental equipment expenses ', 40), (' depreciation and amortisation expenses ', 40), (' Depreciation and Amortisation Expenses ', 40), (' Other Expenses from Ordinary Activities ', 40), (' Defined contribution plans ', 40), (' Other employement costs', 40), ('consum ', 33), (' analytical ', 33), (' Included in administrative expenses ', 30), (' Depreciation property ', 30), (' plant and equipment ', 30), (' Depreciation right-of-use assets ', 30), (' Staff welfare ', 30), (' Depreciation expense right-of-use asset ', 30), (' Other expenses ', 30), (' Research and development expenses ', 30), (' employee benefits expenses ', 30), (' Employee expenses ', 30), (' exchange ', 29), (' research ', 25), (' loss on ', 25), (' machinery ', 22), (' miscellaneous ', 22), (' charges ', 20), (' equipment ', 20), (' Administrative expenses ', 20), (' Facilities Expense ', 20), (' Depreciation expense ', 20), (' Amortisation expense ', 20), (' Distribution Expenses ', 10), (' csr ', 0), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none advertising and marketing , res_fuzz_match = [(' Wages and salaries ', 53), (' analytical ', 50), (' Amortisation expense ', 50), (' plant and equipment ', 47), (' Contractors, subcontractors and employee related expenses ', 46), (' depreciation and amortisation expenses ', 46), (' Depreciation and Amortisation Expenses ', 46), (' machinery ', 44), (' miscellaneous ', 44), (' Depreciation property ', 44), (' Depreciation expense ', 43), (' Staff welfare ', 42), (' Other expenses ', 42), (' power ', 40), (' charges ', 40), (' equipment ', 40), (' donation ', 40), (' Defined contribution plans ', 40), (' Depreciation right-of-use assets ', 39), (' research ', 38), (' Administrative expenses ', 38), (' Compulsory superannuation contributions ', 38), (' Depreciation expense right-of-use asset ', 38), (' Research and development expenses ', 38), (' Other Expenses from Ordinary Activities ', 38), (' Included in administrative expenses ', 35), ('consum ', 33), (' csr ', 33), (' social ', 33), (' Payroll on-costs (excluding employee benefit provision) ', 33), (' Facilities Expense ', 33), (' Rental equipment expenses ', 32), (' employee benefits expenses ', 32), (' Distribution Expenses ', 31), (' loss allowance ', 30), (' exchange ', 29), (' Employee expenses ', 29), (' Other employement costs', 29), (' loss on ', 25), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none (reversal of) / impairment loss on trade receivables , res_fuzz_match = [(' loss on ', 100), (' loss allowance ', 60), (' research ', 50), (' Other expenses ', 50), (' Other employement costs', 47), (' machinery ', 44), (' Depreciation property ', 44), (' Research and development expenses ', 44), (' Other Expenses from Ordinary Activities ', 44), (' Depreciation right-of-use assets ', 43), (' Depreciation expense ', 43), (' Payroll on-costs (excluding employee benefit provision) ', 42), (' Contractors, subcontractors and employee related expenses ', 42), (' employee benefits expenses ', 41), (' power ', 40), (' charges ', 40), (' equipment ', 40), (' donation ', 40), (' plant and equipment ', 40), (' Wages and salaries ', 40), (' Depreciation expense right-of-use asset ', 40), (' Distribution Expenses ', 39), (' Administrative expenses ', 38), (' depreciation and amortisation expenses ', 38), (' Depreciation and Amortisation Expenses ', 38), (' Rental equipment expenses ', 37), (' Amortisation expense ', 36), (' Employee expenses ', 36), (' Included in administrative expenses ', 35), ('consum ', 33), (' analytical ', 33), (' csr ', 33), (' social ', 33), (' miscellaneous ', 33), (' Compulsory superannuation contributions ', 33), (' Staff welfare ', 33), (' Facilities Expense ', 33), (' Defined contribution plans ', 30), (' exchange ', 29), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none packaging & freight , res_fuzz_match = [(' charges ', 60), (' Depreciation right-of-use assets ', 47), (' Depreciation expense right-of-use asset ', 47), (' Depreciation property ', 44), (' exchange ', 43), (' power ', 40), (' equipment ', 40), (' donation ', 40), (' plant and equipment ', 40), (' Wages and salaries ', 40), (' research ', 38), (' Compulsory superannuation contributions ', 37), (' Payroll on-costs (excluding employee benefit provision) ', 37), (' Contractors, subcontractors and employee related expenses ', 37), (' depreciation and amortisation expenses ', 37), (' Depreciation and Amortisation Expenses ', 37), (' Other Expenses from Ordinary Activities ', 37), (' Depreciation expense ', 36), ('consum ', 33), (' machinery ', 33), (' analytical ', 33), (' csr ', 33), (' social ', 33), (' Staff welfare ', 33), (' Facilities Expense ', 33), (' Other expenses ', 33), (' Research and development expenses ', 32), (' employee benefits expenses ', 32), (' Defined contribution plans ', 32), (' loss allowance ', 30), (' Employee expenses ', 29), (' Other employement costs', 29), (' Included in administrative expenses ', 26), (' Rental equipment expenses ', 26), (' loss on ', 25), (' Administrative expenses ', 25), (' miscellaneous ', 22), (' Amortisation expense ', 21), (' Distribution Expenses ', 19), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none selling expenses , res_fuzz_match = [(' Contractors, subcontractors and employee related expenses ', 75), (' Facilities Expense ', 67), (' Other expenses ', 67), (' Depreciation expense ', 64), (' Employee expenses ', 64), (' Research and development expenses ', 62), (' employee benefits expenses ', 62), (' Amortisation expense ', 57), (' Included in administrative expenses ', 56), (' Administrative expenses ', 56), (' Rental equipment expenses ', 56), (' Depreciation expense right-of-use asset ', 56), (' depreciation and amortisation expenses ', 56), (' Depreciation and Amortisation Expenses ', 56), (' Other Expenses from Ordinary Activities ', 56), ('consum ', 50), (' Payroll on-costs (excluding employee benefit provision) ', 50), (' Distribution Expenses ', 50), (' miscellaneous ', 44), (' Other employement costs', 44), (' exchange ', 43), (' power ', 40), (' equipment ', 40), (' donation ', 40), (' loss allowance ', 40), (' research ', 38), (' Compulsory superannuation contributions ', 38), (' Defined contribution plans ', 38), (' csr ', 33), (' social ', 33), (' Depreciation property ', 33), (' plant and equipment ', 33), (' Wages and salaries ', 27), (' Depreciation right-of-use assets ', 26), (' loss on ', 25), (' Staff welfare ', 25), (' analytical ', 17), (' machinery ', 11), (' charges ', 0), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none warranty costs , res_fuzz_match = [(' csr ', 67), ('consum ', 50), (' analytical ', 50), (' loss on ', 50), (' Compulsory superannuation contributions ', 50), (' Contractors, subcontractors and employee related expenses ', 50), (' Other employement costs', 47), (' Payroll on-costs (excluding employee benefit provision) ', 44), (' depreciation and amortisation expenses ', 44), (' Depreciation and Amortisation Expenses ', 44), (' Other Expenses from Ordinary Activities ', 44), (' Amortisation expense ', 43), (' power ', 40), (' charges ', 40), (' donation ', 40), (' Wages and salaries ', 40), (' Included in administrative expenses ', 39), (' Depreciation property ', 39), (' Depreciation expense right-of-use asset ', 39), (' employee benefits expenses ', 39), (' research ', 38), (' machinery ', 33), (' miscellaneous ', 33), (' plant and equipment ', 33), (' Depreciation right-of-use assets ', 33), (' Staff welfare ', 33), (' Facilities Expense ', 33), (' Rental equipment expenses ', 33), (' Other expenses ', 33), (' Research and development expenses ', 33), (' Defined contribution plans ', 33), (' Administrative expenses ', 31), (' loss allowance ', 30), (' exchange ', 29), (' Depreciation expense ', 29), (' Employee expenses ', 29), (' Distribution Expenses ', 26), (' equipment ', 20), (' social ', 17), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' social ', 50), (' Compulsory superannuation contributions ', 50), (' power ', 40), (' donation ', 40), (' loss allowance ', 40), (' Wages and salaries ', 40), (' Payroll on-costs (excluding employee benefit provision) ', 40), (' Contractors, subcontractors and employee related expenses ', 40), (' Rental equipment expenses ', 40), (' depreciation and amortisation expenses ', 40), (' Depreciation and Amortisation Expenses ', 40), (' Other Expenses from Ordinary Activities ', 40), (' Defined contribution plans ', 40), (' Other employement costs', 40), ('consum ', 33), (' analytical ', 33), (' Included in administrative expenses ', 30), (' Depreciation property ', 30), (' plant and equipment ', 30), (' Depreciation right-of-use assets ', 30), (' Staff welfare ', 30), (' Depreciation expense right-of-use asset ', 30), (' Other expenses ', 30), (' Research and development expenses ', 30), (' employee benefits expenses ', 30), (' Employee expenses ', 30), (' exchange ', 29), (' research ', 25), (' loss on ', 25), (' machinery ', 22), (' miscellaneous ', 22), (' charges ', 20), (' equipment ', 20), (' Administrative expenses ', 20), (' Facilities Expense ', 20), (' Depreciation expense ', 20), (' Amortisation expense ', 20), (' Distribution Expenses ', 10), (' csr ', 0), ('  ', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('  ', 100), ('consum ', 0), (' power ', 0), (' machinery ', 0), (' charges ', 0), (' research ', 0), (' analytical ', 0), (' equipment ', 0), (' exchange ', 0), (' loss on ', 0), (' donation ', 0), (' csr ', 0), (' social ', 0), (' miscellaneous ', 0), (' loss allowance ', 0), (' Included in administrative expenses ', 0), (' Depreciation property ', 0), (' plant and equipment ', 0), (' Depreciation right-of-use assets ', 0), (' Administrative expenses ', 0), (' Wages and salaries ', 0), (' Compulsory superannuation contributions ', 0), (' Payroll on-costs (excluding employee benefit provision) ', 0), (' Staff welfare ', 0), (' Contractors, subcontractors and employee related expenses ', 0), (' Facilities Expense ', 0), (' Rental equipment expenses ', 0), (' Depreciation expense right-of-use asset ', 0), (' Depreciation expense ', 0), (' Amortisation expense ', 0), (' Other expenses ', 0), (' Research and development expenses ', 0), (' employee benefits expenses ', 0), (' depreciation and amortisation expenses ', 0), (' Employee expenses ', 0), (' Distribution Expenses ', 0), (' Depreciation and Amortisation Expenses ', 0), (' Other Expenses from Ordinary Activities ', 0), (' Defined contribution plans ', 0), (' Other employement costs', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [3390.0, 5.0, 5.0, 755.0, 644.0, 614.0, 5408.0, 3227.0, -2.0, -2.0, 582.0, 424.0, 820.0, 5051.0], 'label': ['$', 'None (Reversal of) / Impairment loss on trade receivables', '$', '$', '$', '$', '$', '$', 'None (Reversal of) / Impairment loss on trade receivables', '$', '$', '$', '$', '$'], 'year': [], 'colname_found': ['columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Administration expenses ', 63), (' Rental expenses ', 47), (' Occupancy expenses', 38), ('Rent ', 21), (' Occupancy ', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses ', 37), (' Rental expenses ', 34), (' Occupancy expenses', 24), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administration expenses ', 34), (' Occupancy expenses', 24), (' Rental expenses ', 23), (' Occupancy ', 22), ('Rent ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Rental expenses ', 67), (' Occupancy expenses', 62), (' Administration expenses ', 40), ('Rent ', 22), (' Occupancy ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 32), (' Occupancy expenses', 24), ('Rent ', 23), (' Occupancy ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 27), ('Rent ', 24), (' Occupancy expenses', 24), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Rental expenses ', 51), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -11192.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': ['7'], 'line_item_value': [-11192.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Administration expenses ', 63), (' Rental expenses ', 47), (' Occupancy expenses', 38), ('Rent ', 21), (' Occupancy ', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses ', 37), (' Rental expenses ', 34), (' Occupancy expenses', 24), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administration expenses ', 34), (' Occupancy expenses', 24), (' Rental expenses ', 23), (' Occupancy ', 22), ('Rent ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Rental expenses ', 67), (' Occupancy expenses', 62), (' Administration expenses ', 40), ('Rent ', 22), (' Occupancy ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 32), (' Occupancy expenses', 24), ('Rent ', 23), (' Occupancy ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 27), ('Rent ', 24), (' Occupancy expenses', 24), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Rental expenses ', 51), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -13294.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': ['7'], 'line_item_value': [-13294.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none depreciation , res_fuzz_match = [('Rent ', 50), (' Rental expenses', 42), (' Occupancy expenses', 42), (' Occupancy', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none salary & wages expense , res_fuzz_match = [(' Rental expenses', 62), (' Occupancy expenses', 58), ('Rent ', 50), (' Occupancy', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none superannuation expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 67), ('Rent ', 50), (' Occupancy', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none other administrative expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 58), ('Rent ', 50), (' Occupancy', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Rent ', 50), (' Rental expenses', 40), (' Occupancy', 20), (' Occupancy expenses', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none depreciation , res_fuzz_match = [('Rent ', 50), (' Rental expenses', 42), (' Occupancy expenses', 42), (' Occupancy', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none salary & wages expense , res_fuzz_match = [(' Rental expenses', 62), (' Occupancy expenses', 58), ('Rent ', 50), (' Occupancy', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none superannuation expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 67), ('Rent ', 50), (' Occupancy', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none other administrative expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 58), ('Rent ', 50), (' Occupancy', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Rent ', 50), (' Rental expenses', 40), (' Occupancy', 20), (' Occupancy expenses', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Rent ', 0), (' Rental expenses', 0), (' Occupancy', 0), (' Occupancy expenses', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 23), (' Other income', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Other income', 42), ('other operating', 17), ('Other revenue', 16)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue', 23)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('other operating', 58), (' Other income', 44), ('Other revenue', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Other income', 48), ('other operating', 38), ('Other revenue', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 46.0, 'line_item_label': ['Other income'], 'note_numbers': ['5'], 'line_item_value': [46.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 23), (' Other income', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Other income', 42), ('other operating', 17), ('Other revenue', 16)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue', 23)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('other operating', 58), (' Other income', 44), ('Other revenue', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Other income', 48), ('other operating', 38), ('Other revenue', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 0.0, 'line_item_label': ['Other income'], 'note_numbers': ['5'], 'line_item_value': [0.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [(' Rent ', 100), ('Other income ', 64), (' rental revenue', 64), (' Commission revenue ', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent ', 50), ('Other income ', 40), (' rental revenue', 40), (' Commission revenue ', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [(' Rent ', 100), ('Other income ', 64), (' rental revenue', 64), (' Commission revenue ', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent ', 50), ('Other income ', 40), (' rental revenue', 40), (' Commission revenue ', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [0.0, 46.0], 'label': ['None Rental income', 'None Rental income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Interest revenue', 40), ('Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 30), ('finance income', 27), ('other income', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('finance income', 96), ('Finance income and costs', 71), (' Finance income and finance costs', 63), (' Net finance costs', 57), ('other income', 42), (' Interest revenue', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('Finance income and costs', 57), (' Net finance costs', 55), ('finance income', 54), (' Finance income and finance costs', 48), (' Interest revenue', 34), ('other income', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Net finance costs', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('other income', 44), (' Net finance costs', 33), ('Finance income and costs', 29), (' Finance income and finance costs', 29), (' Interest revenue', 28), ('finance income', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Net finance costs', 49), ('other income', 48), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7, 9], 'score': 100, 'value': 29.0, 'line_item_label': ['Other income', 'Financial income', 'Net financing costs'], 'note_numbers': ['5', '9', nan], 'line_item_value': [46.0, 23.0, -40.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Interest revenue', 40), ('Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 30), ('finance income', 27), ('other income', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('finance income', 96), ('Finance income and costs', 71), (' Finance income and finance costs', 63), (' Net finance costs', 57), ('other income', 42), (' Interest revenue', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('Finance income and costs', 57), (' Net finance costs', 55), ('finance income', 54), (' Finance income and finance costs', 48), (' Interest revenue', 34), ('other income', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Net finance costs', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('other income', 44), (' Net finance costs', 33), ('Finance income and costs', 29), (' Finance income and finance costs', 29), (' Interest revenue', 28), ('finance income', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Net finance costs', 49), ('other income', 48), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7, 9], 'score': 100, 'value': -66.0, 'line_item_label': ['Other income', 'Financial income', 'Net financing costs'], 'note_numbers': ['5', '9', nan], 'line_item_value': [0.0, 57.0, -123.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [(' Interest income ', 71), (' Sublease interest income ', 65), ('interest ', 62), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 53), (' Interest received - Loan ', 47), (' interest revenue', 47), (' Bank interest ', 46), (' Interest received - Bank ', 41), (' Share of JV interest received/(paid) ', 41), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan ', 40), (' Bank Deposits - cash and cash equivalents ', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 40), ('interest ', 38), (' Bank interest ', 30), (' Interest income ', 30), (' Interest received - Bank ', 30), (' Sublease interest income ', 30), (' Share of JV interest received/(paid) ', 30), (' interest revenue', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [(' Interest income ', 71), (' Sublease interest income ', 65), ('interest ', 62), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 53), (' Interest received - Loan ', 47), (' interest revenue', 47), (' Bank interest ', 46), (' Interest received - Bank ', 41), (' Share of JV interest received/(paid) ', 41), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan ', 40), (' Bank Deposits - cash and cash equivalents ', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 40), ('interest ', 38), (' Bank interest ', 30), (' Interest income ', 30), (' Interest received - Bank ', 30), (' Sublease interest income ', 30), (' Share of JV interest received/(paid) ', 30), (' interest revenue', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [('interest ', 100), (' Interest income ', 100), (' Sublease interest income ', 84), (' Bank interest ', 77), (' interest revenue', 69), (' Share of JV interest received/(paid) ', 63), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 63), (' Interest received - Bank ', 58), (' Interest received - Loan ', 58), (' Bank Deposits - cash and cash equivalents ', 37)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [(' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Bank Deposits - cash and cash equivalents ', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 44), (' Interest income ', 43), (' Share of JV interest received/(paid) ', 41), (' interest revenue', 40), ('interest ', 38), (' Bank interest ', 38), (' Sublease interest income ', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [(' Interest income ', 57), (' Sublease interest income ', 56), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 56), (' Interest received - Bank ', 39), (' Interest received - Loan ', 39), (' Share of JV interest received/(paid) ', 39), (' Bank interest ', 38), (' Bank Deposits - cash and cash equivalents ', 33), (' interest revenue', 27), ('interest ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [('interest ', 100), (' Bank interest ', 77), (' interest revenue', 67), (' Interest received - Loan ', 65), (' Interest income ', 64), (' Interest received - Bank ', 60), (' Share of JV interest received/(paid) ', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 56), (' Sublease interest income ', 55), (' Bank Deposits - cash and cash equivalents ', 41)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [(' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Bank Deposits - cash and cash equivalents ', 44), (' Interest income ', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 40), (' interest revenue', 40), ('interest ', 38), (' Bank interest ', 38), (' Sublease interest income ', 36), (' Share of JV interest received/(paid) ', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL ', 65), (' Interest income ', 50), (' Sublease interest income ', 42), (' Interest received - Loan ', 41), (' Bank Deposits - cash and cash equivalents ', 41), ('interest ', 38), (' Bank interest ', 38), (' Interest received - Bank ', 35), (' Share of JV interest received/(paid) ', 35), (' interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL ', 60), (' Interest income ', 57), (' Sublease interest income ', 51), (' Interest received - Bank ', 40), (' Interest received - Loan ', 40), (' Share of JV interest received/(paid) ', 40), (' Bank Deposits - cash and cash equivalents ', 40), (' interest revenue', 40), ('interest ', 38), (' Bank interest ', 38)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [('interest ', 100), (' Interest income ', 100), (' Sublease interest income ', 84), (' Bank interest ', 77), (' interest revenue', 69), (' Share of JV interest received/(paid) ', 63), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 63), (' Interest received - Bank ', 58), (' Interest received - Loan ', 58), (' Bank Deposits - cash and cash equivalents ', 37)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [(' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Bank Deposits - cash and cash equivalents ', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 44), (' Interest income ', 43), (' Share of JV interest received/(paid) ', 41), (' interest revenue', 40), ('interest ', 38), (' Bank interest ', 38), (' Sublease interest income ', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [(' Interest income ', 57), (' Sublease interest income ', 56), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 56), (' Interest received - Bank ', 39), (' Interest received - Loan ', 39), (' Share of JV interest received/(paid) ', 39), (' Bank interest ', 38), (' Bank Deposits - cash and cash equivalents ', 33), (' interest revenue', 27), ('interest ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [('interest ', 100), (' Bank interest ', 77), (' interest revenue', 67), (' Interest received - Loan ', 65), (' Interest income ', 64), (' Interest received - Bank ', 60), (' Share of JV interest received/(paid) ', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 56), (' Sublease interest income ', 55), (' Bank Deposits - cash and cash equivalents ', 41)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [(' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Bank Deposits - cash and cash equivalents ', 44), (' Interest income ', 43), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 40), (' interest revenue', 40), ('interest ', 38), (' Bank interest ', 38), (' Sublease interest income ', 36), (' Share of JV interest received/(paid) ', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL ', 65), (' Interest income ', 50), (' Sublease interest income ', 42), (' Interest received - Loan ', 41), (' Bank Deposits - cash and cash equivalents ', 41), ('interest ', 38), (' Bank interest ', 38), (' Interest received - Bank ', 35), (' Share of JV interest received/(paid) ', 35), (' interest revenue', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL ', 60), (' Interest income ', 57), (' Sublease interest income ', 51), (' Interest received - Bank ', 40), (' Interest received - Loan ', 40), (' Share of JV interest received/(paid) ', 40), (' Bank Deposits - cash and cash equivalents ', 40), (' interest revenue', 40), ('interest ', 38), (' Bank interest ', 38)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 7, 10], 'score': [100, 100, 100, 100], 'value': [57.0, -124.0, 22.0, -63.0], 'label': ['None Interest income', 'None Interest on lease liabilties', 'None Interest income', 'None Interest on lease liabilties'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [('Interest expense', 69), ('interest expense', 69)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [('Interest expense', 27), ('interest expense', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [('Interest expense', 73), ('interest expense', 73)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [('Interest expense', 69), ('interest expense', 69)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [('Interest expense', 27), ('interest expense', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [('Interest expense', 73), ('interest expense', 73)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' interest expense', 40), (' finance expenses ', 37), (' net finance costs ', 30), ('finance cost ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 24), (' finance expenses ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), ('finance cost ', 50), (' finance expenses ', 46), (' interest expense', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses ', 96), ('finance cost ', 64), (' interest expense', 62), (' net finance costs ', 55)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' interest expense', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 36), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 33), (' finance expenses ', 29), ('finance cost ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' interest expense', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -103.0, 'line_item_label': ['Financial expenses', 'Net financing costs'], 'note_numbers': ['9', nan], 'line_item_value': [-63.0, -40.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' interest expense', 40), (' finance expenses ', 37), (' net finance costs ', 30), ('finance cost ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 24), (' finance expenses ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), ('finance cost ', 50), (' finance expenses ', 46), (' interest expense', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses ', 96), ('finance cost ', 64), (' interest expense', 62), (' net finance costs ', 55)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' interest expense', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 36), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 33), (' finance expenses ', 29), ('finance cost ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' interest expense', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -303.0, 'line_item_label': ['Financial expenses', 'Net financing costs'], 'note_numbers': ['9', nan], 'line_item_value': [-180.0, -123.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [(' interest ', 100), (' interest income', 100), (' Interest expenses ', 69), (' Interest on leases ', 69), (' Interest accrued on loans ', 67), (' Other interest expense ', 63), (' Lease interest expense ', 63), (' Interest expense on financial liabilities using the effective interest rate method - other ', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 58), (' Lease liabilities interest expense ', 58), (' Interest on bank overdrafts and loans (other than those from related parties) ', 53), ('loan ', 50), (' debenture ', 50), (' bonds ', 50), (' Discount unwind on the provision for asset retirement obligation ', 47), (' Interest accrued on lease liabilities ', 47), (' cash credit ', 36), (' bank facilities ', 30), (' debt ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [('loan ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 48), (' Interest expenses ', 47), (' Interest on leases ', 46), (' Interest expense on financial liabilities using the effective interest rate method - other ', 44), (' Other interest expense ', 43), (' interest income', 43), (' Interest accrued on loans ', 42), (' Discount unwind on the provision for asset retirement obligation ', 40), (' Interest accrued on lease liabilities ', 40), (' Lease interest expense ', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 40), (' interest ', 38), (' cash credit ', 36), (' borrowings ', 33), (' Lease liabilities interest expense ', 32), (' debt ', 25), (' debenture ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other ', 61), (' bank facilities ', 60), (' interest income', 57), ('loan ', 50), (' bonds ', 50), (' Lease liabilities interest expense ', 44), (' Interest on bank overdrafts and loans (other than those from related parties) ', 39), (' Interest accrued on loans ', 39), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 39), (' Discount unwind on the provision for asset retirement obligation ', 33), (' Other interest expense ', 33), (' Interest accrued on lease liabilities ', 33), (' Lease interest expense ', 33), (' Interest on leases ', 31), (' cash credit ', 27), (' Interest expenses ', 27), (' debt ', 25), (' debenture ', 25), (' interest ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [(' interest ', 100), (' Interest on leases ', 100), (' Interest accrued on lease liabilities ', 83), (' Interest expenses ', 73), (' Interest accrued on loans ', 68), (' Other interest expense ', 67), (' Lease interest expense ', 65), (' interest income', 64), (' Interest expense on financial liabilities using the effective interest rate method - other ', 59), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 56), ('loan ', 50), (' debt ', 50), (' debenture ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Lease liabilities interest expense ', 48), (' cash credit ', 45), (' Interest on bank overdrafts and loans (other than those from related parties) ', 44), (' Discount unwind on the provision for asset retirement obligation ', 41), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [(' Interest on bank overdrafts and loans (other than those from related parties) ', 52), ('loan ', 50), (' bonds ', 50), (' Interest expenses ', 47), (' Discount unwind on the provision for asset retirement obligation ', 44), (' Interest expense on financial liabilities using the effective interest rate method - other ', 44), (' Other interest expense ', 43), (' interest income', 43), (' Interest accrued on loans ', 42), (' bank facilities ', 40), (' Lease interest expense ', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 40), (' interest ', 38), (' Interest on leases ', 38), (' cash credit ', 36), (' Interest accrued on lease liabilities ', 36), (' Lease liabilities interest expense ', 36), (' borrowings ', 33), (' debt ', 25), (' debenture ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [(' bank facilities ', 60), (' Interest expense on financial liabilities using the effective interest rate method - other ', 59), ('loan ', 50), (' bonds ', 50), (' interest income', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 47), (' Discount unwind on the provision for asset retirement obligation ', 41), (' Other interest expense ', 41), (' Interest accrued on loans ', 41), (' Lease liabilities interest expense ', 41), (' interest ', 38), (' cash credit ', 36), (' Interest accrued on lease liabilities ', 35), (' Lease interest expense ', 35), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 35), (' Interest expenses ', 33), (' Interest on leases ', 31), (' debt ', 25), (' debenture ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [(' interest income', 57), (' Interest expense on financial liabilities using the effective interest rate method - other ', 55), ('loan ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 50), (' Interest accrued on loans ', 47), (' Interest on leases ', 46), (' Interest accrued on lease liabilities ', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 45), (' bank facilities ', 40), (' Interest expenses ', 40), (' Discount unwind on the provision for asset retirement obligation ', 40), (' Other interest expense ', 40), (' Lease interest expense ', 40), (' debenture ', 38), (' interest ', 38), (' cash credit ', 36), (' Lease liabilities interest expense ', 35), (' debt ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [(' interest ', 100), (' interest income', 100), (' Interest expenses ', 69), (' Interest on leases ', 69), (' Interest accrued on loans ', 67), (' Other interest expense ', 63), (' Lease interest expense ', 63), (' Interest expense on financial liabilities using the effective interest rate method - other ', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 58), (' Lease liabilities interest expense ', 58), (' Interest on bank overdrafts and loans (other than those from related parties) ', 53), ('loan ', 50), (' debenture ', 50), (' bonds ', 50), (' Discount unwind on the provision for asset retirement obligation ', 47), (' Interest accrued on lease liabilities ', 47), (' cash credit ', 36), (' bank facilities ', 30), (' debt ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [('loan ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 48), (' Interest expenses ', 47), (' Interest on leases ', 46), (' Interest expense on financial liabilities using the effective interest rate method - other ', 44), (' Other interest expense ', 43), (' interest income', 43), (' Interest accrued on loans ', 42), (' Discount unwind on the provision for asset retirement obligation ', 40), (' Interest accrued on lease liabilities ', 40), (' Lease interest expense ', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 40), (' interest ', 38), (' cash credit ', 36), (' borrowings ', 33), (' Lease liabilities interest expense ', 32), (' debt ', 25), (' debenture ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other ', 61), (' bank facilities ', 60), (' interest income', 57), ('loan ', 50), (' bonds ', 50), (' Lease liabilities interest expense ', 44), (' Interest on bank overdrafts and loans (other than those from related parties) ', 39), (' Interest accrued on loans ', 39), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 39), (' Discount unwind on the provision for asset retirement obligation ', 33), (' Other interest expense ', 33), (' Interest accrued on lease liabilities ', 33), (' Lease interest expense ', 33), (' Interest on leases ', 31), (' cash credit ', 27), (' Interest expenses ', 27), (' debt ', 25), (' debenture ', 25), (' interest ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [(' interest ', 100), (' Interest on leases ', 100), (' Interest accrued on lease liabilities ', 83), (' Interest expenses ', 73), (' Interest accrued on loans ', 68), (' Other interest expense ', 67), (' Lease interest expense ', 65), (' interest income', 64), (' Interest expense on financial liabilities using the effective interest rate method - other ', 59), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 56), ('loan ', 50), (' debt ', 50), (' debenture ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Lease liabilities interest expense ', 48), (' cash credit ', 45), (' Interest on bank overdrafts and loans (other than those from related parties) ', 44), (' Discount unwind on the provision for asset retirement obligation ', 41), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [(' Interest on bank overdrafts and loans (other than those from related parties) ', 52), ('loan ', 50), (' bonds ', 50), (' Interest expenses ', 47), (' Discount unwind on the provision for asset retirement obligation ', 44), (' Interest expense on financial liabilities using the effective interest rate method - other ', 44), (' Other interest expense ', 43), (' interest income', 43), (' Interest accrued on loans ', 42), (' bank facilities ', 40), (' Lease interest expense ', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 40), (' interest ', 38), (' Interest on leases ', 38), (' cash credit ', 36), (' Interest accrued on lease liabilities ', 36), (' Lease liabilities interest expense ', 36), (' borrowings ', 33), (' debt ', 25), (' debenture ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [(' bank facilities ', 60), (' Interest expense on financial liabilities using the effective interest rate method - other ', 59), ('loan ', 50), (' bonds ', 50), (' interest income', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 47), (' Discount unwind on the provision for asset retirement obligation ', 41), (' Other interest expense ', 41), (' Interest accrued on loans ', 41), (' Lease liabilities interest expense ', 41), (' interest ', 38), (' cash credit ', 36), (' Interest accrued on lease liabilities ', 35), (' Lease interest expense ', 35), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 35), (' Interest expenses ', 33), (' Interest on leases ', 31), (' debt ', 25), (' debenture ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [(' interest income', 57), (' Interest expense on financial liabilities using the effective interest rate method - other ', 55), ('loan ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 50), (' Interest accrued on loans ', 47), (' Interest on leases ', 46), (' Interest accrued on lease liabilities ', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 45), (' bank facilities ', 40), (' Interest expenses ', 40), (' Discount unwind on the provision for asset retirement obligation ', 40), (' Other interest expense ', 40), (' Lease interest expense ', 40), (' debenture ', 38), (' interest ', 38), (' cash credit ', 36), (' Lease liabilities interest expense ', 35), (' debt ', 25), (' borrowings ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 7, 10], 'score': [100, 100, 100, 100], 'value': [57.0, -124.0, 22.0, -63.0], 'label': ['None Interest income', 'None Interest on lease liabilties', 'None Interest income', 'None Interest on lease liabilties'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [('interest income', 100)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [('interest income', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [('interest income', 57)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [('interest income', 64)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [('interest income', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [('interest income', 50)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [('interest income', 57)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [('interest income', 100)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [('interest income', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [('interest income', 57)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [('interest income', 64)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [('interest income', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [('interest income', 50)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [('interest income', 57)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('interest income', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 7], 'score': [100, 100], 'value': [57.0, 22.0], 'label': ['None Interest income', 'None Interest income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' interest gains and losses ', 51), (' other income and revenue ', 47), (' share of profit of equity accounted investees ', 40), (' interest revenue ', 40), (' expenses ', 39), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' Loss on revaluation of inventories', 39), (' finance income and finance cost ', 38), (' Share of gain/(loss) of joint venture ', 38), (' Finance income and finance costs ', 38), (' Profit from discontinued operation ', 38), (' finance expenses', 37), (' Impairement (expenses)/reversal ', 36), (' other gains/losses ', 35), (' Impairment loss ', 33), (' net finance costs ', 30), (' other opertaing income ', 28), (' net of tax ', 25), (' net of tax ', 25), ('finance cost ', 22), (' other income ', 22), (' Other income ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Profit from discontinued operation ', 65), (' other income and revenue ', 55), (' other opertaing income ', 50), (' other gains/losses ', 43), (' other income ', 42), (' Other income ', 42), (' Loss on revaluation of inventories', 42), (' Share of gain/(loss) of joint venture ', 40), (' share of profit of equity accounted investees ', 39), (' net finance costs ', 38), (' interest revenue ', 38), (' Impairement (expenses)/reversal ', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' finance income and costs ', 33), (' Finance income and costs ', 33), (' finance income and finance cost ', 32), (' Finance income and finance costs ', 32), ('finance cost ', 24), (' expenses ', 21), (' net of tax ', 21), (' net of tax ', 21), (' finance expenses', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' finance income and costs ', 71), (' Finance income and costs ', 71), (' finance income and finance cost ', 63), (' Finance income and finance costs ', 63), (' net finance costs ', 57), ('finance cost ', 50), (' finance expenses', 46), (' other income and revenue ', 46), (' other income ', 42), (' Other income ', 42), (' Impairment loss ', 42), (' interest gains and losses ', 40), (' Loss on revaluation of inventories', 35), (' other opertaing income ', 32), (' Profit from discontinued operation ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' interest revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Impairement (expenses)/reversal ', 24), (' net of tax ', 20), (' net of tax ', 20), (' expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost ', 64), (' expenses ', 60), (' Impairement (expenses)/reversal ', 59), (' finance income and costs ', 57), (' Finance income and costs ', 57), (' net finance costs ', 55), (' finance income and finance cost ', 48), (' Finance income and finance costs ', 48), (' interest revenue ', 34), (' share of profit of equity accounted investees ', 29), (' Share of gain/(loss) of joint venture ', 29), (' net of tax ', 29), (' net of tax ', 29), (' Loss on revaluation of inventories', 29), (' interest gains and losses ', 28), (' other income and revenue ', 28), (' other income ', 24), (' Other income ', 24), (' Impairment loss ', 24), (' Profit from discontinued operation ', 24), (' other gains/losses ', 21), (' other opertaing income ', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' other opertaing income ', 55), (' Profit from discontinued operation ', 49), (' other income ', 48), (' Other income ', 48), (' share of profit of equity accounted investees ', 46), (' other income and revenue ', 45), (' net of tax ', 41), (' net of tax ', 41), (' net finance costs ', 38), (' Loss on revaluation of inventories', 37), ('finance cost ', 36), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' finance expenses', 34), (' finance income and costs ', 33), (' Impairement (expenses)/reversal ', 33), (' Finance income and costs ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Impairment loss ', 30), (' interest revenue ', 27), (' expenses ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Profit from discontinued operation ', 54), (' other opertaing income ', 51), (' share of profit of equity accounted investees ', 50), (' other income ', 44), (' Other income ', 44), (' other gains/losses ', 39), (' other income and revenue ', 37), (' Impairement (expenses)/reversal ', 34), (' net finance costs ', 33), (' Share of gain/(loss) of joint venture ', 33), (' Loss on revaluation of inventories', 33), (' finance expenses', 29), (' finance income and finance cost ', 29), (' finance income and costs ', 29), (' net of tax ', 29), (' Finance income and finance costs ', 29), (' net of tax ', 29), (' Finance income and costs ', 29), (' interest revenue ', 28), (' interest gains and losses ', 28), ('finance cost ', 25), (' Impairment loss ', 25), (' expenses ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' other income ', 48), (' Other income ', 48), (' finance expenses', 46), (' other opertaing income ', 45), (' other income and revenue ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' Profit from discontinued operation ', 41), (' Impairement (expenses)/reversal ', 38), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Finance income and finance costs ', 36), (' share of profit of equity accounted investees ', 35), (' Loss on revaluation of inventories', 33), (' other gains/losses ', 32), (' Impairment loss ', 30), (' expenses ', 29), (' Share of gain/(loss) of joint venture ', 28), (' net of tax ', 28), (' net of tax ', 28), (' interest revenue ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8, 9], 'score': 100, 'value': -57.0, 'line_item_label': ['Other income', 'Financial expenses', 'Net financing costs'], 'note_numbers': ['5', '9', nan], 'line_item_value': [46.0, -63.0, -40.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' interest gains and losses ', 51), (' other income and revenue ', 47), (' share of profit of equity accounted investees ', 40), (' interest revenue ', 40), (' expenses ', 39), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' Loss on revaluation of inventories', 39), (' finance income and finance cost ', 38), (' Share of gain/(loss) of joint venture ', 38), (' Finance income and finance costs ', 38), (' Profit from discontinued operation ', 38), (' finance expenses', 37), (' Impairement (expenses)/reversal ', 36), (' other gains/losses ', 35), (' Impairment loss ', 33), (' net finance costs ', 30), (' other opertaing income ', 28), (' net of tax ', 25), (' net of tax ', 25), ('finance cost ', 22), (' other income ', 22), (' Other income ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Profit from discontinued operation ', 65), (' other income and revenue ', 55), (' other opertaing income ', 50), (' other gains/losses ', 43), (' other income ', 42), (' Other income ', 42), (' Loss on revaluation of inventories', 42), (' Share of gain/(loss) of joint venture ', 40), (' share of profit of equity accounted investees ', 39), (' net finance costs ', 38), (' interest revenue ', 38), (' Impairement (expenses)/reversal ', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' finance income and costs ', 33), (' Finance income and costs ', 33), (' finance income and finance cost ', 32), (' Finance income and finance costs ', 32), ('finance cost ', 24), (' expenses ', 21), (' net of tax ', 21), (' net of tax ', 21), (' finance expenses', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' finance income and costs ', 71), (' Finance income and costs ', 71), (' finance income and finance cost ', 63), (' Finance income and finance costs ', 63), (' net finance costs ', 57), ('finance cost ', 50), (' finance expenses', 46), (' other income and revenue ', 46), (' other income ', 42), (' Other income ', 42), (' Impairment loss ', 42), (' interest gains and losses ', 40), (' Loss on revaluation of inventories', 35), (' other opertaing income ', 32), (' Profit from discontinued operation ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' interest revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Impairement (expenses)/reversal ', 24), (' net of tax ', 20), (' net of tax ', 20), (' expenses ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost ', 64), (' expenses ', 60), (' Impairement (expenses)/reversal ', 59), (' finance income and costs ', 57), (' Finance income and costs ', 57), (' net finance costs ', 55), (' finance income and finance cost ', 48), (' Finance income and finance costs ', 48), (' interest revenue ', 34), (' share of profit of equity accounted investees ', 29), (' Share of gain/(loss) of joint venture ', 29), (' net of tax ', 29), (' net of tax ', 29), (' Loss on revaluation of inventories', 29), (' interest gains and losses ', 28), (' other income and revenue ', 28), (' other income ', 24), (' Other income ', 24), (' Impairment loss ', 24), (' Profit from discontinued operation ', 24), (' other gains/losses ', 21), (' other opertaing income ', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' other opertaing income ', 55), (' Profit from discontinued operation ', 49), (' other income ', 48), (' Other income ', 48), (' share of profit of equity accounted investees ', 46), (' other income and revenue ', 45), (' net of tax ', 41), (' net of tax ', 41), (' net finance costs ', 38), (' Loss on revaluation of inventories', 37), ('finance cost ', 36), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' finance expenses', 34), (' finance income and costs ', 33), (' Impairement (expenses)/reversal ', 33), (' Finance income and costs ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Impairment loss ', 30), (' interest revenue ', 27), (' expenses ', 14)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' Profit from discontinued operation ', 54), (' other opertaing income ', 51), (' share of profit of equity accounted investees ', 50), (' other income ', 44), (' Other income ', 44), (' other gains/losses ', 39), (' other income and revenue ', 37), (' Impairement (expenses)/reversal ', 34), (' net finance costs ', 33), (' Share of gain/(loss) of joint venture ', 33), (' Loss on revaluation of inventories', 33), (' finance expenses', 29), (' finance income and finance cost ', 29), (' finance income and costs ', 29), (' net of tax ', 29), (' Finance income and finance costs ', 29), (' net of tax ', 29), (' Finance income and costs ', 29), (' interest revenue ', 28), (' interest gains and losses ', 28), ('finance cost ', 25), (' Impairment loss ', 25), (' expenses ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' other income ', 48), (' Other income ', 48), (' finance expenses', 46), (' other opertaing income ', 45), (' other income and revenue ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' Profit from discontinued operation ', 41), (' Impairement (expenses)/reversal ', 38), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Finance income and finance costs ', 36), (' share of profit of equity accounted investees ', 35), (' Loss on revaluation of inventories', 33), (' other gains/losses ', 32), (' Impairment loss ', 30), (' expenses ', 29), (' Share of gain/(loss) of joint venture ', 28), (' net of tax ', 28), (' net of tax ', 28), (' interest revenue ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8, 9], 'score': 100, 'value': -303.0, 'line_item_label': ['Other income', 'Financial expenses', 'Net financing costs'], 'note_numbers': ['5', '9', nan], 'line_item_value': [0.0, -180.0, -123.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [(' Sub-lease rental income ', 82), (' other income ', 64), (' share of jv income ', 64), (' quota lease income ', 62), (' other ', 60), (' sundry income ', 58), (' net of tax ', 57), (' Loss on loan refinancing ', 53), (' margin charge income ', 53), (' Power purchase agreement realised gain ', 53), (' government grants ', 50), (' other revenue', 50), (' Interest on unwinding of discount in provisions ', 47), (' net foreign exchange (loss)/gain ', 47), (' net foreign exchange gain ', 47), (' net foreign exchange gains/(losses) ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' other miscellaneous - net (loss)/gain ', 47), (' Power purchase agreement unrelaised gain ', 47), (' secondment income (tw recovery) ', 47), (' Asset impairment ', 43), (' Arising from inventory of cranes ', 41), (' effective portion of changes in fair value of cash flow ', 41), (' foreign exchange gain ', 41), (' Investment in joint venture ', 41), (' Loss on sale of disposal of assets ', 41), (' net (loss)/profit on disposal of non-current assets ', 41), (' net gain / loss on disposal of property plant and equipment ', 41), (' Net loss on disposal of property ', 41), (' net ppe disposal (loss)/gain ', 41), (' paid by customers - at amortised cost ', 41), (' profit from discontinued operation ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Share of gain/(loss) of joint venture ', 41), ('Accretion expense ', 38), (' commission revenue ', 36), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' Arising from inventory of spare parts ', 35), (' dividend from other parties ', 35), (' plant and equipment ', 33), (' Profit on sale of assets ', 30), (' Impairment loss ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net of tax ', 71), (' net (loss)/profit on disposal of non-current assets ', 50), (' net gain / loss on disposal of property plant and equipment ', 50), (' Net other foreign exchange (losses)/gains ', 50), (' other miscellaneous - net (loss)/gain ', 50), (' Sub-lease rental income ', 50), (' Arising from inventory of cranes ', 40), (' Arising from inventory of spare parts ', 40), (' dividend from other parties ', 40), (' effective portion of changes in fair value of cash flow ', 40), (' government grants ', 40), (' Interest on unwinding of discount in provisions ', 40), (' Investment in joint venture ', 40), (' Loss on loan refinancing ', 40), (' Loss on sale of disposal of assets ', 40), (' net foreign exchange (loss)/gain ', 40), (' net foreign exchange gain ', 40), (' net foreign exchange gains/(losses) ', 40), (' Net loss on disposal of property ', 40), (' net ppe disposal (loss)/gain ', 40), (' other ', 40), (' other income ', 40), (' paid by customers - at amortised cost ', 40), (' Power purchase agreement realised gain ', 40), (' Power purchase agreement unrelaised gain ', 40), (' profit from discontinued operation ', 40), (' Profit on sale of assets ', 40), (' quota lease income ', 40), (' Remuneration from services linked to newly acquired entities ', 40), (' secondment income (tw recovery) ', 40), (' Share of gain/(loss) of joint venture ', 40), (' Asset impairment ', 30), (' foreign exchange gain ', 30), (' insurance proceeds ', 30), (' japan recoveries ', 30), (' margin charge income ', 30), (' plant and equipment ', 30), (' share of jv income ', 30), (' sundry income ', 30), (' other revenue', 30), (' Impairment loss ', 21), ('Accretion expense ', 20), (' commission revenue ', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none rental income , res_fuzz_match = [(' Sub-lease rental income ', 82), (' other income ', 64), (' share of jv income ', 64), (' quota lease income ', 62), (' other ', 60), (' sundry income ', 58), (' net of tax ', 57), (' Loss on loan refinancing ', 53), (' margin charge income ', 53), (' Power purchase agreement realised gain ', 53), (' government grants ', 50), (' other revenue', 50), (' Interest on unwinding of discount in provisions ', 47), (' net foreign exchange (loss)/gain ', 47), (' net foreign exchange gain ', 47), (' net foreign exchange gains/(losses) ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' other miscellaneous - net (loss)/gain ', 47), (' Power purchase agreement unrelaised gain ', 47), (' secondment income (tw recovery) ', 47), (' Asset impairment ', 43), (' Arising from inventory of cranes ', 41), (' effective portion of changes in fair value of cash flow ', 41), (' foreign exchange gain ', 41), (' Investment in joint venture ', 41), (' Loss on sale of disposal of assets ', 41), (' net (loss)/profit on disposal of non-current assets ', 41), (' net gain / loss on disposal of property plant and equipment ', 41), (' Net loss on disposal of property ', 41), (' net ppe disposal (loss)/gain ', 41), (' paid by customers - at amortised cost ', 41), (' profit from discontinued operation ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Share of gain/(loss) of joint venture ', 41), ('Accretion expense ', 38), (' commission revenue ', 36), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' Arising from inventory of spare parts ', 35), (' dividend from other parties ', 35), (' plant and equipment ', 33), (' Profit on sale of assets ', 30), (' Impairment loss ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net of tax ', 71), (' net (loss)/profit on disposal of non-current assets ', 50), (' net gain / loss on disposal of property plant and equipment ', 50), (' Net other foreign exchange (losses)/gains ', 50), (' other miscellaneous - net (loss)/gain ', 50), (' Sub-lease rental income ', 50), (' Arising from inventory of cranes ', 40), (' Arising from inventory of spare parts ', 40), (' dividend from other parties ', 40), (' effective portion of changes in fair value of cash flow ', 40), (' government grants ', 40), (' Interest on unwinding of discount in provisions ', 40), (' Investment in joint venture ', 40), (' Loss on loan refinancing ', 40), (' Loss on sale of disposal of assets ', 40), (' net foreign exchange (loss)/gain ', 40), (' net foreign exchange gain ', 40), (' net foreign exchange gains/(losses) ', 40), (' Net loss on disposal of property ', 40), (' net ppe disposal (loss)/gain ', 40), (' other ', 40), (' other income ', 40), (' paid by customers - at amortised cost ', 40), (' Power purchase agreement realised gain ', 40), (' Power purchase agreement unrelaised gain ', 40), (' profit from discontinued operation ', 40), (' Profit on sale of assets ', 40), (' quota lease income ', 40), (' Remuneration from services linked to newly acquired entities ', 40), (' secondment income (tw recovery) ', 40), (' Share of gain/(loss) of joint venture ', 40), (' Asset impairment ', 30), (' foreign exchange gain ', 30), (' insurance proceeds ', 30), (' japan recoveries ', 30), (' margin charge income ', 30), (' plant and equipment ', 30), (' share of jv income ', 30), (' sundry income ', 30), (' other revenue', 30), (' Impairment loss ', 21), ('Accretion expense ', 20), (' commission revenue ', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [82, 82], 'value': [0.0, 46.0], 'label': ['None Rental income', 'None Rental income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [(' other income ', 73), (' share of jv income ', 73), (' other ', 60), (' Interest on unwinding of discount in provisions ', 58), (' Sub-lease rental income ', 58), (' sundry income ', 58), (' net of tax ', 57), (' quota lease income ', 56), (' margin charge income ', 50), (' net gain / loss on disposal of property plant and equipment ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' Power purchase agreement realised gain ', 47), (' Power purchase agreement unrelaised gain ', 47), (' secondment income (tw recovery) ', 47), (' Loss on loan refinancing ', 44), (' Asset impairment ', 43), (' Investment in joint venture ', 43), (' Arising from inventory of cranes ', 42), (' dividend from other parties ', 42), (' foreign exchange gain ', 42), (' government grants ', 42), (' net foreign exchange (loss)/gain ', 42), (' net foreign exchange gain ', 42), (' net foreign exchange gains/(losses) ', 42), (' other miscellaneous - net (loss)/gain ', 42), (' profit from discontinued operation ', 42), (' Remuneration from services linked to newly acquired entities ', 42), (' Share of gain/(loss) of joint venture ', 42), (' other revenue', 42), ('Accretion expense ', 40), (' net ppe disposal (loss)/gain ', 38), (' Arising from inventory of spare parts ', 37), (' effective portion of changes in fair value of cash flow ', 37), (' net (loss)/profit on disposal of non-current assets ', 37), (' Net loss on disposal of property ', 37), (' paid by customers - at amortised cost ', 37), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' Profit on sale of assets ', 35), (' plant and equipment ', 33), (' Loss on sale of disposal of assets ', 32), (' commission revenue ', 29), (' Impairment loss ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [(' foreign exchange gain ', 100), (' net foreign exchange gain ', 96), (' net foreign exchange gains/(losses) ', 92), (' net foreign exchange (loss)/gain ', 80), (' Net other foreign exchange (losses)/gains ', 80), (' margin charge income ', 61), (' effective portion of changes in fair value of cash flow ', 60), (' government grants ', 50), (' other revenue', 50), (' Power purchase agreement realised gain ', 48), (' Power purchase agreement unrelaised gain ', 48), (' Investment in joint venture ', 47), ('Accretion expense ', 46), (' net ppe disposal (loss)/gain ', 46), (' other income ', 45), (' share of jv income ', 45), (' Loss on loan refinancing ', 44), (' net gain / loss on disposal of property plant and equipment ', 44), (' Remuneration from services linked to newly acquired entities ', 44), (' net of tax ', 43), (' Arising from inventory of cranes ', 40), (' Arising from inventory of spare parts ', 40), (' Interest on unwinding of discount in provisions ', 40), (' other ', 40), (' other miscellaneous - net (loss)/gain ', 40), (' plant and equipment ', 40), (' quota lease income ', 38), (' secondment income (tw recovery) ', 38), (' dividend from other parties ', 37), (' commission revenue ', 36), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' net (loss)/profit on disposal of non-current assets ', 36), (' profit from discontinued operation ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Profit on sale of assets ', 35), (' Sub-lease rental income ', 35), (' Asset impairment ', 33), (' Net loss on disposal of property ', 33), (' sundry income ', 33), (' paid by customers - at amortised cost ', 29), (' Loss on sale of disposal of assets ', 27), (' Impairment loss ', 18)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [(' sundry income ', 67), (' share of jv income ', 64), (' net of tax ', 57), (' Sub-lease rental income ', 57), (' other income ', 55), (' Loss on loan refinancing ', 51), (' margin charge income ', 50), (' quota lease income ', 50), (' Remuneration from services linked to newly acquired entities ', 50), (' secondment income (tw recovery) ', 50), (' foreign exchange gain ', 46), (' Impairment loss ', 45), (' Arising from inventory of cranes ', 44), (' Interest on unwinding of discount in provisions ', 44), (' net foreign exchange (loss)/gain ', 44), (' net foreign exchange gain ', 44), (' net foreign exchange gains/(losses) ', 44), (' Net other foreign exchange (losses)/gains ', 44), (' other miscellaneous - net (loss)/gain ', 44), (' Power purchase agreement unrelaised gain ', 44), (' Asset impairment ', 42), (' government grants ', 42), (' japan recoveries ', 40), (' other ', 40), (' plant and equipment ', 40), (' Arising from inventory of spare parts ', 39), (' effective portion of changes in fair value of cash flow ', 39), (' Investment in joint venture ', 39), (' net (loss)/profit on disposal of non-current assets ', 39), (' net gain / loss on disposal of property plant and equipment ', 39), (' paid by customers - at amortised cost ', 39), (' Power purchase agreement realised gain ', 39), (' profit from discontinued operation ', 39), (' Share of gain/(loss) of joint venture ', 39), (' insurance proceeds ', 36), (' Loss on sale of disposal of assets ', 33), (' Net loss on disposal of property ', 33), (' net ppe disposal (loss)/gain ', 33), (' other revenue', 33), ('Accretion expense ', 31), (' commission revenue ', 29), (' Profit on sale of assets ', 29), (' dividend from other parties ', 28)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [(' other ', 60), (' net of tax ', 57), (' Asset impairment ', 50), (' quota lease income ', 50), (' Profit on sale of assets ', 47), ('Accretion expense ', 46), (' net foreign exchange gain ', 46), (' net ppe disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' Sub-lease rental income ', 45), (' Interest on unwinding of discount in provisions ', 44), (' net foreign exchange gains/(losses) ', 44), (' Net other foreign exchange (losses)/gains ', 44), (' other miscellaneous - net (loss)/gain ', 44), (' Power purchase agreement unrelaised gain ', 44), (' Arising from inventory of spare parts ', 43), (' net foreign exchange (loss)/gain ', 43), (' Net loss on disposal of property ', 43), (' secondment income (tw recovery) ', 43), (' government grants ', 42), (' Power purchase agreement realised gain ', 42), (' other revenue', 42), (' effective portion of changes in fair value of cash flow ', 41), (' net gain / loss on disposal of property plant and equipment ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' foreign exchange gain ', 40), (' Loss on loan refinancing ', 39), (' Share of gain/(loss) of joint venture ', 38), (' Investment in joint venture ', 37), (' net (loss)/profit on disposal of non-current assets ', 37), (' dividend from other parties ', 36), (' Impairment loss ', 36), (' japan recoveries ', 36), (' Loss on sale of disposal of assets ', 36), (' paid by customers - at amortised cost ', 34), (' plant and equipment ', 33), (' sundry income ', 33), (' Arising from inventory of cranes ', 32), (' profit from discontinued operation ', 30), (' commission revenue ', 29), (' margin charge income ', 28), (' share of jv income ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [(' net foreign exchange (loss)/gain ', 92), (' Net other foreign exchange (losses)/gains ', 88), (' foreign exchange gain ', 80), (' net foreign exchange gains/(losses) ', 80), (' net foreign exchange gain ', 79), (' margin charge income ', 56), (' Impairment loss ', 55), (' effective portion of changes in fair value of cash flow ', 52), (' other revenue', 50), (' other miscellaneous - net (loss)/gain ', 48), (' Investment in joint venture ', 47), ('Accretion expense ', 46), (' other income ', 45), (' share of jv income ', 45), (' Loss on loan refinancing ', 44), (' net gain / loss on disposal of property plant and equipment ', 44), (' Remuneration from services linked to newly acquired entities ', 44), (' net of tax ', 43), (' net ppe disposal (loss)/gain ', 43), (' government grants ', 42), (' Arising from inventory of cranes ', 40), (' Interest on unwinding of discount in provisions ', 40), (' other ', 40), (' Share of gain/(loss) of joint venture ', 40), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' secondment income (tw recovery) ', 38), (' Arising from inventory of spare parts ', 36), (' commission revenue ', 36), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' net (loss)/profit on disposal of non-current assets ', 36), (' Power purchase agreement realised gain ', 36), (' Power purchase agreement unrelaised gain ', 36), (' profit from discontinued operation ', 36), (' Profit on sale of assets ', 36), (' Sub-lease rental income ', 35), (' Loss on sale of disposal of assets ', 33), (' plant and equipment ', 33), (' sundry income ', 33), (' Net loss on disposal of property ', 29), (' dividend from other parties ', 28), (' Asset impairment ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [(' net of tax ', 57), (' Impairment loss ', 55), (' other income ', 55), (' Loss on loan refinancing ', 53), (' paid by customers - at amortised cost ', 53), (' secondment income (tw recovery) ', 53), (' Arising from inventory of cranes ', 47), (' Arising from inventory of spare parts ', 47), (' effective portion of changes in fair value of cash flow ', 47), (' net (loss)/profit on disposal of non-current assets ', 47), (' net foreign exchange (loss)/gain ', 47), (' net foreign exchange gain ', 47), (' net foreign exchange gains/(losses) ', 47), (' net gain / loss on disposal of property plant and equipment ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' Remuneration from services linked to newly acquired entities ', 47), (' Share of gain/(loss) of joint venture ', 47), (' share of jv income ', 45), (' quota lease income ', 44), (' Asset impairment ', 42), (' government grants ', 42), (' Profit on sale of assets ', 42), (' Sub-lease rental income ', 42), (' sundry income ', 42), (' foreign exchange gain ', 41), (' Interest on unwinding of discount in provisions ', 41), (' Investment in joint venture ', 41), (' other miscellaneous - net (loss)/gain ', 41), (' profit from discontinued operation ', 41), (' other ', 40), (' japan recoveries ', 38), (' insurance proceeds ', 36), (' margin charge income ', 36), (' dividend from other parties ', 35), (' Loss on sale of disposal of assets ', 35), (' Net loss on disposal of property ', 35), (' net ppe disposal (loss)/gain ', 35), (' Power purchase agreement unrelaised gain ', 35), (' plant and equipment ', 33), (' other revenue', 33), ('Accretion expense ', 31), (' Power purchase agreement realised gain ', 29), (' commission revenue ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [(' net of tax ', 57), (' Loss on loan refinancing ', 56), (' effective portion of changes in fair value of cash flow ', 50), (' Interest on unwinding of discount in provisions ', 50), (' net foreign exchange (loss)/gain ', 50), (' net foreign exchange gain ', 50), (' net foreign exchange gains/(losses) ', 50), (' Sub-lease rental income ', 46), (' Impairment loss ', 45), (' net gain / loss on disposal of property plant and equipment ', 45), (' Net other foreign exchange (losses)/gains ', 45), (' net ppe disposal (loss)/gain ', 45), (' other income ', 45), (' paid by customers - at amortised cost ', 45), (' Remuneration from services linked to newly acquired entities ', 45), (' secondment income (tw recovery) ', 45), (' share of jv income ', 45), (' quota lease income ', 44), (' Investment in joint venture ', 43), (' Asset impairment ', 42), (' government grants ', 42), (' sundry income ', 42), (' other revenue', 42), (' Arising from inventory of cranes ', 40), (' Arising from inventory of spare parts ', 40), (' net (loss)/profit on disposal of non-current assets ', 40), (' other ', 40), (' other miscellaneous - net (loss)/gain ', 40), (' plant and equipment ', 40), (' profit from discontinued operation ', 40), (' Share of gain/(loss) of joint venture ', 40), (' margin charge income ', 39), ('Accretion expense ', 38), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' Profit on sale of assets ', 36), (' dividend from other parties ', 35), (' foreign exchange gain ', 35), (' Loss on sale of disposal of assets ', 35), (' Net loss on disposal of property ', 35), (' Power purchase agreement realised gain ', 35), (' Power purchase agreement unrelaised gain ', 35), (' commission revenue ', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest income , res_fuzz_match = [(' other income ', 73), (' share of jv income ', 73), (' other ', 60), (' Interest on unwinding of discount in provisions ', 58), (' Sub-lease rental income ', 58), (' sundry income ', 58), (' net of tax ', 57), (' quota lease income ', 56), (' margin charge income ', 50), (' net gain / loss on disposal of property plant and equipment ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' Power purchase agreement realised gain ', 47), (' Power purchase agreement unrelaised gain ', 47), (' secondment income (tw recovery) ', 47), (' Loss on loan refinancing ', 44), (' Asset impairment ', 43), (' Investment in joint venture ', 43), (' Arising from inventory of cranes ', 42), (' dividend from other parties ', 42), (' foreign exchange gain ', 42), (' government grants ', 42), (' net foreign exchange (loss)/gain ', 42), (' net foreign exchange gain ', 42), (' net foreign exchange gains/(losses) ', 42), (' other miscellaneous - net (loss)/gain ', 42), (' profit from discontinued operation ', 42), (' Remuneration from services linked to newly acquired entities ', 42), (' Share of gain/(loss) of joint venture ', 42), (' other revenue', 42), ('Accretion expense ', 40), (' net ppe disposal (loss)/gain ', 38), (' Arising from inventory of spare parts ', 37), (' effective portion of changes in fair value of cash flow ', 37), (' net (loss)/profit on disposal of non-current assets ', 37), (' Net loss on disposal of property ', 37), (' paid by customers - at amortised cost ', 37), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' Profit on sale of assets ', 35), (' plant and equipment ', 33), (' Loss on sale of disposal of assets ', 32), (' commission revenue ', 29), (' Impairment loss ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange gain , res_fuzz_match = [(' foreign exchange gain ', 100), (' net foreign exchange gain ', 96), (' net foreign exchange gains/(losses) ', 92), (' net foreign exchange (loss)/gain ', 80), (' Net other foreign exchange (losses)/gains ', 80), (' margin charge income ', 61), (' effective portion of changes in fair value of cash flow ', 60), (' government grants ', 50), (' other revenue', 50), (' Power purchase agreement realised gain ', 48), (' Power purchase agreement unrelaised gain ', 48), (' Investment in joint venture ', 47), ('Accretion expense ', 46), (' net ppe disposal (loss)/gain ', 46), (' other income ', 45), (' share of jv income ', 45), (' Loss on loan refinancing ', 44), (' net gain / loss on disposal of property plant and equipment ', 44), (' Remuneration from services linked to newly acquired entities ', 44), (' net of tax ', 43), (' Arising from inventory of cranes ', 40), (' Arising from inventory of spare parts ', 40), (' Interest on unwinding of discount in provisions ', 40), (' other ', 40), (' other miscellaneous - net (loss)/gain ', 40), (' plant and equipment ', 40), (' quota lease income ', 38), (' secondment income (tw recovery) ', 38), (' dividend from other parties ', 37), (' commission revenue ', 36), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' net (loss)/profit on disposal of non-current assets ', 36), (' profit from discontinued operation ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Profit on sale of assets ', 35), (' Sub-lease rental income ', 35), (' Asset impairment ', 33), (' Net loss on disposal of property ', 33), (' sundry income ', 33), (' paid by customers - at amortised cost ', 29), (' Loss on sale of disposal of assets ', 27), (' Impairment loss ', 18)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial income , res_fuzz_match = [(' sundry income ', 67), (' share of jv income ', 64), (' net of tax ', 57), (' Sub-lease rental income ', 57), (' other income ', 55), (' Loss on loan refinancing ', 51), (' margin charge income ', 50), (' quota lease income ', 50), (' Remuneration from services linked to newly acquired entities ', 50), (' secondment income (tw recovery) ', 50), (' foreign exchange gain ', 46), (' Impairment loss ', 45), (' Arising from inventory of cranes ', 44), (' Interest on unwinding of discount in provisions ', 44), (' net foreign exchange (loss)/gain ', 44), (' net foreign exchange gain ', 44), (' net foreign exchange gains/(losses) ', 44), (' Net other foreign exchange (losses)/gains ', 44), (' other miscellaneous - net (loss)/gain ', 44), (' Power purchase agreement unrelaised gain ', 44), (' Asset impairment ', 42), (' government grants ', 42), (' japan recoveries ', 40), (' other ', 40), (' plant and equipment ', 40), (' Arising from inventory of spare parts ', 39), (' effective portion of changes in fair value of cash flow ', 39), (' Investment in joint venture ', 39), (' net (loss)/profit on disposal of non-current assets ', 39), (' net gain / loss on disposal of property plant and equipment ', 39), (' paid by customers - at amortised cost ', 39), (' Power purchase agreement realised gain ', 39), (' profit from discontinued operation ', 39), (' Share of gain/(loss) of joint venture ', 39), (' insurance proceeds ', 36), (' Loss on sale of disposal of assets ', 33), (' Net loss on disposal of property ', 33), (' net ppe disposal (loss)/gain ', 33), (' other revenue', 33), ('Accretion expense ', 31), (' commission revenue ', 29), (' Profit on sale of assets ', 29), (' dividend from other parties ', 28)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none interest on lease liabilties , res_fuzz_match = [(' other ', 60), (' net of tax ', 57), (' Asset impairment ', 50), (' quota lease income ', 50), (' Profit on sale of assets ', 47), ('Accretion expense ', 46), (' net foreign exchange gain ', 46), (' net ppe disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' Sub-lease rental income ', 45), (' Interest on unwinding of discount in provisions ', 44), (' net foreign exchange gains/(losses) ', 44), (' Net other foreign exchange (losses)/gains ', 44), (' other miscellaneous - net (loss)/gain ', 44), (' Power purchase agreement unrelaised gain ', 44), (' Arising from inventory of spare parts ', 43), (' net foreign exchange (loss)/gain ', 43), (' Net loss on disposal of property ', 43), (' secondment income (tw recovery) ', 43), (' government grants ', 42), (' Power purchase agreement realised gain ', 42), (' other revenue', 42), (' effective portion of changes in fair value of cash flow ', 41), (' net gain / loss on disposal of property plant and equipment ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' foreign exchange gain ', 40), (' Loss on loan refinancing ', 39), (' Share of gain/(loss) of joint venture ', 38), (' Investment in joint venture ', 37), (' net (loss)/profit on disposal of non-current assets ', 37), (' dividend from other parties ', 36), (' Impairment loss ', 36), (' japan recoveries ', 36), (' Loss on sale of disposal of assets ', 36), (' paid by customers - at amortised cost ', 34), (' plant and equipment ', 33), (' sundry income ', 33), (' Arising from inventory of cranes ', 32), (' profit from discontinued operation ', 30), (' commission revenue ', 29), (' margin charge income ', 28), (' share of jv income ', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none foreign exchange loss , res_fuzz_match = [(' net foreign exchange (loss)/gain ', 92), (' Net other foreign exchange (losses)/gains ', 88), (' foreign exchange gain ', 80), (' net foreign exchange gains/(losses) ', 80), (' net foreign exchange gain ', 79), (' margin charge income ', 56), (' Impairment loss ', 55), (' effective portion of changes in fair value of cash flow ', 52), (' other revenue', 50), (' other miscellaneous - net (loss)/gain ', 48), (' Investment in joint venture ', 47), ('Accretion expense ', 46), (' other income ', 45), (' share of jv income ', 45), (' Loss on loan refinancing ', 44), (' net gain / loss on disposal of property plant and equipment ', 44), (' Remuneration from services linked to newly acquired entities ', 44), (' net of tax ', 43), (' net ppe disposal (loss)/gain ', 43), (' government grants ', 42), (' Arising from inventory of cranes ', 40), (' Interest on unwinding of discount in provisions ', 40), (' other ', 40), (' Share of gain/(loss) of joint venture ', 40), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' secondment income (tw recovery) ', 38), (' Arising from inventory of spare parts ', 36), (' commission revenue ', 36), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' net (loss)/profit on disposal of non-current assets ', 36), (' Power purchase agreement realised gain ', 36), (' Power purchase agreement unrelaised gain ', 36), (' profit from discontinued operation ', 36), (' Profit on sale of assets ', 36), (' Sub-lease rental income ', 35), (' Loss on sale of disposal of assets ', 33), (' plant and equipment ', 33), (' sundry income ', 33), (' Net loss on disposal of property ', 29), (' dividend from other parties ', 28), (' Asset impairment ', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none financial costs , res_fuzz_match = [(' net of tax ', 57), (' Impairment loss ', 55), (' other income ', 55), (' Loss on loan refinancing ', 53), (' paid by customers - at amortised cost ', 53), (' secondment income (tw recovery) ', 53), (' Arising from inventory of cranes ', 47), (' Arising from inventory of spare parts ', 47), (' effective portion of changes in fair value of cash flow ', 47), (' net (loss)/profit on disposal of non-current assets ', 47), (' net foreign exchange (loss)/gain ', 47), (' net foreign exchange gain ', 47), (' net foreign exchange gains/(losses) ', 47), (' net gain / loss on disposal of property plant and equipment ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' Remuneration from services linked to newly acquired entities ', 47), (' Share of gain/(loss) of joint venture ', 47), (' share of jv income ', 45), (' quota lease income ', 44), (' Asset impairment ', 42), (' government grants ', 42), (' Profit on sale of assets ', 42), (' Sub-lease rental income ', 42), (' sundry income ', 42), (' foreign exchange gain ', 41), (' Interest on unwinding of discount in provisions ', 41), (' Investment in joint venture ', 41), (' other miscellaneous - net (loss)/gain ', 41), (' profit from discontinued operation ', 41), (' other ', 40), (' japan recoveries ', 38), (' insurance proceeds ', 36), (' margin charge income ', 36), (' dividend from other parties ', 35), (' Loss on sale of disposal of assets ', 35), (' Net loss on disposal of property ', 35), (' net ppe disposal (loss)/gain ', 35), (' Power purchase agreement unrelaised gain ', 35), (' plant and equipment ', 33), (' other revenue', 33), ('Accretion expense ', 31), (' Power purchase agreement realised gain ', 29), (' commission revenue ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none net financing costs , res_fuzz_match = [(' net of tax ', 57), (' Loss on loan refinancing ', 56), (' effective portion of changes in fair value of cash flow ', 50), (' Interest on unwinding of discount in provisions ', 50), (' net foreign exchange (loss)/gain ', 50), (' net foreign exchange gain ', 50), (' net foreign exchange gains/(losses) ', 50), (' Sub-lease rental income ', 46), (' Impairment loss ', 45), (' net gain / loss on disposal of property plant and equipment ', 45), (' Net other foreign exchange (losses)/gains ', 45), (' net ppe disposal (loss)/gain ', 45), (' other income ', 45), (' paid by customers - at amortised cost ', 45), (' Remuneration from services linked to newly acquired entities ', 45), (' secondment income (tw recovery) ', 45), (' share of jv income ', 45), (' quota lease income ', 44), (' Investment in joint venture ', 43), (' Asset impairment ', 42), (' government grants ', 42), (' sundry income ', 42), (' other revenue', 42), (' Arising from inventory of cranes ', 40), (' Arising from inventory of spare parts ', 40), (' net (loss)/profit on disposal of non-current assets ', 40), (' other ', 40), (' other miscellaneous - net (loss)/gain ', 40), (' plant and equipment ', 40), (' profit from discontinued operation ', 40), (' Share of gain/(loss) of joint venture ', 40), (' margin charge income ', 39), ('Accretion expense ', 38), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' Profit on sale of assets ', 36), (' dividend from other parties ', 35), (' foreign exchange gain ', 35), (' Loss on sale of disposal of assets ', 35), (' Net loss on disposal of property ', 35), (' Power purchase agreement realised gain ', 35), (' Power purchase agreement unrelaised gain ', 35), (' commission revenue ', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('Accretion expense ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Asset impairment ', 0), (' commission revenue ', 0), (' dividend from other parties ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' foreign exchange gain ', 0), (' government grants ', 0), (' Impairment loss ', 0), (' insurance proceeds ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Investment in joint venture ', 0), (' japan recoveries ', 0), (' Loss on loan refinancing ', 0), (' Loss on sale of disposal of assets ', 0), (' margin charge income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net foreign exchange (loss)/gain ', 0), (' net foreign exchange gain ', 0), (' net foreign exchange gains/(losses) ', 0), (' net gain / loss on disposal of property plant and equipment ', 0), (' Net loss on disposal of property ', 0), (' net of tax ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' net ppe disposal (loss)/gain ', 0), (' other ', 0), (' other income ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' paid by customers - at amortised cost ', 0), (' plant and equipment ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' profit from discontinued operation ', 0), (' Profit on sale of assets ', 0), (' quota lease income ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' secondment income (tw recovery) ', 0), (' Share of gain/(loss) of joint venture ', 0), (' share of jv income ', 0), (' Sub-lease rental income ', 0), (' sundry income ', 0), (' other revenue', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 8, 11], 'score': [100, 92, 100, 92], 'value': [0.0, -56.0, 1.0, 0.0], 'label': ['None Foreign exchange gain', 'None Foreign exchange loss', 'None Foreign exchange gain', 'None Foreign exchange loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('NULL', 28)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('NULL', 28)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 45), ('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 34), ('provision for taxation previous year', 33), ('earlier year', 32), (' income tax benefit', 29), ('deferred tax', 24), (' income tax', 24), ('prior year ', 23), ('current tax', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' income tax benefit', 53), (' income tax benefit/(expense)', 49), (' income tax expense', 48), (' income tax', 45), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 30), (' tax (expense)/benefit', 26), ('earlier year', 24), ('provision for taxation previous year', 19), ('deferred tax', 18), ('current tax', 17), ('prior year ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit/(expense)', 53), (' tax (expense)/benefit', 50), (' income tax benefit', 39), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('earlier year', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 26), ('prior year ', 25), ('provision for taxation previous year', 23)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('provision for taxation previous year', 64), ('prior year ', 45), ('amount transferred to retained earnings', 42), ('earlier year', 36), (' income tax benefit/(expense)', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 33), (' income tax expense', 32), (' income tax benefit', 32), ('current tax', 31), (' tax (expense)/benefit', 31), (' income tax', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' income tax expense', 68), (' income tax benefit/(expense)', 57), (' income tax benefit', 56), (' income tax', 52), ('minimum alternate tax credit entitlement', 44), ('current tax', 42), ('provision for taxation previous year', 39), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' tax (expense)/benefit', 35), ('deferred tax', 32), ('earlier year', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -890.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['18'], 'line_item_value': [-890.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 45), ('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 34), ('provision for taxation previous year', 33), ('earlier year', 32), (' income tax benefit', 29), ('deferred tax', 24), (' income tax', 24), ('prior year ', 23), ('current tax', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' income tax benefit', 53), (' income tax benefit/(expense)', 49), (' income tax expense', 48), (' income tax', 45), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 30), (' tax (expense)/benefit', 26), ('earlier year', 24), ('provision for taxation previous year', 19), ('deferred tax', 18), ('current tax', 17), ('prior year ', 17)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit/(expense)', 53), (' tax (expense)/benefit', 50), (' income tax benefit', 39), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('earlier year', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 26), ('prior year ', 25), ('provision for taxation previous year', 23)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('provision for taxation previous year', 64), ('prior year ', 45), ('amount transferred to retained earnings', 42), ('earlier year', 36), (' income tax benefit/(expense)', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 33), (' income tax expense', 32), (' income tax benefit', 32), ('current tax', 31), (' tax (expense)/benefit', 31), (' income tax', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' income tax expense', 68), (' income tax benefit/(expense)', 57), (' income tax benefit', 56), (' income tax', 52), ('minimum alternate tax credit entitlement', 44), ('current tax', 42), ('provision for taxation previous year', 39), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' tax (expense)/benefit', 35), ('deferred tax', 32), ('earlier year', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -1326.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['18'], 'line_item_value': [-1326.0]}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' income tax expense on continuing operations', 42), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), (' current income tax', 35), ('income tax expense', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 39), (' current income tax', 35), (' total income tax expense / (benefit)', 34), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 34), (' deferred income tax', 33), (' total income tax expense / (benefit)', 31), ('income tax expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), (' current income tax', 35), ('income tax expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 42), (' current income tax', 33), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 25), (' total income tax expense / (benefit)', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax expense', 50), (' current income tax', 50), (' deferred income tax', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' income tax expense on continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 warranties make , res_fuzz_match = [(' current income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 32), ('income tax expense', 31), (' total income tax expense / (benefit)', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' income tax expense on continuing operations', 42), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), (' current income tax', 35), ('income tax expense', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 39), (' current income tax', 35), (' total income tax expense / (benefit)', 34), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 34), (' deferred income tax', 33), (' total income tax expense / (benefit)', 31), ('income tax expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), (' current income tax', 35), ('income tax expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 42), (' current income tax', 33), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 25), (' total income tax expense / (benefit)', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax expense', 50), (' current income tax', 50), (' deferred income tax', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' income tax expense on continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 good , res_fuzz_match = [('income tax expense', 25), (' current income tax', 25), (' deferred income tax', 25), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 25), (' income tax expense on continuing operations', 25), (' total income tax expense / (benefit)', 25), (' total tax (expense)/benefit in income statement', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none balance at 1 april 2022 , res_fuzz_match = [(' income tax expense on continuing operations', 42), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), (' current income tax', 35), ('income tax expense', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none provisions made during the year , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 39), (' current income tax', 35), (' total income tax expense / (benefit)', 34), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none provisions used during the year , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 34), (' deferred income tax', 33), (' total income tax expense / (benefit)', 31), ('income tax expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none balance at 31 march 2023 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), (' deferred income tax', 40), (' current income tax', 35), ('income tax expense', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 42), (' current income tax', 33), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 25), (' total income tax expense / (benefit)', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('income tax expense', 50), (' current income tax', 50), (' deferred income tax', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' income tax expense on continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_rows = $'000 total , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 16, 17, 18, 19, 20], 'score': [100, 100, 100, 100, 100, 100, 100], 'value': [1393.0, 514.0, -635.0, 1272.0, 896.0, 376.0, 1272.0], 'label': ["$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL", "$'000 TOTAL"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 22), ('exceptional ', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 35), ('exceptional ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 28), ('exceptional ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' prior period ', 31), ('exceptional ', 30), (' Actuarial gains / (losses) on retirement benefit obligation', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' prior period ', 47), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' prior period ', 61), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 35), ('exceptional ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 22), ('exceptional ', 19)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 35), ('exceptional ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 28), ('exceptional ', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' prior period ', 31), ('exceptional ', 30), (' Actuarial gains / (losses) on retirement benefit obligation', 27)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' prior period ', 47), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 29)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [(' prior period ', 61), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 22)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 35), ('exceptional ', 21)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 09:55:46+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 09:55:46+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('NULL', 28)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:55:46+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 09:55:46+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('NULL', 28)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = profit for the period , res_fuzz_match = [('NULL', 0)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('NULL', 15)]
2023-08-17 09:55:46+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 09:57:25+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-17 09:57:25+0530 - sLogger - DEBUG - {'fileid': 'e85e1f9f-cadb-446a-bfe3-3ffbf5234aed', 'filename': 'SAPL finnancial statements Mar-23 Signed.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/SAPL finnancial statements Mar-23 Signed.pdf', 'status': 'Processing'}
2023-08-17 09:57:25+0530 - sLogger - DEBUG - save file completed
2023-08-17 09:57:25+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-17 09:57:25+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-17 09:57:25+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-17 09:57:25+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-17 09:57:25+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-17 09:57:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:25+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:30+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:30+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:42+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:42+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:46+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:57:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:57:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:57:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:57:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:57:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:57:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:57:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:18+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:18+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:24+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:24+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:45+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:58:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:58:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:58:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:58:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:14+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:14+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 09:59:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 09:59:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 09:59:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 09:59:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 09:59:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 09:59:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 09:59:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:01+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:01+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:14+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:14+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:00:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:00:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:00:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:00:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:00:55+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:00:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:00:55+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:01:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:01:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:01:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:01:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:01:01+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:01:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:01:01+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:01:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:01:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:01:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:01:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:01:09+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:01:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:01:09+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:01:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:01:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:01:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:01:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:01:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:01:12+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-17 10:01:12+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [4, 28], 'predicted_cpl_pages': [5, 23, 24], 'predicted_ccf_pages': [7], 'filtered_cbs_pages': [4], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [7], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-17 10:01:12+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-17 10:01:12+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-17 10:01:12+0530 - sLogger - DEBUG - process file completed
2023-08-17 10:01:12+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-17 10:01:12+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-17 10:01:12+0530 - sLogger - DEBUG - TE process file started
2023-08-17 10:06:26+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-17 10:06:26+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-17 10:06:26+0530 - sLogger - DEBUG - process_main_pages started
2023-08-17 10:06:26+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:06:26+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:06:26+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:06:26+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:06:26+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:06:26+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:06:26+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:06:26+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:06:26+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:06:26+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-17 10:06:26+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Other investments including derivatives | [('noncurrent liabilities', 36), ('current assets', 32), ('noncurrent assets', 32), ('noncurrentassets', 30), ('equity and liabilities', 29), ('equityandliabilities', 28), ('currentassets', 27), ('noncurrentliabilities', 27), ('equity', 26), ('current liabilities', 26), ('equity liabilities', 26), ('currentliabilities', 24), ('equityliabilities', 24), ('liabilities', 19), ('assets', 13)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Tax related receivables | [('current liabilities', 40), ('currentassets', 36), ('current assets', 34), ('equity liabilities', 34), ('noncurrentassets', 32), ('currentliabilities', 32), ('equity and liabilities', 30), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equityliabilities', 25), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('assets', 19), ('liabilities', 18)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Prepayment | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Other investments including derivatives | [('noncurrent liabilities', 36), ('current assets', 32), ('noncurrent assets', 32), ('noncurrentassets', 30), ('equity and liabilities', 29), ('equityandliabilities', 28), ('currentassets', 27), ('noncurrentliabilities', 27), ('equity', 26), ('current liabilities', 26), ('equity liabilities', 26), ('currentliabilities', 24), ('equityliabilities', 24), ('liabilities', 19), ('assets', 13)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Investments in equity accounted investees | [('equity and liabilities', 52), ('equity liabilities', 43), ('equityandliabilities', 35), ('currentassets', 34), ('equity', 34), ('current assets', 33), ('current liabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityliabilities', 32), ('noncurrent assets', 29), ('noncurrentliabilities', 29), ('assets', 24), ('noncurrent liabilities', 23), ('liabilities', 11)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Tax related payables | [('equity and liabilities', 36), ('current assets', 34), ('current liabilities', 33), ('noncurrent liabilities', 33), ('assets', 29), ('currentassets', 29), ('noncurrent assets', 28), ('equity liabilities', 28), ('liabilities', 27), ('noncurrentassets', 26), ('currentliabilities', 24), ('equityandliabilities', 22), ('noncurrentliabilities', 21), ('equity', 18), ('equityliabilities', 17)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD current assets | score 41
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD currentassets | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD current liabilities | score 46
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD currentliabilities | score 42
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD noncurrent assets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD noncurrentassets | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD noncurrent liabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD non current assets | score 42
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD non current liabilities | score 47
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD noncurrentliabilities | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD noncurrentassets | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD noncurrentliabilities | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD equity and liabilities | score 48
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Tax related payables | MATCH WORD equityandliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 37
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentassets | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentliabilities | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equityandliabilities | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Reserves | [('currentassets', 44), ('noncurrentassets', 38), ('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentassets | score 48
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentliabilities | score 31
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equityandliabilities | score 22
2023-08-17 10:06:26+0530 - sLogger - DEBUG - Total Equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current assets | score 31
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentassets | score 32
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current liabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentliabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent assets | score 34
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent liabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current assets | score 33
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current liabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity and liabilities | score 86
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity | score 90
2023-08-17 10:06:26+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equityandliabilities | score 57
2023-08-17 10:06:26+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-17 10:06:26+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows From Operating Activities | operating cash flow before working capital changes
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded/(paid) | adiustments for movements in working capital
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from operating activities | adjustments for increase decrease in operating assets
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows From Investing Activities | operating cash flow before working capital changes
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for intangibles | operating profit before working capital changes
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends received | movements in working capital
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from investing activities | adjustments for increase decrease in operating assets
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows From Financing Activities | operating cash flow before working capital changes
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of loan by related parties | changes in operating assets and liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of loan to related party | changes in operating assets and liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loan with related parties | operating profit before working capital changes
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities | changes in operating assets and liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from/(used in) financing activities | operating cash flow before working capital changes
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase//decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the financial year | changes in operating assets and liabilities
2023-08-17 10:06:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the financial year | changes in operating assets and liabilities
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '13.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '13.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '14.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '14.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '15.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '18.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '18.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '25.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '25.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '16.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '19.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '21.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '20.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '22.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '22.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '23.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '23.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '24.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '24.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '26.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '8.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '9.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '9.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '10.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '11.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '12.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:06:28+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '12.'
2023-08-17 10:06:28+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-17 10:06:28+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' cash overdraft ', 30), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('short term debt ', 39), (' lease liabilities ', 37), (' interest bearing liabilites ', 37), (' short-term debt ', 33), (' shortterm debt ', 33), (' bank overdraft ', 33), (' cash overdraft ', 33), (' loans and borrowings ', 32), (' cash and cash equivalents ', 32), (' shortterm borrowings ', 31), ('  leases ', 30), (' borrowings ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' cash overdraft ', 30), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': 100, 'value': 304249.0, 'line_item_label': ['Borrowings', 'Borrowings'], 'note_numbers': ['23.', '23.'], 'line_item_value': [302805.0, 1444.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' cash overdraft ', 30), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('short term debt ', 39), (' lease liabilities ', 37), (' interest bearing liabilites ', 37), (' short-term debt ', 33), (' shortterm debt ', 33), (' bank overdraft ', 33), (' cash overdraft ', 33), (' loans and borrowings ', 32), (' cash and cash equivalents ', 32), (' shortterm borrowings ', 31), ('  leases ', 30), (' borrowings ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' cash overdraft ', 30), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': 100, 'value': 504880.0, 'line_item_label': ['Borrowings', 'Borrowings'], 'note_numbers': ['23.', '23.'], 'line_item_value': [504362.0, 518.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('trade payable', 64), ('other trade payables', 53), ('trade and other payables', 47)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 58928.0, 'line_item_label': ['Trade and other payables', 'Trade and other payables'], 'note_numbers': ['22.', '22.'], 'line_item_value': [58928.0, 0.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('trade payable', 64), ('other trade payables', 53), ('trade and other payables', 47)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 43736.0, 'line_item_label': ['Trade and other payables', 'Trade and other payables'], 'note_numbers': ['22.', '22.'], 'line_item_value': [43736.0, 0.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('trade and other payables', 47)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 58928.0, 'line_item_label': ['Trade and other payables', 'Trade and other payables'], 'note_numbers': ['22.', '22.'], 'line_item_value': [58928.0, 0.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [('trade and other payables', 47)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 43736.0, 'line_item_label': ['Trade and other payables', 'Trade and other payables'], 'note_numbers': ['22.', '22.'], 'line_item_value': [43736.0, 0.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [(' tax ', 100), (' income tax payable ', 62), ('current tax liabilities ', 50), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 7], 'score': 100, 'value': 20847.0, 'line_item_label': ['Liabilities', 'Tax related payables', 'Provisions', 'Provisions'], 'note_numbers': [nan, '25.', '24.', '24.'], 'line_item_value': [0.0, 17136.0, 1042.0, 2669.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [(' tax ', 100), (' income tax payable ', 62), ('current tax liabilities ', 50), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 7], 'score': 100, 'value': 69925.0, 'line_item_label': ['Liabilities', 'Tax related payables', 'Provisions', 'Provisions'], 'note_numbers': [nan, '25.', '24.', '24.'], 'line_item_value': [0.0, 66071.0, 1062.0, 2792.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [(' trade and other payables', 47), ('other current liabilities', 33), (' other current liabilities', 33), (' other financial liabilities', 33), (' foreign exchange contract liability', 30), (' financial liabilities', 27), (' employee benefits', 26), (' deferred revenue', 21), (' customer deposits', 20), ('provisions', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 5, 7], 'score': 100, 'value': 62639.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Trade and other payables', 'Provisions'], 'note_numbers': ['22.', '24.', '22.', '24.'], 'line_item_value': [58928.0, 1042.0, 0.0, 2669.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = tax related payables , res_fuzz_match = [(' trade and other payables', 47), ('other current liabilities', 33), (' other current liabilities', 33), (' other financial liabilities', 33), (' foreign exchange contract liability', 30), (' financial liabilities', 27), (' employee benefits', 26), (' deferred revenue', 21), (' customer deposits', 20), ('provisions', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 5, 7], 'score': 100, 'value': 47590.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Trade and other payables', 'Provisions'], 'note_numbers': ['22.', '24.', '22.', '24.'], 'line_item_value': [43736.0, 1062.0, 0.0, 2792.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' perpetual equity instrument ', 26), (' equity share capital ', 25), (' share capital ', 24), (' share capital ', 24), (' contributed equity ', 18), (' contributed equity', 18), (' issued capital ', 12), ('common stock ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 152000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['26.'], 'line_item_value': [152000.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' perpetual equity instrument ', 26), (' equity share capital ', 25), (' share capital ', 24), (' share capital ', 24), (' contributed equity ', 18), (' contributed equity', 18), (' issued capital ', 12), ('common stock ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 152000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['26.'], 'line_item_value': [152000.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('Share premium', 42)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('Share premium', 42)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves surplus ', 63), ('other equity ', 33), (' retained earnings ', 24), (' retained profits', 21), (' accumulated losses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 37340.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [37340.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves surplus ', 63), ('other equity ', 33), (' retained earnings ', 24), (' retained profits', 21), (' accumulated losses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 42658.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [42658.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 32), (' non-controlling interest', 32), (' non controlling interest ', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 32), (' non-controlling interest', 32), (' non controlling interest ', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves ', 24), (' foreign currency translation reserve', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves ', 100), ('other reserves ', 67), (' foreign currency translation reserve', 32)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 503.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [503.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves ', 24), (' foreign currency translation reserve', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves ', 100), ('other reserves ', 67), (' foreign currency translation reserve', 32)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5064.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [5064.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' revenue from continuing activities', 54), ('revenue from operations ', 43), (' net sales ', 40), (' Sale of coal ', 38), (' revenue from contracts with customers ', 36), (' Sales revenue ', 35), (' sale of products ', 33), (' transmission and distribution business ', 30), (' from trading business ', 30), (' Revenue ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), ('revenue from operations ', 29), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('revenue from operations ', 50), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' sale of products ', 29), (' transmission and distribution business ', 27), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' net sales ', 17), (' Sales revenue ', 15), (' Revenue ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' revenue from continuing activities', 44), (' revenue from contracts with customers ', 42), (' from trading business ', 39), (' Sale of coal ', 32), ('revenue from operations ', 31), (' transmission and distribution business ', 27), (' net sales ', 25), (' Sales revenue ', 22), (' sale of products ', 21), (' Revenue ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' revenue from contracts with customers ', 42), (' revenue from continuing activities', 41), (' transmission and distribution business ', 37), (' from trading business ', 32), (' sale of products ', 27), (' Sales revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25), (' Sale of coal ', 21), (' Revenue ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' from trading business ', 38), (' transmission and distribution business ', 36), (' sale of products ', 31), (' Sale of coal ', 28), (' revenue from continuing activities', 27), (' Sales revenue ', 26), (' net sales ', 23), (' Revenue ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' from trading business ', 50), (' net sales ', 40), (' Sales revenue ', 36), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' transmission and distribution business ', 31), (' Sale of coal ', 31), (' Revenue ', 26), ('revenue from operations ', 24), (' sale of products ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('revenue from operations ', 45), (' revenue from contracts with customers ', 36), (' from trading business ', 36), (' transmission and distribution business ', 35), (' sale of products ', 33), (' revenue from continuing activities', 33), (' Sale of coal ', 24), (' Sales revenue ', 23), (' Revenue ', 20), (' net sales ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' revenue from contracts with customers ', 39), (' transmission and distribution business ', 39), ('revenue from operations ', 33), (' revenue from continuing activities', 31), (' from trading business ', 30), (' Sales revenue ', 28), (' sale of products ', 27), (' net sales ', 26), (' Sale of coal ', 21), (' Revenue ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' revenue from continuing activities', 37), (' revenue from contracts with customers ', 36), ('revenue from operations ', 30), (' transmission and distribution business ', 27), (' from trading business ', 27), (' net sales ', 26), (' sale of products ', 25), (' Sale of coal ', 22), (' Sales revenue ', 21), (' Revenue ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Sales revenue ', 46), (' from trading business ', 40), ('revenue from operations ', 39), (' Revenue ', 38), (' transmission and distribution business ', 37), (' net sales ', 35), (' sale of products ', 30), (' revenue from contracts with customers ', 30), (' Sale of coal ', 25), (' revenue from continuing activities', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' revenue from continuing activities', 40), (' transmission and distribution business ', 36), (' from trading business ', 34), ('revenue from operations ', 30), (' Sales revenue ', 30), (' sale of products ', 29), (' net sales ', 24), (' Sale of coal ', 20), (' Revenue ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 44), (' from trading business ', 38), (' revenue from continuing activities', 35), ('revenue from operations ', 33), (' transmission and distribution business ', 33), (' sale of products ', 32), (' Sales revenue ', 28), (' Revenue ', 21), (' net sales ', 20), (' Sale of coal ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' revenue from contracts with customers ', 42), ('revenue from operations ', 34), (' from trading business ', 34), (' revenue from continuing activities', 32), (' transmission and distribution business ', 29), (' sale of products ', 26), (' Sales revenue ', 23), (' net sales ', 21), (' Sale of coal ', 17), (' Revenue ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' revenue from continuing activities', 34), ('revenue from operations ', 33), (' from trading business ', 31), (' sale of products ', 26), (' Sales revenue ', 26), (' net sales ', 22), (' Sale of coal ', 21), (' Revenue ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 198973.0, 'line_item_label': ['Revenue'], 'note_numbers': ['8.'], 'line_item_value': [198973.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' revenue from continuing activities', 54), ('revenue from operations ', 43), (' net sales ', 40), (' Sale of coal ', 38), (' revenue from contracts with customers ', 36), (' Sales revenue ', 35), (' sale of products ', 33), (' transmission and distribution business ', 30), (' from trading business ', 30), (' Revenue ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), ('revenue from operations ', 29), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('revenue from operations ', 50), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' sale of products ', 29), (' transmission and distribution business ', 27), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' net sales ', 17), (' Sales revenue ', 15), (' Revenue ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' revenue from continuing activities', 44), (' revenue from contracts with customers ', 42), (' from trading business ', 39), (' Sale of coal ', 32), ('revenue from operations ', 31), (' transmission and distribution business ', 27), (' net sales ', 25), (' Sales revenue ', 22), (' sale of products ', 21), (' Revenue ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' revenue from contracts with customers ', 42), (' revenue from continuing activities', 41), (' transmission and distribution business ', 37), (' from trading business ', 32), (' sale of products ', 27), (' Sales revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25), (' Sale of coal ', 21), (' Revenue ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' from trading business ', 38), (' transmission and distribution business ', 36), (' sale of products ', 31), (' Sale of coal ', 28), (' revenue from continuing activities', 27), (' Sales revenue ', 26), (' net sales ', 23), (' Revenue ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' from trading business ', 50), (' net sales ', 40), (' Sales revenue ', 36), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' transmission and distribution business ', 31), (' Sale of coal ', 31), (' Revenue ', 26), ('revenue from operations ', 24), (' sale of products ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('revenue from operations ', 45), (' revenue from contracts with customers ', 36), (' from trading business ', 36), (' transmission and distribution business ', 35), (' sale of products ', 33), (' revenue from continuing activities', 33), (' Sale of coal ', 24), (' Sales revenue ', 23), (' Revenue ', 20), (' net sales ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' revenue from contracts with customers ', 39), (' transmission and distribution business ', 39), ('revenue from operations ', 33), (' revenue from continuing activities', 31), (' from trading business ', 30), (' Sales revenue ', 28), (' sale of products ', 27), (' net sales ', 26), (' Sale of coal ', 21), (' Revenue ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' revenue from continuing activities', 37), (' revenue from contracts with customers ', 36), ('revenue from operations ', 30), (' transmission and distribution business ', 27), (' from trading business ', 27), (' net sales ', 26), (' sale of products ', 25), (' Sale of coal ', 22), (' Sales revenue ', 21), (' Revenue ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Sales revenue ', 46), (' from trading business ', 40), ('revenue from operations ', 39), (' Revenue ', 38), (' transmission and distribution business ', 37), (' net sales ', 35), (' sale of products ', 30), (' revenue from contracts with customers ', 30), (' Sale of coal ', 25), (' revenue from continuing activities', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' revenue from continuing activities', 40), (' transmission and distribution business ', 36), (' from trading business ', 34), ('revenue from operations ', 30), (' Sales revenue ', 30), (' sale of products ', 29), (' net sales ', 24), (' Sale of coal ', 20), (' Revenue ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 44), (' from trading business ', 38), (' revenue from continuing activities', 35), ('revenue from operations ', 33), (' transmission and distribution business ', 33), (' sale of products ', 32), (' Sales revenue ', 28), (' Revenue ', 21), (' net sales ', 20), (' Sale of coal ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' revenue from contracts with customers ', 42), ('revenue from operations ', 34), (' from trading business ', 34), (' revenue from continuing activities', 32), (' transmission and distribution business ', 29), (' sale of products ', 26), (' Sales revenue ', 23), (' net sales ', 21), (' Sale of coal ', 17), (' Revenue ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' revenue from continuing activities', 34), ('revenue from operations ', 33), (' from trading business ', 31), (' sale of products ', 26), (' Sales revenue ', 26), (' net sales ', 22), (' Sale of coal ', 21), (' Revenue ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 103500.0, 'line_item_label': ['Revenue'], 'note_numbers': ['8.'], 'line_item_value': [103500.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' change in inventory', 44), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), (' cost of goods sold ', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Personnel costs', 47), (' Cost of product sold', 42), (' Cost of inventory sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' change in inventory', 26), ('expense', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' change in inventory', 45), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' cost of goods sold ', 27), ('total expenditure', 25), (' Cost of product sold', 24), ('expenditure', 23), ('expense', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Cost of inventory sold', 42), (' Cost of goods and services sold', 36), (' change in inventory', 35), (' Cost of product sold', 34), ('purchase of stock-in-trade', 30), (' cost of coal sold', 29), (' Personnel costs', 29), ('total expenditure', 28), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 27), (' cost of goods sold ', 26), ('expenditure', 21), ('expense', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), (' cost of goods sold ', 29), (' change in inventory', 29), ('expenditure', 22), ('expense', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), (' change in inventory', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' cost of goods sold ', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold ', 26), ('expenditure', 24), (' change in inventory', 21), ('expense', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Cost of product sold', 32), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), ('total expenditure', 29), (' Cost of inventory sold', 28), ('total expenses', 27), (' cost of coal sold', 26), (' change in inventory', 26), ('cost of sales', 25), ('Cost of sales', 25), (' cost of goods sold ', 23), ('expenditure', 20), ('expense', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Cost of goods and services sold', 37), (' change in inventory', 37), (' Cost of inventory sold', 34), (' Cost of product sold', 32), (' Personnel costs', 31), (' cost of goods sold ', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), (' cost of coal sold', 27), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 25), ('expenditure', 18), ('expense', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('total expenditure', 45), ('total expenses', 44), ('expense', 38), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' Cost of product sold', 31), (' cost of coal sold', 28), (' cost of goods sold ', 28), (' change in inventory', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' change in inventory', 34), (' Cost of product sold', 33), (' cost of coal sold', 31), (' Personnel costs', 31), ('total expenditure', 30), ('total expenses', 29), (' cost of goods sold ', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 20), ('expense', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 43), (' Cost of inventory sold', 39), ('total expenditure', 38), (' change in inventory', 38), ('total expenses', 36), (' Cost of goods and services sold', 35), (' Personnel costs', 35), (' cost of goods sold ', 35), (' Cost of product sold', 33), (' cost of coal sold', 30), ('expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('purchase of stock-in-trade', 35), (' Cost of inventory sold', 32), ('total expenditure', 31), (' change in inventory', 31), ('total expenses', 30), (' Cost of product sold', 30), (' Cost of goods and services sold', 30), (' Personnel costs', 29), (' cost of coal sold', 25), (' cost of goods sold ', 25), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 20), ('expense', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Cost of goods and services sold', 44), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of inventory sold', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' cost of coal sold', 28), (' Personnel costs', 28), (' cost of goods sold ', 28), (' change in inventory', 28), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 18), ('expense', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -176390.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-176390.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' change in inventory', 44), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), (' cost of goods sold ', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Personnel costs', 47), (' Cost of product sold', 42), (' Cost of inventory sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' change in inventory', 26), ('expense', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' change in inventory', 45), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' cost of goods sold ', 27), ('total expenditure', 25), (' Cost of product sold', 24), ('expenditure', 23), ('expense', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Cost of inventory sold', 42), (' Cost of goods and services sold', 36), (' change in inventory', 35), (' Cost of product sold', 34), ('purchase of stock-in-trade', 30), (' cost of coal sold', 29), (' Personnel costs', 29), ('total expenditure', 28), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 27), (' cost of goods sold ', 26), ('expenditure', 21), ('expense', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), (' cost of goods sold ', 29), (' change in inventory', 29), ('expenditure', 22), ('expense', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), (' change in inventory', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' cost of goods sold ', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold ', 26), ('expenditure', 24), (' change in inventory', 21), ('expense', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Cost of product sold', 32), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Personnel costs', 30), ('total expenditure', 29), (' Cost of inventory sold', 28), ('total expenses', 27), (' cost of coal sold', 26), (' change in inventory', 26), ('cost of sales', 25), ('Cost of sales', 25), (' cost of goods sold ', 23), ('expenditure', 20), ('expense', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Cost of goods and services sold', 37), (' change in inventory', 37), (' Cost of inventory sold', 34), (' Cost of product sold', 32), (' Personnel costs', 31), (' cost of goods sold ', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), (' cost of coal sold', 27), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 25), ('expenditure', 18), ('expense', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('total expenditure', 45), ('total expenses', 44), ('expense', 38), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' Cost of product sold', 31), (' cost of coal sold', 28), (' cost of goods sold ', 28), (' change in inventory', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' change in inventory', 34), (' Cost of product sold', 33), (' cost of coal sold', 31), (' Personnel costs', 31), ('total expenditure', 30), ('total expenses', 29), (' cost of goods sold ', 28), ('cost of sales', 27), ('Cost of sales', 27), ('expenditure', 20), ('expense', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 43), (' Cost of inventory sold', 39), ('total expenditure', 38), (' change in inventory', 38), ('total expenses', 36), (' Cost of goods and services sold', 35), (' Personnel costs', 35), (' cost of goods sold ', 35), (' Cost of product sold', 33), (' cost of coal sold', 30), ('expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expense', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('purchase of stock-in-trade', 35), (' Cost of inventory sold', 32), ('total expenditure', 31), (' change in inventory', 31), ('total expenses', 30), (' Cost of product sold', 30), (' Cost of goods and services sold', 30), (' Personnel costs', 29), (' cost of coal sold', 25), (' cost of goods sold ', 25), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 20), ('expense', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Cost of goods and services sold', 44), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of inventory sold', 32), ('purchase of stock-in-trade', 29), ('total expenses', 29), (' cost of coal sold', 28), (' Personnel costs', 28), (' cost of goods sold ', 28), (' change in inventory', 28), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 18), ('expense', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -83050.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-83050.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses ', 46), (' property espense ', 44), (' Distribution expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' Depreciation expenses ', 38), (' Logistics and distribution ', 38), (' Administrative and other expenses ', 37), (' Advertising expenses ', 37), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Selling & distribution expenses ', 36), (' Administration expenses ', 36), (' Occupancy ', 35), (' employee benefits expense ', 35), (' employee benefit espense ', 35), (' Occupancy expenses ', 33), (' Royalties ', 32), (' Sales and marketing ', 30), (' Administration ', 29), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Marketing expenses ', 24), ('expenses ', 22), (' depreciation ', 21), (' Management expenses ', 17), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Administration ', 19), (' Sales and marketing ', 15), (' levies', 12), (' Royalties ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' depreciation ', 35), (' Marketing expenses ', 34), (' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' levies', 30), (' Occupancy expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 21), (' Occupancy ', 19), (' Sales and marketing ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Sales and marketing ', 39), (' Administrative and other expenses ', 38), (' Marketing expenses ', 34), (' Depreciation and amortisation expenses ', 33), (' Logistics and distribution ', 33), (' employee benefits expense ', 32), (' property espense ', 32), (' employee benefit espense ', 32), (' Administration ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Amortisation expenses ', 27), (' Advertising expenses ', 26), (' Distribution expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' Occupancy ', 19), (' depreciation ', 17), (' Royalties ', 17), (' levies', 10), ('expenses ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' Logistics and distribution ', 35), (' Selling & distribution expenses ', 32), (' Sales and marketing ', 32), (' property espense ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), (' Amortisation expenses ', 29), (' Distribution expenses ', 28), (' other expenses ', 27), (' Other expenses ', 27), (' Other expenses ', 27), (' Marketing expenses ', 26), (' Depreciation expenses ', 26), (' Advertising expenses ', 25), (' Administration ', 25), (' Lease expenses ', 20), (' Selling Expenses ', 20), (' Management expenses ', 20), (' Occupancy expenses ', 17), ('expenses ', 15), (' depreciation ', 15), (' Occupancy ', 15), (' Royalties ', 15), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 38), (' property espense ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Logistics and distribution ', 34), (' Distribution expenses ', 33), (' other expenses ', 31), (' Other expenses ', 31), (' Other expenses ', 31), (' Marketing expenses ', 30), (' Administrative and other expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Advertising expenses ', 29), (' Amortisation expenses ', 29), (' Sales and marketing ', 29), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Occupancy expenses ', 26), (' Lease expenses ', 26), (' Management expenses ', 26), (' depreciation ', 24), (' Royalties ', 24), (' Administration ', 22), (' Selling Expenses ', 21), (' Occupancy ', 19), ('expenses ', 18), (' levies', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' employee benefits expense ', 56), (' employee benefit espense ', 51), (' Lease expenses ', 36), (' other expenses ', 34), (' Other expenses ', 34), (' Management expenses ', 34), (' Other expenses ', 34), (' Marketing expenses ', 33), (' Administrative and other expenses ', 33), (' Depreciation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Sales and marketing ', 31), (' property espense ', 31), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Depreciation and amortisation expenses ', 28), ('expenses ', 26), (' Selling & distribution expenses ', 26), (' Amortisation expenses ', 26), (' depreciation ', 25), (' Administration ', 23), (' levies', 19), (' Royalties ', 17), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' property espense ', 41), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Selling & distribution expenses ', 36), (' Administrative and other expenses ', 36), (' Distribution expenses ', 35), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Marketing expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Selling Expenses ', 23), (' Management expenses ', 22), (' depreciation ', 19), (' Administration ', 18), (' Occupancy expenses ', 17), (' Occupancy ', 14), (' levies', 14), ('expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' employee benefits expense ', 39), (' employee benefit espense ', 39), (' Administrative and other expenses ', 37), (' Logistics and distribution ', 37), (' Marketing expenses ', 35), (' Sales and marketing ', 33), (' property espense ', 33), (' Selling & distribution expenses ', 30), (' Advertising expenses ', 30), (' Amortisation expenses ', 30), (' Distribution expenses ', 29), (' Lease expenses ', 28), (' other expenses ', 27), (' Other expenses ', 27), (' Management expenses ', 27), (' Other expenses ', 27), (' depreciation ', 26), (' Depreciation expenses ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Occupancy expenses ', 24), (' Selling Expenses ', 24), (' Royalties ', 22), (' Administration ', 21), ('expenses ', 18), (' levies', 14), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Depreciation and amortisation expenses ', 39), (' Administrative and other expenses ', 37), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Logistics and distribution ', 31), (' property espense ', 30), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' other expenses ', 25), (' Other expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Amortisation expenses ', 24), (' Distribution expenses ', 23), (' Lease expenses ', 21), (' Management expenses ', 21), (' Occupancy expenses ', 18), (' Selling Expenses ', 18), (' depreciation ', 15), (' Administration ', 15), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 12), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Lease expenses ', 46), (' Management expenses ', 44), (' Marketing expenses ', 43), (' property espense ', 40), ('expenses ', 38), (' Selling Expenses ', 38), (' other expenses ', 37), (' Other expenses ', 37), (' Other expenses ', 37), (' Royalties ', 36), (' Depreciation expenses ', 34), (' Administrative and other expenses ', 34), (' Depreciation and amortisation expenses ', 34), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Advertising expenses ', 33), (' Sales and marketing ', 33), (' Administration ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Occupancy expenses ', 30), (' Logistics and distribution ', 29), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' levies', 21), (' depreciation ', 18), (' Occupancy ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Administrative and other expenses ', 42), (' Sales and marketing ', 34), (' employee benefit espense ', 33), (' other expenses ', 32), (' Other expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Other expenses ', 32), (' Logistics and distribution ', 31), (' employee benefits expense ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' property espense ', 28), (' Administration ', 27), (' Management expenses ', 26), (' Depreciation expenses ', 25), (' Advertising expenses ', 25), (' Distribution expenses ', 24), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' Occupancy expenses ', 19), (' depreciation ', 18), (' Occupancy ', 15), ('expenses ', 14), (' Royalties ', 11), (' levies', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' other expenses ', 45), (' Other expenses ', 45), (' Administrative and other expenses ', 45), (' Other expenses ', 45), (' property espense ', 38), (' Marketing expenses ', 36), (' Management expenses ', 36), (' Depreciation expenses ', 35), (' Depreciation and amortisation expenses ', 34), (' Administrative expenses ', 33), (' Lease expenses ', 33), (' Administration expenses ', 33), (' employee benefits expense ', 33), (' Occupancy expenses ', 32), (' employee benefit espense ', 30), (' Administration ', 29), (' Selling Expenses ', 28), (' Logistics and distribution ', 27), (' depreciation ', 26), (' Selling & distribution expenses ', 26), (' Amortisation expenses ', 26), (' Sales and marketing ', 26), ('expenses ', 21), (' Distribution expenses ', 21), (' Advertising expenses ', 21), (' Occupancy ', 16), (' Royalties ', 15), (' levies', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Administrative and other expenses ', 37), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' Depreciation and amortisation expenses ', 32), (' employee benefits expense ', 31), (' property espense ', 31), (' employee benefit espense ', 31), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Marketing expenses ', 26), (' Occupancy expenses ', 26), (' Management expenses ', 26), (' Distribution expenses ', 25), (' Amortisation expenses ', 25), (' Sales and marketing ', 25), (' Lease expenses ', 23), (' Logistics and distribution ', 23), (' Advertising expenses ', 22), (' Administration ', 21), (' Selling Expenses ', 20), (' depreciation ', 18), ('expenses ', 15), (' Royalties ', 14), (' Occupancy ', 11), (' levies', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses ', 41), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Sales and marketing ', 33), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Other expenses ', 29), (' Selling & distribution expenses ', 28), (' Advertising expenses ', 28), (' Amortisation expenses ', 28), (' employee benefits expense ', 28), (' property espense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Marketing expenses ', 26), (' Depreciation expenses ', 25), (' Lease expenses ', 24), (' Selling Expenses ', 24), (' Administration ', 24), (' Occupancy expenses ', 23), (' Management expenses ', 23), (' depreciation ', 19), (' Royalties ', 16), ('expenses ', 13), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7], 'score': 100, 'value': -21725.0, 'line_item_label': ['Occupancy expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, '10.', '9.'], 'line_item_value': [-817.0, -20903.0, -5.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses ', 46), (' property espense ', 44), (' Distribution expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' Depreciation expenses ', 38), (' Logistics and distribution ', 38), (' Administrative and other expenses ', 37), (' Advertising expenses ', 37), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Selling & distribution expenses ', 36), (' Administration expenses ', 36), (' Occupancy ', 35), (' employee benefits expense ', 35), (' employee benefit espense ', 35), (' Occupancy expenses ', 33), (' Royalties ', 32), (' Sales and marketing ', 30), (' Administration ', 29), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Marketing expenses ', 24), ('expenses ', 22), (' depreciation ', 21), (' Management expenses ', 17), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Administration ', 19), (' Sales and marketing ', 15), (' levies', 12), (' Royalties ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' depreciation ', 35), (' Marketing expenses ', 34), (' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' levies', 30), (' Occupancy expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 21), (' Occupancy ', 19), (' Sales and marketing ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Sales and marketing ', 39), (' Administrative and other expenses ', 38), (' Marketing expenses ', 34), (' Depreciation and amortisation expenses ', 33), (' Logistics and distribution ', 33), (' employee benefits expense ', 32), (' property espense ', 32), (' employee benefit espense ', 32), (' Administration ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Amortisation expenses ', 27), (' Advertising expenses ', 26), (' Distribution expenses ', 25), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' Occupancy ', 19), (' depreciation ', 17), (' Royalties ', 17), (' levies', 10), ('expenses ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' Logistics and distribution ', 35), (' Selling & distribution expenses ', 32), (' Sales and marketing ', 32), (' property espense ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), (' Amortisation expenses ', 29), (' Distribution expenses ', 28), (' other expenses ', 27), (' Other expenses ', 27), (' Other expenses ', 27), (' Marketing expenses ', 26), (' Depreciation expenses ', 26), (' Advertising expenses ', 25), (' Administration ', 25), (' Lease expenses ', 20), (' Selling Expenses ', 20), (' Management expenses ', 20), (' Occupancy expenses ', 17), ('expenses ', 15), (' depreciation ', 15), (' Occupancy ', 15), (' Royalties ', 15), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 38), (' property espense ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Logistics and distribution ', 34), (' Distribution expenses ', 33), (' other expenses ', 31), (' Other expenses ', 31), (' Other expenses ', 31), (' Marketing expenses ', 30), (' Administrative and other expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Advertising expenses ', 29), (' Amortisation expenses ', 29), (' Sales and marketing ', 29), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Occupancy expenses ', 26), (' Lease expenses ', 26), (' Management expenses ', 26), (' depreciation ', 24), (' Royalties ', 24), (' Administration ', 22), (' Selling Expenses ', 21), (' Occupancy ', 19), ('expenses ', 18), (' levies', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' employee benefits expense ', 56), (' employee benefit espense ', 51), (' Lease expenses ', 36), (' other expenses ', 34), (' Other expenses ', 34), (' Management expenses ', 34), (' Other expenses ', 34), (' Marketing expenses ', 33), (' Administrative and other expenses ', 33), (' Depreciation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Sales and marketing ', 31), (' property espense ', 31), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Depreciation and amortisation expenses ', 28), ('expenses ', 26), (' Selling & distribution expenses ', 26), (' Amortisation expenses ', 26), (' depreciation ', 25), (' Administration ', 23), (' levies', 19), (' Royalties ', 17), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' property espense ', 41), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Selling & distribution expenses ', 36), (' Administrative and other expenses ', 36), (' Distribution expenses ', 35), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Marketing expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Selling Expenses ', 23), (' Management expenses ', 22), (' depreciation ', 19), (' Administration ', 18), (' Occupancy expenses ', 17), (' Occupancy ', 14), (' levies', 14), ('expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' employee benefits expense ', 39), (' employee benefit espense ', 39), (' Administrative and other expenses ', 37), (' Logistics and distribution ', 37), (' Marketing expenses ', 35), (' Sales and marketing ', 33), (' property espense ', 33), (' Selling & distribution expenses ', 30), (' Advertising expenses ', 30), (' Amortisation expenses ', 30), (' Distribution expenses ', 29), (' Lease expenses ', 28), (' other expenses ', 27), (' Other expenses ', 27), (' Management expenses ', 27), (' Other expenses ', 27), (' depreciation ', 26), (' Depreciation expenses ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Occupancy expenses ', 24), (' Selling Expenses ', 24), (' Royalties ', 22), (' Administration ', 21), ('expenses ', 18), (' levies', 14), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Depreciation and amortisation expenses ', 39), (' Administrative and other expenses ', 37), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Logistics and distribution ', 31), (' property espense ', 30), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' other expenses ', 25), (' Other expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Amortisation expenses ', 24), (' Distribution expenses ', 23), (' Lease expenses ', 21), (' Management expenses ', 21), (' Occupancy expenses ', 18), (' Selling Expenses ', 18), (' depreciation ', 15), (' Administration ', 15), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 12), (' levies', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Lease expenses ', 46), (' Management expenses ', 44), (' Marketing expenses ', 43), (' property espense ', 40), ('expenses ', 38), (' Selling Expenses ', 38), (' other expenses ', 37), (' Other expenses ', 37), (' Other expenses ', 37), (' Royalties ', 36), (' Depreciation expenses ', 34), (' Administrative and other expenses ', 34), (' Depreciation and amortisation expenses ', 34), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Advertising expenses ', 33), (' Sales and marketing ', 33), (' Administration ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Occupancy expenses ', 30), (' Logistics and distribution ', 29), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' levies', 21), (' depreciation ', 18), (' Occupancy ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Administrative and other expenses ', 42), (' Sales and marketing ', 34), (' employee benefit espense ', 33), (' other expenses ', 32), (' Other expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Other expenses ', 32), (' Logistics and distribution ', 31), (' employee benefits expense ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' property espense ', 28), (' Administration ', 27), (' Management expenses ', 26), (' Depreciation expenses ', 25), (' Advertising expenses ', 25), (' Distribution expenses ', 24), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' Occupancy expenses ', 19), (' depreciation ', 18), (' Occupancy ', 15), ('expenses ', 14), (' Royalties ', 11), (' levies', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' other expenses ', 45), (' Other expenses ', 45), (' Administrative and other expenses ', 45), (' Other expenses ', 45), (' property espense ', 38), (' Marketing expenses ', 36), (' Management expenses ', 36), (' Depreciation expenses ', 35), (' Depreciation and amortisation expenses ', 34), (' Administrative expenses ', 33), (' Lease expenses ', 33), (' Administration expenses ', 33), (' employee benefits expense ', 33), (' Occupancy expenses ', 32), (' employee benefit espense ', 30), (' Administration ', 29), (' Selling Expenses ', 28), (' Logistics and distribution ', 27), (' depreciation ', 26), (' Selling & distribution expenses ', 26), (' Amortisation expenses ', 26), (' Sales and marketing ', 26), ('expenses ', 21), (' Distribution expenses ', 21), (' Advertising expenses ', 21), (' Occupancy ', 16), (' Royalties ', 15), (' levies', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Administrative and other expenses ', 37), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' Depreciation and amortisation expenses ', 32), (' employee benefits expense ', 31), (' property espense ', 31), (' employee benefit espense ', 31), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Marketing expenses ', 26), (' Occupancy expenses ', 26), (' Management expenses ', 26), (' Distribution expenses ', 25), (' Amortisation expenses ', 25), (' Sales and marketing ', 25), (' Lease expenses ', 23), (' Logistics and distribution ', 23), (' Advertising expenses ', 22), (' Administration ', 21), (' Selling Expenses ', 20), (' depreciation ', 18), ('expenses ', 15), (' Royalties ', 14), (' Occupancy ', 11), (' levies', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses ', 41), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Sales and marketing ', 33), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Other expenses ', 29), (' Selling & distribution expenses ', 28), (' Advertising expenses ', 28), (' Amortisation expenses ', 28), (' employee benefits expense ', 28), (' property espense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Marketing expenses ', 26), (' Depreciation expenses ', 25), (' Lease expenses ', 24), (' Selling Expenses ', 24), (' Administration ', 24), (' Occupancy expenses ', 23), (' Management expenses ', 23), (' depreciation ', 19), (' Royalties ', 16), ('expenses ', 13), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7], 'score': 100, 'value': -21808.0, 'line_item_label': ['Occupancy expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, '10.', '9.'], 'line_item_value': [-828.0, -20918.0, -62.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses ', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), ('Rent ', 25), (' Rental expenses ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), ('Rent ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Rental expenses ', 34), (' Occupancy expenses', 29), (' Administration expenses ', 25), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Administration expenses ', 31), (' Rental expenses ', 28), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Administration expenses ', 31), (' Rental expenses ', 26), (' Occupancy expenses', 17), (' Occupancy ', 15), ('Rent ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Rental expenses ', 35), (' Administration expenses ', 28), (' Occupancy expenses', 26), ('Rent ', 19), (' Occupancy ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' Rental expenses ', 40), (' Administration expenses ', 30), ('Rent ', 29), (' Occupancy expenses', 28), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' Rental expenses ', 27), (' Administration expenses ', 25), (' Occupancy expenses', 17), ('Rent ', 14), (' Occupancy ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 25), (' Occupancy expenses', 24), ('Rent ', 14), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 26), (' Occupancy expenses', 18), ('Rent ', 12), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Rental expenses ', 43), ('Rent ', 42), (' Administration expenses ', 32), (' Occupancy expenses', 30), (' Occupancy ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Administration expenses ', 30), (' Rental expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 33), (' Occupancy expenses', 32), ('Rent ', 22), (' Occupancy ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 28), (' Occupancy expenses', 26), ('Rent ', 15), (' Occupancy ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Administration expenses ', 30), (' Rental expenses ', 29), (' Occupancy expenses', 23), ('Rent ', 13), (' Occupancy ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 100, 'value': -21720.0, 'line_item_label': ['Occupancy expenses', 'Administration expenses'], 'note_numbers': [nan, '10.'], 'line_item_value': [-817.0, -20903.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses ', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), ('Rent ', 25), (' Rental expenses ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), ('Rent ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Rental expenses ', 34), (' Occupancy expenses', 29), (' Administration expenses ', 25), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Administration expenses ', 31), (' Rental expenses ', 28), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Administration expenses ', 31), (' Rental expenses ', 26), (' Occupancy expenses', 17), (' Occupancy ', 15), ('Rent ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Rental expenses ', 35), (' Administration expenses ', 28), (' Occupancy expenses', 26), ('Rent ', 19), (' Occupancy ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' Rental expenses ', 40), (' Administration expenses ', 30), ('Rent ', 29), (' Occupancy expenses', 28), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' Rental expenses ', 27), (' Administration expenses ', 25), (' Occupancy expenses', 17), ('Rent ', 14), (' Occupancy ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 25), (' Occupancy expenses', 24), ('Rent ', 14), (' Occupancy ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 26), (' Occupancy expenses', 18), ('Rent ', 12), (' Occupancy ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Rental expenses ', 43), ('Rent ', 42), (' Administration expenses ', 32), (' Occupancy expenses', 30), (' Occupancy ', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Administration expenses ', 30), (' Rental expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 33), (' Occupancy expenses', 32), ('Rent ', 22), (' Occupancy ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Rental expenses ', 29), (' Administration expenses ', 28), (' Occupancy expenses', 26), ('Rent ', 15), (' Occupancy ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Administration expenses ', 30), (' Rental expenses ', 29), (' Occupancy expenses', 23), ('Rent ', 13), (' Occupancy ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 100, 'value': -21746.0, 'line_item_label': ['Occupancy expenses', 'Administration expenses'], 'note_numbers': [nan, '10.'], 'line_item_value': [-828.0, -20918.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('other operating', 54), (' Other income', 37), ('Other revenue', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Other income', 52), ('other operating', 23), ('Other revenue', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Other income', 34), ('other operating', 24), ('Other revenue', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Other income', 28), ('other operating', 24), ('Other revenue', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('other operating', 25), ('Other revenue', 25), (' Other income', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('other operating', 40), ('Other revenue', 37), (' Other income', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Other income', 36), ('other operating', 30), ('Other revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' Other income', 51), ('other operating', 43), ('Other revenue', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Other income', 37), ('other operating', 34), ('Other revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 30), ('Other revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 723.0, 'line_item_label': ['Other income'], 'note_numbers': ['9.'], 'line_item_value': [723.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('other operating', 54), (' Other income', 37), ('Other revenue', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Other income', 52), ('other operating', 23), ('Other revenue', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Other income', 34), ('other operating', 24), ('Other revenue', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Other income', 28), ('other operating', 24), ('Other revenue', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('other operating', 25), ('Other revenue', 25), (' Other income', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('other operating', 40), ('Other revenue', 37), (' Other income', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Other income', 36), ('other operating', 30), ('Other revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' Other income', 51), ('other operating', 43), ('Other revenue', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Other income', 37), ('other operating', 34), ('Other revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 30), ('Other revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 129.0, 'line_item_label': ['Other income'], 'note_numbers': ['9.'], 'line_item_value': [129.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), ('Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), (' Interest revenue', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Net finance costs', 39), ('other income', 37), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('finance income', 86), ('Finance income and costs', 65), (' Net finance costs', 65), (' Finance income and finance costs', 55), ('other income', 52), (' Interest revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Finance income and finance costs', 37), ('Finance income and costs', 35), (' Net finance costs', 35), ('other income', 34), ('finance income', 30), (' Interest revenue', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), ('finance income', 36), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('finance income', 55), ('other income', 50), ('Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), ('Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 33), ('Finance income and costs', 30), (' Interest revenue', 30), (' Net finance costs', 30), ('other income', 28), ('finance income', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 30), (' Net finance costs', 30), ('other income', 25), ('finance income', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Interest revenue', 40), (' Net finance costs', 33), ('other income', 23), (' Finance income and finance costs', 23), ('Finance income and costs', 22), ('finance income', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('Finance income and costs', 42), (' Finance income and finance costs', 41), (' Net finance costs', 37), ('other income', 36), ('finance income', 29), (' Interest revenue', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('other income', 51), ('Finance income and costs', 49), (' Net finance costs', 47), (' Finance income and finance costs', 43), ('finance income', 41), (' Interest revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Net finance costs', 41), ('Finance income and costs', 40), (' Finance income and finance costs', 39), ('other income', 37), ('finance income', 33), (' Interest revenue', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Finance income and finance costs', 40), ('Finance income and costs', 38), ('other income', 32), (' Net finance costs', 31), ('finance income', 26), (' Interest revenue', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 9, 10, 11], 'score': 86, 'value': 4269.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance income'], 'note_numbers': ['9.', nan, nan, '11.'], 'line_item_value': [723.0, 2069.0, -296.0, 1773.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), ('Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), (' Interest revenue', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Net finance costs', 39), ('other income', 37), ('Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('finance income', 86), ('Finance income and costs', 65), (' Net finance costs', 65), (' Finance income and finance costs', 55), ('other income', 52), (' Interest revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Finance income and finance costs', 37), ('Finance income and costs', 35), (' Net finance costs', 35), ('other income', 34), ('finance income', 30), (' Interest revenue', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), ('finance income', 36), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('finance income', 55), ('other income', 50), ('Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), ('Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 33), ('Finance income and costs', 30), (' Interest revenue', 30), (' Net finance costs', 30), ('other income', 28), ('finance income', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 30), (' Net finance costs', 30), ('other income', 25), ('finance income', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Interest revenue', 40), (' Net finance costs', 33), ('other income', 23), (' Finance income and finance costs', 23), ('Finance income and costs', 22), ('finance income', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('Finance income and costs', 42), (' Finance income and finance costs', 41), (' Net finance costs', 37), ('other income', 36), ('finance income', 29), (' Interest revenue', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('other income', 51), ('Finance income and costs', 49), (' Net finance costs', 47), (' Finance income and finance costs', 43), ('finance income', 41), (' Interest revenue', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Net finance costs', 41), ('Finance income and costs', 40), (' Finance income and finance costs', 39), ('other income', 37), ('finance income', 33), (' Interest revenue', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Finance income and finance costs', 40), ('Finance income and costs', 38), ('other income', 32), (' Net finance costs', 31), ('finance income', 26), (' Interest revenue', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 9, 10, 11], 'score': 86, 'value': 7937.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance income'], 'note_numbers': ['9.', nan, nan, '11.'], 'line_item_value': [129.0, 12685.0, -8781.0, 3904.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost ', 43), (' interest expense', 37), (' finance expenses ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense', 52), ('finance cost ', 26), (' net finance costs ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense', 74), (' finance expenses ', 56), (' net finance costs ', 22), ('finance cost ', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' net finance costs ', 65), ('finance cost ', 44), (' finance expenses ', 41), (' interest expense', 39)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' net finance costs ', 35), (' interest expense', 32), ('finance cost ', 27), (' finance expenses ', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 37), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses ', 40), (' interest expense', 38), ('finance cost ', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost ', 34), (' interest expense', 31), (' finance expenses ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' interest expense', 37), (' net finance costs ', 30), ('finance cost ', 28), (' finance expenses ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' net finance costs ', 30), ('finance cost ', 29), (' finance expenses ', 24), (' interest expense', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' interest expense', 47), (' finance expenses ', 36), (' net finance costs ', 33), ('finance cost ', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' net finance costs ', 37), (' interest expense', 34), ('finance cost ', 26), (' finance expenses ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' net finance costs ', 47), (' interest expense', 47), (' finance expenses ', 40), ('finance cost ', 37)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' net finance costs ', 41), (' interest expense', 34), (' finance expenses ', 32), ('finance cost ', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' interest expense', 33), (' net finance costs ', 31), (' finance expenses ', 26), ('finance cost ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -296.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-296.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost ', 43), (' interest expense', 37), (' finance expenses ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense', 52), ('finance cost ', 26), (' net finance costs ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense', 74), (' finance expenses ', 56), (' net finance costs ', 22), ('finance cost ', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' net finance costs ', 65), ('finance cost ', 44), (' finance expenses ', 41), (' interest expense', 39)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' net finance costs ', 35), (' interest expense', 32), ('finance cost ', 27), (' finance expenses ', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 37), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses ', 40), (' interest expense', 38), ('finance cost ', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost ', 34), (' interest expense', 31), (' finance expenses ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' interest expense', 37), (' net finance costs ', 30), ('finance cost ', 28), (' finance expenses ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' net finance costs ', 30), ('finance cost ', 29), (' finance expenses ', 24), (' interest expense', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' interest expense', 47), (' finance expenses ', 36), (' net finance costs ', 33), ('finance cost ', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' net finance costs ', 37), (' interest expense', 34), ('finance cost ', 26), (' finance expenses ', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' net finance costs ', 47), (' interest expense', 47), (' finance expenses ', 40), ('finance cost ', 37)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' net finance costs ', 41), (' interest expense', 34), (' finance expenses ', 32), ('finance cost ', 30)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' interest expense', 33), (' net finance costs ', 31), (' finance expenses ', 26), ('finance cost ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -8781.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-8781.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Profit from discontinued operation ', 62), (' net finance costs ', 52), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other gains/losses ', 44), ('finance cost ', 43), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' other income and revenue ', 41), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' finance income and finance cost ', 35), (' interest gains and losses ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Finance income and finance costs ', 35), (' net of tax ', 32), (' net of tax ', 32), (' Impairement (expenses)/reversal ', 31), (' interest revenue ', 30), (' Impairment loss ', 26), (' finance expenses', 24), (' expenses ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' Other income ', 61), (' other gains/losses ', 59), (' finance expenses', 56), (' Impairement (expenses)/reversal ', 56), (' other opertaing income ', 53), (' other income and revenue ', 41), (' interest revenue ', 37), (' Share of gain/(loss) of joint venture ', 35), (' share of profit of equity accounted investees ', 34), (' net of tax ', 32), (' net of tax ', 32), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' net finance costs ', 22), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), ('finance cost ', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Profit from discontinued operation ', 60), (' other opertaing income ', 53), (' other gains/losses ', 52), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), ('finance cost ', 37), (' other income ', 37), (' other income and revenue ', 37), (' Other income ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 34), (' Impairement (expenses)/reversal ', 33), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' interest revenue ', 26), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' net finance costs ', 65), (' finance income and costs ', 65), (' Finance income and costs ', 65), (' finance income and finance cost ', 55), (' Finance income and finance costs ', 55), (' other income and revenue ', 53), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' interest gains and losses ', 47), ('finance cost ', 44), (' Profit from discontinued operation ', 42), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Loss on revaluation of inventories', 38), (' Impairement (expenses)/reversal ', 33), (' share of profit of equity accounted investees ', 31), (' Impairment loss ', 30), (' interest revenue ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' share of profit of equity accounted investees ', 72), (' Profit from discontinued operation ', 48), (' Share of gain/(loss) of joint venture ', 45), (' interest gains and losses ', 43), (' other income and revenue ', 43), (' other opertaing income ', 39), (' Loss on revaluation of inventories', 38), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' net finance costs ', 35), (' finance income and costs ', 35), (' Finance income and costs ', 35), (' other income ', 34), (' Other income ', 34), (' other gains/losses ', 32), (' interest revenue ', 29), (' Impairement (expenses)/reversal ', 29), ('finance cost ', 27), (' net of tax ', 25), (' net of tax ', 25), (' finance expenses', 23), (' Impairment loss ', 20), (' expenses ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' other opertaing income ', 53), (' Profit from discontinued operation ', 52), (' Loss on revaluation of inventories', 50), (' other gains/losses ', 48), (' share of profit of equity accounted investees ', 45), (' Share of gain/(loss) of joint venture ', 44), (' other income ', 42), (' Other income ', 42), (' other income and revenue ', 41), (' net finance costs ', 38), ('finance cost ', 37), (' Impairment loss ', 37), (' finance expenses', 35), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 30), (' interest revenue ', 24), (' expenses ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' net of tax ', 58), (' net of tax ', 58), (' other income ', 50), (' Other income ', 50), (' finance income and costs ', 47), (' Finance income and costs ', 47), (' other opertaing income ', 46), (' other income and revenue ', 46), (' net finance costs ', 44), (' finance expenses', 40), (' finance income and finance cost ', 40), (' Finance income and finance costs ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 37), ('finance cost ', 36), (' Profit from discontinued operation ', 36), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' interest gains and losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' expenses ', 26), (' Impairment loss ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' other gains/losses ', 56), (' other opertaing income ', 52), (' Loss on revaluation of inventories', 49), (' share of profit of equity accounted investees ', 47), (' Share of gain/(loss) of joint venture ', 46), (' Profit from discontinued operation ', 43), (' other income ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' net finance costs ', 36), (' Impairement (expenses)/reversal ', 36), ('finance cost ', 34), (' Impairment loss ', 34), (' finance income and finance cost ', 31), (' finance income and costs ', 31), (' interest revenue ', 31), (' Finance income and finance costs ', 31), (' Finance income and costs ', 31), (' finance expenses', 27), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' share of profit of equity accounted investees ', 46), (' Share of gain/(loss) of joint venture ', 45), (' other gains/losses ', 41), (' other opertaing income ', 39), (' Profit from discontinued operation ', 39), (' Impairement (expenses)/reversal ', 37), (' Loss on revaluation of inventories', 37), (' interest gains and losses ', 36), (' other income and revenue ', 36), (' finance income and finance cost ', 33), (' Finance income and finance costs ', 33), (' Impairment loss ', 32), (' net finance costs ', 30), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), ('finance cost ', 28), (' other income ', 28), (' Other income ', 28), (' finance expenses', 27), (' net of tax ', 22), (' net of tax ', 22), (' expenses ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Profit from discontinued operation ', 39), (' Loss on revaluation of inventories', 39), (' share of profit of equity accounted investees ', 38), (' finance income and finance cost ', 36), (' other income and revenue ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' other gains/losses ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and costs ', 33), (' other opertaing income ', 32), (' net finance costs ', 30), (' interest revenue ', 30), ('finance cost ', 29), (' Impairement (expenses)/reversal ', 28), (' other income ', 25), (' Other income ', 25), (' finance expenses', 24), (' net of tax ', 23), (' net of tax ', 23), (' Impairment loss ', 21), (' expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' interest revenue ', 40), (' expenses ', 38), (' finance expenses', 36), (' net of tax ', 36), (' net of tax ', 36), (' Impairement (expenses)/reversal ', 34), (' net finance costs ', 33), (' Loss on revaluation of inventories', 33), ('finance cost ', 31), (' other opertaing income ', 30), (' Profit from discontinued operation ', 29), (' share of profit of equity accounted investees ', 28), (' other gains/losses ', 27), (' interest gains and losses ', 27), (' other income and revenue ', 27), (' other income ', 23), (' finance income and finance cost ', 23), (' Other income ', 23), (' Share of gain/(loss) of joint venture ', 23), (' Impairment loss ', 23), (' Finance income and finance costs ', 23), (' finance income and costs ', 22), (' Finance income and costs ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' share of profit of equity accounted investees ', 71), (' other income and revenue ', 47), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' other opertaing income ', 41), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' interest gains and losses ', 39), (' Profit from discontinued operation ', 39), (' Share of gain/(loss) of joint venture ', 38), (' net finance costs ', 37), (' other gains/losses ', 37), (' other income ', 36), (' Other income ', 36), (' Impairement (expenses)/reversal ', 34), (' Loss on revaluation of inventories', 31), (' interest revenue ', 28), ('finance cost ', 26), (' finance expenses', 25), (' Impairment loss ', 23), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' other opertaing income ', 52), (' other income and revenue ', 52), (' other income ', 51), (' Other income ', 51), (' finance income and costs ', 49), (' Finance income and costs ', 49), (' net finance costs ', 47), (' Profit from discontinued operation ', 47), (' other gains/losses ', 43), (' finance income and finance cost ', 43), (' Finance income and finance costs ', 43), (' Impairement (expenses)/reversal ', 42), (' interest gains and losses ', 41), (' finance expenses', 40), (' share of profit of equity accounted investees ', 39), ('finance cost ', 37), (' Share of gain/(loss) of joint venture ', 37), (' net of tax ', 31), (' net of tax ', 31), (' Loss on revaluation of inventories', 30), (' interest revenue ', 26), (' Impairment loss ', 23), (' expenses ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' other opertaing income ', 48), (' other income and revenue ', 45), (' net finance costs ', 41), (' share of profit of equity accounted investees ', 40), (' finance income and costs ', 40), (' Finance income and costs ', 40), (' finance income and finance cost ', 39), (' Finance income and finance costs ', 39), (' Impairement (expenses)/reversal ', 38), (' other income ', 37), (' Other income ', 37), (' Profit from discontinued operation ', 37), (' Share of gain/(loss) of joint venture ', 36), (' interest gains and losses ', 34), (' finance expenses', 32), (' other gains/losses ', 31), (' Loss on revaluation of inventories', 31), ('finance cost ', 30), (' interest revenue ', 28), (' net of tax ', 25), (' net of tax ', 25), (' Impairment loss ', 17), (' expenses ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' share of profit of equity accounted investees ', 48), (' other income and revenue ', 48), (' Profit from discontinued operation ', 48), (' Share of gain/(loss) of joint venture ', 42), (' Loss on revaluation of inventories', 41), (' other opertaing income ', 40), (' finance income and finance cost ', 40), (' Finance income and finance costs ', 40), (' other gains/losses ', 39), (' finance income and costs ', 38), (' Finance income and costs ', 38), (' interest gains and losses ', 35), (' Impairement (expenses)/reversal ', 34), (' other income ', 32), (' Other income ', 32), (' net finance costs ', 31), (' finance expenses', 26), (' interest revenue ', 25), ('finance cost ', 24), (' Impairment loss ', 24), (' net of tax ', 19), (' net of tax ', 19), (' expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': 100, 'value': 427.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['9.', nan], 'line_item_value': [723.0, -296.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Profit from discontinued operation ', 62), (' net finance costs ', 52), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other gains/losses ', 44), ('finance cost ', 43), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' other income and revenue ', 41), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' finance income and finance cost ', 35), (' interest gains and losses ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Finance income and finance costs ', 35), (' net of tax ', 32), (' net of tax ', 32), (' Impairement (expenses)/reversal ', 31), (' interest revenue ', 30), (' Impairment loss ', 26), (' finance expenses', 24), (' expenses ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' Other income ', 61), (' other gains/losses ', 59), (' finance expenses', 56), (' Impairement (expenses)/reversal ', 56), (' other opertaing income ', 53), (' other income and revenue ', 41), (' interest revenue ', 37), (' Share of gain/(loss) of joint venture ', 35), (' share of profit of equity accounted investees ', 34), (' net of tax ', 32), (' net of tax ', 32), (' Loss on revaluation of inventories', 30), (' interest gains and losses ', 29), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' net finance costs ', 22), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), ('finance cost ', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' Profit from discontinued operation ', 60), (' other opertaing income ', 53), (' other gains/losses ', 52), (' net finance costs ', 39), (' share of profit of equity accounted investees ', 39), ('finance cost ', 37), (' other income ', 37), (' other income and revenue ', 37), (' Other income ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 34), (' Impairement (expenses)/reversal ', 33), (' Loss on revaluation of inventories', 32), (' Impairment loss ', 30), (' finance income and finance cost ', 27), (' finance income and costs ', 27), (' Finance income and finance costs ', 27), (' Finance income and costs ', 27), (' interest revenue ', 26), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' net finance costs ', 65), (' finance income and costs ', 65), (' Finance income and costs ', 65), (' finance income and finance cost ', 55), (' Finance income and finance costs ', 55), (' other income and revenue ', 53), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' interest gains and losses ', 47), ('finance cost ', 44), (' Profit from discontinued operation ', 42), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Loss on revaluation of inventories', 38), (' Impairement (expenses)/reversal ', 33), (' share of profit of equity accounted investees ', 31), (' Impairment loss ', 30), (' interest revenue ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' share of profit of equity accounted investees ', 72), (' Profit from discontinued operation ', 48), (' Share of gain/(loss) of joint venture ', 45), (' interest gains and losses ', 43), (' other income and revenue ', 43), (' other opertaing income ', 39), (' Loss on revaluation of inventories', 38), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' net finance costs ', 35), (' finance income and costs ', 35), (' Finance income and costs ', 35), (' other income ', 34), (' Other income ', 34), (' other gains/losses ', 32), (' interest revenue ', 29), (' Impairement (expenses)/reversal ', 29), ('finance cost ', 27), (' net of tax ', 25), (' net of tax ', 25), (' finance expenses', 23), (' Impairment loss ', 20), (' expenses ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' other opertaing income ', 53), (' Profit from discontinued operation ', 52), (' Loss on revaluation of inventories', 50), (' other gains/losses ', 48), (' share of profit of equity accounted investees ', 45), (' Share of gain/(loss) of joint venture ', 44), (' other income ', 42), (' Other income ', 42), (' other income and revenue ', 41), (' net finance costs ', 38), ('finance cost ', 37), (' Impairment loss ', 37), (' finance expenses', 35), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 30), (' interest revenue ', 24), (' expenses ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' net of tax ', 58), (' net of tax ', 58), (' other income ', 50), (' Other income ', 50), (' finance income and costs ', 47), (' Finance income and costs ', 47), (' other opertaing income ', 46), (' other income and revenue ', 46), (' net finance costs ', 44), (' finance expenses', 40), (' finance income and finance cost ', 40), (' Finance income and finance costs ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 37), ('finance cost ', 36), (' Profit from discontinued operation ', 36), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' interest gains and losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' expenses ', 26), (' Impairment loss ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' other gains/losses ', 56), (' other opertaing income ', 52), (' Loss on revaluation of inventories', 49), (' share of profit of equity accounted investees ', 47), (' Share of gain/(loss) of joint venture ', 46), (' Profit from discontinued operation ', 43), (' other income ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' net finance costs ', 36), (' Impairement (expenses)/reversal ', 36), ('finance cost ', 34), (' Impairment loss ', 34), (' finance income and finance cost ', 31), (' finance income and costs ', 31), (' interest revenue ', 31), (' Finance income and finance costs ', 31), (' Finance income and costs ', 31), (' finance expenses', 27), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' share of profit of equity accounted investees ', 46), (' Share of gain/(loss) of joint venture ', 45), (' other gains/losses ', 41), (' other opertaing income ', 39), (' Profit from discontinued operation ', 39), (' Impairement (expenses)/reversal ', 37), (' Loss on revaluation of inventories', 37), (' interest gains and losses ', 36), (' other income and revenue ', 36), (' finance income and finance cost ', 33), (' Finance income and finance costs ', 33), (' Impairment loss ', 32), (' net finance costs ', 30), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), ('finance cost ', 28), (' other income ', 28), (' Other income ', 28), (' finance expenses', 27), (' net of tax ', 22), (' net of tax ', 22), (' expenses ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Profit from discontinued operation ', 39), (' Loss on revaluation of inventories', 39), (' share of profit of equity accounted investees ', 38), (' finance income and finance cost ', 36), (' other income and revenue ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' other gains/losses ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and costs ', 33), (' other opertaing income ', 32), (' net finance costs ', 30), (' interest revenue ', 30), ('finance cost ', 29), (' Impairement (expenses)/reversal ', 28), (' other income ', 25), (' Other income ', 25), (' finance expenses', 24), (' net of tax ', 23), (' net of tax ', 23), (' Impairment loss ', 21), (' expenses ', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' interest revenue ', 40), (' expenses ', 38), (' finance expenses', 36), (' net of tax ', 36), (' net of tax ', 36), (' Impairement (expenses)/reversal ', 34), (' net finance costs ', 33), (' Loss on revaluation of inventories', 33), ('finance cost ', 31), (' other opertaing income ', 30), (' Profit from discontinued operation ', 29), (' share of profit of equity accounted investees ', 28), (' other gains/losses ', 27), (' interest gains and losses ', 27), (' other income and revenue ', 27), (' other income ', 23), (' finance income and finance cost ', 23), (' Other income ', 23), (' Share of gain/(loss) of joint venture ', 23), (' Impairment loss ', 23), (' Finance income and finance costs ', 23), (' finance income and costs ', 22), (' Finance income and costs ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' share of profit of equity accounted investees ', 71), (' other income and revenue ', 47), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' other opertaing income ', 41), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' interest gains and losses ', 39), (' Profit from discontinued operation ', 39), (' Share of gain/(loss) of joint venture ', 38), (' net finance costs ', 37), (' other gains/losses ', 37), (' other income ', 36), (' Other income ', 36), (' Impairement (expenses)/reversal ', 34), (' Loss on revaluation of inventories', 31), (' interest revenue ', 28), ('finance cost ', 26), (' finance expenses', 25), (' Impairment loss ', 23), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' other opertaing income ', 52), (' other income and revenue ', 52), (' other income ', 51), (' Other income ', 51), (' finance income and costs ', 49), (' Finance income and costs ', 49), (' net finance costs ', 47), (' Profit from discontinued operation ', 47), (' other gains/losses ', 43), (' finance income and finance cost ', 43), (' Finance income and finance costs ', 43), (' Impairement (expenses)/reversal ', 42), (' interest gains and losses ', 41), (' finance expenses', 40), (' share of profit of equity accounted investees ', 39), ('finance cost ', 37), (' Share of gain/(loss) of joint venture ', 37), (' net of tax ', 31), (' net of tax ', 31), (' Loss on revaluation of inventories', 30), (' interest revenue ', 26), (' Impairment loss ', 23), (' expenses ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' other opertaing income ', 48), (' other income and revenue ', 45), (' net finance costs ', 41), (' share of profit of equity accounted investees ', 40), (' finance income and costs ', 40), (' Finance income and costs ', 40), (' finance income and finance cost ', 39), (' Finance income and finance costs ', 39), (' Impairement (expenses)/reversal ', 38), (' other income ', 37), (' Other income ', 37), (' Profit from discontinued operation ', 37), (' Share of gain/(loss) of joint venture ', 36), (' interest gains and losses ', 34), (' finance expenses', 32), (' other gains/losses ', 31), (' Loss on revaluation of inventories', 31), ('finance cost ', 30), (' interest revenue ', 28), (' net of tax ', 25), (' net of tax ', 25), (' Impairment loss ', 17), (' expenses ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' share of profit of equity accounted investees ', 48), (' other income and revenue ', 48), (' Profit from discontinued operation ', 48), (' Share of gain/(loss) of joint venture ', 42), (' Loss on revaluation of inventories', 41), (' other opertaing income ', 40), (' finance income and finance cost ', 40), (' Finance income and finance costs ', 40), (' other gains/losses ', 39), (' finance income and costs ', 38), (' Finance income and costs ', 38), (' interest gains and losses ', 35), (' Impairement (expenses)/reversal ', 34), (' other income ', 32), (' Other income ', 32), (' net finance costs ', 31), (' finance expenses', 26), (' interest revenue ', 25), ('finance cost ', 24), (' Impairment loss ', 24), (' net of tax ', 19), (' net of tax ', 19), (' expenses ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': 100, 'value': -8652.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['9.', nan], 'line_item_value': [129.0, -8781.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('NULL', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('NULL', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('NULL', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('NULL', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('provision for taxation previous year', 44), ('amount transferred to retained earnings', 37), ('earlier year', 36), ('deferred tax', 32), ('prior year ', 31), (' income tax expense', 31), (' income tax benefit/(expense)', 30), ('minimum alternate tax credit entitlement', 29), (' tax (expense)/benefit', 29), (' income tax', 24), (' income tax benefit', 24), ('current tax', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' income tax benefit', 61), (' income tax expense', 56), (' income tax', 56), (' income tax benefit/(expense)', 55), ('amount transferred to retained earnings', 42), ('minimum alternate tax credit entitlement', 38), (' tax (expense)/benefit', 35), ('prior year ', 31), ('current tax', 30), ('earlier year', 29), ('provision for taxation previous year', 27), ('deferred tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('minimum alternate tax credit entitlement', 40), ('amount transferred to retained earnings', 40), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), (' income tax expense', 38), ('provision for taxation previous year', 36), (' tax (expense)/benefit', 36), (' income tax', 32), ('current tax', 31), ('earlier year', 27), ('deferred tax', 25), ('prior year ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 41), ('deferred tax', 39), ('current tax', 37), ('amount transferred to retained earnings', 33), ('prior year ', 32), ('earlier year', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('amount transferred to retained earnings', 42), ('provision for taxation previous year', 41), ('minimum alternate tax credit entitlement', 39), (' tax (expense)/benefit', 39), (' income tax benefit/(expense)', 38), (' income tax benefit', 36), (' income tax expense', 33), ('earlier year', 31), ('prior year ', 29), ('deferred tax', 25), (' income tax', 25), ('current tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('amount transferred to retained earnings', 36), ('minimum alternate tax credit entitlement', 34), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('earlier year', 28), ('provision for taxation previous year', 27), ('deferred tax', 26), (' income tax expense', 26), ('prior year ', 22), (' income tax', 22), ('current tax', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('deferred tax', 50), ('provision for taxation previous year', 41), ('current tax', 38), ('amount transferred to retained earnings', 38), ('earlier year', 37), (' tax (expense)/benefit', 36), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('amount transferred to retained earnings', 47), (' income tax benefit/(expense)', 43), (' income tax benefit', 42), ('minimum alternate tax credit entitlement', 41), (' income tax expense', 39), ('provision for taxation previous year', 38), (' tax (expense)/benefit', 32), ('current tax', 30), ('prior year ', 27), (' income tax', 27), ('earlier year', 26), ('deferred tax', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' income tax expense', 58), (' income tax benefit', 53), (' income tax benefit/(expense)', 50), ('minimum alternate tax credit entitlement', 44), (' income tax', 44), ('current tax', 42), ('provision for taxation previous year', 39), ('amount transferred to retained earnings', 37), (' tax (expense)/benefit', 36), ('deferred tax', 34), ('prior year ', 33), ('earlier year', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax expense', 43), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 37), ('minimum alternate tax credit entitlement', 35), ('prior year ', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), (' income tax', 31), ('current tax', 30), ('deferred tax', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit/(expense)', 37), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 36), (' income tax expense', 36), (' income tax benefit', 32), ('prior year ', 30), ('earlier year', 29), (' tax (expense)/benefit', 29), ('current tax', 24), ('deferred tax', 24), (' income tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 46544.0, 'line_item_label': ['Income tax benefits'], 'note_numbers': ['12.'], 'line_item_value': [46544.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('provision for taxation previous year', 44), ('amount transferred to retained earnings', 37), ('earlier year', 36), ('deferred tax', 32), ('prior year ', 31), (' income tax expense', 31), (' income tax benefit/(expense)', 30), ('minimum alternate tax credit entitlement', 29), (' tax (expense)/benefit', 29), (' income tax', 24), (' income tax benefit', 24), ('current tax', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' income tax benefit', 61), (' income tax expense', 56), (' income tax', 56), (' income tax benefit/(expense)', 55), ('amount transferred to retained earnings', 42), ('minimum alternate tax credit entitlement', 38), (' tax (expense)/benefit', 35), ('prior year ', 31), ('current tax', 30), ('earlier year', 29), ('provision for taxation previous year', 27), ('deferred tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('minimum alternate tax credit entitlement', 40), ('amount transferred to retained earnings', 40), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), (' income tax expense', 38), ('provision for taxation previous year', 36), (' tax (expense)/benefit', 36), (' income tax', 32), ('current tax', 31), ('earlier year', 27), ('deferred tax', 25), ('prior year ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 41), ('deferred tax', 39), ('current tax', 37), ('amount transferred to retained earnings', 33), ('prior year ', 32), ('earlier year', 31)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('amount transferred to retained earnings', 42), ('provision for taxation previous year', 41), ('minimum alternate tax credit entitlement', 39), (' tax (expense)/benefit', 39), (' income tax benefit/(expense)', 38), (' income tax benefit', 36), (' income tax expense', 33), ('earlier year', 31), ('prior year ', 29), ('deferred tax', 25), (' income tax', 25), ('current tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('amount transferred to retained earnings', 36), ('minimum alternate tax credit entitlement', 34), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('earlier year', 28), ('provision for taxation previous year', 27), ('deferred tax', 26), (' income tax expense', 26), ('prior year ', 22), (' income tax', 22), ('current tax', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('deferred tax', 50), ('provision for taxation previous year', 41), ('current tax', 38), ('amount transferred to retained earnings', 38), ('earlier year', 37), (' tax (expense)/benefit', 36), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('amount transferred to retained earnings', 47), (' income tax benefit/(expense)', 43), (' income tax benefit', 42), ('minimum alternate tax credit entitlement', 41), (' income tax expense', 39), ('provision for taxation previous year', 38), (' tax (expense)/benefit', 32), ('current tax', 30), ('prior year ', 27), (' income tax', 27), ('earlier year', 26), ('deferred tax', 17)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' income tax expense', 58), (' income tax benefit', 53), (' income tax benefit/(expense)', 50), ('minimum alternate tax credit entitlement', 44), (' income tax', 44), ('current tax', 42), ('provision for taxation previous year', 39), ('amount transferred to retained earnings', 37), (' tax (expense)/benefit', 36), ('deferred tax', 34), ('prior year ', 33), ('earlier year', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax expense', 43), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 37), ('minimum alternate tax credit entitlement', 35), ('prior year ', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), (' income tax', 31), ('current tax', 30), ('deferred tax', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit/(expense)', 37), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 36), (' income tax expense', 36), (' income tax benefit', 32), ('prior year ', 30), ('earlier year', 29), (' tax (expense)/benefit', 29), ('current tax', 24), ('deferred tax', 24), (' income tax', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 948.0, 'line_item_label': ['Income tax benefits'], 'note_numbers': ['12.'], 'line_item_value': [948.0]}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 33), ('exceptional ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), (' prior period ', 29), ('exceptional ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 27), ('exceptional ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 50), (' prior period ', 41), ('exceptional ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 34), ('exceptional ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 31), ('exceptional ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 46), (' prior period ', 32), ('exceptional ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 30), ('exceptional ', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 26), ('exceptional ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), (' prior period ', 36), ('exceptional ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 30), ('exceptional ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 32), ('exceptional ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 33), ('exceptional ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), (' prior period ', 29), ('exceptional ', 27)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 27), ('exceptional ', 19)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 50), (' prior period ', 41), ('exceptional ', 24)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 34), ('exceptional ', 26)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 31), ('exceptional ', 18)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 46), (' prior period ', 32), ('exceptional ', 20)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 30), ('exceptional ', 29)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 44), (' prior period ', 26), ('exceptional ', 14)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), (' prior period ', 36), ('exceptional ', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 30), ('exceptional ', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 32), ('exceptional ', 16)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:06:29+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 10:06:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('NULL', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('NULL', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:06:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:06:29+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = net finance income , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of profit of equity-accounted investees, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit before income tax , res_fuzz_match = [('NULL', 13)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax benefits , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = (loss)/profit for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = items that are or may be reclassfied to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = effective portion of changes in fair value of cash flow hedges , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = translation reserve , res_fuzz_match = [('NULL', 21)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = share of other comprehensive income of equity accounted investments , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = income tax on other comprehensive income , res_fuzz_match = [('NULL', 6)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income tax , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - txt_particular = total profit or loss and other comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:06:29+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:07:25+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-17 10:07:25+0530 - sLogger - DEBUG - {'fileid': '7d77670e-efd3-4763-ac7e-54a770a431a9', 'filename': 'BFE_Financial_Report_MAR23_FINAL_Signed.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/BFE_Financial_Report_MAR23_FINAL_Signed.pdf', 'status': 'Processing'}
2023-08-17 10:07:25+0530 - sLogger - DEBUG - save file completed
2023-08-17 10:07:25+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-17 10:07:25+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-17 10:07:25+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-17 10:07:25+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-17 10:07:25+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-17 10:07:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:25+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:07:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:07:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:07:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:07:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:07:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:07:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:07:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:07:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:07:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:07:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:07:30+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:07:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:30+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:07:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:07:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:07:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:07:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:07:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:07:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:07:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:07:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:07:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:07:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:07:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:07:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:07:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:07:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:07:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:07:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:07:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:07:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:07:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:07:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:07:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:07:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:07:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:07:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:07:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:01+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:01+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:15+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:15+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:30+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:30+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:50+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:50+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:08:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:08:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:08:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:08:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:08:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:08:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:08:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:17+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:17+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:39+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:39+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:54+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:09:54+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:09:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:09:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:09:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:09:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:09:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:09:59+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-17 10:09:59+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [10], 'predicted_cpl_pages': [9, 24], 'predicted_ccf_pages': [12], 'filtered_cbs_pages': [10], 'filtered_cpl_pages': [9], 'filtered_ccf_pages': [12], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-17 10:09:59+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-17 10:09:59+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-17 10:09:59+0530 - sLogger - DEBUG - process file completed
2023-08-17 10:09:59+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-17 10:09:59+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-17 10:09:59+0530 - sLogger - DEBUG - TE process file started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-17 10:12:37+0530 - sLogger - DEBUG - process_main_pages started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:12:37+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:12:37+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:12:37+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: find_note_subnote_number
2023-08-17 10:12:37+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: find_note_subnote_number
2023-08-17 10:12:37+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: find_note_subnote_number
2023-08-17 10:12:37+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-17 10:12:37+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentassets | score 96
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentliabilities | score 62
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equityandliabilities | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Cash and Cash Equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD current assets | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD currentassets | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD current liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD currentliabilities | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrent assets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentassets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD non current assets | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD non current liabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentassets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD equity and liabilities | score 54
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD equity | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD equityandliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Other FinancialAssets | [('noncurrent assets', 48), ('noncurrentassets', 46), ('current assets', 42), ('noncurrent liabilities', 41), ('assets', 40), ('currentassets', 38), ('liabilities', 31), ('noncurrentliabilities', 31), ('equity and liabilities', 27), ('equityandliabilities', 26), ('current liabilities', 24), ('equity liabilities', 24), ('currentliabilities', 21), ('equity', 15), ('equityliabilities', 14)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD current assets | score 53
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD currentassets | score 49
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD current liabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD currentliabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD noncurrent assets | score 47
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD noncurrentassets | score 49
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD noncurrent liabilities | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD non current assets | score 46
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD non current liabilities | score 41
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD noncurrentassets | score 49
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD equity and liabilities | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other FinancialAssets | MATCH WORD equityandliabilities | score 44
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Trade and Other Receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD current assets | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD currentassets | score 41
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD current liabilities | score 48
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD currentliabilities | score 45
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrent assets | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentassets | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD non current assets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD non current liabilities | score 44
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentassets | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD equity and liabilities | score 49
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD equityandliabilities | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Other Assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD current assets | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD currentassets | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD current liabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD currentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrent assets | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD non current assets | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD non current liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD equity and liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD equityandliabilities | score 25
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTALCURRENTASSETS | [('currentassets', 83), ('noncurrentassets', 81), ('noncurrentliabilities', 55), ('currentliabilities', 54), ('current assets', 53), ('current liabilities', 52), ('assets', 45), ('noncurrent assets', 40), ('noncurrent liabilities', 39), ('equity and liabilities', 24), ('equityandliabilities', 21), ('equity liabilities', 20), ('liabilities', 17), ('equity', 17), ('equityliabilities', 16)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD current assets | score 81
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD currentassets | score 84
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD current liabilities | score 54
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD currentliabilities | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD noncurrent assets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD noncurrentassets | score 82
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD noncurrent liabilities | score 55
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD non current assets | score 78
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD non current liabilities | score 54
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD noncurrentliabilities | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD noncurrentassets | score 82
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD noncurrentliabilities | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD equity and liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALCURRENTASSETS | MATCH WORD equityandliabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD currentassets | score 87
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD currentliabilities | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 97
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 97
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equityandliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Property Plant and Equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD current assets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD currentassets | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD current liabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD currentliabilities | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrent assets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentassets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD non current assets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD non current liabilities | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentassets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD equity and liabilities | score 53
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD equity | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD equityandliabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Right of Use Asset | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD current assets | score 50
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD currentassets | score 45
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD current liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD currentliabilities | score 28
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD noncurrent assets | score 51
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD noncurrentassets | score 47
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD noncurrent liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD non current assets | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD non current liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD noncurrentliabilities | score 26
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD noncurrentassets | score 47
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD noncurrentliabilities | score 26
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD equity and liabilities | score 33
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Right of Use Asset | MATCH WORD equityandliabilities | score 25
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Other Assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD current assets | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD currentassets | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD current liabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD currentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrent assets | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD non current assets | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD non current liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD equity and liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Other Assets | MATCH WORD equityandliabilities | score 25
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTAL NONCURRENTASSETS | [('noncurrentassets', 83), ('currentassets', 73), ('noncurrentliabilities', 67), ('current liabilities', 57), ('currentliabilities', 53), ('current assets', 41), ('noncurrent assets', 41), ('noncurrent liabilities', 40), ('assets', 38), ('equity and liabilities', 32), ('equity liabilities', 29), ('equityandliabilities', 25), ('equityliabilities', 21), ('liabilities', 15), ('equity', 15)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD current assets | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD currentassets | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD current liabilities | score 49
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD currentliabilities | score 50
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD noncurrent assets | score 82
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD noncurrentassets | score 95
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD noncurrent liabilities | score 59
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD non current assets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD non current liabilities | score 58
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD noncurrentliabilities | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD noncurrentassets | score 95
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD noncurrentliabilities | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD equity and liabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENTASSETS | MATCH WORD equityandliabilities | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTALASSETS | [('assets', 67), ('noncurrentassets', 56), ('currentassets', 55), ('current assets', 43), ('noncurrent assets', 43), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('equity liabilities', 26), ('liabilities', 25), ('equity', 25), ('current liabilities', 25), ('equity and liabilities', 22), ('equityliabilities', 22), ('currentliabilities', 21), ('noncurrent liabilities', 17)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD current assets | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD currentassets | score 58
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD current liabilities | score 33
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD currentliabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD noncurrent assets | score 58
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD noncurrentassets | score 59
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD non current assets | score 58
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD non current liabilities | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD noncurrentassets | score 59
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD equity and liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALASSETS | MATCH WORD equityandliabilities | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentassets | score 62
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentliabilities | score 97
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Trade and Other Payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD current assets | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD currentassets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD current liabilities | score 47
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD currentliabilities | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrent assets | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrent liabilities | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD non current assets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD non current liabilities | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD equity and liabilities | score 48
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD equityandliabilities | score 41
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentassets | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentliabilities | score 69
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Derivative Liabilities | [('equity liabilities', 72), ('equity and liabilities', 69), ('liabilities', 67), ('current liabilities', 62), ('noncurrent liabilities', 46), ('equityliabilities', 40), ('equityandliabilities', 35), ('equity', 33), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('currentassets', 17), ('current assets', 16), ('noncurrent assets', 16), ('noncurrentassets', 15), ('assets', 12)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD current assets | score 33
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD currentassets | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD current liabilities | score 69
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD currentliabilities | score 65
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD noncurrent assets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD noncurrentassets | score 26
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD noncurrent liabilities | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD non current assets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD non current liabilities | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD noncurrentliabilities | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD noncurrentassets | score 26
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD noncurrentliabilities | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD equity and liabilities | score 69
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD equity | score 45
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Derivative Liabilities | MATCH WORD equityandliabilities | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD currentliabilities | score 84
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 54
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 83
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 54
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 83
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 62
2023-08-17 10:12:37+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD currentassets | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD currentliabilities | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 72
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 70
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 98
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 98
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equityandliabilities | score 62
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Lease Liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD current assets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD currentassets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD current liabilities | score 59
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD currentliabilities | score 55
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrent assets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentassets | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrent liabilities | score 54
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD non current assets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD non current liabilities | score 60
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentliabilities | score 50
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentassets | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentliabilities | score 50
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD equity and liabilities | score 59
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD equity | score 45
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD equityandliabilities | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Deferred Tax Liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equityandliabilities', 30), ('equity', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('current assets', 21), ('currentassets', 21), ('noncurrentliabilities', 21), ('assets', 19), ('noncurrentassets', 19), ('noncurrent assets', 14)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD current assets | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD currentassets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD current liabilities | score 74
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD currentliabilities | score 71
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD noncurrent assets | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD noncurrentassets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD noncurrent liabilities | score 70
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD non current assets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD non current liabilities | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD noncurrentliabilities | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD noncurrentassets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD noncurrentliabilities | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD equity and liabilities | score 65
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Deferred Tax Liabilities | MATCH WORD equityandliabilities | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD currentliabilities | score 85
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 62
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 61
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 62
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equityandliabilities | score 58
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTALLIABILITIES | [('equityandliabilities', 44), ('noncurrentliabilities', 42), ('equityliabilities', 40), ('currentliabilities', 38), ('liabilities', 31), ('equity', 31), ('equity liabilities', 30), ('current liabilities', 29), ('noncurrentassets', 27), ('equity and liabilities', 25), ('currentassets', 21), ('current assets', 20), ('noncurrent assets', 20), ('noncurrent liabilities', 19), ('assets', 17)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD current assets | score 27
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD currentassets | score 28
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD current liabilities | score 69
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD currentliabilities | score 71
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD noncurrent assets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD noncurrentassets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD noncurrent liabilities | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD non current assets | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD non current liabilities | score 67
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD noncurrentliabilities | score 70
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD noncurrentassets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD noncurrentliabilities | score 70
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD equity and liabilities | score 68
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTALLIABILITIES | MATCH WORD equityandliabilities | score 72
2023-08-17 10:12:37+0530 - sLogger - DEBUG - NETASSETS | [('assets', 77), ('currentassets', 70), ('noncurrentassets', 70), ('current assets', 48), ('noncurrent assets', 48), ('equity and liabilities', 32), ('equityandliabilities', 32), ('noncurrentliabilities', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('liabilities', 14), ('noncurrent liabilities', 9)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD current assets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD currentassets | score 73
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD current liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD currentliabilities | score 37
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD noncurrent assets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD noncurrentassets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD noncurrent liabilities | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD non current assets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD non current liabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD noncurrentassets | score 80
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD equity and liabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text NETASSETS | MATCH WORD equityandliabilities | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - EQUITY | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current assets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD currentassets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD currentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent assets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentassets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current assets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current liabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentassets | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity and liabilities | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity | score 100
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equityandliabilities | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Issued Capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD current assets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD currentassets | score 42
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD current liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD currentliabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD noncurrent assets | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD noncurrentassets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD noncurrent liabilities | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD non current assets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD non current liabilities | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD noncurrentassets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD equity and liabilities | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Issued Capital | MATCH WORD equityandliabilities | score 33
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Hedge Reserve | [('currentassets', 35), ('current assets', 33), ('noncurrent assets', 33), ('noncurrentassets', 31), ('assets', 25), ('noncurrent liabilities', 24), ('equity and liabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('equity liabilities', 17), ('noncurrentliabilities', 17), ('current liabilities', 16), ('equity', 12), ('equityliabilities', 11), ('liabilities', 0)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD current assets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD currentassets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD current liabilities | score 25
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD currentliabilities | score 19
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD noncurrent assets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD noncurrentassets | score 28
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD noncurrent liabilities | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD non current assets | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD non current liabilities | score 22
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD noncurrentliabilities | score 21
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD noncurrentassets | score 28
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD noncurrentliabilities | score 21
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD equity and liabilities | score 29
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD equity | score 15
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Hedge Reserve | MATCH WORD equityandliabilities | score 24
2023-08-17 10:12:37+0530 - sLogger - DEBUG - Retained Earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD current assets | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD currentassets | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD current liabilities | score 39
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD currentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrent assets | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD non current assets | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD non current liabilities | score 35
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equity and liabilities | score 46
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equity | score 30
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equityandliabilities | score 43
2023-08-17 10:12:37+0530 - sLogger - DEBUG - TOTAL EQUITY | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current assets | score 31
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD currentassets | score 32
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current liabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD currentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent assets | score 34
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrentassets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent liabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current assets | score 33
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current liabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrentassets | score 36
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity and liabilities | score 86
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity | score 90
2023-08-17 10:12:37+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equityandliabilities | score 57
2023-08-17 10:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-17 10:12:37+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM OPERATING ACTIVITIES | operating cash flow before working capital changes
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Finance costs | changes in working capital
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net tax paid | changes in assets liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated from operating activities | adjustments for increase decrease in operating assets
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM INVESTINGACTIVITIES | adjustments for increase decrease in operating liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceed for disposal of property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM FINANCING ACTIVITIES | operating cash flow before working capital changes
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds (Repayment) ofloans provided to related parties | operating profit before working capital changes
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Lease Payment | movements in working capital
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividend Paid | changes in assets liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | adjustments for increase decrease in operating assets
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- NET INCREASE/ (DECREASE) IN CASHAND CASH | adjustments for increase decrease in operating assets
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- EQUIVALENTS HELD | changes in operating assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH. AND CASH EQUIVALENTSATTHE | changes in operating assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- BEGINNING OF THE FINANCIALYEAR | operating profit before changes in assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH. AND CASH EQUIVALENTS ATTHE END OF | changes in operating assets and liabilities
2023-08-17 10:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- THE FINANCIAL YEAR | changes in working capital
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: '8 5'
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: 'year'
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: 'value'
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: 'value'
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: 'year'
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:12:38+0530 - sLogger - ERROR - error occured: 'year'
2023-08-17 10:12:38+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:38+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:12:38+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:38+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:12:38+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:38+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:12:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:38+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [('other bank balances', 54), ('cash and short term deposits', 51), ('Cash and short term deposits', 51), ('bank balances other than cash and cash equivalents', 47), ('cash asset', 47), ('bank balances other than above', 43), ('cash and bank balances', 40), ('cash and cash equivalents', 39)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('cash asset', 37), ('bank balances other than above', 36), ('other bank balances', 35), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('cash and short term deposits', 27), ('Cash and short term deposits', 27)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 1001.0, 'line_item_label': ['Cash and Cash Equivalents'], 'note_numbers': ['17'], 'line_item_value': [1001.0]}
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:38+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [('other bank balances', 54), ('cash and short term deposits', 51), ('Cash and short term deposits', 51), ('bank balances other than cash and cash equivalents', 47), ('cash asset', 47), ('bank balances other than above', 43), ('cash and bank balances', 40), ('cash and cash equivalents', 39)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('cash asset', 37), ('bank balances other than above', 36), ('other bank balances', 35), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('cash and short term deposits', 27), ('Cash and short term deposits', 27)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2162.0, 'line_item_label': ['Cash and Cash Equivalents'], 'note_numbers': ['17'], 'line_item_value': [2162.0]}
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:38+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:12:38+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:38+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:12:38+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles']
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:38+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:12:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:38+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [('inventories', 44)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 6284788.0, 'line_item_label': ['Inventories'], 'note_numbers': ['6'], 'line_item_value': [6284788.0]}
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:38+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [('inventories', 44)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 7981563.0, 'line_item_label': ['Inventories'], 'note_numbers': ['6'], 'line_item_value': [7981563.0]}
2023-08-17 10:12:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:38+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' stores and other consumables at cost ', 36), (' provision for inventory obsolescence ', 36), (' inventories ', 33), (' goods in transit ', 27), (' parts and accessories (at cost) ', 27), (' Demonstrator units ', 27), (' Training Vehicles', 27), (' spare parts ', 20), (' work in progress ', 18), (' cranes - in transit ', 18), (' stock in transit ', 18), (' Vehicles ', 17), ('raw materials ', 10), (' raw materials ', 10), (' cranes ', 0)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' stores and other consumables at cost ', 36), (' provision for inventory obsolescence ', 36), (' inventories ', 33), (' goods in transit ', 27), (' parts and accessories (at cost) ', 27), (' Demonstrator units ', 27), (' Training Vehicles', 27), (' spare parts ', 20), (' work in progress ', 18), (' cranes - in transit ', 18), (' stock in transit ', 18), (' Vehicles ', 17), ('raw materials ', 10), (' raw materials ', 10), (' cranes ', 0)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:12:38+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [7981563.0, 6284788.0], 'label': ['6. Finished goods', '6. Finished goods'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [('other assets ', 71), (' other financial assets ', 67), (' other current assets ', 56), (' other current financial assets ', 55), (' trade and other receivables', 38), (' prepayments ', 8)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables', 42), (' prepayments ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [(' other current assets ', 50), (' other current financial assets ', 45), (' trade and other receivables', 41), ('other assets ', 36), (' other financial assets ', 28), (' prepayments ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 5], 'score': 100, 'value': 524677.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables', 'Other Assets'], 'note_numbers': [nan, '5', '7'], 'line_item_value': [0.0, 449464.0, 75213.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [('other assets ', 71), (' other financial assets ', 67), (' other current assets ', 56), (' other current financial assets ', 55), (' trade and other receivables', 38), (' prepayments ', 8)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables', 42), (' prepayments ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [(' other current assets ', 50), (' other current financial assets ', 45), (' trade and other receivables', 41), ('other assets ', 36), (' other financial assets ', 28), (' prepayments ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 5], 'score': 100, 'value': 1169990.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables', 'Other Assets'], 'note_numbers': [nan, '5', '7'], 'line_item_value': [0.0, 877863.0, 292127.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 75), ('prepaid expense ', 50), (' prepaid expenditure ', 50), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 42), (' prepayments ', 33), (' in advance ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other receivables and prepayments ', 70), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 40), (' charges paid in advance', 40), (' prepayments ', 33), (' other prepayments ', 32), ('prepaid expense ', 30), (' in advance ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' prepaid expenditure ', 47), (' prepaid ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 40), (' prepayments ', 33), (' other prepayments ', 33), (' in advance ', 33), ('prepaid expense ', 29), (' charges paid in advance', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [('prepaid expense ', 43), (' prepaid expenditure ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 43), (' prepaid ', 43), (' prepayments ', 33), (' other prepayments ', 29), (' charges paid in advance', 14), (' in advance ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('prepaid expense ', 20), (' prepaid expenditure ', 20), (' prepayments ', 20), (' prepaid ', 20), (' other prepayments ', 20), (' other receivables and prepayments ', 20), (' prepaid ', 20), (' in advance ', 20), (' charges paid in advance', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 75), ('prepaid expense ', 50), (' prepaid expenditure ', 50), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 42), (' prepayments ', 33), (' in advance ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other receivables and prepayments ', 70), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 40), (' charges paid in advance', 40), (' prepayments ', 33), (' other prepayments ', 32), ('prepaid expense ', 30), (' in advance ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' prepaid expenditure ', 47), (' prepaid ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 40), (' prepayments ', 33), (' other prepayments ', 33), (' in advance ', 33), ('prepaid expense ', 29), (' charges paid in advance', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [('prepaid expense ', 43), (' prepaid expenditure ', 43), (' prepaid ', 43), (' other receivables and prepayments ', 43), (' prepaid ', 43), (' prepayments ', 33), (' other prepayments ', 29), (' charges paid in advance', 14), (' in advance ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('prepaid expense ', 20), (' prepaid expenditure ', 20), (' prepayments ', 20), (' prepaid ', 20), (' other prepayments ', 20), (' other receivables and prepayments ', 20), (' prepaid ', 20), (' in advance ', 20), (' charges paid in advance', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [(' other assets ', 71), (' other financial assets ', 67), ('other current assets ', 56), (' biological assets ', 44), (' financial assets ', 42), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39), (' trade and other receivables', 38)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' trade and other receivables', 42), (' deferred operating expenditure ', 38), (' income tax receivable from related parties ', 23)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('other current assets ', 50), (' trade and other receivables', 41), (' other assets ', 36), (' biological assets ', 34), (' financial assets ', 33), (' income tax receivable from related parties ', 28), (' other financial assets ', 28), (' deferred operating expenditure ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 5], 'score': 100, 'value': 524677.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables', 'Other Assets'], 'note_numbers': [nan, '5', '7'], 'line_item_value': [0.0, 449464.0, 75213.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [(' other assets ', 71), (' other financial assets ', 67), ('other current assets ', 56), (' biological assets ', 44), (' financial assets ', 42), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39), (' trade and other receivables', 38)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' trade and other receivables', 42), (' deferred operating expenditure ', 38), (' income tax receivable from related parties ', 23)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('other current assets ', 50), (' trade and other receivables', 41), (' other assets ', 36), (' biological assets ', 34), (' financial assets ', 33), (' income tax receivable from related parties ', 28), (' other financial assets ', 28), (' deferred operating expenditure ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 5], 'score': 100, 'value': 1169990.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables', 'Other Assets'], 'note_numbers': [nan, '5', '7'], 'line_item_value': [0.0, 877863.0, 292127.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' income tax receivable from related parties', 53), (' related party disclosures', 47), (' related party receivable', 47), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' interest receivable', 41), (' electricity derivatives at fair value', 40), (' derivative contracts - fair value', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' other debtors and prepayments', 40), ('other assets', 36), ('foreign exchange derivatives at fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' condensate', 29), (' other', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [(' other deposits receivable - related party', 100), (' deposits', 100), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' derivative contracts - fair value', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' other', 40), ('other assets', 29), (' related party disclosures', 29), (' income tax receivable from related parties', 29), (' long service leave receivable', 29), (' other receivables - related party', 29), (' rental bond', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' foreign exchange forward contracts', 29), (' accrued rebates', 29), (' forward exchange contracts', 29), (' bank guarantee', 14), (' lng', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' lng', 33), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' income tax receivable from related parties', 53), (' related party disclosures', 47), (' related party receivable', 47), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' interest receivable', 41), (' electricity derivatives at fair value', 40), (' derivative contracts - fair value', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' other debtors and prepayments', 40), ('other assets', 36), ('foreign exchange derivatives at fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' condensate', 29), (' other', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [(' other deposits receivable - related party', 100), (' deposits', 100), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' derivative contracts - fair value', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' other', 40), ('other assets', 29), (' related party disclosures', 29), (' income tax receivable from related parties', 29), (' long service leave receivable', 29), (' other receivables - related party', 29), (' rental bond', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' foreign exchange forward contracts', 29), (' accrued rebates', 29), (' forward exchange contracts', 29), (' bank guarantee', 14), (' lng', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' lng', 33), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 6, 8], 'score': [90, 100, 90, 100], 'value': [422808.0, 0.0, 434644.0, 818.0], 'label': ['5. GST receivable', '5. Deposits', '5. GST receivable', '5. Deposits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [455055.0, 422808.0, 0.0, 0.0, 877863.0, 11662.0, 434644.0, 2340.0, 818.0, 449464.0], 'label': ['', '', '', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-17 10:12:39+0530 - sLogger - ERROR - error occured: 2022
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39), (' Property ', 32), ('plant and equipment ', 31), (' plant and equipment ', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 22), (' plant and equipment ', 22), (' Property ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' Property ', 33), ('plant and equipment ', 32), (' plant and equipment ', 32), ('plant property equipment', 27), ('property plant equipment', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 5526356.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [5526356.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39), (' Property ', 32), ('plant and equipment ', 31), (' plant and equipment ', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 22), (' plant and equipment ', 22), (' Property ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' Property ', 33), ('plant and equipment ', 32), (' plant and equipment ', 32), ('plant property equipment', 27), ('property plant equipment', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 0.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [0.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 5526356.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [5526356.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('plant property equipment', 27), ('property plant equipment', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 0.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [0.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' investment property', 34), (' plant property equipment ', 33), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' plant property equipment ', 45), (' property plant equipment ', 45), ('Work in progress ', 36), (' plant and equipment ', 36), (' investment property', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('Work in progress ', 46), (' investment property', 33), (' plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' plant property equipment ', 40), (' property plant equipment ', 40), (' investment property', 40), ('Work in progress ', 30), (' plant and equipment ', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5526356.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [5526356.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' investment property', 34), (' plant property equipment ', 33), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' plant property equipment ', 45), (' property plant equipment ', 45), ('Work in progress ', 36), (' plant and equipment ', 36), (' investment property', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('Work in progress ', 46), (' investment property', 33), (' plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' plant property equipment ', 40), (' property plant equipment ', 40), (' investment property', 40), ('Work in progress ', 30), (' plant and equipment ', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [0.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('tangible assets', 50)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('tangible assets', 58)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('tangible assets', 53)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('tangible assets', 43)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('tangible assets', 50)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('tangible assets', 58)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('tangible assets', 53)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('tangible assets', 43)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 20), ('goodwill ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' intangible asset', 64), (' goodwill on consolidation ', 27), ('goodwill ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 31), ('goodwill ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 30), ('goodwill ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 20), ('goodwill ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' intangible asset', 64), (' goodwill on consolidation ', 27), ('goodwill ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 31), ('goodwill ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 30), ('goodwill ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 47), (' intangible under development ', 40), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('intangible assets ', 64), (' intangible assets under development ', 64), (' plant property equipment', 45), ('property plant equipment', 45), (' intangible under development ', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 38), (' intangible under development ', 35), (' plant property equipment', 30), ('property plant equipment', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('intangible assets ', 70), (' intangible assets under development ', 70), (' plant property equipment', 40), ('property plant equipment', 40), (' intangible under development ', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 80, 'value': 5526356.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [5526356.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 47), (' intangible under development ', 40), (' plant property equipment', 33), ('property plant equipment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('intangible assets ', 64), (' intangible assets under development ', 64), (' plant property equipment', 45), ('property plant equipment', 45), (' intangible under development ', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 38), (' intangible under development ', 35), (' plant property equipment', 30), ('property plant equipment', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('intangible assets ', 70), (' intangible assets under development ', 70), (' plant property equipment', 40), ('property plant equipment', 40), (' intangible under development ', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 80, 'value': 0.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [0.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('donations', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('donations', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('donations', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('donations', 40)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('donations', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('donations', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('donations', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('donations', 40)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' investments accounted for using the equity method', 55), ('joint ventures and associates', 45), (' investment in joint venture', 45), (' investment in associate', 45), ('derivative financial instruments', 36), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('joint ventures and associates', 48), (' investment in associate', 46), (' investments accounted for using the equity method', 43), ('derivative financial instruments', 38), (' investment in joint venture', 37), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('joint ventures and associates', 40), (' investment in joint venture', 40), (' investment in associate', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' investments accounted for using the equity method', 55), ('joint ventures and associates', 45), (' investment in joint venture', 45), (' investment in associate', 45), ('derivative financial instruments', 36), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('joint ventures and associates', 48), (' investment in associate', 46), (' investments accounted for using the equity method', 43), ('derivative financial instruments', 38), (' investment in joint venture', 37), ('investment', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('joint ventures and associates', 40), (' investment in joint venture', 40), (' investment in associate', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('deferred tax assets', 62), ('deferred charges', 36), ('deferred tax', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('deferred tax assets', 44), ('deferred tax', 33), ('deferred charges', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 21), ('deferred charges', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('deferred tax assets', 62), ('deferred charges', 36), ('deferred tax', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('deferred tax assets', 44), ('deferred tax', 33), ('deferred charges', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 21), ('deferred charges', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets', 100), (' other non-current assets', 73), (' other non-current assets', 73), (' leased assets', 67), (' financial assets', 50), (' exploration and evaluation expenditure', 32), (' loan receivables', 27), (' leases', 27), ('non-current', 22)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('non-current', 50), (' other non-current assets', 50), (' other assets', 50), (' other non-current assets', 50), (' leased assets', 45), (' financial assets', 41), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' leased assets', 50), (' other assets', 48), (' financial assets', 43), (' leases', 43), (' other non-current assets', 34), (' other non-current assets', 34), (' loan receivables', 29), (' exploration and evaluation expenditure', 22), ('non-current', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 19211.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other Assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 19211.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets', 100), (' other non-current assets', 73), (' other non-current assets', 73), (' leased assets', 67), (' financial assets', 50), (' exploration and evaluation expenditure', 32), (' loan receivables', 27), (' leases', 27), ('non-current', 22)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [('non-current', 50), (' other non-current assets', 50), (' other assets', 50), (' other non-current assets', 50), (' leased assets', 45), (' financial assets', 41), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' leased assets', 50), (' other assets', 48), (' financial assets', 43), (' leases', 43), (' other non-current assets', 34), (' other non-current assets', 34), (' loan receivables', 29), (' exploration and evaluation expenditure', 22), ('non-current', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 19308.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other Assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 19308.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = prepayment , res_fuzz_match = [(' exploration and evaluation expenditure', 50), (' total properties', 50), ('finance receivables', 33), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' motor vehicles', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accrued income , res_fuzz_match = [(' warehouse and office equipment', 45), ('finance receivables', 36), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' exploration and evaluation expenditure', 36), (' motor vehicles', 36), (' total properties', 27), (' defined benefit plans', 18), (' right-of-use-assets', 9)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = prepayment , res_fuzz_match = [(' exploration and evaluation expenditure', 50), (' total properties', 50), ('finance receivables', 33), (' allowance for expected credit losses', 33), (' electricity derivatives at fair value', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' motor vehicles', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accrued income , res_fuzz_match = [(' warehouse and office equipment', 45), ('finance receivables', 36), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' exploration and evaluation expenditure', 36), (' motor vehicles', 36), (' total properties', 27), (' defined benefit plans', 18), (' right-of-use-assets', 9)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': [100, 100], 'value': [292127.0, 75213.0], 'label': ['7. Total', '7. Total'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_assets
2023-08-17 10:12:39+0530 - sLogger - ERROR - error occured: 2022
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [(' lease liabilities ', 70), (' interest bearing liabilites ', 59), (' loans and borrowings ', 37), (' cash and cash equivalents ', 36), ('short term debt ', 30), ('  leases ', 25), (' short-term debt ', 23), (' shortterm debt ', 23), (' bank overdraft ', 23), (' cash overdraft ', 23), (' shortterm borrowings ', 14), (' borrowings ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 543600.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['13'], 'line_item_value': [543600.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [(' lease liabilities ', 70), (' interest bearing liabilites ', 59), (' loans and borrowings ', 37), (' cash and cash equivalents ', 36), ('short term debt ', 30), ('  leases ', 25), (' short-term debt ', 23), (' shortterm debt ', 23), (' bank overdraft ', 23), (' cash overdraft ', 23), (' shortterm borrowings ', 14), (' borrowings ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 543600.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['13'], 'line_item_value': [543600.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' lease liabilities - current ', 53), (' cash overdraft', 43), (' secured long-term bank loans ', 42), (' utilised bank borrowings ', 39), (' not later than 1 year ', 37), ('bank borrowings ', 36), (' bank overdraft ', 36), (' not later than one year ', 35), (' loans from related party ', 33), (' balance at the end of period ', 29), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost non-current , res_fuzz_match = [(' secured long-term bank loans ', 50), (' utilised bank borrowings ', 44), (' cash overdraft', 43), (' not later than one year ', 39), (' not later than 1 year ', 37), (' lease liabilities - current ', 37), ('bank borrowings ', 36), (' loans from related party ', 29), (' bank overdraft ', 29), (' balance at the end of period ', 29), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost total , res_fuzz_match = [(' secured long-term bank loans ', 50), (' utilised bank borrowings ', 39), (' not later than 1 year ', 37), (' lease liabilities - current ', 37), ('bank borrowings ', 36), (' lease liabilities ', 36), (' cash overdraft', 36), (' not later than one year ', 35), (' loans from related party ', 29), (' bank overdraft ', 29), (' leases ', 25), (' balance at the end of period ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' lease liabilities - current ', 53), (' cash overdraft', 43), (' secured long-term bank loans ', 42), (' utilised bank borrowings ', 39), (' not later than 1 year ', 37), ('bank borrowings ', 36), (' bank overdraft ', 36), (' not later than one year ', 35), (' loans from related party ', 33), (' balance at the end of period ', 29), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost non-current , res_fuzz_match = [(' secured long-term bank loans ', 50), (' utilised bank borrowings ', 44), (' cash overdraft', 43), (' not later than one year ', 39), (' not later than 1 year ', 37), (' lease liabilities - current ', 37), ('bank borrowings ', 36), (' loans from related party ', 29), (' bank overdraft ', 29), (' balance at the end of period ', 29), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost total , res_fuzz_match = [(' secured long-term bank loans ', 50), (' utilised bank borrowings ', 39), (' not later than 1 year ', 37), (' lease liabilities - current ', 37), ('bank borrowings ', 36), (' lease liabilities ', 36), (' cash overdraft', 36), (' not later than one year ', 35), (' loans from related party ', 29), (' bank overdraft ', 29), (' leases ', 25), (' balance at the end of period ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5354082.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['11'], 'line_item_value': [5354082.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5842828.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['11'], 'line_item_value': [5842828.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accounts payable , res_fuzz_match = [('  accounts payable - trade ', 100), (' amounts payable to controlling entity ', 86), (' trade payables ', 67), (' trade and other payables ', 64), (' Related party payables ', 64), (' trade payables - other parties ', 57), (' other trade payables ', 57), (' trade payables - related parties', 57), (' payables to related parties ', 37), ('trade creditors ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' trade payables ', 67), (' payables to related parties ', 61), ('  accounts payable - trade ', 60), (' trade payables - related parties', 54), (' trade payables - other parties ', 50), (' amounts payable to controlling entity ', 50), (' Related party payables ', 50), (' other trade payables ', 44), ('trade creditors ', 43), (' trade and other payables ', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), (' amounts payable to controlling entity ', 40), (' other trade payables ', 40), (' payables to related parties ', 40), ('  accounts payable - trade ', 40), (' Related party payables ', 40), (' trade payables - related parties', 40)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accounts payable , res_fuzz_match = [('  accounts payable - trade ', 100), (' amounts payable to controlling entity ', 86), (' trade payables ', 67), (' trade and other payables ', 64), (' Related party payables ', 64), (' trade payables - other parties ', 57), (' other trade payables ', 57), (' trade payables - related parties', 57), (' payables to related parties ', 37), ('trade creditors ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' trade payables ', 67), (' payables to related parties ', 61), ('  accounts payable - trade ', 60), (' trade payables - related parties', 54), (' trade payables - other parties ', 50), (' amounts payable to controlling entity ', 50), (' Related party payables ', 50), (' other trade payables ', 44), ('trade creditors ', 43), (' trade and other payables ', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('trade creditors ', 40), (' trade and other payables ', 40), (' trade payables ', 40), (' trade payables - other parties ', 40), (' amounts payable to controlling entity ', 40), (' other trade payables ', 40), (' payables to related parties ', 40), ('  accounts payable - trade ', 40), (' Related party payables ', 40), (' trade payables - related parties', 40)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [4590154.0, 4734326.0], 'label': ['11. Accounts payable', '11. Accounts payable'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5354082.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['11'], 'line_item_value': [5354082.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5842828.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['11'], 'line_item_value': [5842828.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accounts payable , res_fuzz_match = [('accrued expenses ', 50), (' interest accrued', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' interest accrued', 50)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accounts payable , res_fuzz_match = [('accrued expenses ', 50), (' interest accrued', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' interest accrued', 50)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' interest accrued', 40), ('accrued expenses ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [1252674.0, 619756.0], 'label': ['11. Sundry payables and accrued expenses', '11. Sundry payables and accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('current tax liabilities ', 58), (' income tax payable ', 33), (' tax ', 33), (' provision', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 98588.0, 'line_item_label': ['Provisions'], 'note_numbers': ['12'], 'line_item_value': [98588.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [('current tax liabilities ', 58), (' income tax payable ', 33), (' tax ', 33), (' provision', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 138247.0, 'line_item_label': ['Provisions'], 'note_numbers': ['12'], 'line_item_value': [138247.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions for annual and long service leave , res_fuzz_match = [(' provision for income tax ', 70), ('income tax (refundable)/payable ', 39), (' tax receivable/payable', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for income tax ', 70), ('income tax (refundable)/payable ', 43), (' tax receivable/payable', 35)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for income tax ', 70), ('income tax (refundable)/payable ', 43), (' tax receivable/payable', 35)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions for annual and long service leave , res_fuzz_match = [(' provision for income tax ', 70), ('income tax (refundable)/payable ', 39), (' tax receivable/payable', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for income tax ', 70), ('income tax (refundable)/payable ', 43), (' tax receivable/payable', 35)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for income tax ', 70), ('income tax (refundable)/payable ', 43), (' tax receivable/payable', 35)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [(' financial liabilities', 62), ('other current liabilities', 50), (' other current liabilities', 50), (' other financial liabilities', 50), (' foreign exchange contract liability', 47), (' trade and other payables', 41), ('provisions', 33), (' deferred revenue', 33), (' employee benefits', 30), (' customer deposits', 23)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2], 'score': 100, 'value': 5452670.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and Other Payables', 'Provisions'], 'note_numbers': [nan, '11', '12'], 'line_item_value': [0.0, 5354082.0, 98588.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = derivative liabilities , res_fuzz_match = [(' financial liabilities', 62), ('other current liabilities', 50), (' other current liabilities', 50), (' other financial liabilities', 50), (' foreign exchange contract liability', 47), (' trade and other payables', 41), ('provisions', 33), (' deferred revenue', 33), (' employee benefits', 30), (' customer deposits', 23)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2], 'score': 100, 'value': 5981075.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and Other Payables', 'Provisions'], 'note_numbers': [nan, '11', '12'], 'line_item_value': [0.0, 5842828.0, 138247.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accounts payable , res_fuzz_match = [(' gst payables', 80), (' loan payable to relayed party under tax funding agreement', 64), (' share of joint venture payables', 64), (' current - liability for annual and long service leave', 57), (' gst liabilities', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - current', 50), (' employee benefits - payroll', 50), (' total current employee benefits', 50), ('other creditors and accruals', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other related parties', 37), (' loans from related party', 37), (' abandonment and decommissioning costs', 36), (' gst', 33), (' provisions - current', 30), (' ultimate parent entity', 29), (' employee benefits - current', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21), (' rebates', 20), (' restructuring', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' gst payable and accruals', 77), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 50), ('other creditors and accruals', 46), (' current - liability for annual and long service leave', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 39), (' loans from related party', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' total current employee benefits', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' other', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = accounts payable , res_fuzz_match = [(' gst payables', 80), (' loan payable to relayed party under tax funding agreement', 64), (' share of joint venture payables', 64), (' current - liability for annual and long service leave', 57), (' gst liabilities', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - current', 50), (' employee benefits - payroll', 50), (' total current employee benefits', 50), ('other creditors and accruals', 43), (' secured long-term bank loans', 43), (' gst payable and accruals', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' other', 40), (' warranty', 38), (' other related parties', 37), (' loans from related party', 37), (' abandonment and decommissioning costs', 36), (' gst', 33), (' provisions - current', 30), (' ultimate parent entity', 29), (' employee benefits - current', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 21), (' other creditors', 21), (' other creditors', 21), (' rebates', 20), (' restructuring', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = sundry payables and accrued expenses , res_fuzz_match = [(' gst payable and accruals', 77), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 50), ('other creditors and accruals', 46), (' current - liability for annual and long service leave', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 39), (' loans from related party', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' total current employee benefits', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' employee benefits - payroll', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 28), (' other', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 5], 'score': [80, 100, 80, 100], 'value': [4590154.0, 5842828.0, 4734326.0, 5354082.0], 'label': ['11. Accounts payable', '11. Total', '11. Accounts payable', '11. Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('long term debt', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('long term debt', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 44), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [(' lease liabilities ', 43), (' lease liability', 43), ('interest bearing loans and borrowings ', 29), (' loans and borrowings', 29), (' borrowings ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings ', 50), (' lease liabilities ', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 7932652.0, 'line_item_label': ['Lease Liability'], 'note_numbers': ['13'], 'line_item_value': [7932652.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' lease liability', 64), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 44), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [(' lease liabilities ', 43), (' lease liability', 43), ('interest bearing loans and borrowings ', 29), (' loans and borrowings', 29), (' borrowings ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings ', 50), (' lease liabilities ', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 7812864.0, 'line_item_label': ['Lease Liability'], 'note_numbers': ['13'], 'line_item_value': [7812864.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' secured finance debt ', 47), (' lease liabilities - non-current ', 47), (' not later than 5 years', 37), (' later than 1 year ', 33), (' lease liabilities ', 27), (' lease liability ', 27), ('leases ', 25), (' bank loan ', 22)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost non-current , res_fuzz_match = [(' lease liabilities - non-current ', 53), (' secured finance debt ', 47), (' not later than 5 years', 37), (' bank loan ', 33), (' later than 1 year ', 33), (' lease liabilities ', 27), (' lease liability ', 27), ('leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost total , res_fuzz_match = [(' secured finance debt ', 47), (' not later than 5 years', 37), (' lease liabilities ', 36), (' lease liability ', 36), (' bank loan ', 33), (' later than 1 year ', 33), (' lease liabilities - non-current ', 32), ('leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost current , res_fuzz_match = [(' secured finance debt ', 47), (' lease liabilities - non-current ', 47), (' not later than 5 years', 37), (' later than 1 year ', 33), (' lease liabilities ', 27), (' lease liability ', 27), ('leases ', 25), (' bank loan ', 22)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost non-current , res_fuzz_match = [(' lease liabilities - non-current ', 53), (' secured finance debt ', 47), (' not later than 5 years', 37), (' bank loan ', 33), (' later than 1 year ', 33), (' lease liabilities ', 27), (' lease liability ', 27), ('leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = secured - at amortised cost total , res_fuzz_match = [(' secured finance debt ', 47), (' not later than 5 years', 37), (' lease liabilities ', 36), (' lease liability ', 36), (' bank loan ', 33), (' later than 1 year ', 33), (' lease liabilities - non-current ', 32), ('leases ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('(bond)', 18), ('interest bearing loans and borrowings', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('(bond)', 18), ('interest bearing loans and borrowings', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('deferred taxes ', 100), (' deferred tax liabilities', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('deferred taxes ', 38), (' deferred tax liabilities', 38)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1163584.0, 'line_item_label': ['Deferred Tax Liabilities'], 'note_numbers': ['10(b)'], 'line_item_value': [1163584.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('deferred taxes ', 100), (' deferred tax liabilities', 100)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('deferred taxes ', 38), (' deferred tax liabilities', 38)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1090453.0, 'line_item_label': ['Deferred Tax Liabilities'], 'note_numbers': ['10(b)'], 'line_item_value': [1090453.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities ', 56), (' trade and other payables ', 53), (' financial liabilities ', 53), (' other non-current liabilities ', 44), (' deferred revenue', 43), ('other long term liabilities ', 42), (' employee benefits ', 26), (' provision for associate funding ', 21), (' provisions ', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [(' provisions ', 31), (' financial liabilities ', 29), (' trade and other payables ', 28), (' other financial liabilities ', 22), ('other long term liabilities ', 21), (' employee benefits ', 18), (' other non-current liabilities ', 15), (' provision for associate funding ', 14), (' deferred revenue', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits ', 35), (' trade and other payables ', 33), ('other long term liabilities ', 27), (' other financial liabilities ', 21), (' other non-current liabilities ', 21), (' provision for associate funding ', 20), (' deferred revenue', 20), (' financial liabilities ', 18), (' provisions ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 4636.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 4636.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities ', 56), (' trade and other payables ', 53), (' financial liabilities ', 53), (' other non-current liabilities ', 44), (' deferred revenue', 43), ('other long term liabilities ', 42), (' employee benefits ', 26), (' provision for associate funding ', 21), (' provisions ', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [(' provisions ', 31), (' financial liabilities ', 29), (' trade and other payables ', 28), (' other financial liabilities ', 22), ('other long term liabilities ', 21), (' employee benefits ', 18), (' other non-current liabilities ', 15), (' provision for associate funding ', 14), (' deferred revenue', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits ', 35), (' trade and other payables ', 33), ('other long term liabilities ', 27), (' other financial liabilities ', 21), (' other non-current liabilities ', 21), (' provision for associate funding ', 20), (' deferred revenue', 20), (' financial liabilities ', 18), (' provisions ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 9722.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 9722.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions for annual and long service leave , res_fuzz_match = [(' provision for associate funding ', 68), (' non-current - liability for long-service leave ', 65), (' provisions - non-current ', 64), ('non-current trade and other payables ', 47), (' make good provisions ', 44), (' derivative contracts - at fair value ', 42), (' abandonment and decommissioning costs ', 42), (' trade payables - related parties ', 42), (' contract liabilites - non-current ', 40), (' total non-current employee benefits', 38), (' electricity derivatives at fair value through oci ', 35), (' employee benefits - non current ', 33), (' employee benefits - payroll ', 32)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for associate funding ', 68), (' non-current - liability for long-service leave ', 65), (' provisions - non-current ', 64), (' contract liabilites - non-current ', 60), (' employee benefits - non current ', 52), (' employee benefits - payroll ', 50), (' make good provisions ', 50), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 46), (' trade payables - related parties ', 46), (' abandonment and decommissioning costs ', 42), (' electricity derivatives at fair value through oci ', 41), (' total non-current employee benefits', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for associate funding ', 68), (' non-current - liability for long-service leave ', 65), (' provisions - non-current ', 64), (' contract liabilites - non-current ', 60), (' employee benefits - non current ', 52), (' employee benefits - payroll ', 50), (' make good provisions ', 50), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 46), (' trade payables - related parties ', 46), (' abandonment and decommissioning costs ', 42), (' electricity derivatives at fair value through oci ', 41), (' total non-current employee benefits', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions for annual and long service leave , res_fuzz_match = [(' provision for associate funding ', 68), (' non-current - liability for long-service leave ', 65), (' provisions - non-current ', 64), ('non-current trade and other payables ', 47), (' make good provisions ', 44), (' derivative contracts - at fair value ', 42), (' abandonment and decommissioning costs ', 42), (' trade payables - related parties ', 42), (' contract liabilites - non-current ', 40), (' total non-current employee benefits', 38), (' electricity derivatives at fair value through oci ', 35), (' employee benefits - non current ', 33), (' employee benefits - payroll ', 32)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for associate funding ', 68), (' non-current - liability for long-service leave ', 65), (' provisions - non-current ', 64), (' contract liabilites - non-current ', 60), (' employee benefits - non current ', 52), (' employee benefits - payroll ', 50), (' make good provisions ', 50), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 46), (' trade payables - related parties ', 46), (' abandonment and decommissioning costs ', 42), (' electricity derivatives at fair value through oci ', 41), (' total non-current employee benefits', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = provisions provision for annual and long service leave (current) provision long service leave (non-current) , res_fuzz_match = [(' provision for associate funding ', 68), (' non-current - liability for long-service leave ', 65), (' provisions - non-current ', 64), (' contract liabilites - non-current ', 60), (' employee benefits - non current ', 52), (' employee benefits - payroll ', 50), (' make good provisions ', 50), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 46), (' trade payables - related parties ', 46), (' abandonment and decommissioning costs ', 42), (' electricity derivatives at fair value through oci ', 41), (' total non-current employee benefits', 41)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalliabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [(' perpetual equity instrument ', 33), (' equity share capital ', 28), (' share capital ', 27), (' share capital ', 27), (' issued capital ', 19), ('common stock ', 17), (' contributed equity ', 15), (' contributed equity', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 105000.0, 'line_item_label': ['Issued Capital'], 'note_numbers': ['14'], 'line_item_value': [105000.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [(' perpetual equity instrument ', 33), (' equity share capital ', 28), (' share capital ', 27), (' share capital ', 27), (' issued capital ', 19), ('common stock ', 17), (' contributed equity ', 15), (' contributed equity', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 105000.0, 'line_item_label': ['Issued Capital'], 'note_numbers': ['14'], 'line_item_value': [105000.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [(' reserves surplus ', 50), (' retained earnings ', 36), ('other equity ', 35), (' retained profits', 25), (' accumulated losses ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 14773347.0, 'line_item_label': ['Retained Earnings'], 'note_numbers': [nan], 'line_item_value': [14773347.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [(' reserves surplus ', 50), (' retained earnings ', 36), ('other equity ', 35), (' retained profits', 25), (' accumulated losses ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 14187723.0, 'line_item_label': ['Retained Earnings'], 'note_numbers': [nan], 'line_item_value': [14187723.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 33), (' non-controlling interest', 33), (' non controlling interest ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('minority interest ', 40), (' minority interest ', 40), (' noncontrolling interest ', 33), (' non-controlling interest', 33), (' non controlling interest ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('other reserves ', 78), (' reserves ', 71), (' foreign currency translation reserve', 43)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = hedge reserve , res_fuzz_match = [('other reserves ', 78), (' reserves ', 71), (' foreign currency translation reserve', 43)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' Exploration and evaluation assets', 43), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 29), (' plant and equipment ', 27), (' property ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Exploration and evaluation assets', 48), (' investment property ', 46), ('plant property equipment ', 39), (' property plant equipment ', 39), (' oil and gas properties ', 33), (' property ', 32), (' plant and equipment ', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [(' Exploration and evaluation assets', 42), (' investment property ', 39), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 25), (' plant and equipment ', 22), (' property ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' property ', 33), (' plant and equipment ', 32), (' investment property ', 32), (' oil and gas properties ', 28), ('plant property equipment ', 27), (' property plant equipment ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 5526356.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [5526356.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = right of use asset , res_fuzz_match = [(' Exploration and evaluation assets', 43), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 29), (' plant and equipment ', 27), (' property ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Exploration and evaluation assets', 48), (' investment property ', 46), ('plant property equipment ', 39), (' property plant equipment ', 39), (' oil and gas properties ', 33), (' property ', 32), (' plant and equipment ', 31)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total non-currentassets , res_fuzz_match = [(' Exploration and evaluation assets', 42), (' investment property ', 39), ('plant property equipment ', 29), (' property plant equipment ', 29), (' oil and gas properties ', 25), (' plant and equipment ', 22), (' property ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalassets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' property ', 33), (' plant and equipment ', 32), (' investment property ', 32), (' oil and gas properties ', 28), ('plant property equipment ', 27), (' property plant equipment ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 0.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['8 5,404,380'], 'line_item_value': [0.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [(' unbilled ', 60), (' billed ', 50), (' trade receivables ', 42), (' trade and other receivables', 40), (' government subsidies receivable ', 35), (' receivable ', 33), ('account receivables ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('account receivables ', 43), (' unbilled ', 40), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 449464.0, 'line_item_label': ['Trade and Other Receivables'], 'note_numbers': ['5'], 'line_item_value': [449464.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other financialassets , res_fuzz_match = [(' unbilled ', 60), (' billed ', 50), (' trade receivables ', 42), (' trade and other receivables', 40), (' government subsidies receivable ', 35), (' receivable ', 33), ('account receivables ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = totalcurrentassets , res_fuzz_match = [('account receivables ', 43), (' unbilled ', 40), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 877863.0, 'line_item_label': ['Trade and Other Receivables'], 'note_numbers': ['5'], 'line_item_value': [877863.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables ', 100), (' share of joint venture receivables ', 75), (' related party receivables ', 67), (' trade debtors ', 58), (' net trade debtors ', 58), (' trade debtors from contracts with customers', 58), (' receivables from related parties ', 50), (' other debtors ', 42), ('charges paid in advance ', 42), (' allowance for expected credit loss ', 42), (' provision for impairment losses ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' related party receivables ', 80), (' share of joint venture receivables ', 80), ('trade receivables ', 70), (' allowance for expected credit loss ', 50), (' net trade debtors ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 40), (' receivables from related parties ', 40), (' trade debtors from contracts with customers', 40), (' trade debtors ', 20), (' other debtors ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' allowance for expected credit loss ', 60), ('trade receivables ', 52), (' related party receivables ', 47), (' net trade debtors ', 47), (' trade debtors ', 42), (' share of joint venture receivables ', 40), (' receivables from related parties ', 40), (' trade debtors from contracts with customers', 40), (' other debtors ', 33), ('charges paid in advance ', 27), (' provision for impairment losses ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [(' share of joint venture receivables ', 57), (' trade debtors ', 43), (' other debtors ', 43), (' net trade debtors ', 43), (' allowance for expected credit loss ', 43), (' trade debtors from contracts with customers', 43), ('trade receivables ', 29), (' related party receivables ', 29), (' provision for impairment losses ', 29), (' receivables from related parties ', 29), ('charges paid in advance ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' net trade debtors ', 60), (' trade debtors from contracts with customers', 60), ('trade receivables ', 40), (' related party receivables ', 40), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' provision for impairment losses ', 40), (' receivables from related parties ', 40), (' allowance for expected credit loss ', 40), ('charges paid in advance ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables ', 100), (' share of joint venture receivables ', 75), (' related party receivables ', 67), (' trade debtors ', 58), (' net trade debtors ', 58), (' trade debtors from contracts with customers', 58), (' receivables from related parties ', 50), (' other debtors ', 42), ('charges paid in advance ', 42), (' allowance for expected credit loss ', 42), (' provision for impairment losses ', 33)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' related party receivables ', 80), (' share of joint venture receivables ', 80), ('trade receivables ', 70), (' allowance for expected credit loss ', 50), (' net trade debtors ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 40), (' receivables from related parties ', 40), (' trade debtors from contracts with customers', 40), (' trade debtors ', 20), (' other debtors ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = fuel tax credits , res_fuzz_match = [(' allowance for expected credit loss ', 60), ('trade receivables ', 52), (' related party receivables ', 47), (' net trade debtors ', 47), (' trade debtors ', 42), (' share of joint venture receivables ', 40), (' receivables from related parties ', 40), (' trade debtors from contracts with customers', 40), (' other debtors ', 33), ('charges paid in advance ', 27), (' provision for impairment losses ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = deposits , res_fuzz_match = [(' share of joint venture receivables ', 57), (' trade debtors ', 43), (' other debtors ', 43), (' net trade debtors ', 43), (' allowance for expected credit loss ', 43), (' trade debtors from contracts with customers', 43), ('trade receivables ', 29), (' related party receivables ', 29), (' provision for impairment losses ', 29), (' receivables from related parties ', 29), ('charges paid in advance ', 14)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' net trade debtors ', 60), (' trade debtors from contracts with customers', 60), ('trade receivables ', 40), (' related party receivables ', 40), (' trade debtors ', 40), (' other debtors ', 40), (' share of joint venture receivables ', 40), (' provision for impairment losses ', 40), (' receivables from related parties ', 40), (' allowance for expected credit loss ', 40), ('charges paid in advance ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 5, 6], 'score': [100, 80, 100, 80], 'value': [455055.0, 422808.0, 11662.0, 434644.0], 'label': ['5. Trade receivables', '5. GST receivable', '5. Trade receivables', '5. GST receivable'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations ', 71), (' Revenue ', 67), (' revenue from continuing activities', 54), (' Sales revenue ', 52), (' revenue from contracts with customers ', 45), (' sale of products ', 33), (' net sales ', 30), (' from trading business ', 30), (' Sale of coal ', 29), (' transmission and distribution business ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue ', 42), (' Revenue ', 32), (' net sales ', 29), (' transmission and distribution business ', 29), (' from trading business ', 29), ('revenue from operations ', 28), (' sale of products ', 24), (' revenue from contracts with customers ', 22), (' revenue from continuing activities', 21), (' Sale of coal ', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' from trading business ', 44), ('revenue from operations ', 38), (' transmission and distribution business ', 37), (' sale of products ', 36), (' revenue from contracts with customers ', 34), (' net sales ', 28), (' Sale of coal ', 27), (' revenue from continuing activities', 26), (' Sales revenue ', 25), (' Revenue ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' from trading business ', 41), (' net sales ', 38), (' revenue from continuing activities', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 31), ('revenue from operations ', 30), (' Sales revenue ', 29), (' Sale of coal ', 24), (' sale of products ', 22), (' Revenue ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations ', 45), (' revenue from contracts with customers ', 36), (' from trading business ', 36), (' transmission and distribution business ', 35), (' sale of products ', 33), (' revenue from continuing activities', 33), (' Sale of coal ', 24), (' Sales revenue ', 23), (' Revenue ', 20), (' net sales ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' revenue from contracts with customers ', 43), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 30), (' transmission and distribution business ', 30), (' sale of products ', 28), (' Sales revenue ', 24), (' net sales ', 22), (' Revenue ', 18), (' Sale of coal ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' revenue from contracts with customers ', 44), ('revenue from operations ', 36), (' revenue from continuing activities', 34), (' from trading business ', 33), (' transmission and distribution business ', 27), (' sale of products ', 25), (' Sales revenue ', 21), (' net sales ', 19), (' Revenue ', 16), (' Sale of coal ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' net sales ', 36), (' sale of products ', 27), (' from trading business ', 22), (' Sale of coal ', 17), (' Sales revenue ', 14), (' transmission and distribution business ', 13), (' revenue from contracts with customers ', 11), (' revenue from continuing activities', 7), ('revenue from operations ', 0), (' Revenue ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 45712841.0, 'line_item_label': ['Revenue'], 'note_numbers': ['2'], 'line_item_value': [45712841.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations ', 71), (' Revenue ', 67), (' revenue from continuing activities', 54), (' Sales revenue ', 52), (' revenue from contracts with customers ', 45), (' sale of products ', 33), (' net sales ', 30), (' from trading business ', 30), (' Sale of coal ', 29), (' transmission and distribution business ', 25)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue ', 42), (' Revenue ', 32), (' net sales ', 29), (' transmission and distribution business ', 29), (' from trading business ', 29), ('revenue from operations ', 28), (' sale of products ', 24), (' revenue from contracts with customers ', 22), (' revenue from continuing activities', 21), (' Sale of coal ', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' from trading business ', 44), ('revenue from operations ', 38), (' transmission and distribution business ', 37), (' sale of products ', 36), (' revenue from contracts with customers ', 34), (' net sales ', 28), (' Sale of coal ', 27), (' revenue from continuing activities', 26), (' Sales revenue ', 25), (' Revenue ', 7)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' from trading business ', 41), (' net sales ', 38), (' revenue from continuing activities', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 31), ('revenue from operations ', 30), (' Sales revenue ', 29), (' Sale of coal ', 24), (' sale of products ', 22), (' Revenue ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations ', 45), (' revenue from contracts with customers ', 36), (' from trading business ', 36), (' transmission and distribution business ', 35), (' sale of products ', 33), (' revenue from continuing activities', 33), (' Sale of coal ', 24), (' Sales revenue ', 23), (' Revenue ', 20), (' net sales ', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' revenue from contracts with customers ', 43), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 30), (' transmission and distribution business ', 30), (' sale of products ', 28), (' Sales revenue ', 24), (' net sales ', 22), (' Revenue ', 18), (' Sale of coal ', 17)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' revenue from contracts with customers ', 44), ('revenue from operations ', 36), (' revenue from continuing activities', 34), (' from trading business ', 33), (' transmission and distribution business ', 27), (' sale of products ', 25), (' Sales revenue ', 21), (' net sales ', 19), (' Revenue ', 16), (' Sale of coal ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' net sales ', 36), (' sale of products ', 27), (' from trading business ', 22), (' Sale of coal ', 17), (' Sales revenue ', 14), (' transmission and distribution business ', 13), (' revenue from contracts with customers ', 11), (' revenue from continuing activities', 7), ('revenue from operations ', 0), (' Revenue ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 48588449.0, 'line_item_label': ['Revenue'], 'note_numbers': ['2'], 'line_item_value': [48588449.0]}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = operating revenue revenue & reimbursements , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 51), (' revenue form contracts with customers ', 41), (' contribution from joint venture', 41), (' Feed gas income ', 38), (' Goods sold to customer from warehouse ', 38), (' Goods sold to customer direct from supplier ', 37), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Marine ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Condensate ', 29), (' Sale of goods - Motorcycles ', 26), ('Sale of goods ', 22), (' hedge loss / gain ', 21), (' Domgas ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = operating revenue total operating revenue , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 49), (' Sale of goods - Marine ', 47), (' Sale of goods - Cars ', 46), (' revenue form contracts with customers ', 45), ('Sale of goods ', 44), (' contribution from joint venture', 42), (' Domgas ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Goods sold to customer from warehouse ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer direct from supplier ', 34), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32), (' Condensate ', 29), (' hedge loss / gain ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = other revenue other income , res_fuzz_match = [(' Total Revenue ', 75), (' Gas transportation income ', 56), (' Feed gas income ', 54), (' revenue from continuing activities ', 50), (' revenue form contracts with customers ', 50), (' hedge loss / gain ', 43), (' contribution from joint venture', 42), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer direct from supplier ', 38), (' Sale of goods - Motorcycles ', 37), ('Sale of goods ', 33), (' LNG ', 33), (' Goods sold to customer from warehouse ', 33), (' Condensate ', 29), (' Sale of goods - Spareparts ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = other revenue interest , res_fuzz_match = [(' Total Revenue ', 75), (' revenue form contracts with customers ', 52), (' Condensate ', 43), (' revenue from continuing activities ', 43), (' hedge loss / gain ', 43), (' contribution from joint venture', 43), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Marine ', 33), (' Goods sold to customer from warehouse ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Motorcycles ', 27), (' Sale of goods - Cars ', 23), ('Sale of goods ', 22), (' Domgas ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = other revenue total other revenue , res_fuzz_match = [(' Total Revenue ', 75), (' revenue from continuing activities ', 52), (' revenue form contracts with customers ', 48), (' Sale of goods - Marine ', 47), (' Sale of goods - Cars ', 46), (' contribution from joint venture', 46), ('Sale of goods ', 44), (' Domgas ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Sale of goods - Motorcycles ', 37), (' Sale of goods - Spareparts ', 37), (' LNG ', 33), (' Goods sold to customer from warehouse ', 33), (' Goods sold to customer direct from supplier ', 32), (' Condensate ', 29), (' hedge loss / gain ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = operating revenue revenue & reimbursements , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 51), (' revenue form contracts with customers ', 41), (' contribution from joint venture', 41), (' Feed gas income ', 38), (' Goods sold to customer from warehouse ', 38), (' Goods sold to customer direct from supplier ', 37), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Marine ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Condensate ', 29), (' Sale of goods - Motorcycles ', 26), ('Sale of goods ', 22), (' hedge loss / gain ', 21), (' Domgas ', 20)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = operating revenue total operating revenue , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 49), (' Sale of goods - Marine ', 47), (' Sale of goods - Cars ', 46), (' revenue form contracts with customers ', 45), ('Sale of goods ', 44), (' contribution from joint venture', 42), (' Domgas ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Goods sold to customer from warehouse ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer direct from supplier ', 34), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32), (' Condensate ', 29), (' hedge loss / gain ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = other revenue other income , res_fuzz_match = [(' Total Revenue ', 75), (' Gas transportation income ', 56), (' Feed gas income ', 54), (' revenue from continuing activities ', 50), (' revenue form contracts with customers ', 50), (' hedge loss / gain ', 43), (' contribution from joint venture', 42), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer direct from supplier ', 38), (' Sale of goods - Motorcycles ', 37), ('Sale of goods ', 33), (' LNG ', 33), (' Goods sold to customer from warehouse ', 33), (' Condensate ', 29), (' Sale of goods - Spareparts ', 26)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = other revenue interest , res_fuzz_match = [(' Total Revenue ', 75), (' revenue form contracts with customers ', 52), (' Condensate ', 43), (' revenue from continuing activities ', 43), (' hedge loss / gain ', 43), (' contribution from joint venture', 43), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Marine ', 33), (' Goods sold to customer from warehouse ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Motorcycles ', 27), (' Sale of goods - Cars ', 23), ('Sale of goods ', 22), (' Domgas ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows = other revenue total other revenue , res_fuzz_match = [(' Total Revenue ', 75), (' revenue from continuing activities ', 52), (' revenue form contracts with customers ', 48), (' Sale of goods - Marine ', 47), (' Sale of goods - Cars ', 46), (' contribution from joint venture', 46), ('Sale of goods ', 44), (' Domgas ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Sale of goods - Motorcycles ', 37), (' Sale of goods - Spareparts ', 37), (' LNG ', 33), (' Goods sold to customer from warehouse ', 33), (' Goods sold to customer direct from supplier ', 32), (' Condensate ', 29), (' hedge loss / gain ', 29)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:39+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:39+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold ', 23), ('purchase of stock-in-trade', 19)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' change in inventory', 36), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Cost of product sold', 42), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' cost of goods sold ', 29), ('expenditure', 26), (' change in inventory', 22), ('expense', 15)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 28), (' change in inventory', 26), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 21), (' cost of goods sold ', 21)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold ', 26), ('expenditure', 24), (' change in inventory', 21), ('expense', 13)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('purchase of stock-in-trade', 42), (' Cost of inventory sold', 42), (' Cost of goods and services sold', 38), (' change in inventory', 38), ('total expenses', 36), (' Personnel costs', 35), (' cost of goods sold ', 35), ('total expenditure', 33), (' Cost of product sold', 33), (' cost of coal sold', 31), ('cost of sales', 26), ('Cost of sales', 26), ('expenditure', 25), ('expense', 18)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('purchase of stock-in-trade', 38), (' Cost of inventory sold', 34), (' change in inventory', 33), ('total expenses', 32), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), (' Personnel costs', 31), ('total expenditure', 30), (' cost of coal sold', 27), (' cost of goods sold ', 27), ('expenditure', 22), ('cost of sales', 22), ('Cost of sales', 22), ('expense', 16)]
2023-08-17 10:12:39+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' cost of goods sold ', 12), (' change in inventory', 11), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -41244233.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-41244233.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold ', 23), ('purchase of stock-in-trade', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' change in inventory', 36), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Cost of product sold', 42), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' cost of goods sold ', 29), ('expenditure', 26), (' change in inventory', 22), ('expense', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 28), (' change in inventory', 26), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 21), (' cost of goods sold ', 21)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold ', 26), ('expenditure', 24), (' change in inventory', 21), ('expense', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('purchase of stock-in-trade', 42), (' Cost of inventory sold', 42), (' Cost of goods and services sold', 38), (' change in inventory', 38), ('total expenses', 36), (' Personnel costs', 35), (' cost of goods sold ', 35), ('total expenditure', 33), (' Cost of product sold', 33), (' cost of coal sold', 31), ('cost of sales', 26), ('Cost of sales', 26), ('expenditure', 25), ('expense', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('purchase of stock-in-trade', 38), (' Cost of inventory sold', 34), (' change in inventory', 33), ('total expenses', 32), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), (' Personnel costs', 31), ('total expenditure', 30), (' cost of coal sold', 27), (' cost of goods sold ', 27), ('expenditure', 22), ('cost of sales', 22), ('Cost of sales', 22), ('expense', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' cost of goods sold ', 12), (' change in inventory', 11), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -42040193.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-42040193.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Other expenses ', 42), (' Selling & distribution expenses ', 36), (' employee benefits expense ', 35), (' employee benefit espense ', 35), ('expenses ', 33), (' Occupancy expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Administrative and other expenses ', 32), (' Sales and marketing ', 30), (' property espense ', 30), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Management expenses ', 25), (' levies', 25), (' Occupancy ', 24), (' Royalties ', 21), (' Logistics and distribution ', 19), (' Administration ', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses ', 72), (' Lease expenses ', 67), (' Occupancy expenses ', 64), ('expenses ', 63), (' Marketing expenses ', 62), (' Selling Expenses ', 58), (' other expenses ', 56), (' Other expenses ', 56), (' Other expenses ', 56), (' property espense ', 50), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Selling & distribution expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' Administrative and other expenses ', 36), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' employee benefit espense ', 29), (' Logistics and distribution ', 24), (' levies', 24), (' Sales and marketing ', 21), (' Administration ', 18), (' Occupancy ', 11), (' Royalties ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' property espense ', 44), (' Depreciation and amortisation expenses ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Depreciation expenses ', 34), (' Logistics and distribution ', 34), (' Distribution expenses ', 32), (' other expenses ', 30), (' Other expenses ', 30), (' Other expenses ', 30), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Advertising expenses ', 28), (' Sales and marketing ', 28), (' Administrative and other expenses ', 26), (' Lease expenses ', 25), (' Occupancy expenses ', 24), (' Management expenses ', 24), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Royalties ', 21), (' Selling Expenses ', 19), (' levies', 16), ('expenses ', 15), (' Occupancy ', 15), (' Administration ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' employee benefits expense ', 61), (' employee benefit espense ', 57), (' Depreciation expenses ', 53), (' Administrative and other expenses ', 52), (' other expenses ', 50), (' Administrative expenses ', 50), (' Other expenses ', 50), (' Administration expenses ', 50), (' Management expenses ', 50), (' Other expenses ', 50), (' Marketing expenses ', 49), (' Lease expenses ', 46), (' Advertising expenses ', 46), (' Distribution expenses ', 45), (' Occupancy expenses ', 44), (' Selling & distribution expenses ', 44), (' Amortisation expenses ', 42), (' property espense ', 41), ('expenses ', 40), (' Selling Expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' Sales and marketing ', 31), (' Logistics and distribution ', 27), (' depreciation ', 26), (' Administration ', 24), (' levies', 14), (' Royalties ', 13), (' Occupancy ', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' property espense ', 41), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Selling & distribution expenses ', 36), (' Administrative and other expenses ', 36), (' Distribution expenses ', 35), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Marketing expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Selling Expenses ', 23), (' Management expenses ', 22), (' depreciation ', 19), (' Administration ', 18), (' Occupancy expenses ', 17), (' Occupancy ', 14), (' levies', 14), ('expenses ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Administrative and other expenses ', 44), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Depreciation and amortisation expenses ', 34), (' property espense ', 34), (' employee benefits expense ', 33), (' Management expenses ', 32), (' Marketing expenses ', 31), (' Depreciation expenses ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Occupancy expenses ', 28), (' Logistics and distribution ', 28), (' Amortisation expenses ', 27), (' Sales and marketing ', 26), (' Administration ', 26), (' Selling & distribution expenses ', 24), (' Selling Expenses ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), ('expenses ', 18), (' Royalties ', 18), (' Occupancy ', 14), (' levies', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Administrative and other expenses ', 39), (' other expenses ', 35), (' Other expenses ', 35), (' Other expenses ', 35), (' Depreciation and amortisation expenses ', 34), (' employee benefits expense ', 33), (' property espense ', 33), (' employee benefit espense ', 33), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Marketing expenses ', 28), (' Occupancy expenses ', 28), (' Management expenses ', 28), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Lease expenses ', 25), (' Logistics and distribution ', 25), (' Amortisation expenses ', 24), (' Distribution expenses ', 23), (' Sales and marketing ', 23), (' Administration ', 22), (' Selling Expenses ', 21), (' Advertising expenses ', 20), (' depreciation ', 19), ('expenses ', 16), (' Royalties ', 15), (' Occupancy ', 12), (' levies', 8)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses ', 24), ('expenses ', 22), (' Advertising expenses ', 22), (' Sales and marketing ', 22), (' Distribution expenses ', 21), (' Administrative expenses ', 21), (' Administrative and other expenses ', 21), (' Administration expenses ', 21), (' Depreciation and amortisation expenses ', 21), (' Royalties ', 20), (' Selling & distribution expenses ', 17), (' Administration ', 17), (' employee benefits expense ', 16), (' Lease expenses ', 14), (' Selling Expenses ', 14), (' other expenses ', 13), (' Occupancy expenses ', 13), (' Other expenses ', 13), (' Management expenses ', 13), (' Other expenses ', 13), (' Marketing expenses ', 12), (' Depreciation expenses ', 12), (' property espense ', 11), (' Logistics and distribution ', 9), (' employee benefit espense ', 8), (' depreciation ', 0), (' Occupancy ', 0), (' levies', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Lease expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': -2460781.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-2460781.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Other expenses ', 42), (' Selling & distribution expenses ', 36), (' employee benefits expense ', 35), (' employee benefit espense ', 35), ('expenses ', 33), (' Occupancy expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Administrative and other expenses ', 32), (' Sales and marketing ', 30), (' property espense ', 30), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Management expenses ', 25), (' levies', 25), (' Occupancy ', 24), (' Royalties ', 21), (' Logistics and distribution ', 19), (' Administration ', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses ', 72), (' Lease expenses ', 67), (' Occupancy expenses ', 64), ('expenses ', 63), (' Marketing expenses ', 62), (' Selling Expenses ', 58), (' other expenses ', 56), (' Other expenses ', 56), (' Other expenses ', 56), (' property espense ', 50), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Selling & distribution expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' Administrative and other expenses ', 36), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' employee benefit espense ', 29), (' Logistics and distribution ', 24), (' levies', 24), (' Sales and marketing ', 21), (' Administration ', 18), (' Occupancy ', 11), (' Royalties ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' property espense ', 44), (' Depreciation and amortisation expenses ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Depreciation expenses ', 34), (' Logistics and distribution ', 34), (' Distribution expenses ', 32), (' other expenses ', 30), (' Other expenses ', 30), (' Other expenses ', 30), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Advertising expenses ', 28), (' Sales and marketing ', 28), (' Administrative and other expenses ', 26), (' Lease expenses ', 25), (' Occupancy expenses ', 24), (' Management expenses ', 24), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Royalties ', 21), (' Selling Expenses ', 19), (' levies', 16), ('expenses ', 15), (' Occupancy ', 15), (' Administration ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' employee benefits expense ', 61), (' employee benefit espense ', 57), (' Depreciation expenses ', 53), (' Administrative and other expenses ', 52), (' other expenses ', 50), (' Administrative expenses ', 50), (' Other expenses ', 50), (' Administration expenses ', 50), (' Management expenses ', 50), (' Other expenses ', 50), (' Marketing expenses ', 49), (' Lease expenses ', 46), (' Advertising expenses ', 46), (' Distribution expenses ', 45), (' Occupancy expenses ', 44), (' Selling & distribution expenses ', 44), (' Amortisation expenses ', 42), (' property espense ', 41), ('expenses ', 40), (' Selling Expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' Sales and marketing ', 31), (' Logistics and distribution ', 27), (' depreciation ', 26), (' Administration ', 24), (' levies', 14), (' Royalties ', 13), (' Occupancy ', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' property espense ', 41), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Selling & distribution expenses ', 36), (' Administrative and other expenses ', 36), (' Distribution expenses ', 35), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Marketing expenses ', 27), (' Advertising expenses ', 26), (' Sales and marketing ', 26), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Selling Expenses ', 23), (' Management expenses ', 22), (' depreciation ', 19), (' Administration ', 18), (' Occupancy expenses ', 17), (' Occupancy ', 14), (' levies', 14), ('expenses ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Administrative and other expenses ', 44), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Depreciation and amortisation expenses ', 34), (' property espense ', 34), (' employee benefits expense ', 33), (' Management expenses ', 32), (' Marketing expenses ', 31), (' Depreciation expenses ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' employee benefit espense ', 30), (' Lease expenses ', 29), (' Occupancy expenses ', 28), (' Logistics and distribution ', 28), (' Amortisation expenses ', 27), (' Sales and marketing ', 26), (' Administration ', 26), (' Selling & distribution expenses ', 24), (' Selling Expenses ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), ('expenses ', 18), (' Royalties ', 18), (' Occupancy ', 14), (' levies', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Administrative and other expenses ', 39), (' other expenses ', 35), (' Other expenses ', 35), (' Other expenses ', 35), (' Depreciation and amortisation expenses ', 34), (' employee benefits expense ', 33), (' property espense ', 33), (' employee benefit espense ', 33), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Marketing expenses ', 28), (' Occupancy expenses ', 28), (' Management expenses ', 28), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Lease expenses ', 25), (' Logistics and distribution ', 25), (' Amortisation expenses ', 24), (' Distribution expenses ', 23), (' Sales and marketing ', 23), (' Administration ', 22), (' Selling Expenses ', 21), (' Advertising expenses ', 20), (' depreciation ', 19), ('expenses ', 16), (' Royalties ', 15), (' Occupancy ', 12), (' levies', 8)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses ', 24), ('expenses ', 22), (' Advertising expenses ', 22), (' Sales and marketing ', 22), (' Distribution expenses ', 21), (' Administrative expenses ', 21), (' Administrative and other expenses ', 21), (' Administration expenses ', 21), (' Depreciation and amortisation expenses ', 21), (' Royalties ', 20), (' Selling & distribution expenses ', 17), (' Administration ', 17), (' employee benefits expense ', 16), (' Lease expenses ', 14), (' Selling Expenses ', 14), (' other expenses ', 13), (' Occupancy expenses ', 13), (' Other expenses ', 13), (' Management expenses ', 13), (' Other expenses ', 13), (' Marketing expenses ', 12), (' Depreciation expenses ', 12), (' property espense ', 11), (' Logistics and distribution ', 9), (' employee benefit espense ', 8), (' depreciation ', 0), (' Occupancy ', 0), (' levies', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Lease expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': -2801051.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-2801051.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses ', 43), (' Rental expenses ', 40), ('Rent ', 38), (' Occupancy expenses', 33), (' Occupancy ', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 64), (' Administration expenses ', 41), ('Rent ', 24), (' Occupancy ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Rental expenses ', 35), (' Occupancy expenses', 24), (' Administration expenses ', 22), ('Rent ', 16), (' Occupancy ', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' Rental expenses ', 54), (' Administration expenses ', 50), (' Occupancy expenses', 44), ('Rent ', 21), (' Occupancy ', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses ', 27), (' Administration expenses ', 25), (' Occupancy expenses', 17), ('Rent ', 14), (' Occupancy ', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Rental expenses ', 35), (' Administration expenses ', 30), (' Occupancy expenses', 28), ('Rent ', 19), (' Occupancy ', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 30), (' Occupancy expenses', 28), ('Rent ', 16), (' Occupancy ', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent ', 29), (' Rental expenses ', 25), (' Administration expenses ', 21), (' Occupancy expenses', 13), (' Occupancy ', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses ', 42), (' Occupancy expenses', 30), (' Administration expenses ', 27), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': -2460781.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-2460781.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses ', 43), (' Rental expenses ', 40), ('Rent ', 38), (' Occupancy expenses', 33), (' Occupancy ', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 64), (' Administration expenses ', 41), ('Rent ', 24), (' Occupancy ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Rental expenses ', 35), (' Occupancy expenses', 24), (' Administration expenses ', 22), ('Rent ', 16), (' Occupancy ', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' Rental expenses ', 54), (' Administration expenses ', 50), (' Occupancy expenses', 44), ('Rent ', 21), (' Occupancy ', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses ', 27), (' Administration expenses ', 25), (' Occupancy expenses', 17), ('Rent ', 14), (' Occupancy ', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Rental expenses ', 35), (' Administration expenses ', 30), (' Occupancy expenses', 28), ('Rent ', 19), (' Occupancy ', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 30), (' Occupancy expenses', 28), ('Rent ', 16), (' Occupancy ', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent ', 29), (' Rental expenses ', 25), (' Administration expenses ', 21), (' Occupancy expenses', 13), (' Occupancy ', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses ', 42), (' Occupancy expenses', 30), (' Administration expenses ', 27), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': -2801051.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-2801051.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('other operating', 32), (' Other income', 25), ('Other revenue', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Other income', 45), ('other operating', 38), ('Other revenue', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Other income', 39), ('other operating', 36), ('Other revenue', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 141303.0, 'line_item_label': ['Other revenue'], 'note_numbers': ['2'], 'line_item_value': [141303.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('other operating', 32), (' Other income', 25), ('Other revenue', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Other income', 45), ('other operating', 38), ('Other revenue', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Other income', 39), ('other operating', 36), ('Other revenue', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 175655.0, 'line_item_label': ['Other revenue'], 'note_numbers': ['2'], 'line_item_value': [175655.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = operating revenue revenue & reimbursements , res_fuzz_match = [(' rental revenue', 77), (' Commission revenue ', 50), (' Rent ', 50), ('Other income ', 45)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = operating revenue total operating revenue , res_fuzz_match = [(' rental revenue', 62), (' Commission revenue ', 57), (' Rent ', 50), ('Other income ', 45)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = other revenue other income , res_fuzz_match = [('Other income ', 100), (' rental revenue', 62), (' Commission revenue ', 57), (' Rent ', 50)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = other revenue interest , res_fuzz_match = [(' Rent ', 75), ('Other income ', 64), (' rental revenue', 62), (' Commission revenue ', 57)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = other revenue total other revenue , res_fuzz_match = [('Other income ', 64), (' rental revenue', 62), (' Commission revenue ', 57), (' Rent ', 50)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = operating revenue revenue & reimbursements , res_fuzz_match = [(' rental revenue', 77), (' Commission revenue ', 50), (' Rent ', 50), ('Other income ', 45)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = operating revenue total operating revenue , res_fuzz_match = [(' rental revenue', 62), (' Commission revenue ', 57), (' Rent ', 50), ('Other income ', 45)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = other revenue other income , res_fuzz_match = [('Other income ', 100), (' rental revenue', 62), (' Commission revenue ', 57), (' Rent ', 50)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = other revenue interest , res_fuzz_match = [(' Rent ', 75), ('Other income ', 64), (' rental revenue', 62), (' Commission revenue ', 57)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows = other revenue total other revenue , res_fuzz_match = [('Other income ', 64), (' rental revenue', 62), (' Commission revenue ', 57), (' Rent ', 50)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 7], 'score': [100, 100], 'value': [19201.0, 121104.0], 'label': ['Other Revenue Other income', 'Other Revenue Other income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), ('Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), ('Finance income and costs', 53), ('finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Net finance costs', 39), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 28), ('other income', 25), ('finance income', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('finance income', 50), ('Finance income and costs', 44), (' Finance income and finance costs', 42), ('other income', 40), (' Interest revenue', 36), (' Net finance costs', 36)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), ('Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('other income', 45), (' Finance income and finance costs', 45), (' Net finance costs', 45), ('Finance income and costs', 44), ('finance income', 36), (' Interest revenue', 23)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Net finance costs', 43), ('Finance income and costs', 42), (' Finance income and finance costs', 41), ('other income', 39), ('finance income', 35), (' Interest revenue', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), ('Finance income and costs', 17), ('other income', 14), ('finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Interest revenue', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), ('Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), ('Finance income and costs', 53), ('finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Net finance costs', 39), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 28), ('other income', 25), ('finance income', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('finance income', 50), ('Finance income and costs', 44), (' Finance income and finance costs', 42), ('other income', 40), (' Interest revenue', 36), (' Net finance costs', 36)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), ('Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('other income', 45), (' Finance income and finance costs', 45), (' Net finance costs', 45), ('Finance income and costs', 44), ('finance income', 36), (' Interest revenue', 23)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Net finance costs', 43), ('Finance income and costs', 42), (' Finance income and finance costs', 41), ('other income', 39), ('finance income', 35), (' Interest revenue', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), ('Finance income and costs', 17), ('other income', 14), ('finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Interest revenue', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost ', 35), (' net finance costs ', 30), (' interest expense', 30), (' finance expenses ', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses ', 100), ('finance cost ', 67), (' interest expense', 64), (' net finance costs ', 57)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 38), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' finance expenses ', 54), (' interest expense', 51), (' net finance costs ', 36), ('finance cost ', 29)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost ', 34), (' interest expense', 31), (' finance expenses ', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' net finance costs ', 45), (' interest expense', 42), ('finance cost ', 37), (' finance expenses ', 35)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' net finance costs ', 43), (' interest expense', 37), (' finance expenses ', 34), ('finance cost ', 32)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost ', 29), (' net finance costs ', 22), (' finance expenses ', 12), (' interest expense', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense', 40), (' finance expenses ', 38), ('finance cost ', 35)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -409723.0, 'line_item_label': ['Finance expenses'], 'note_numbers': [nan], 'line_item_value': [-409723.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense', 29), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost ', 35), (' net finance costs ', 30), (' interest expense', 30), (' finance expenses ', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses ', 100), ('finance cost ', 67), (' interest expense', 64), (' net finance costs ', 57)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 38), (' finance expenses ', 35), (' interest expense', 33)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' finance expenses ', 54), (' interest expense', 51), (' net finance costs ', 36), ('finance cost ', 29)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost ', 34), (' interest expense', 31), (' finance expenses ', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' net finance costs ', 45), (' interest expense', 42), ('finance cost ', 37), (' finance expenses ', 35)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' net finance costs ', 43), (' interest expense', 37), (' finance expenses ', 34), ('finance cost ', 32)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost ', 29), (' net finance costs ', 22), (' finance expenses ', 12), (' interest expense', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense', 40), (' finance expenses ', 38), ('finance cost ', 35)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -423813.0, 'line_item_label': ['Finance expenses'], 'note_numbers': [nan], 'line_item_value': [-423813.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['Accretion expense ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Asset impairment ', ' commission revenue ', ' dividend from other parties ', ' effective portion of changes in fair value of cash flow ', ' foreign exchange gain ', ' government grants ', ' Impairment loss ', ' insurance proceeds ', ' Interest on unwinding of discount in provisions ', ' Investment in joint venture ', ' japan recoveries ', ' Loss on loan refinancing ', ' Loss on sale of disposal of assets ', ' margin charge income ', ' net (loss)/profit on disposal of non-current assets ', ' net foreign exchange (loss)/gain ', ' net foreign exchange gain ', ' net foreign exchange gains/(losses) ', ' net gain / loss on disposal of property plant and equipment ', ' Net loss on disposal of property ', ' net of tax ', ' Net other foreign exchange (losses)/gains ', ' net ppe disposal (loss)/gain ', ' other ', ' other income ', ' other miscellaneous - net (loss)/gain ', ' paid by customers - at amortised cost ', ' plant and equipment ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' profit from discontinued operation ', ' Profit on sale of assets ', ' quota lease income ', ' Remuneration from services linked to newly acquired entities ', ' secondment income (tw recovery) ', ' Share of gain/(loss) of joint venture ', ' share of jv income ', ' Sub-lease rental income ', ' sundry income ', ' other revenue']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' interest revenue ', 74), (' other income and revenue ', 71), (' Share of gain/(loss) of joint venture ', 45), (' Impairement (expenses)/reversal ', 44), (' other income ', 43), (' Other income ', 43), (' Loss on revaluation of inventories', 42), (' other gains/losses ', 37), ('finance cost ', 35), (' other opertaing income ', 33), (' expenses ', 33), (' Profit from discontinued operation ', 31), (' net finance costs ', 30), (' share of profit of equity accounted investees ', 30), (' finance expenses', 24), (' finance income and costs ', 24), (' interest gains and losses ', 24), (' Finance income and costs ', 24), (' net of tax ', 21), (' net of tax ', 21), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), (' Impairment loss ', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost ', 67), (' expenses ', 63), (' net finance costs ', 57), (' Impairement (expenses)/reversal ', 55), (' finance income and costs ', 53), (' Finance income and costs ', 53), (' finance income and finance cost ', 44), (' Finance income and finance costs ', 44), (' interest revenue ', 36), (' net of tax ', 30), (' net of tax ', 30), (' share of profit of equity accounted investees ', 29), (' interest gains and losses ', 29), (' other income and revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Loss on revaluation of inventories', 29), (' other income ', 25), (' Other income ', 25), (' Profit from discontinued operation ', 25), (' other gains/losses ', 21), (' other opertaing income ', 19), (' Impairment loss ', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Loss on revaluation of inventories', 52), (' Profit from discontinued operation ', 46), (' other gains/losses ', 44), (' share of profit of equity accounted investees ', 43), (' net of tax ', 43), (' net of tax ', 43), (' other opertaing income ', 41), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 39), ('finance cost ', 38), (' Impairment loss ', 38), (' finance expenses', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 29), (' interest revenue ', 28), (' other income and revenue ', 28), (' other income ', 25), (' Other income ', 25), (' expenses ', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' finance expenses', 54), (' net of tax ', 45), (' Impairement (expenses)/reversal ', 45), (' net of tax ', 45), (' finance income and costs ', 44), (' Finance income and costs ', 44), (' finance income and finance cost ', 42), (' Finance income and finance costs ', 42), (' other income ', 40), (' expenses ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' other opertaing income ', 38), (' share of profit of equity accounted investees ', 37), (' net finance costs ', 36), (' interest revenue ', 36), (' interest gains and losses ', 35), (' other gains/losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' Profit from discontinued operation ', 31), (' Loss on revaluation of inventories', 31), ('finance cost ', 29), (' Impairment loss ', 23)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' other gains/losses ', 56), (' other opertaing income ', 52), (' Loss on revaluation of inventories', 49), (' share of profit of equity accounted investees ', 47), (' Share of gain/(loss) of joint venture ', 46), (' Profit from discontinued operation ', 43), (' other income ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' net finance costs ', 36), (' Impairement (expenses)/reversal ', 36), ('finance cost ', 34), (' Impairment loss ', 34), (' finance income and finance cost ', 31), (' finance income and costs ', 31), (' interest revenue ', 31), (' Finance income and finance costs ', 31), (' Finance income and costs ', 31), (' finance expenses', 27), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' other opertaing income ', 50), (' other income and revenue ', 47), (' Profit from discontinued operation ', 46), (' net finance costs ', 45), (' other income ', 45), (' finance income and finance cost ', 45), (' Other income ', 45), (' Finance income and finance costs ', 45), (' share of profit of equity accounted investees ', 44), (' finance income and costs ', 44), (' Finance income and costs ', 44), (' other gains/losses ', 38), (' Impairement (expenses)/reversal ', 38), ('finance cost ', 37), (' interest gains and losses ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 35), (' Loss on revaluation of inventories', 34), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 23), (' Impairment loss ', 20), (' expenses ', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' other opertaing income ', 48), (' other income and revenue ', 48), (' net finance costs ', 43), (' share of profit of equity accounted investees ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' Impairement (expenses)/reversal ', 40), (' other income ', 39), (' Other income ', 39), (' Profit from discontinued operation ', 39), (' Share of gain/(loss) of joint venture ', 38), (' interest gains and losses ', 36), (' finance expenses', 34), (' other gains/losses ', 33), (' Loss on revaluation of inventories', 33), ('finance cost ', 32), (' interest revenue ', 27), (' net of tax ', 23), (' net of tax ', 23), (' Impairment loss ', 18), (' expenses ', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' net of tax ', 60), (' net of tax ', 60), ('finance cost ', 29), (' net finance costs ', 22), (' expenses ', 22), (' other opertaing income ', 19), (' finance income and costs ', 17), (' Finance income and costs ', 17), (' Loss on revaluation of inventories', 17), (' other income ', 14), (' Other income ', 14), (' Impairment loss ', 14), (' finance income and finance cost ', 13), (' Share of gain/(loss) of joint venture ', 13), (' Finance income and finance costs ', 13), (' finance expenses', 12), (' other gains/losses ', 11), (' share of profit of equity accounted investees ', 11), (' interest revenue ', 11), (' Impairement (expenses)/reversal ', 9), (' interest gains and losses ', 8), (' other income and revenue ', 8), (' Profit from discontinued operation ', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -409723.0, 'line_item_label': ['Finance expenses'], 'note_numbers': [nan], 'line_item_value': [-409723.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' interest revenue ', 74), (' other income and revenue ', 71), (' Share of gain/(loss) of joint venture ', 45), (' Impairement (expenses)/reversal ', 44), (' other income ', 43), (' Other income ', 43), (' Loss on revaluation of inventories', 42), (' other gains/losses ', 37), ('finance cost ', 35), (' other opertaing income ', 33), (' expenses ', 33), (' Profit from discontinued operation ', 31), (' net finance costs ', 30), (' share of profit of equity accounted investees ', 30), (' finance expenses', 24), (' finance income and costs ', 24), (' interest gains and losses ', 24), (' Finance income and costs ', 24), (' net of tax ', 21), (' net of tax ', 21), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), (' Impairment loss ', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost ', 67), (' expenses ', 63), (' net finance costs ', 57), (' Impairement (expenses)/reversal ', 55), (' finance income and costs ', 53), (' Finance income and costs ', 53), (' finance income and finance cost ', 44), (' Finance income and finance costs ', 44), (' interest revenue ', 36), (' net of tax ', 30), (' net of tax ', 30), (' share of profit of equity accounted investees ', 29), (' interest gains and losses ', 29), (' other income and revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Loss on revaluation of inventories', 29), (' other income ', 25), (' Other income ', 25), (' Profit from discontinued operation ', 25), (' other gains/losses ', 21), (' other opertaing income ', 19), (' Impairment loss ', 17)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Loss on revaluation of inventories', 52), (' Profit from discontinued operation ', 46), (' other gains/losses ', 44), (' share of profit of equity accounted investees ', 43), (' net of tax ', 43), (' net of tax ', 43), (' other opertaing income ', 41), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 39), ('finance cost ', 38), (' Impairment loss ', 38), (' finance expenses', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 29), (' interest revenue ', 28), (' other income and revenue ', 28), (' other income ', 25), (' Other income ', 25), (' expenses ', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' finance expenses', 54), (' net of tax ', 45), (' Impairement (expenses)/reversal ', 45), (' net of tax ', 45), (' finance income and costs ', 44), (' Finance income and costs ', 44), (' finance income and finance cost ', 42), (' Finance income and finance costs ', 42), (' other income ', 40), (' expenses ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' other opertaing income ', 38), (' share of profit of equity accounted investees ', 37), (' net finance costs ', 36), (' interest revenue ', 36), (' interest gains and losses ', 35), (' other gains/losses ', 31), (' Share of gain/(loss) of joint venture ', 31), (' Profit from discontinued operation ', 31), (' Loss on revaluation of inventories', 31), ('finance cost ', 29), (' Impairment loss ', 23)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' other gains/losses ', 56), (' other opertaing income ', 52), (' Loss on revaluation of inventories', 49), (' share of profit of equity accounted investees ', 47), (' Share of gain/(loss) of joint venture ', 46), (' Profit from discontinued operation ', 43), (' other income ', 40), (' Other income ', 40), (' other income and revenue ', 39), (' net finance costs ', 36), (' Impairement (expenses)/reversal ', 36), ('finance cost ', 34), (' Impairment loss ', 34), (' finance income and finance cost ', 31), (' finance income and costs ', 31), (' interest revenue ', 31), (' Finance income and finance costs ', 31), (' Finance income and costs ', 31), (' finance expenses', 27), (' interest gains and losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' expenses ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' other opertaing income ', 50), (' other income and revenue ', 47), (' Profit from discontinued operation ', 46), (' net finance costs ', 45), (' other income ', 45), (' finance income and finance cost ', 45), (' Other income ', 45), (' Finance income and finance costs ', 45), (' share of profit of equity accounted investees ', 44), (' finance income and costs ', 44), (' Finance income and costs ', 44), (' other gains/losses ', 38), (' Impairement (expenses)/reversal ', 38), ('finance cost ', 37), (' interest gains and losses ', 37), (' Share of gain/(loss) of joint venture ', 36), (' finance expenses', 35), (' Loss on revaluation of inventories', 34), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 23), (' Impairment loss ', 20), (' expenses ', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' other opertaing income ', 48), (' other income and revenue ', 48), (' net finance costs ', 43), (' share of profit of equity accounted investees ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' finance income and finance cost ', 41), (' Finance income and finance costs ', 41), (' Impairement (expenses)/reversal ', 40), (' other income ', 39), (' Other income ', 39), (' Profit from discontinued operation ', 39), (' Share of gain/(loss) of joint venture ', 38), (' interest gains and losses ', 36), (' finance expenses', 34), (' other gains/losses ', 33), (' Loss on revaluation of inventories', 33), ('finance cost ', 32), (' interest revenue ', 27), (' net of tax ', 23), (' net of tax ', 23), (' Impairment loss ', 18), (' expenses ', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' net of tax ', 60), (' net of tax ', 60), ('finance cost ', 29), (' net finance costs ', 22), (' expenses ', 22), (' other opertaing income ', 19), (' finance income and costs ', 17), (' Finance income and costs ', 17), (' Loss on revaluation of inventories', 17), (' other income ', 14), (' Other income ', 14), (' Impairment loss ', 14), (' finance income and finance cost ', 13), (' Share of gain/(loss) of joint venture ', 13), (' Finance income and finance costs ', 13), (' finance expenses', 12), (' other gains/losses ', 11), (' share of profit of equity accounted investees ', 11), (' interest revenue ', 11), (' Impairement (expenses)/reversal ', 9), (' interest gains and losses ', 8), (' other income and revenue ', 8), (' Profit from discontinued operation ', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': -423813.0, 'line_item_label': ['Finance expenses'], 'note_numbers': [nan], 'line_item_value': [-423813.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('NULL', 5)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('NULL', 5)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('provision for taxation previous year', 56), (' income tax benefit/(expense)', 49), ('deferred tax', 47), (' income tax benefit', 47), (' tax (expense)/benefit', 46), ('current tax', 44), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('earlier year', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), ('prior year ', 32)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('current tax', 40), ('provision for taxation previous year', 38), ('prior year ', 29), ('earlier year', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit', 51), (' income tax benefit/(expense)', 48), ('minimum alternate tax credit entitlement', 43), ('amount transferred to retained earnings', 40), ('provision for taxation previous year', 39), (' tax (expense)/benefit', 39), (' income tax', 38), ('current tax', 37), ('deferred tax', 34), ('prior year ', 29), ('earlier year', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('provision for taxation previous year', 43), (' income tax expense', 43), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('earlier year', 35), ('minimum alternate tax credit entitlement', 34), (' tax (expense)/benefit', 32), (' income tax', 30), ('current tax', 29), ('deferred tax', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -521822.0, 'line_item_label': ['Income tax (expense)/benefit'], 'note_numbers': ['10(a)'], 'line_item_value': [-521822.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('provision for taxation previous year', 56), (' income tax benefit/(expense)', 49), ('deferred tax', 47), (' income tax benefit', 47), (' tax (expense)/benefit', 46), ('current tax', 44), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('earlier year', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), ('prior year ', 32)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('current tax', 40), ('provision for taxation previous year', 38), ('prior year ', 29), ('earlier year', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit', 51), (' income tax benefit/(expense)', 48), ('minimum alternate tax credit entitlement', 43), ('amount transferred to retained earnings', 40), ('provision for taxation previous year', 39), (' tax (expense)/benefit', 39), (' income tax', 38), ('current tax', 37), ('deferred tax', 34), ('prior year ', 29), ('earlier year', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('provision for taxation previous year', 43), (' income tax expense', 43), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('earlier year', 35), ('minimum alternate tax credit entitlement', 34), (' tax (expense)/benefit', 32), (' income tax', 30), ('current tax', 29), ('deferred tax', 26)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -1053390.0, 'line_item_label': ['Income tax (expense)/benefit'], 'note_numbers': ['10(a)'], 'line_item_value': [-1053390.0]}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional ', 32), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 42), ('exceptional ', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 46), (' prior period ', 33), ('exceptional ', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 32), ('exceptional ', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 32), ('exceptional ', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional ', 22), (' Actuarial gains / (losses) on retirement benefit obligation', 10), (' prior period ', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional ', 32), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 42), ('exceptional ', 22)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 46), (' prior period ', 33), ('exceptional ', 27)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 13)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 32), ('exceptional ', 18)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 37), (' prior period ', 32), ('exceptional ', 16)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional ', 22), (' Actuarial gains / (losses) on retirement benefit obligation', 10), (' prior period ', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:12:40+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-17 10:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('NULL', 5)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = income tax (expense)/benefit , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income, net ofincome tax , res_fuzz_match = [('NULL', 5)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of income , res_fuzz_match = [('NULL', 4)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-17 10:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:16:41+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-17 10:16:41+0530 - sLogger - DEBUG - {'fileid': 'c7762008-71de-41b3-bc99-68ac778cba31', 'filename': 'Audited Report Year End March 2023 Final.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Audited Report Year End March 2023 Final.pdf', 'status': 'Processing'}
2023-08-17 10:16:41+0530 - sLogger - DEBUG - save file completed
2023-08-17 10:16:41+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-17 10:16:41+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-17 10:16:41+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-17 10:16:41+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-17 10:16:41+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-17 10:16:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:16:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:16:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:16:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:16:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:16:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:16:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:16:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:16:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:16:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:16:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:16:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:16:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:16:46+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:16:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:16:46+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:16:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:16:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:16:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:16:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:16:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:16:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:16:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:24+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:24+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:17:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:17:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:17:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:17:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:17:55+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:17:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:17:55+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:18:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:18:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:18:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:18:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:18:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:18:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:18:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:09+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:09+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:18+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:18+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-17 10:19:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-17 10:19:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-17 10:19:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-17 10:19:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-17 10:19:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-17 10:19:42+0530 - sLogger - DEBUG - function: predict completed.
2023-08-17 10:19:42+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-17 10:19:42+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [7, 27], 'predicted_cpl_pages': [6, 20, 21], 'predicted_ccf_pages': [9], 'filtered_cbs_pages': [7], 'filtered_cpl_pages': [6], 'filtered_ccf_pages': [9], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-17 10:19:42+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-17 10:19:42+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-17 10:19:42+0530 - sLogger - DEBUG - process file completed
2023-08-17 10:19:42+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-17 10:19:42+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-17 10:19:42+0530 - sLogger - DEBUG - TE process file started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-17 10:23:28+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-17 10:23:28+0530 - sLogger - DEBUG - process_main_pages started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:23:28+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:23:28+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:23:28+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:23:28+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-17 10:23:28+0530 - sLogger - DEBUG - start_refactoring started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-17 10:23:28+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-17 10:23:28+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD currentassets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD currentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentassets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentassets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equityandliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentassets | score 96
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentliabilities | score 62
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equityandliabilities | score 29
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Cash and Cash Equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD current assets | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD currentassets | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD current liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD currentliabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrent assets | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentassets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD non current assets | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD non current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentassets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD equity and liabilities | score 54
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD equity | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Cash and Cash Equivalents | MATCH WORD equityandliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Trade and Other Receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD current assets | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD currentassets | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD current liabilities | score 48
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD currentliabilities | score 45
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrent assets | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentassets | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD non current assets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD non current liabilities | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentassets | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD equity and liabilities | score 49
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Receivables | MATCH WORD equityandliabilities | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Current Assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD current assets | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD currentassets | score 83
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD current liabilities | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD currentliabilities | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD noncurrent assets | score 81
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD noncurrentassets | score 78
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD noncurrent liabilities | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD non current assets | score 84
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD non current liabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD noncurrentliabilities | score 54
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD noncurrentassets | score 78
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD noncurrentliabilities | score 54
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD equity and liabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Assets | MATCH WORD equityandliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - NON CURRENT ASSETS | [('current assets', 87), ('noncurrent assets', 67), ('currentliabilities', 54), ('current liabilities', 52), ('currentassets', 48), ('noncurrentliabilities', 48), ('assets', 45), ('noncurrentassets', 44), ('noncurrent liabilities', 39), ('equity and liabilities', 29), ('equityandliabilities', 29), ('equity liabilities', 27), ('equity', 26), ('equityliabilities', 24), ('liabilities', 9)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD current assets | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD currentassets | score 84
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD current liabilities | score 59
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD currentliabilities | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD noncurrent assets | score 97
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD noncurrentassets | score 94
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 70
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD non current assets | score 100
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD non current liabilities | score 73
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD noncurrentassets | score 94
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD equity and liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT ASSETS | MATCH WORD equityandliabilities | score 26
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Deferred Tax Asset | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD current assets | score 62
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD currentassets | score 58
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD currentliabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD noncurrent assets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD noncurrentassets | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD noncurrent liabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD non current assets | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD non current liabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD noncurrentliabilities | score 31
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD noncurrentassets | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD noncurrentliabilities | score 31
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD equity and liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Deferred Tax Asset | MATCH WORD equityandliabilities | score 26
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Property Plant and Equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD current assets | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD currentassets | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD currentliabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrent assets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentassets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD non current assets | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD non current liabilities | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentassets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD equity and liabilities | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD equity | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Property Plant and Equipment | MATCH WORD equityandliabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - RightofUse Assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD current assets | score 58
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD currentassets | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD current liabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD currentliabilities | score 29
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD noncurrent assets | score 59
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD noncurrentassets | score 55
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD non current assets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD non current liabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD noncurrentassets | score 55
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD equity and liabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text RightofUse Assets | MATCH WORD equityandliabilities | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Intangible Assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD current assets | score 58
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD currentassets | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD current liabilities | score 42
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD currentliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD noncurrent assets | score 59
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD noncurrentassets | score 55
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD non current assets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD non current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD noncurrentliabilities | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD noncurrentassets | score 55
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD noncurrentliabilities | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD equity and liabilities | score 46
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Intangible Assets | MATCH WORD equityandliabilities | score 49
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Non Current Assets | [('current assets', 72), ('noncurrent assets', 56), ('current liabilities', 54), ('currentliabilities', 50), ('currentassets', 46), ('noncurrentliabilities', 46), ('noncurrentassets', 42), ('assets', 36), ('equity and liabilities', 35), ('equity liabilities', 33), ('noncurrent liabilities', 32), ('equityandliabilities', 29), ('equityliabilities', 26), ('equity', 21), ('liabilities', 14)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD current assets | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD currentassets | score 83
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD current liabilities | score 51
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD currentliabilities | score 48
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD noncurrent assets | score 83
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD noncurrentassets | score 80
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD noncurrent liabilities | score 61
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD non current assets | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD non current liabilities | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD noncurrentliabilities | score 58
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD noncurrentassets | score 80
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD noncurrentliabilities | score 58
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD equity and liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Assets | MATCH WORD equityandliabilities | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current assets | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD currentassets | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD currentliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent assets | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentassets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentassets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity and liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equityandliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 24
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD currentassets | score 25
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD currentliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 24
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentassets | score 22
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 24
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentassets | score 22
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equityandliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentassets | score 62
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentliabilities | score 97
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Trade and Other Payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD current assets | score 42
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD currentassets | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD current liabilities | score 47
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD currentliabilities | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrent assets | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrent liabilities | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD non current assets | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD non current liabilities | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentassets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD equity and liabilities | score 48
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Trade and Other Payables | MATCH WORD equityandliabilities | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Current Tax Liability | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD currentassets | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD current liabilities | score 80
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD currentliabilities | score 77
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD noncurrent assets | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD noncurrentassets | score 49
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD noncurrent liabilities | score 74
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD non current assets | score 53
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD non current liabilities | score 73
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD noncurrentliabilities | score 71
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD noncurrentassets | score 49
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD noncurrentliabilities | score 71
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD equity and liabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD equity | score 45
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Current Tax Liability | MATCH WORD equityandliabilities | score 54
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Employee Benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD current assets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD currentassets | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD current liabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD currentliabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrent assets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD non current assets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD non current liabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD equity and liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD equity | score 45
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD equityandliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - nan | [('equityandliabilities', 29), ('currentassets', 27), ('noncurrentliabilities', 27), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('current liabilities', 24), ('noncurrent liabilities', 24), ('noncurrentassets', 22), ('liabilities', 22), ('equity and liabilities', 20), ('currentliabilities', 17), ('equity liabilities', 12), ('equity', 0), ('equityliabilities', 0)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current assets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentassets | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent assets | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent liabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current assets | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current liabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity and liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity | score 0
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equityandliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentassets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentliabilities | score 69
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Current Liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD currentassets | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current liabilities | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD currentliabilities | score 84
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent assets | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentassets | score 54
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current assets | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current liabilities | score 88
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentassets | score 54
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity and liabilities | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equityandliabilities | score 62
2023-08-17 10:23:28+0530 - sLogger - DEBUG - NON CURRENT LIABILITIES | [('current liabilities', 88), ('currentliabilities', 67), ('noncurrent liabilities', 62), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('currentassets', 53), ('equity and liabilities', 51), ('liabilities', 50), ('noncurrentassets', 48), ('current assets', 45), ('noncurrent assets', 39), ('equityliabilities', 31), ('equityandliabilities', 28), ('equity', 25), ('assets', 17)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD currentliabilities | score 88
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 70
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 98
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD non current assets | score 73
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD non current liabilities | score 100
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 67
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text NON CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 60
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Employee Benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD current assets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD currentassets | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD current liabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD currentliabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrent assets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD non current assets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD non current liabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD equity and liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD equity | score 45
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Employee Benefits | MATCH WORD equityandliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentassets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentliabilities | score 69
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Non Current Liabilities | [('current liabilities', 74), ('currentliabilities', 55), ('noncurrent liabilities', 53), ('currentassets', 50), ('noncurrentliabilities', 50), ('equity liabilities', 49), ('noncurrentassets', 46), ('equity and liabilities', 44), ('liabilities', 40), ('current assets', 38), ('noncurrent assets', 32), ('equityandliabilities', 29), ('equityliabilities', 25), ('equity', 20), ('assets', 14)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD currentassets | score 56
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD current liabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD currentliabilities | score 85
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD noncurrent assets | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD noncurrentassets | score 62
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD noncurrent liabilities | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD non current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD non current liabilities | score 95
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD noncurrentliabilities | score 84
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD noncurrentassets | score 62
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD noncurrentliabilities | score 84
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD equity and liabilities | score 64
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Non Current Liabilities | MATCH WORD equityandliabilities | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current assets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD currentassets | score 27
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD currentliabilities | score 69
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentassets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current assets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentassets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Net Assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD current assets | score 75
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD currentassets | score 70
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD current liabilities | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD currentliabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD noncurrent assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD noncurrentassets | score 72
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD noncurrent liabilities | score 44
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD non current assets | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD non current liabilities | score 42
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD noncurrentliabilities | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD noncurrentassets | score 72
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD noncurrentliabilities | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD equity and liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Net Assets | MATCH WORD equityandliabilities | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - EQUITY | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current assets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD currentassets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD currentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent assets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentassets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current assets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current liabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentassets | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentliabilities | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity and liabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity | score 100
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equityandliabilities | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Share Capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD current assets | score 37
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD currentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD currentliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD noncurrent assets | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD noncurrentassets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD noncurrent liabilities | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD non current assets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD non current liabilities | score 41
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD noncurrentliabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD noncurrentassets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD noncurrentliabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD equity and liabilities | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD equity | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Share Capital | MATCH WORD equityandliabilities | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Retained Earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD current assets | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD currentassets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD current liabilities | score 39
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD currentliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrent assets | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD non current assets | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD non current liabilities | score 35
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentassets | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equity and liabilities | score 46
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equity | score 30
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equityandliabilities | score 43
2023-08-17 10:23:28+0530 - sLogger - DEBUG - Total Equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current assets | score 31
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentassets | score 32
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent assets | score 34
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current assets | score 33
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current liabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity and liabilities | score 86
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity | score 90
2023-08-17 10:23:28+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equityandliabilities | score 57
2023-08-17 10:23:28+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-17 10:23:28+0530 - sLogger - DEBUG - set_section_details started
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM OPERATING ACTIVITIES | operating cash flow before working capital changes
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Receipts from Customers | adiustments for movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Paid to Suppliers and Employees | changes in operating assets and liabilities
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest Received | movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash from Operations | movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest Paid | movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income Taxes Paid | changes in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash from/lused in) Operating Activities | adiustments for movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM INVESTING ACTIVITIES | operating cash flow before working capital changes
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of Property, Plant and Equipment 9 | changes in operating assets and liabilities
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of Intangibles | changes in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash (used in) Investing Activities | adjustments for increase decrease in operating liabilities
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM FINANCING ACTIVITIES | operating cash flow before working capital changes
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments of Lease Liabilities | changes in operating assets and liabilities
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of Dividends | movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash used in Financing Activities | adjustments for increase decrease in operating assets
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Increase/IDecrease) in Cash and Cash Equivalents | adjustments for increase decrease in operating assets
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the Beginning of the Year | changes in operating assets and liabilities
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effect of Movements in Exchange Rates on Cash Held | adiustments for movements in working capital
2023-08-17 10:23:28+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the End of the Year | changes in operating assets and liabilities
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: ''
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_utils.py,  function: find_next_note_subnote
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: ''
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: 'value'
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: 'year'
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: 'value'
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-17 10:23:29+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:23:29+0530 - sLogger - ERROR - error occured: 'value'
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-17 10:23:30+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-17 10:23:30+0530 - sLogger - ERROR - error occured: 'value'
2023-08-17 10:23:30+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 6875765.0, 'line_item_label': ['Cash and Cash Equivalents'], 'note_numbers': ['6'], 'line_item_value': [6875765.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 8689562.0, 'line_item_label': ['Cash and Cash Equivalents'], 'note_numbers': ['6'], 'line_item_value': [8689562.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 4355217.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [4355217.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 3747423.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [3747423.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit ', ' Vehicles ', ' Demonstrator units ', ' Training Vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 58), (' stores and other consumables at cost ', 52), (' provision for inventory obsolescence ', 43), (' parts and accessories (at cost) ', 43), (' cranes - in transit ', 38), (' stock in transit ', 38), (' inventories ', 33), (' Vehicles ', 33), (' Training Vehicles', 33), (' work in progress ', 31), (' Demonstrator units ', 31), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' spare parts ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none spare parts at cost , res_fuzz_match = [(' spare parts ', 100), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 50), (' work in progress ', 46), (' cranes - in transit ', 46), (' finished goods at cost ', 44), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' Demonstrator units ', 38), (' provision for inventory obsolescence ', 35), (' goods in transit ', 33), (' inventories ', 33), (' Training Vehicles', 33), (' stock in transit ', 31), (' finished goods ', 27), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none allowance for obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 61), (' stores and other consumables at cost ', 48), (' work in progress ', 46), ('raw materials ', 40), (' raw materials ', 40), (' finished goods at cost ', 38), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33), (' inventories ', 33), (' Vehicles ', 33), (' Training Vehicles', 33), (' cranes - in transit ', 31), (' stock in transit ', 31), (' Demonstrator units ', 31), (' spare parts ', 30), (' finished goods ', 27), (' cranes ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none stock in transit at cost , res_fuzz_match = [(' stock in transit ', 100), (' goods in transit ', 75), (' cranes - in transit ', 69), (' cranes ', 60), (' stores and other consumables at cost ', 52), (' Training Vehicles', 50), (' parts and accessories (at cost) ', 48), (' finished goods at cost ', 44), (' inventories ', 44), (' provision for inventory obsolescence ', 43), ('raw materials ', 40), (' raw materials ', 40), (' work in progress ', 38), (' Demonstrator units ', 38), (' finished goods ', 36), (' Vehicles ', 33), (' spare parts ', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 58), (' stores and other consumables at cost ', 52), (' provision for inventory obsolescence ', 43), (' parts and accessories (at cost) ', 43), (' cranes - in transit ', 38), (' stock in transit ', 38), (' inventories ', 33), (' Vehicles ', 33), (' Training Vehicles', 33), (' work in progress ', 31), (' Demonstrator units ', 31), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' spare parts ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none spare parts at cost , res_fuzz_match = [(' spare parts ', 100), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 50), (' work in progress ', 46), (' cranes - in transit ', 46), (' finished goods at cost ', 44), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' Demonstrator units ', 38), (' provision for inventory obsolescence ', 35), (' goods in transit ', 33), (' inventories ', 33), (' Training Vehicles', 33), (' stock in transit ', 31), (' finished goods ', 27), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none allowance for obsolescence , res_fuzz_match = [(' provision for inventory obsolescence ', 61), (' stores and other consumables at cost ', 48), (' work in progress ', 46), ('raw materials ', 40), (' raw materials ', 40), (' finished goods at cost ', 38), (' parts and accessories (at cost) ', 35), (' goods in transit ', 33), (' inventories ', 33), (' Vehicles ', 33), (' Training Vehicles', 33), (' cranes - in transit ', 31), (' stock in transit ', 31), (' Demonstrator units ', 31), (' spare parts ', 30), (' finished goods ', 27), (' cranes ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none stock in transit at cost , res_fuzz_match = [(' stock in transit ', 100), (' goods in transit ', 75), (' cranes - in transit ', 69), (' cranes ', 60), (' stores and other consumables at cost ', 52), (' Training Vehicles', 50), (' parts and accessories (at cost) ', 48), (' finished goods at cost ', 44), (' inventories ', 44), (' provision for inventory obsolescence ', 43), ('raw materials ', 40), (' raw materials ', 40), (' work in progress ', 38), (' Demonstrator units ', 38), (' finished goods ', 36), (' Vehicles ', 33), (' spare parts ', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' stores and other consumables at cost ', 50), (' cranes - in transit ', 50), (' inventories ', 44), (' finished goods at cost ', 40), (' goods in transit ', 40), (' provision for inventory obsolescence ', 40), (' cranes ', 40), (' parts and accessories (at cost) ', 40), (' stock in transit ', 40), (' Demonstrator units ', 40), (' finished goods ', 32), (' work in progress ', 30), (' spare parts ', 30), (' Training Vehicles', 30), ('raw materials ', 21), (' raw materials ', 21), (' Vehicles ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Vehicles ', 0), (' Demonstrator units ', 0), (' Training Vehicles', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 5, 7, 8, 12], 'score': [100, 100, 100, 100, 100, 100], 'value': [3795639.0, 118858.0, 45041.0, 4331629.0, 86745.0, 42528.0], 'label': ['None Finished goods at cost', 'None Spare parts at cost', 'None Stock in transit at cost', 'None Finished goods at cost', 'None Spare parts at cost', 'None Stock in transit at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5], 'score': 100, 'value': 2532065.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables', 'Prepayments'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 2417278.0, 114787.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables', 22), (' prepayments ', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables', 34), (' prepayments ', 21)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5], 'score': 100, 'value': 2809721.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables', 'Prepayments'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 2626075.0, 183646.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables', 21), ('other current assets ', 16), (' other financial assets ', 16), (' other assets ', 12), (' biological assets ', 11)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 2417278.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 2417278.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' trade and other receivables', 22), (' income tax receivable from related parties ', 16), (' deferred operating expenditure ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' trade and other receivables', 34), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets ', 36), (' financial assets ', 35), (' income tax receivable from related parties ', 33), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' deferred operating expenditure ', 19)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' other assets ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' other assets ', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables', 26), (' income tax receivable from related parties ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables', 21), ('other current assets ', 16), (' other financial assets ', 16), (' other assets ', 12), (' biological assets ', 11)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 2626075.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and Other Receivables'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 2626075.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32), ('plant and equipment ', 31), (' plant and equipment ', 31), (' Property ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 456920.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456920.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32), ('plant and equipment ', 31), (' plant and equipment ', 31), (' Property ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 456761.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456761.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Pipeline Asset ', 38), ('depreciatio', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Development properties ', 38), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings', 27), (' Subsea ', 17)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), ('depreciatio', 27), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('depreciatio', 30), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('depreciatio', 36), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19), ('depreciatio', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 64), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation ', 100), ('depreciatio', 73), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), ('accumulated depreciation ', 48), (' land and improvement ', 47), (' Mining properties ', 46), (' Capitalised pre stripping costs ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Leasehold buildings', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Development properties ', 32), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' under construction ', 47), ('accumulated depreciation ', 41), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), ('depreciatio', 36), (' Other assets ', 36), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings', 73), (' Other assets ', 64), (' land and improvement ', 60), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Development properties ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), ('depreciatio', 36), ('accumulated depreciation ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 10, 11, 12, 13, 14, 15, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 62, 63, 64, 65, 66, 67, 68, 69], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-756862.0, -86981.0, 63990.0, -779853.0, -779853.0, -65245.0, 161642.0, -683456.0, -423381.0, -75729.0, 129228.0, -369882.0, -369882.0, -58901.0, 2668.0, -426115.0, 0.0, -8908.0, 0.0, 0.0, 0.0, -8948.0, 4095.0, 0.0, -1308401.0, -171618.0, 193218.0, -1286801.0, -1286801.0, -133094.0, 168405.0, -1251490.0], 'label': ['ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023', 'ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023', 'ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023', 'ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('gross', 40), ('cost', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('cost', 50), ('net book value', 38), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 31), ('gross', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 18, 19, 20, 21, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 54, 55, 56, 57, 58, 59, 60, 61], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [904929.0, 38023.0, -63990.0, 878962.0, 878962.0, 74198.0, -161642.0, 791518.0, 796943.0, 14005.0, -130723.0, 680225.0, 680225.0, 58737.0, -2668.0, 736294.0, 0.0, 7900.0, 0.0, 0.0, 0.0, 0.0, -4095.0, 0.0, 1878506.0, 59928.0, -194713.0, 1743721.0, 1743721.0, 132935.0, -168405.0, 1708251.0], 'label': ['COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023', 'COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023', 'COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023', 'COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 456920.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456920.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('plant property equipment', 32), ('property plant equipment', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 456761.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456761.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('Work in progress ', 46), (' plant property equipment ', 41), (' investment property', 40), (' property plant equipment ', 35), (' plant and equipment ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 456920.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456920.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('Work in progress ', 46), (' plant property equipment ', 41), (' investment property', 40), (' property plant equipment ', 35), (' plant and equipment ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 456761.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456761.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress ', ' WIP'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 33), (' capital works in progress ', 32), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' work in progress ', 46), (' capital works in progress ', 42), ('construction in progress ', 39)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress ', 35), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress ', 40), (' WIP', 33), (' work in progress ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress ', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress ', 29), (' work in progress ', 15), (' WIP', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' capital works in progress ', 32), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress ', 37), ('construction in progress ', 34), (' WIP', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' WIP', 67), ('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress ', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' WIP', 33), (' work in progress ', 31), (' capital works in progress ', 26)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' capital works in progress ', 44), ('construction in progress ', 39), (' WIP', 33), (' work in progress ', 31)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' capital works in progress ', 39), ('construction in progress ', 33), (' WIP', 33), (' work in progress ', 23)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' WIP', 67), (' capital works in progress ', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('tangible assets', 53)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('tangible assets', 57)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 80, 'value': 195195.0, 'line_item_label': ['Intangible Assets'], 'note_numbers': ['11'], 'line_item_value': [195195.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('tangible assets', 53)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('tangible assets', 57)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 80, 'value': 110456.0, 'line_item_label': ['Intangible Assets'], 'note_numbers': ['11'], 'line_item_value': [110456.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' intangible asset', 67), (' goodwill on consolidation ', 31), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 195195.0, 'line_item_label': ['Intangible Assets'], 'note_numbers': ['11'], 'line_item_value': [195195.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' intangible asset', 67), (' goodwill on consolidation ', 31), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 110456.0, 'line_item_label': ['Intangible Assets'], 'note_numbers': ['11'], 'line_item_value': [110456.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost addition , res_fuzz_match = [(' goodwill on consolidation', 40), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2021 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' goodwill on consolidation', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses disposals , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' goodwill on consolidation', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts total , res_fuzz_match = [(' goodwill on consolidation', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts note 12 trade and other payables , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost addition , res_fuzz_match = [(' goodwill on consolidation', 40), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('goodwill ', 43), (' goodwill on consolidation', 36)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('goodwill ', 29), (' goodwill on consolidation', 25)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2021 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' goodwill on consolidation', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses disposals , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' goodwill on consolidation', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 1 april 2022 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 31 march 2023 , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts total , res_fuzz_match = [(' goodwill on consolidation', 38), ('goodwill ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts note 12 trade and other payables , res_fuzz_match = [(' goodwill on consolidation', 31), ('goodwill ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('goodwill ', 40), (' goodwill on consolidation', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-17 10:23:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('intangible assets ', 67), (' intangible assets under development ', 47), (' intangible under development ', 41), (' plant property equipment', 41), ('property plant equipment', 35)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 652115.0, 'line_item_label': ['Property, Plant and Equipment', 'Intangible Assets'], 'note_numbers': ['9', '11'], 'line_item_value': [456920.0, 195195.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('intangible assets ', 67), (' intangible assets under development ', 47), (' intangible under development ', 41), (' plant property equipment', 41), ('property plant equipment', 35)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 567217.0, 'line_item_label': ['Property, Plant and Equipment', 'Intangible Assets'], 'note_numbers': ['9', '11'], 'line_item_value': [456761.0, 110456.0]}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40), (' computer software ', 36), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' mining rights ', 50), ('Other intangibles ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 37), (' computer software ', 36), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' consumer contracts ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), ('Other intangibles ', 25), (' software ', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' mining rights ', 50), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' development and software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' mining rights ', 50), (' water licenses', 50), (' software ', 43), (' computer software ', 43), (' development and software ', 42), (' consumer contracts ', 40), ('Other intangibles ', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:30+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' software ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost addition , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2021 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses disposals , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2022 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2022 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2023 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts total , res_fuzz_match = [(' computer software ', 54), (' software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 39), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts note 12 trade and other payables , res_fuzz_match = [('Other intangibles ', 58), (' development and software ', 53), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), (' water licenses', 42), (' mining rights ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' computer software ', 100), (' consumer contracts ', 43), ('Other intangibles ', 29), (' mining rights ', 14), (' water licenses', 14)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost addition , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' mining rights ', 30), (' water licenses', 30)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2021 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses disposals , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2022 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2022 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2023 , res_fuzz_match = [(' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' software ', 29)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts total , res_fuzz_match = [(' computer software ', 54), (' software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 39), (' water licenses', 33)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = carrying amounts note 12 trade and other payables , res_fuzz_match = [('Other intangibles ', 58), (' development and software ', 53), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), (' water licenses', 42), (' mining rights ', 40)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-17 10:23:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [644026.0, 41620.0, -231190.0, 454456.0, 454456.0, 454456.0, -406236.0, -84215.0, 231190.0, -259261.0, -259261.0, -84739.0, -344000.0, 195195.0, 110456.0, 2023.0, 0.0], 'label': ['Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software', 'Software'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('donations', 18)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('donations', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('donations', 18)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('donations', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' investment in associate', 48), ('joint ventures and associates', 47), (' investments accounted for using the equity method', 47), ('derivative financial instruments', 41), (' investment in joint venture', 41), ('investment', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' investment in associate', 48), ('joint ventures and associates', 47), (' investments accounted for using the equity method', 47), ('derivative financial instruments', 41), (' investment in joint venture', 41), ('investment', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred tax', 23), ('deferred charges', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 427472.0, 'line_item_label': ['Deferred Tax Asset'], 'note_numbers': ['5'], 'line_item_value': [427472.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred tax', 23), ('deferred charges', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 297989.0, 'line_item_label': ['Deferred Tax Asset'], 'note_numbers': ['5'], 'line_item_value': [297989.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none allowance for stock obsolescence , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none accrued expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none carried forward losses , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none 2022 tax assets , res_fuzz_match = [('deferred tax assets', 79), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2021 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none allowance for stock obsolescence , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none accrued expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none carried forward losses , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none 2022 tax assets , res_fuzz_match = [('deferred tax assets', 79), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none allowance for stock obsolescence , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none accrued expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none carried forward losses , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none 2022 tax assets , res_fuzz_match = [('deferred tax assets', 79), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2022 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 16, 17, 18, 19, 20], 'score': [100, 100, 100, 100, 100, 100, 100], 'value': [-8624.0, 31706.0, 113244.0, 81824.0, 87573.0, 121749.0, 427472.0], 'label': ['Net deferred tax assets at31 March 2022 $', 'Net deferred tax assets at31 March 2022 $', 'Net deferred tax assets at31 March 2022 $', 'Net deferred tax assets at31 March 2022 $', 'Net deferred tax assets at31 March 2022 $', 'Net deferred tax assets at31 March 2022 $', 'Net deferred tax assets at31 March 2022 $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none allowance for stock obsolescence , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none accrued expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none carried forward losses , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none tax assets , res_fuzz_match = [('deferred tax assets', 79), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net balance at 1 april 2022 $ , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none allowance for stock obsolescence , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none accrued expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none carried forward losses , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none tax assets , res_fuzz_match = [('deferred tax assets', 79), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = recognised in profit and loss $ , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none allowance for stock obsolescence , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none accrued expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none other items , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none carried forward losses , res_fuzz_match = [('deferred tax assets', 41), (' deferred tax balances', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none tax assets , res_fuzz_match = [('deferred tax assets', 79), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets at31 march 2023 $ , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 16, 17, 18, 19, 20], 'score': [100, 100, 100, 100, 100, 100, 100], 'value': [6402.0, 63634.0, 113145.0, 99487.0, 15321.0, 0.0, 297989.0], 'label': ['Net deferred tax assets at31 March 2023 $', 'Net deferred tax assets at31 March 2023 $', 'Net deferred tax assets at31 March 2023 $', 'Net deferred tax assets at31 March 2023 $', 'Net deferred tax assets at31 March 2023 $', 'Net deferred tax assets at31 March 2023 $', 'Net deferred tax assets at31 March 2023 $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense current year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense changes in estimates related to prior year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense tax losses utilised during the period , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense total , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense temporary differences resulting in deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense deferred tax assets resulting from tax losses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense 2022 nan , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense total income tax expense , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit accounting profit before income tax , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit at the statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit effect of tax rates in foreign jurisdictions , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit prior year under/lover) provision , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit non-deductible expenses , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit income tax expense , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense current year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense changes in estimates related to prior year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense tax losses utilised during the period , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current tax expense total , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense temporary differences resulting in deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense deferred tax assets resulting from tax losses , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense 2022 nan , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = deferred tax expense total income tax expense , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit accounting profit before income tax , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit at the statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit effect of tax rates in foreign jurisdictions , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit prior year under/lover) provision , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit non-deductible expenses , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = numerical between tax expense and pre-tax net profit income tax expense , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 18, 19], 'score': [100, 100, 100, 100], 'value': [129483.0, 0.0, 305723.0, 121749.0], 'label': ['DEFERRED TAX EXPENSE Temporary differences resulting in deferred tax assets', 'DEFERRED TAX EXPENSE Deferred tax assets resulting from tax losses', 'DEFERRED TAX EXPENSE Temporary differences resulting in deferred tax assets', 'DEFERRED TAX EXPENSE Deferred tax assets resulting from tax losses'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' other non-current assets', 67), (' other non-current assets', 67), (' financial assets', 53), (' leased assets', 52), (' other assets', 50), (' exploration and evaluation expenditure', 36), ('non-current', 33), (' loan receivables', 29), (' leases', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 80, 'value': 195195.0, 'line_item_label': ['Intangible Assets'], 'note_numbers': ['11'], 'line_item_value': [195195.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' other non-current assets', 67), (' other non-current assets', 67), (' financial assets', 53), (' leased assets', 52), (' other assets', 50), (' exploration and evaluation expenditure', 36), ('non-current', 33), (' loan receivables', 29), (' leases', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 80, 'value': 110456.0, 'line_item_label': ['Intangible Assets'], 'note_numbers': ['11'], 'line_item_value': [110456.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost addition , res_fuzz_match = [(' allowance for expected credit losses', 60), (' electricity derivatives at fair value', 50), (' warehouse and office equipment', 50), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 30), (' defined benefit plans', 30), (' total properties', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' allowance for expected credit losses', 45), (' electricity derivatives at fair value', 45), (' total properties', 45), (' warehouse and office equipment', 45), (' right-of-use-assets', 36), (' motor vehicles', 36), ('finance receivables', 27), (' defined benefit plans', 27), (' exploration and evaluation expenditure', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), ('finance receivables', 38), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses disposals , res_fuzz_match = [(' allowance for expected credit losses', 46), (' exploration and evaluation expenditure', 44), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), ('finance receivables', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), ('finance receivables', 38), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' defined benefit plans', 44), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 40), (' allowance for expected credit losses', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' defined benefit plans', 44), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' allowance for expected credit losses', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts total , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' motor vehicles', 43), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' total properties', 36), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), ('finance receivables', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts note 12 trade and other payables , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' defined benefit plans', 44), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), ('finance receivables', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost addition , res_fuzz_match = [(' allowance for expected credit losses', 60), (' electricity derivatives at fair value', 50), (' warehouse and office equipment', 50), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 30), (' defined benefit plans', 30), (' total properties', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' allowance for expected credit losses', 45), (' electricity derivatives at fair value', 45), (' total properties', 45), (' warehouse and office equipment', 45), (' right-of-use-assets', 36), (' motor vehicles', 36), ('finance receivables', 27), (' defined benefit plans', 27), (' exploration and evaluation expenditure', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2021 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), ('finance receivables', 38), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses disposals , res_fuzz_match = [(' allowance for expected credit losses', 46), (' exploration and evaluation expenditure', 44), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), ('finance receivables', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2022 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses amortisation , res_fuzz_match = [(' allowance for expected credit losses', 46), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), ('finance receivables', 38), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment losses balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 46), (' allowance for expected credit losses', 46), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' defined benefit plans', 44), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 40), (' allowance for expected credit losses', 33), (' right-of-use-assets', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' defined benefit plans', 44), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 36), (' total properties', 36), (' right-of-use-assets', 33), (' allowance for expected credit losses', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts total , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' motor vehicles', 43), (' exploration and evaluation expenditure', 39), (' warehouse and office equipment', 39), (' total properties', 36), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33), ('finance receivables', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = carrying amounts note 12 trade and other payables , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' defined benefit plans', 44), (' total properties', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), ('finance receivables', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [644026.0, 41620.0, -231190.0, 454456.0, 454456.0, 454456.0, -406236.0, -84215.0, 231190.0, -259261.0, -259261.0, -84739.0, -344000.0, 195195.0, 110456.0, 2022.0, 0.0], 'label': ['Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' loans and borrowings ', 33), ('  leases ', 29), (' bank overdraft ', 24), (' cash and cash equivalents ', 17), (' interest bearing liabilites ', 16), (' lease liabilities ', 14), (' cash overdraft ', 12), ('short term debt ', 0), (' short-term debt ', 0), (' borrowings ', 0), (' shortterm debt ', 0), (' shortterm borrowings ', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 385289.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['10'], 'line_item_value': [385289.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' cash overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' cash overdraft ', 21), (' borrowings ', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' loans and borrowings ', 33), ('  leases ', 29), (' bank overdraft ', 24), (' cash and cash equivalents ', 17), (' interest bearing liabilites ', 16), (' lease liabilities ', 14), (' cash overdraft ', 12), ('short term debt ', 0), (' short-term debt ', 0), (' borrowings ', 0), (' shortterm debt ', 0), (' shortterm borrowings ', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 369845.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['10'], 'line_item_value': [369845.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none less than one year , res_fuzz_match = [(' not later than one year ', 83), (' leases ', 75), (' not later than 1 year ', 68), ('bank borrowings ', 45), (' lease liabilities ', 45), (' balance at the end of period ', 45), (' utilised bank borrowings ', 44), (' bank overdraft ', 44), (' secured long-term bank loans ', 43), (' loans from related party ', 43), (' cash overdraft', 43), (' lease liabilities - current ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none one to five years , res_fuzz_match = [(' not later than one year ', 56), (' leases ', 50), (' not later than 1 year ', 50), (' loans from related party ', 50), (' balance at the end of period ', 44), (' secured long-term bank loans ', 39), (' bank overdraft ', 37), (' lease liabilities ', 36), (' cash overdraft', 36), (' lease liabilities - current ', 28), ('bank borrowings ', 27), (' utilised bank borrowings ', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total undiscounted lease liabilities , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 100), (' not later than 1 year ', 63), (' not later than one year ', 61), (' lease liabilities - current ', 58), (' loans from related party ', 48), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' secured long-term bank loans ', 42), (' utilised bank borrowings ', 39), (' cash overdraft', 36), ('bank borrowings ', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total , res_fuzz_match = [(' not later than 1 year ', 63), (' not later than one year ', 61), (' bank overdraft ', 50), (' loans from related party ', 48), (' lease liabilities ', 45), (' balance at the end of period ', 43), (' cash overdraft', 43), (' secured long-term bank loans ', 38), (' lease liabilities - current ', 37), (' utilised bank borrowings ', 33), ('bank borrowings ', 27), (' leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years (e) amounts recognised in statement of cash flows , res_fuzz_match = [(' not later than 1 year ', 63), (' not later than one year ', 61), (' loans from related party ', 48), ('bank borrowings ', 45), (' lease liabilities ', 45), (' secured long-term bank loans ', 43), (' bank overdraft ', 43), (' cash overdraft', 43), (' lease liabilities - current ', 42), (' balance at the end of period ', 38), (' utilised bank borrowings ', 33), (' leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total cash outflow for leases , res_fuzz_match = [(' leases ', 100), (' not later than 1 year ', 63), (' not later than one year ', 61), (' cash overdraft', 50), (' loans from related party ', 48), ('bank borrowings ', 45), (' lease liabilities ', 45), (' utilised bank borrowings ', 44), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' secured long-term bank loans ', 42), (' lease liabilities - current ', 42)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none less than one year , res_fuzz_match = [(' not later than one year ', 83), (' leases ', 75), (' not later than 1 year ', 68), ('bank borrowings ', 45), (' lease liabilities ', 45), (' balance at the end of period ', 45), (' utilised bank borrowings ', 44), (' bank overdraft ', 44), (' secured long-term bank loans ', 43), (' loans from related party ', 43), (' cash overdraft', 43), (' lease liabilities - current ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none one to five years , res_fuzz_match = [(' not later than one year ', 56), (' leases ', 50), (' not later than 1 year ', 50), (' loans from related party ', 50), (' balance at the end of period ', 44), (' secured long-term bank loans ', 39), (' bank overdraft ', 37), (' lease liabilities ', 36), (' cash overdraft', 36), (' lease liabilities - current ', 28), ('bank borrowings ', 27), (' utilised bank borrowings ', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total undiscounted lease liabilities , res_fuzz_match = [(' leases ', 100), (' lease liabilities ', 100), (' not later than 1 year ', 63), (' not later than one year ', 61), (' lease liabilities - current ', 58), (' loans from related party ', 48), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' secured long-term bank loans ', 42), (' utilised bank borrowings ', 39), (' cash overdraft', 36), ('bank borrowings ', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total , res_fuzz_match = [(' not later than 1 year ', 63), (' not later than one year ', 61), (' bank overdraft ', 50), (' loans from related party ', 48), (' lease liabilities ', 45), (' balance at the end of period ', 43), (' cash overdraft', 43), (' secured long-term bank loans ', 38), (' lease liabilities - current ', 37), (' utilised bank borrowings ', 33), ('bank borrowings ', 27), (' leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years (e) amounts recognised in statement of cash flows , res_fuzz_match = [(' not later than 1 year ', 63), (' not later than one year ', 61), (' loans from related party ', 48), ('bank borrowings ', 45), (' lease liabilities ', 45), (' secured long-term bank loans ', 43), (' bank overdraft ', 43), (' cash overdraft', 43), (' lease liabilities - current ', 42), (' balance at the end of period ', 38), (' utilised bank borrowings ', 33), (' leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total cash outflow for leases , res_fuzz_match = [(' leases ', 100), (' not later than 1 year ', 63), (' not later than one year ', 61), (' cash overdraft', 50), (' loans from related party ', 48), ('bank borrowings ', 45), (' lease liabilities ', 45), (' utilised bank borrowings ', 44), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' secured long-term bank loans ', 42), (' lease liabilities - current ', 42)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 6, 8, 11], 'score': [83, 100, 100, 83, 100, 100], 'value': [350581.0, 1325113.0, -310598.0, 333149.0, 1575786.0, -293162.0], 'label': ['None Less than one year', 'More than five years Total undiscounted lease liabilities', 'More than five years Total cash outflow for leases', 'None Less than one year', 'More than five years Total undiscounted lease liabilities', 'More than five years Total cash outflow for leases'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16), ('trade payable', 13), ('other trade payables', 10)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1612088.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['12'], 'line_item_value': [1612088.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16), ('trade payable', 13), ('other trade payables', 10)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1976554.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['12'], 'line_item_value': [1976554.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', '  accounts payable - trade ', ' Related party payables ', ' trade payables - related parties'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [('trade creditors ', 100), (' trade payables ', 67), (' Related party payables ', 61), ('  accounts payable - trade ', 60), (' trade and other payables ', 59), (' other trade payables ', 56), (' trade payables - other parties ', 54), (' trade payables - related parties', 54), (' payables to related parties ', 44), (' amounts payable to controlling entity ', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [('trade creditors ', 100), (' trade payables ', 67), (' Related party payables ', 61), ('  accounts payable - trade ', 60), (' trade and other payables ', 59), (' other trade payables ', 56), (' trade payables - other parties ', 54), (' trade payables - related parties', 54), (' payables to related parties ', 44), (' amounts payable to controlling entity ', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none unearned income , res_fuzz_match = [(' amounts payable to controlling entity ', 41), ('trade creditors ', 36), (' trade and other payables ', 35), (' trade payables - other parties ', 35), (' other trade payables ', 29), (' payables to related parties ', 29), ('  accounts payable - trade ', 29), (' Related party payables ', 29), (' trade payables - related parties', 29), (' trade payables ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none amounts due to ultimate parent entity , res_fuzz_match = [(' amounts payable to controlling entity ', 57), (' trade payables - other parties ', 50), (' trade payables - related parties', 46), (' trade and other payables ', 45), ('  accounts payable - trade ', 45), (' other trade payables ', 44), (' payables to related parties ', 44), (' Related party payables ', 44), ('trade creditors ', 43), (' trade payables ', 42)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables , res_fuzz_match = [(' trade and other payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' Related party payables ', 61), ('trade creditors ', 57), ('  accounts payable - trade ', 50), (' trade payables - related parties', 50), (' payables to related parties ', 44), (' amounts payable to controlling entity ', 39)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [('trade creditors ', 100), (' trade payables ', 67), (' Related party payables ', 61), ('  accounts payable - trade ', 60), (' trade and other payables ', 59), (' other trade payables ', 56), (' trade payables - other parties ', 54), (' trade payables - related parties', 54), (' payables to related parties ', 44), (' amounts payable to controlling entity ', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [('trade creditors ', 100), (' trade payables ', 67), (' Related party payables ', 61), ('  accounts payable - trade ', 60), (' trade and other payables ', 59), (' other trade payables ', 56), (' trade payables - other parties ', 54), (' trade payables - related parties', 54), (' payables to related parties ', 44), (' amounts payable to controlling entity ', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none unearned income , res_fuzz_match = [(' amounts payable to controlling entity ', 41), ('trade creditors ', 36), (' trade and other payables ', 35), (' trade payables - other parties ', 35), (' other trade payables ', 29), (' payables to related parties ', 29), ('  accounts payable - trade ', 29), (' Related party payables ', 29), (' trade payables - related parties', 29), (' trade payables ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none amounts due to ultimate parent entity , res_fuzz_match = [(' amounts payable to controlling entity ', 57), (' trade payables - other parties ', 50), (' trade payables - related parties', 46), (' trade and other payables ', 45), ('  accounts payable - trade ', 45), (' other trade payables ', 44), (' payables to related parties ', 44), (' Related party payables ', 44), ('trade creditors ', 43), (' trade payables ', 42)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables , res_fuzz_match = [(' trade and other payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' Related party payables ', 61), ('trade creditors ', 57), ('  accounts payable - trade ', 50), (' trade payables - related parties', 50), (' payables to related parties ', 44), (' amounts payable to controlling entity ', 39)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), ('  accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5, 6, 9], 'score': [100, 100, 100, 100, 100, 100], 'value': [617441.0, 125801.0, 1976554.0, 528184.0, 100957.0, 1612088.0], 'label': ['None Trade Creditors and accruals GST Payable', 'None Trade Creditors and accruals GST Payable', 'None Total Trade and Other Payables', 'None Trade Creditors and accruals GST Payable', 'None Trade Creditors and accruals GST Payable', 'None Total Trade and Other Payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1612088.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['12'], 'line_item_value': [1612088.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1976554.0, 'line_item_label': ['Trade and Other Payables'], 'note_numbers': ['12'], 'line_item_value': [1976554.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 58)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 58)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none unearned income , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none amounts due to ultimate parent entity , res_fuzz_match = [('accrued expenses ', 42), (' interest accrued', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 58)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' interest accrued', 64), ('accrued expenses ', 58)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none unearned income , res_fuzz_match = [(' interest accrued', 36), ('accrued expenses ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none amounts due to ultimate parent entity , res_fuzz_match = [('accrued expenses ', 42), (' interest accrued', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables , res_fuzz_match = [(' interest accrued', 43), ('accrued expenses ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' provision', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 62428.0, 'line_item_label': ['LIABILITIES', 'Current Tax Liability'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 62428.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' tax ', 33), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision', 33), ('current tax liabilities ', 27), (' income tax payable ', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' provision', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 435171.0, 'line_item_label': ['LIABILITIES', 'Current Tax Liability'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 435171.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' financial liabilities', 35), (' other financial liabilities', 26), (' foreign exchange contract liability', 18), ('other current liabilities', 17), (' other current liabilities', 17), (' trade and other payables', 16), (' deferred revenue', 13), (' employee benefits', 11), ('provisions', 0), (' customer deposits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 4], 'score': 100, 'value': 1981456.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and Other Payables', 'Current Tax Liability', 'Employee Benefits'], 'note_numbers': [nan, '12', nan, '13'], 'line_item_value': [0.0, 1612088.0, 62428.0, 306940.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' financial liabilities', 35), (' other financial liabilities', 26), (' foreign exchange contract liability', 18), ('other current liabilities', 17), (' other current liabilities', 17), (' trade and other payables', 16), (' deferred revenue', 13), (' employee benefits', 11), ('provisions', 0), (' customer deposits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 4], 'score': 100, 'value': 2794689.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and Other Payables', 'Current Tax Liability', 'Employee Benefits'], 'note_numbers': [nan, '12', nan, '13'], 'line_item_value': [0.0, 1976554.0, 435171.0, 382964.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' gst payables', 100), (' gst', 100), ('other creditors and accruals', 88), (' other creditors', 79), (' other creditors', 79), (' other creditors', 79), (' gst liabilities', 70), (' gst payable and accruals', 59), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' contract liabilites - current', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' make good provisions', 31), (' provisions - current', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' gst payables', 100), (' gst', 100), ('other creditors and accruals', 88), (' other creditors', 79), (' other creditors', 79), (' other creditors', 79), (' gst liabilities', 70), (' gst payable and accruals', 59), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' contract liabilites - current', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' make good provisions', 31), (' provisions - current', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none unearned income , res_fuzz_match = [(' abandonment and decommissioning costs', 59), (' warranty', 50), (' secured long-term bank loans', 47), (' current - liability for annual and long service leave', 47), (' employee benefits - payroll', 47), ('other creditors and accruals', 41), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' arising from service contracts', 41), (' forward exchange contracts', 41), (' total current employee benefits', 41), (' rebates', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' ultimate parent entity', 35), (' derivative contracts - at fair value', 35), (' loans from related party', 35), (' share of joint venture payables', 35), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 29), (' contract liabilites - current', 29), (' provision for associate funding', 29), (' make good provisions', 25), (' gst payables', 20), (' gst', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none amounts due to ultimate parent entity , res_fuzz_match = [(' ultimate parent entity', 100), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' total current employee benefits', 48), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' share of joint venture payables', 44), (' employee benefits - current', 43), (' provisions - current', 43), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' current - liability for annual and long service leave', 34), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' restructuring', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 60), (' forward exchange contracts', 50), (' total current employee benefits', 49), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 45), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' rebates', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' gst payables', 100), (' gst', 100), ('other creditors and accruals', 88), (' other creditors', 79), (' other creditors', 79), (' other creditors', 79), (' gst liabilities', 70), (' gst payable and accruals', 59), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' contract liabilites - current', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' make good provisions', 31), (' provisions - current', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none trade creditors and accruals gst payable , res_fuzz_match = [(' gst payables', 100), (' gst', 100), ('other creditors and accruals', 88), (' other creditors', 79), (' other creditors', 79), (' other creditors', 79), (' gst liabilities', 70), (' gst payable and accruals', 59), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' other related parties', 47), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' contract liabilites - current', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' warranty', 38), (' total current employee benefits', 38), (' ultimate parent entity', 37), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' make good provisions', 31), (' provisions - current', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none unearned income , res_fuzz_match = [(' abandonment and decommissioning costs', 59), (' warranty', 50), (' secured long-term bank loans', 47), (' current - liability for annual and long service leave', 47), (' employee benefits - payroll', 47), ('other creditors and accruals', 41), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - current', 41), (' arising from service contracts', 41), (' forward exchange contracts', 41), (' total current employee benefits', 41), (' rebates', 40), (' other', 40), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' ultimate parent entity', 35), (' derivative contracts - at fair value', 35), (' loans from related party', 35), (' share of joint venture payables', 35), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 29), (' contract liabilites - current', 29), (' provision for associate funding', 29), (' make good provisions', 25), (' gst payables', 20), (' gst', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none amounts due to ultimate parent entity , res_fuzz_match = [(' ultimate parent entity', 100), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' total current employee benefits', 48), (' loan payable to relayed party under tax funding agreement', 46), (' employee benefits - payroll', 45), (' share of joint venture payables', 44), (' employee benefits - current', 43), (' provisions - current', 43), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' derivative contracts - at fair value', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' current - liability for annual and long service leave', 34), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' provision for associate funding', 32), (' arising from service contracts', 32), (' make good provisions', 31), (' restructuring', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 60), (' forward exchange contracts', 50), (' total current employee benefits', 49), (' loan payable to relayed party under tax funding agreement', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 45), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' gst liabilities', 40), (' rebates', 40), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' warranty', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' arising from service contracts', 36), (' employee benefits - current', 35), (' gst', 33), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 5, 6, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [617441.0, 125801.0, 1054069.0, 1976554.0, 528184.0, 100957.0, 982947.0, 1612088.0], 'label': ['None Trade Creditors and accruals GST Payable', 'None Trade Creditors and accruals GST Payable', 'None Amounts due to ultimate parent entity', 'None Total Trade and Other Payables', 'None Trade Creditors and accruals GST Payable', 'None Trade Creditors and accruals GST Payable', 'None Amounts due to ultimate parent entity', 'None Total Trade and Other Payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('long term debt', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('long term debt', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 39), (' borrowings ', 33), (' loans and borrowings', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities ', 45), (' lease liability', 45), ('interest bearing loans and borrowings ', 40), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1126249.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['10'], 'line_item_value': [1126249.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [(' lease liabilities ', 73), (' lease liability', 73), ('interest bearing loans and borrowings ', 39), (' borrowings ', 33), (' loans and borrowings', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities ', 45), (' lease liability', 45), ('interest bearing loans and borrowings ', 40), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' lease liabilities ', 17), (' lease liability', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' lease liability', 100), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings ', 44), (' lease liabilities ', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings ', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 955768.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['10'], 'line_item_value': [955768.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' later than 1 year ', ' not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none less than one year , res_fuzz_match = [('leases ', 75), (' not later than 5 years', 68), (' later than 1 year ', 67), (' bank loan ', 56), (' lease liabilities - non-current ', 49), (' lease liabilities ', 45), (' lease liability ', 45), (' secured finance debt ', 35)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none one to five years , res_fuzz_match = [(' later than 1 year ', 53), ('leases ', 50), (' not later than 5 years', 50), (' bank loan ', 44), (' secured finance debt ', 38), (' lease liabilities ', 36), (' lease liability ', 36), (' lease liabilities - non-current ', 28)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total undiscounted lease liabilities , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 100), (' lease liability ', 100), (' not later than 5 years', 63), (' lease liabilities - non-current ', 58), (' later than 1 year ', 53), (' bank loan ', 44), (' secured finance debt ', 41)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total , res_fuzz_match = [(' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 45), (' lease liability ', 45), (' bank loan ', 44), (' secured finance debt ', 35), (' lease liabilities - non-current ', 32), ('leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years (e) amounts recognised in statement of cash flows , res_fuzz_match = [(' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 45), (' lease liability ', 45), (' bank loan ', 44), (' secured finance debt ', 41), (' lease liabilities - non-current ', 37), ('leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total cash outflow for leases , res_fuzz_match = [('leases ', 100), (' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 45), (' lease liability ', 45), (' lease liabilities - non-current ', 42), (' secured finance debt ', 35), (' bank loan ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none less than one year , res_fuzz_match = [('leases ', 75), (' not later than 5 years', 68), (' later than 1 year ', 67), (' bank loan ', 56), (' lease liabilities - non-current ', 49), (' lease liabilities ', 45), (' lease liability ', 45), (' secured finance debt ', 35)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none one to five years , res_fuzz_match = [(' later than 1 year ', 53), ('leases ', 50), (' not later than 5 years', 50), (' bank loan ', 44), (' secured finance debt ', 38), (' lease liabilities ', 36), (' lease liability ', 36), (' lease liabilities - non-current ', 28)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total undiscounted lease liabilities , res_fuzz_match = [('leases ', 100), (' lease liabilities ', 100), (' lease liability ', 100), (' not later than 5 years', 63), (' lease liabilities - non-current ', 58), (' later than 1 year ', 53), (' bank loan ', 44), (' secured finance debt ', 41)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total , res_fuzz_match = [(' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 45), (' lease liability ', 45), (' bank loan ', 44), (' secured finance debt ', 35), (' lease liabilities - non-current ', 32), ('leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years (e) amounts recognised in statement of cash flows , res_fuzz_match = [(' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 45), (' lease liability ', 45), (' bank loan ', 44), (' secured finance debt ', 41), (' lease liabilities - non-current ', 37), ('leases ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = more than five years total cash outflow for leases , res_fuzz_match = [('leases ', 100), (' later than 1 year ', 67), (' not later than 5 years', 63), (' lease liabilities ', 45), (' lease liability ', 45), (' lease liabilities - non-current ', 42), (' secured finance debt ', 35), (' bank loan ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' later than 1 year ', 0), (' not later than 5 years', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 8, 11], 'score': [100, 100, 100, 100], 'value': [1325113.0, -310598.0, 1575786.0, -293162.0], 'label': ['More than five years Total undiscounted lease liabilities', 'More than five years Total cash outflow for leases', 'More than five years Total undiscounted lease liabilities', 'More than five years Total cash outflow for leases'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('(bond)', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('(bond)', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [(' deferred tax liabilities', 56), ('deferred taxes ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [(' deferred tax liabilities', 56), ('deferred taxes ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [(' other financial liabilities ', 53), (' other non-current liabilities ', 53), (' financial liabilities ', 50), ('other long term liabilities ', 45), (' employee benefits ', 36), (' trade and other payables ', 35), (' deferred revenue', 27), (' provision for associate funding ', 25), (' provisions ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits ', 100), (' deferred revenue', 37), (' other financial liabilities ', 34), ('other long term liabilities ', 32), (' trade and other payables ', 32), (' other non-current liabilities ', 29), (' financial liabilities ', 28), (' provision for associate funding ', 22), (' provisions ', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 153308.0, 'line_item_label': ['Employee Benefits', 'Provisions'], 'note_numbers': ['13', '14'], 'line_item_value': [70539.0, 82769.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [(' other financial liabilities ', 53), (' other non-current liabilities ', 53), (' financial liabilities ', 50), ('other long term liabilities ', 45), (' employee benefits ', 36), (' trade and other payables ', 35), (' deferred revenue', 27), (' provision for associate funding ', 25), (' provisions ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits ', 100), (' deferred revenue', 37), (' other financial liabilities ', 34), ('other long term liabilities ', 32), (' trade and other payables ', 32), (' other non-current liabilities ', 29), (' financial liabilities ', 28), (' provision for associate funding ', 22), (' provisions ', 19)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits ', 33), ('other long term liabilities ', 32), (' provision for associate funding ', 32), (' deferred revenue', 29), (' other non-current liabilities ', 28), (' trade and other payables ', 26), (' other financial liabilities ', 21), (' financial liabilities ', 17), (' provisions ', 13)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 110891.0, 'line_item_label': ['Employee Benefits', 'Provisions'], 'note_numbers': ['13', '14'], 'line_item_value': [22510.0, 88381.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 70), (' contract liabilites - non-current ', 56), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 37), (' total non-current employee benefits', 37), (' provisions - non-current ', 36), (' employee benefits - non current ', 33), (' employee benefits - payroll ', 32), (' abandonment and decommissioning costs ', 31), (' make good provisions ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 88), (' contract liabilites - non-current ', 52), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' total non-current employee benefits', 41), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 35), (' employee benefits - non current ', 33), (' provisions - non-current ', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current total current , res_fuzz_match = [(' employee benefits - non current ', 62), (' total non-current employee benefits', 49), ('non-current trade and other payables ', 48), (' non-current - liability for long-service leave ', 48), (' contract liabilites - non-current ', 48), (' provisions - non-current ', 43), (' trade payables - related parties ', 43), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' make good provisions ', 31), (' employee benefits - payroll ', 29), (' abandonment and decommissioning costs ', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 97), (' contract liabilites - non-current ', 52), (' total non-current employee benefits', 48), ('non-current trade and other payables ', 47), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' employee benefits - non current ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current total non-current , res_fuzz_match = [(' provisions - non-current ', 64), ('non-current trade and other payables ', 62), (' non-current - liability for long-service leave ', 62), (' contract liabilites - non-current ', 57), (' employee benefits - non current ', 52), (' total non-current employee benefits', 52), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 33), (' trade payables - related parties ', 29), (' make good provisions ', 25), (' employee benefits - payroll ', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables ', 77), (' non-current - liability for long-service leave ', 69), (' total non-current employee benefits', 69), (' employee benefits - non current ', 67), (' provisions - non-current ', 54), (' contract liabilites - non-current ', 54), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - payroll ', 31), (' provision for associate funding ', 31), (' make good provisions ', 23), (' trade payables - related parties ', 23)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current note 14 provisions , res_fuzz_match = [('non-current trade and other payables ', 63), (' total non-current employee benefits', 58), (' make good provisions ', 56), (' non-current - liability for long-service leave ', 53), (' employee benefits - non current ', 47), (' abandonment and decommissioning costs ', 47), (' provisions - non-current ', 43), (' employee benefits - payroll ', 42), (' electricity derivatives at fair value through oci ', 37), (' derivative contracts - at fair value ', 37), (' contract liabilites - non-current ', 37), (' provision for associate funding ', 32), (' trade payables - related parties ', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 70), (' contract liabilites - non-current ', 56), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 37), (' total non-current employee benefits', 37), (' provisions - non-current ', 36), (' employee benefits - non current ', 33), (' employee benefits - payroll ', 32), (' abandonment and decommissioning costs ', 31), (' make good provisions ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 88), (' contract liabilites - non-current ', 52), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' total non-current employee benefits', 41), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 35), (' employee benefits - non current ', 33), (' provisions - non-current ', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = current total current , res_fuzz_match = [(' employee benefits - non current ', 62), (' total non-current employee benefits', 49), ('non-current trade and other payables ', 48), (' non-current - liability for long-service leave ', 48), (' contract liabilites - non-current ', 48), (' provisions - non-current ', 43), (' trade payables - related parties ', 43), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' make good provisions ', 31), (' employee benefits - payroll ', 29), (' abandonment and decommissioning costs ', 29)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 97), (' contract liabilites - non-current ', 52), (' total non-current employee benefits', 48), ('non-current trade and other payables ', 47), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' employee benefits - non current ', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current total non-current , res_fuzz_match = [(' provisions - non-current ', 64), ('non-current trade and other payables ', 62), (' non-current - liability for long-service leave ', 62), (' contract liabilites - non-current ', 57), (' employee benefits - non current ', 52), (' total non-current employee benefits', 52), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 33), (' trade payables - related parties ', 29), (' make good provisions ', 25), (' employee benefits - payroll ', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables ', 77), (' non-current - liability for long-service leave ', 69), (' total non-current employee benefits', 69), (' employee benefits - non current ', 67), (' provisions - non-current ', 54), (' contract liabilites - non-current ', 54), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - payroll ', 31), (' provision for associate funding ', 31), (' make good provisions ', 23), (' trade payables - related parties ', 23)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = non-current note 14 provisions , res_fuzz_match = [('non-current trade and other payables ', 63), (' total non-current employee benefits', 58), (' make good provisions ', 56), (' non-current - liability for long-service leave ', 53), (' employee benefits - non current ', 47), (' abandonment and decommissioning costs ', 47), (' provisions - non-current ', 43), (' employee benefits - payroll ', 42), (' electricity derivatives at fair value through oci ', 37), (' derivative contracts - at fair value ', 37), (' contract liabilites - non-current ', 37), (' provision for associate funding ', 32), (' trade payables - related parties ', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 8, 10], 'score': [88, 97, 88, 97], 'value': [167803.0, 22510.0, 118927.0, 70539.0], 'label': ['CURRENT Liability for long service leave', 'NON-CURRENT Liability for long service leave', 'CURRENT Liability for long service leave', 'NON-CURRENT Liability for long service leave'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-17 10:23:31+0530 - sLogger - ERROR - error occured: cannot convert float NaN to integer
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = non current liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3100335.0, 'line_item_label': ['Share Capital'], 'note_numbers': ['15'], 'line_item_value': [3100335.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3100335.0, 'line_item_label': ['Share Capital'], 'note_numbers': ['15'], 'line_item_value': [3100335.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none in issue at 31 march 2022 , res_fuzz_match = [(' total issued capital ', 53), (' issued and paid-up share capital ', 47), ('ordinary shares ', 43), (' fully paid ordinary shares ', 40), (' on issue, fully paid ', 40), (' ordinary shares fully paid ', 34), (' Fully paid Preference shares ', 34), (' Profits captialised on redemption of preference shares', 33), (' retained profits ', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid $ ordinary shares fully paid $ ordinary shares fully paid $ , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' ordinary shares fully paid ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' issued and paid-up share capital ', 56), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 46), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none ini issue at 31 march 2023 , res_fuzz_match = [('ordinary shares ', 50), (' total issued capital ', 50), (' fully paid ordinary shares ', 43), (' issued and paid-up share capital ', 42), (' ordinary shares fully paid ', 42), (' on issue, fully paid ', 40), (' retained profits ', 38), (' Profits captialised on redemption of preference shares', 37), (' Fully paid Preference shares ', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid $ ordinary shares fully paid $ ordinary shares fully paid $ , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' ordinary shares fully paid ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' issued and paid-up share capital ', 56), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 46), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none in issue at 31 march 2022 , res_fuzz_match = [(' total issued capital ', 53), (' issued and paid-up share capital ', 47), ('ordinary shares ', 43), (' fully paid ordinary shares ', 40), (' on issue, fully paid ', 40), (' ordinary shares fully paid ', 34), (' Fully paid Preference shares ', 34), (' Profits captialised on redemption of preference shares', 33), (' retained profits ', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares partly paid $ ordinary shares partly paid $ ordinary shares partly paid $ , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 88), (' ordinary shares fully paid ', 84), (' Fully paid Preference shares ', 70), (' issued and paid-up share capital ', 59), (' retained profits ', 54), (' on issue, fully paid ', 53), (' Profits captialised on redemption of preference shares', 51), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none ini issue at 31 march 2023 , res_fuzz_match = [('ordinary shares ', 50), (' total issued capital ', 50), (' fully paid ordinary shares ', 43), (' issued and paid-up share capital ', 42), (' ordinary shares fully paid ', 42), (' on issue, fully paid ', 40), (' retained profits ', 38), (' Profits captialised on redemption of preference shares', 37), (' Fully paid Preference shares ', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares partly paid $ ordinary shares partly paid $ ordinary shares partly paid $ , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 88), (' ordinary shares fully paid ', 84), (' Fully paid Preference shares ', 70), (' issued and paid-up share capital ', 59), (' retained profits ', 54), (' on issue, fully paid ', 53), (' Profits captialised on redemption of preference shares', 51), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none in issue at 31 march 2022 , res_fuzz_match = [(' total issued capital ', 53), (' issued and paid-up share capital ', 47), ('ordinary shares ', 43), (' fully paid ordinary shares ', 40), (' on issue, fully paid ', 40), (' ordinary shares fully paid ', 34), (' Fully paid Preference shares ', 34), (' Profits captialised on redemption of preference shares', 33), (' retained profits ', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid no. ordinary shares fully paid no. ordinary shares fully paid no. , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' ordinary shares fully paid ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' issued and paid-up share capital ', 56), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 46), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none ini issue at 31 march 2023 , res_fuzz_match = [('ordinary shares ', 50), (' total issued capital ', 50), (' fully paid ordinary shares ', 43), (' issued and paid-up share capital ', 42), (' ordinary shares fully paid ', 42), (' on issue, fully paid ', 40), (' retained profits ', 38), (' Profits captialised on redemption of preference shares', 37), (' Fully paid Preference shares ', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares fully paid no. ordinary shares fully paid no. ordinary shares fully paid no. , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' ordinary shares fully paid ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' issued and paid-up share capital ', 56), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 46), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none in issue at 31 march 2022 , res_fuzz_match = [(' total issued capital ', 53), (' issued and paid-up share capital ', 47), ('ordinary shares ', 43), (' fully paid ordinary shares ', 40), (' on issue, fully paid ', 40), (' ordinary shares fully paid ', 34), (' Fully paid Preference shares ', 34), (' Profits captialised on redemption of preference shares', 33), (' retained profits ', 31)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares partly paid ordinary shares partly paid no. , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 88), (' ordinary shares fully paid ', 84), (' Fully paid Preference shares ', 70), (' issued and paid-up share capital ', 59), (' retained profits ', 54), (' on issue, fully paid ', 53), (' Profits captialised on redemption of preference shares', 49), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = none ini issue at 31 march 2023 , res_fuzz_match = [('ordinary shares ', 50), (' total issued capital ', 50), (' fully paid ordinary shares ', 43), (' issued and paid-up share capital ', 42), (' ordinary shares fully paid ', 42), (' on issue, fully paid ', 40), (' retained profits ', 38), (' Profits captialised on redemption of preference shares', 37), (' Fully paid Preference shares ', 32)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_rows = ordinary shares partly paid ordinary shares partly paid no. , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 88), (' ordinary shares fully paid ', 84), (' Fully paid Preference shares ', 70), (' issued and paid-up share capital ', 59), (' retained profits ', 54), (' on issue, fully paid ', 53), (' Profits captialised on redemption of preference shares', 49), (' total issued capital ', 38)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [3000000.0, 3000000.0, 100335.0, 100335.0, 3000000.0, 3000000.0, 200000.0, 200000.0], 'label': ['Ordinary shares fully paid $ Ordinary shares fully paid $ Ordinary shares fully paid $', 'Ordinary shares fully paid $ Ordinary shares fully paid $ Ordinary shares fully paid $', 'Ordinary shares partly paid $ Ordinary shares partly paid $ Ordinary shares partly paid $', 'Ordinary shares partly paid $ Ordinary shares partly paid $ Ordinary shares partly paid $', 'Ordinary shares fully paid No. Ordinary shares fully paid No. Ordinary shares fully paid No.', 'Ordinary shares fully paid No. Ordinary shares fully paid No. Ordinary shares fully paid No.', 'Ordinary shares partly paid Ordinary shares partly paid No.', 'Ordinary shares partly paid Ordinary shares partly paid No.'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 9471768.0, 'line_item_label': ['Retained Earnings'], 'note_numbers': [nan], 'line_item_value': [9471768.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 9930819.0, 'line_item_label': ['Retained Earnings'], 'note_numbers': [nan], 'line_item_value': [9930819.0]}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves ', 24), (' foreign currency translation reserve', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves ', 24), (' foreign currency translation reserve', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:31+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-17 10:23:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-17 10:23:31+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 38), ('plant property equipment ', 32), (' property plant equipment ', 32), (' plant and equipment ', 31), (' oil and gas properties ', 28), (' property ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 456920.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456920.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = non current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 38), ('plant property equipment ', 32), (' property plant equipment ', 32), (' plant and equipment ', 31), (' oil and gas properties ', 28), (' property ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 91, 'value': 456761.0, 'line_item_label': ['Property, Plant and Equipment'], 'note_numbers': ['9'], 'line_item_value': [456761.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [(' Plant and equipment ', 67), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Capitalised pre stripping costs ', 42), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Mining properties ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Leasehold buildings ', 27), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Capitalised pre stripping costs ', 42), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('cost ', 25), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), ('cost ', 50), (' investment property ', 47), (' land and improvement ', 47), (' Mining properties ', 46), (' Construction ', 44), (' Capitalised pre stripping costs ', 44), (' Buildings ', 44), (' Marine  Development properties ', 44), (' Plant and equipment ', 40), (' under construction ', 40), (' Freehold land and buildings ', 39), (' Assets under construction ', 39), (' Other assets in progress ', 39), (' Building & mine infrastructure ', 39), (' Asset Retirement Obligation ', 35), (' Leasehold buildings ', 34), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [(' Construction ', 56), ('cost ', 50), (' land and improvement ', 47), (' under construction ', 47), (' Facilities ', 40), (' Assets under construction ', 39), (' Building & mine infrastructure ', 39), (' Marine  Development properties ', 39), (' investment property ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' Capitalised pre stripping costs ', 33), (' Other assets in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Asset Retirement Obligation ', 29), (' Freehold land and buildings ', 28), (' Workshop tooling ', 23), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [(' Leasehold buildings ', 73), (' land and improvement ', 60), (' Freehold land ', 54), (' Plant and equipment ', 53), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Freehold land and buildings ', 43), (' Marine  Development properties ', 41), (' gross ', 40), (' investment property ', 40), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Mining properties ', 38), (' Construction ', 33), (' under construction ', 33), (' Subsea ', 33), (' Pipeline Asset ', 31), ('', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 18, 19, 20, 21, 22, 23, 24, 25, 36, 37, 38, 39, 40, 41, 42, 43, 54, 55, 56, 57, 58, 59, 60, 61], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [904929.0, 38023.0, -63990.0, 878962.0, 878962.0, 74198.0, -161642.0, 791518.0, 796943.0, 14005.0, -130723.0, 680225.0, 680225.0, 58737.0, -2668.0, 736294.0, 0.0, 7900.0, 0.0, 0.0, 0.0, 0.0, -4095.0, 0.0, 1878506.0, 59928.0, -194713.0, 1743721.0, 1743721.0, 132935.0, -168405.0, 1708251.0], 'label': ['COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023', 'COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023', 'COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023', 'COST Balance at 1 April 2021', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2022', 'COST Balance at 1 April 2022', 'COST Additions', 'COST Disposal', 'COST Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings equipment furniture and fittings equipment furniture and fittings , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings office equipment office equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings motor leasehold vehicles improvement motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2021 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost disposal , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposal , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at 1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 48), ('net book value', 38), ('depreciatio', 36)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at 31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('depreciatio', 36), ('net book value', 31)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = equipment furniture and fittings total motor leasehold vehicles improvement , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 10, 11, 12, 13, 14, 15, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 62, 63, 64, 65, 66, 67, 68, 69], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-756862.0, -86981.0, 63990.0, -779853.0, -779853.0, -65245.0, 161642.0, -683456.0, -423381.0, -75729.0, 129228.0, -369882.0, -369882.0, -58901.0, 2668.0, -426115.0, 0.0, -8908.0, 0.0, 0.0, 0.0, -8948.0, 4095.0, 0.0, -1308401.0, -171618.0, 193218.0, -1286801.0, -1286801.0, -133094.0, 168405.0, -1251490.0], 'label': ['ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023', 'ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023', 'ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023', 'ACCUMULATED DEPRECIATION Balance at 1 April 2021', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2022', 'ACCUMULATED DEPRECIATION Balance at 1 April 2022', 'ACCUMULATED DEPRECIATION Depreciation', 'ACCUMULATED DEPRECIATION Disposal', 'ACCUMULATED DEPRECIATION Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2417278.0, 'line_item_label': ['Trade and Other Receivables'], 'note_numbers': ['7'], 'line_item_value': [2417278.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2626075.0, 'line_item_label': ['Trade and Other Receivables'], 'note_numbers': ['7'], 'line_item_value': [2626075.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' net sales ', 41), (' transmission and distribution business ', 37), (' Sale of coal ', 34), (' sale of products ', 32), (' Sales revenue ', 32), (' revenue from continuing activities', 31), ('revenue from operations ', 29), (' from trading business ', 29), (' revenue from contracts with customers ', 28), (' Revenue ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' revenue from continuing activities', 39), (' Sales revenue ', 38), (' net sales ', 35), (' revenue from contracts with customers ', 34), ('revenue from operations ', 33), (' transmission and distribution business ', 33), (' sale of products ', 32), (' Sale of coal ', 29), (' Revenue ', 25), (' from trading business ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 64), (' Sales revenue ', 39), (' revenue from continuing activities', 36), (' revenue from contracts with customers ', 35), (' sale of products ', 32), (' net sales ', 30), ('revenue from operations ', 29), (' Revenue ', 26), (' from trading business ', 25), (' Sale of coal ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' revenue from continuing activities', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 37), (' revenue from contracts with customers ', 34), (' Sales revenue ', 27), (' sale of products ', 26), (' Revenue ', 25), (' net sales ', 24), (' from trading business ', 24), (' Sale of coal ', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [('revenue from operations ', 69), (' from trading business ', 39), (' revenue from contracts with customers ', 38), (' sale of products ', 29), (' revenue from continuing activities', 29), (' Sale of coal ', 24), (' transmission and distribution business ', 23), (' Sales revenue ', 22), (' Revenue ', 18), (' net sales ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' revenue from contracts with customers ', 45), (' revenue from continuing activities', 43), (' from trading business ', 39), (' Sale of coal ', 33), (' sale of products ', 30), (' net sales ', 28), ('revenue from operations ', 27), (' transmission and distribution business ', 24), (' Sales revenue ', 19), (' Revenue ', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' from trading business ', 43), ('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' transmission and distribution business ', 36), (' sale of products ', 35), (' revenue from continuing activities', 30), (' net sales ', 27), (' Sale of coal ', 26), (' Sales revenue ', 24), (' Revenue ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Sales revenue ', 42), (' from trading business ', 38), ('revenue from operations ', 37), (' revenue from contracts with customers ', 37), (' sale of products ', 35), (' revenue from continuing activities', 34), (' Sale of coal ', 32), (' Revenue ', 29), (' transmission and distribution business ', 28), (' net sales ', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' transmission and distribution business ', 47), (' from trading business ', 40), (' revenue from continuing activities', 40), (' revenue from contracts with customers ', 38), (' sale of products ', 30), ('revenue from operations ', 26), (' Sales revenue ', 23), (' Revenue ', 19), (' net sales ', 17), (' Sale of coal ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations ', 48), (' from trading business ', 38), (' Sale of coal ', 38), (' revenue from continuing activities', 38), (' revenue from contracts with customers ', 37), (' net sales ', 32), (' transmission and distribution business ', 31), (' sale of products ', 28), (' Sales revenue ', 21), (' Revenue ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' Sales revenue ', 41), (' sale of products ', 40), (' from trading business ', 37), ('revenue from operations ', 36), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' net sales ', 32), (' Sale of coal ', 31), (' revenue from continuing activities', 29), (' Revenue ', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations ', 48), (' from trading business ', 38), (' Sale of coal ', 38), (' revenue from continuing activities', 38), (' revenue from contracts with customers ', 37), (' net sales ', 32), (' transmission and distribution business ', 31), (' sale of products ', 28), (' Sales revenue ', 21), (' Revenue ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' revenue from continuing activities', 40), (' revenue from contracts with customers ', 39), (' from trading business ', 37), ('revenue from operations ', 33), (' transmission and distribution business ', 33), (' Sales revenue ', 29), (' sale of products ', 28), (' net sales ', 23), (' Sale of coal ', 22), (' Revenue ', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 16298851.0, 'line_item_label': ['Revenue'], 'note_numbers': ['2'], 'line_item_value': [16298851.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities', 39), (' revenue from contracts with customers ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' net sales ', 41), (' transmission and distribution business ', 37), (' Sale of coal ', 34), (' sale of products ', 32), (' Sales revenue ', 32), (' revenue from continuing activities', 31), ('revenue from operations ', 29), (' from trading business ', 29), (' revenue from contracts with customers ', 28), (' Revenue ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' revenue from continuing activities', 39), (' Sales revenue ', 38), (' net sales ', 35), (' revenue from contracts with customers ', 34), ('revenue from operations ', 33), (' transmission and distribution business ', 33), (' sale of products ', 32), (' Sale of coal ', 29), (' Revenue ', 25), (' from trading business ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 64), (' Sales revenue ', 39), (' revenue from continuing activities', 36), (' revenue from contracts with customers ', 35), (' sale of products ', 32), (' net sales ', 30), ('revenue from operations ', 29), (' Revenue ', 26), (' from trading business ', 25), (' Sale of coal ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' revenue from continuing activities', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 37), (' revenue from contracts with customers ', 34), (' Sales revenue ', 27), (' sale of products ', 26), (' Revenue ', 25), (' net sales ', 24), (' from trading business ', 24), (' Sale of coal ', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [('revenue from operations ', 69), (' from trading business ', 39), (' revenue from contracts with customers ', 38), (' sale of products ', 29), (' revenue from continuing activities', 29), (' Sale of coal ', 24), (' transmission and distribution business ', 23), (' Sales revenue ', 22), (' Revenue ', 18), (' net sales ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' revenue from contracts with customers ', 45), (' revenue from continuing activities', 43), (' from trading business ', 39), (' Sale of coal ', 33), (' sale of products ', 30), (' net sales ', 28), ('revenue from operations ', 27), (' transmission and distribution business ', 24), (' Sales revenue ', 19), (' Revenue ', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' from trading business ', 43), ('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' transmission and distribution business ', 36), (' sale of products ', 35), (' revenue from continuing activities', 30), (' net sales ', 27), (' Sale of coal ', 26), (' Sales revenue ', 24), (' Revenue ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Sales revenue ', 42), (' from trading business ', 38), ('revenue from operations ', 37), (' revenue from contracts with customers ', 37), (' sale of products ', 35), (' revenue from continuing activities', 34), (' Sale of coal ', 32), (' Revenue ', 29), (' transmission and distribution business ', 28), (' net sales ', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' transmission and distribution business ', 47), (' from trading business ', 40), (' revenue from continuing activities', 40), (' revenue from contracts with customers ', 38), (' sale of products ', 30), ('revenue from operations ', 26), (' Sales revenue ', 23), (' Revenue ', 19), (' net sales ', 17), (' Sale of coal ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations ', 48), (' from trading business ', 38), (' Sale of coal ', 38), (' revenue from continuing activities', 38), (' revenue from contracts with customers ', 37), (' net sales ', 32), (' transmission and distribution business ', 31), (' sale of products ', 28), (' Sales revenue ', 21), (' Revenue ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' Sales revenue ', 41), (' sale of products ', 40), (' from trading business ', 37), ('revenue from operations ', 36), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' net sales ', 32), (' Sale of coal ', 31), (' revenue from continuing activities', 29), (' Revenue ', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations ', 48), (' from trading business ', 38), (' Sale of coal ', 38), (' revenue from continuing activities', 38), (' revenue from contracts with customers ', 37), (' net sales ', 32), (' transmission and distribution business ', 31), (' sale of products ', 28), (' Sales revenue ', 21), (' Revenue ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' revenue from continuing activities', 40), (' revenue from contracts with customers ', 39), (' from trading business ', 37), ('revenue from operations ', 33), (' transmission and distribution business ', 33), (' Sales revenue ', 29), (' sale of products ', 28), (' net sales ', 23), (' Sale of coal ', 22), (' Revenue ', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 18880341.0, 'line_item_label': ['Revenue'], 'note_numbers': ['2'], 'line_item_value': [18880341.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = from continuing operations sale of goods , res_fuzz_match = [('Sale of goods ', 100), (' Sale of goods - Cars ', 69), (' Sale of goods - Marine ', 60), (' Condensate ', 57), (' revenue from continuing activities ', 56), (' Sale of goods - Motorcycles ', 47), (' Sale of goods - Spareparts ', 47), (' revenue form contracts with customers ', 46), (' Goods sold to customer direct from supplier ', 42), (' contribution from joint venture', 41), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer from warehouse ', 38), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Total Revenue ', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = geographical region australia , res_fuzz_match = [(' Domgas ', 60), (' Sale of goods - Marine ', 47), (' Sale of goods - Cars ', 46), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Sale of goods - Motorcycles ', 42), (' Sale of goods - Spareparts ', 42), (' Total Revenue ', 42), (' Goods sold to customer from warehouse ', 40), (' revenue form contracts with customers ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 36), (' revenue from continuing activities ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' contribution from joint venture', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = geographical region other , res_fuzz_match = [(' Domgas ', 60), (' Sale of goods - Motorcycles ', 46), ('Sale of goods ', 44), (' Gas transportation income ', 44), (' Total Revenue ', 42), (' Sale of goods - Spareparts ', 40), (' Feed gas income ', 38), (' Sale of goods - Cars ', 38), (' revenue form contracts with customers ', 38), (' contribution from joint venture', 38), (' hedge loss / gain ', 36), (' LNG ', 33), (' Sale of goods - Marine ', 33), (' Goods sold to customer from warehouse ', 33), (' Goods sold to customer direct from supplier ', 33), (' revenue from continuing activities ', 33), (' Condensate ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = geographical region total revenue , res_fuzz_match = [(' Total Revenue ', 100), (' Domgas ', 60), (' contribution from joint venture', 49), (' Sale of goods - Cars ', 46), ('Sale of goods ', 44), (' Gas transportation income ', 44), (' hedge loss / gain ', 43), (' Sale of goods - Motorcycles ', 42), (' Sale of goods - Marine ', 40), (' Feed gas income ', 38), (' Sale of goods - Spareparts ', 37), (' revenue from continuing activities ', 37), (' Goods sold to customer from warehouse ', 36), (' Goods sold to customer direct from supplier ', 36), (' revenue form contracts with customers ', 36), (' LNG ', 33), (' Condensate ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point in time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer direct from supplier ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer from warehouse ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 61), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' contribution from joint venture', 38), (' Sale of goods - Motorcycles ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Goods sold to customer from warehouse ', 31), (' Sale of goods - Marine ', 27), ('Sale of goods ', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition note 3 other income , res_fuzz_match = [(' Total Revenue ', 67), (' Feed gas income ', 62), (' revenue form contracts with customers ', 62), (' revenue from continuing activities ', 60), (' Gas transportation income ', 56), (' contribution from joint venture', 44), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Motorcycles ', 37), ('Sale of goods ', 33), (' LNG ', 33), (' Goods sold to customer direct from supplier ', 32), (' Goods sold to customer from warehouse ', 27), (' Sale of goods - Spareparts ', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = from continuing operations sale of goods , res_fuzz_match = [('Sale of goods ', 100), (' Sale of goods - Cars ', 69), (' Sale of goods - Marine ', 60), (' Condensate ', 57), (' revenue from continuing activities ', 56), (' Sale of goods - Motorcycles ', 47), (' Sale of goods - Spareparts ', 47), (' revenue form contracts with customers ', 46), (' Goods sold to customer direct from supplier ', 42), (' contribution from joint venture', 41), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer from warehouse ', 38), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Total Revenue ', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = geographical region australia , res_fuzz_match = [(' Domgas ', 60), (' Sale of goods - Marine ', 47), (' Sale of goods - Cars ', 46), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Sale of goods - Motorcycles ', 42), (' Sale of goods - Spareparts ', 42), (' Total Revenue ', 42), (' Goods sold to customer from warehouse ', 40), (' revenue form contracts with customers ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 36), (' revenue from continuing activities ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' contribution from joint venture', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = geographical region other , res_fuzz_match = [(' Domgas ', 60), (' Sale of goods - Motorcycles ', 46), ('Sale of goods ', 44), (' Gas transportation income ', 44), (' Total Revenue ', 42), (' Sale of goods - Spareparts ', 40), (' Feed gas income ', 38), (' Sale of goods - Cars ', 38), (' revenue form contracts with customers ', 38), (' contribution from joint venture', 38), (' hedge loss / gain ', 36), (' LNG ', 33), (' Sale of goods - Marine ', 33), (' Goods sold to customer from warehouse ', 33), (' Goods sold to customer direct from supplier ', 33), (' revenue from continuing activities ', 33), (' Condensate ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = geographical region total revenue , res_fuzz_match = [(' Total Revenue ', 100), (' Domgas ', 60), (' contribution from joint venture', 49), (' Sale of goods - Cars ', 46), ('Sale of goods ', 44), (' Gas transportation income ', 44), (' hedge loss / gain ', 43), (' Sale of goods - Motorcycles ', 42), (' Sale of goods - Marine ', 40), (' Feed gas income ', 38), (' Sale of goods - Spareparts ', 37), (' revenue from continuing activities ', 37), (' Goods sold to customer from warehouse ', 36), (' Goods sold to customer direct from supplier ', 36), (' revenue form contracts with customers ', 36), (' LNG ', 33), (' Condensate ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point in time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer direct from supplier ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer from warehouse ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 61), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' contribution from joint venture', 38), (' Sale of goods - Motorcycles ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Goods sold to customer from warehouse ', 31), (' Sale of goods - Marine ', 27), ('Sale of goods ', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition note 3 other income , res_fuzz_match = [(' Total Revenue ', 67), (' Feed gas income ', 62), (' revenue form contracts with customers ', 62), (' revenue from continuing activities ', 60), (' Gas transportation income ', 56), (' contribution from joint venture', 44), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Motorcycles ', 37), ('Sale of goods ', 33), (' LNG ', 33), (' Goods sold to customer direct from supplier ', 32), (' Goods sold to customer from warehouse ', 27), (' Sale of goods - Spareparts ', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 7, 10], 'score': [100, 100, 100, 100], 'value': [18880341.0, 18880341.0, 16298851.0, 16298851.0], 'label': ['From continuing operations Sale of goods', 'GEOGRAPHICAL REGION Total Revenue', 'From continuing operations Sale of goods', 'GEOGRAPHICAL REGION Total Revenue'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-17 10:23:32+0530 - sLogger - ERROR - error occured: cannot convert float NaN to integer
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 43), ('total expenditure', 38), (' Cost of inventory sold', 36), (' Cost of product sold', 33), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold ', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('expense', 25), ('purchase of stock-in-trade', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [('total expenses', 42), ('expense', 38), ('expenditure', 33), ('total expenditure', 33), (' Cost of goods and services sold', 31), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), (' change in inventory', 29), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), (' cost of goods sold ', 25), (' Cost of product sold', 23), (' cost of coal sold', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Cost of goods and services sold', 44), ('total expenses', 43), (' Personnel costs', 41), ('expense', 39), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Cost of inventory sold', 36), (' change in inventory', 35), ('total expenditure', 34), (' cost of goods sold ', 31), ('expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold ', 30), ('cost of sales', 29), ('Cost of sales', 29), (' change in inventory', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [(' Personnel costs', 40), ('total expenditure', 38), ('total expenses', 36), (' Cost of product sold', 36), ('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), (' cost of goods sold ', 33), ('expenditure', 31), (' change in inventory', 26), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Cost of inventory sold', 50), ('cost of sales', 47), ('Cost of sales', 47), (' Personnel costs', 46), (' change in inventory', 44), (' Cost of product sold', 42), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), ('purchase of stock-in-trade', 35), ('total expenses', 24), ('total expenditure', 22), ('expenditure', 19), ('expense', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 30), (' cost of goods sold ', 28), ('expenditure', 25), ('expense', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('total expenses', 59), ('total expenditure', 53), (' Cost of inventory sold', 49), ('purchase of stock-in-trade', 44), (' cost of coal sold', 44), (' cost of goods sold ', 44), (' change in inventory', 43), (' Cost of product sold', 41), ('cost of sales', 39), ('Cost of sales', 39), (' Personnel costs', 39), (' Cost of goods and services sold', 38), ('expenditure', 31), ('expense', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of inventory sold', 35), (' Personnel costs', 34), (' change in inventory', 33), ('total expenditure', 32), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('total expenses', 22), (' cost of goods sold ', 21), ('cost of sales', 17), ('Cost of sales', 17), ('expense', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' change in inventory', 44), (' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold ', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [('total expenses', 57), ('total expenditure', 56), (' Cost of product sold', 55), ('cost of sales', 44), ('Cost of sales', 44), ('purchase of stock-in-trade', 43), (' cost of coal sold', 43), (' Cost of inventory sold', 43), (' Personnel costs', 43), (' cost of goods sold ', 43), (' Cost of goods and services sold', 38), (' change in inventory', 37), ('expenditure', 30), ('expense', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' change in inventory', 44), (' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold ', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' Cost of goods and services sold', 37), ('total expenditure', 36), ('total expenses', 35), (' Cost of product sold', 35), (' cost of coal sold', 31), (' Cost of inventory sold', 31), (' Personnel costs', 31), (' cost of goods sold ', 31), ('cost of sales', 30), ('Cost of sales', 30), (' change in inventory', 30), ('purchase of stock-in-trade', 28), ('expenditure', 22), ('expense', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -8616129.0, 'line_item_label': ['Cost of Sales'], 'note_numbers': [nan], 'line_item_value': [-8616129.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory', 29), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 43), ('total expenditure', 38), (' Cost of inventory sold', 36), (' Cost of product sold', 33), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold ', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('expense', 25), ('purchase of stock-in-trade', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [('total expenses', 42), ('expense', 38), ('expenditure', 33), ('total expenditure', 33), (' Cost of goods and services sold', 31), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), (' change in inventory', 29), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), (' cost of goods sold ', 25), (' Cost of product sold', 23), (' cost of coal sold', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Cost of goods and services sold', 44), ('total expenses', 43), (' Personnel costs', 41), ('expense', 39), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Cost of inventory sold', 36), (' change in inventory', 35), ('total expenditure', 34), (' cost of goods sold ', 31), ('expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold ', 30), ('cost of sales', 29), ('Cost of sales', 29), (' change in inventory', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [(' Personnel costs', 40), ('total expenditure', 38), ('total expenses', 36), (' Cost of product sold', 36), ('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), (' cost of goods sold ', 33), ('expenditure', 31), (' change in inventory', 26), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Cost of inventory sold', 50), ('cost of sales', 47), ('Cost of sales', 47), (' Personnel costs', 46), (' change in inventory', 44), (' Cost of product sold', 42), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), ('purchase of stock-in-trade', 35), ('total expenses', 24), ('total expenditure', 22), ('expenditure', 19), ('expense', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 30), (' cost of goods sold ', 28), ('expenditure', 25), ('expense', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [('total expenses', 59), ('total expenditure', 53), (' Cost of inventory sold', 49), ('purchase of stock-in-trade', 44), (' cost of coal sold', 44), (' cost of goods sold ', 44), (' change in inventory', 43), (' Cost of product sold', 41), ('cost of sales', 39), ('Cost of sales', 39), (' Personnel costs', 39), (' Cost of goods and services sold', 38), ('expenditure', 31), ('expense', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of inventory sold', 35), (' Personnel costs', 34), (' change in inventory', 33), ('total expenditure', 32), (' Cost of goods and services sold', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('total expenses', 22), (' cost of goods sold ', 21), ('cost of sales', 17), ('Cost of sales', 17), ('expense', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' change in inventory', 44), (' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold ', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [('total expenses', 57), ('total expenditure', 56), (' Cost of product sold', 55), ('cost of sales', 44), ('Cost of sales', 44), ('purchase of stock-in-trade', 43), (' cost of coal sold', 43), (' Cost of inventory sold', 43), (' Personnel costs', 43), (' cost of goods sold ', 43), (' Cost of goods and services sold', 38), (' change in inventory', 37), ('expenditure', 30), ('expense', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' change in inventory', 44), (' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold ', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' Cost of goods and services sold', 37), ('total expenditure', 36), ('total expenses', 35), (' Cost of product sold', 35), (' cost of coal sold', 31), (' Cost of inventory sold', 31), (' Personnel costs', 31), (' cost of goods sold ', 31), ('cost of sales', 30), ('Cost of sales', 30), (' change in inventory', 30), ('purchase of stock-in-trade', 28), ('expenditure', 22), ('expense', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -9879276.0, 'line_item_label': ['Cost of Sales'], 'note_numbers': [nan], 'line_item_value': [-9879276.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' employee benefits expense ', 71), (' employee benefit espense ', 71), (' Sales and marketing ', 49), (' Administrative expenses ', 48), (' Administration expenses ', 48), (' Depreciation and amortisation expenses ', 46), (' Depreciation expenses ', 45), (' Advertising expenses ', 44), (' Selling & distribution expenses ', 43), (' Logistics and distribution ', 43), (' Administrative and other expenses ', 42), (' property espense ', 39), (' Distribution expenses ', 38), (' Amortisation expenses ', 35), (' Administration ', 34), (' other expenses ', 32), (' Other expenses ', 32), (' Lease expenses ', 32), (' Selling Expenses ', 32), (' Management expenses ', 32), (' Other expenses ', 32), (' Marketing expenses ', 31), (' depreciation ', 30), (' Royalties ', 30), ('expenses ', 25), (' Occupancy expenses ', 21), (' levies', 20), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' Advertising expenses ', 73), (' Marketing expenses ', 67), (' Administrative and other expenses ', 65), (' Depreciation and amortisation expenses ', 62), (' Amortisation expenses ', 60), (' Depreciation expenses ', 55), (' Administrative expenses ', 52), (' Administration expenses ', 52), (' Selling & distribution expenses ', 51), (' Sales and marketing ', 49), (' property espense ', 49), (' Distribution expenses ', 48), (' Management expenses ', 47), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' employee benefits expense ', 42), ('expenses ', 38), (' employee benefit espense ', 38), (' Occupancy expenses ', 37), (' Administration ', 34), (' depreciation ', 30), (' Logistics and distribution ', 30), (' Royalties ', 18), (' levies', 13), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Selling & distribution expenses ', 91), (' Distribution expenses ', 78), (' Logistics and distribution ', 67), (' Administrative expenses ', 63), (' Administration expenses ', 63), (' Selling Expenses ', 61), (' Administrative and other expenses ', 59), (' Advertising expenses ', 55), (' Depreciation and amortisation expenses ', 55), (' Depreciation expenses ', 51), (' Amortisation expenses ', 51), (' Sales and marketing ', 45), (' Lease expenses ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' employee benefits expense ', 43), (' employee benefit espense ', 43), (' Marketing expenses ', 42), ('expenses ', 39), (' Occupancy expenses ', 38), (' Management expenses ', 38), (' property espense ', 35), (' Administration ', 35), (' depreciation ', 25), (' Royalties ', 19), (' Occupancy ', 13), (' levies', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Depreciation and amortisation expenses ', 100), (' Depreciation expenses ', 70), (' Amortisation expenses ', 70), (' Advertising expenses ', 59), (' Administrative and other expenses ', 58), (' Administrative expenses ', 57), (' Administration expenses ', 57), (' Distribution expenses ', 52), (' employee benefits expense ', 50), (' Selling & distribution expenses ', 47), (' employee benefit espense ', 46), (' depreciation ', 42), (' Logistics and distribution ', 39), (' Sales and marketing ', 39), ('expenses ', 38), (' property espense ', 34), (' Administration ', 34), (' other expenses ', 32), (' Occupancy expenses ', 32), (' Other expenses ', 32), (' Lease expenses ', 32), (' Selling Expenses ', 32), (' Management expenses ', 32), (' Other expenses ', 32), (' Marketing expenses ', 31), (' Occupancy ', 19), (' Royalties ', 18), (' levies', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [(' property espense ', 45), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' depreciation ', 35), (' Marketing expenses ', 34), (' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administration ', 24), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 21), (' levies', 20), (' Occupancy ', 19), (' Sales and marketing ', 19), ('expenses ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Marketing expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' employee benefits expense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Administration ', 27), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Management expenses ', 24), (' Other expenses ', 24), (' Depreciation expenses ', 23), (' Occupancy ', 23), (' Advertising expenses ', 22), (' Royalties ', 21), (' Lease expenses ', 19), (' Selling Expenses ', 19), (' depreciation ', 14), (' levies', 8), ('expenses ', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' employee benefits expense ', 41), (' property espense ', 38), (' employee benefit espense ', 36), (' Depreciation expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), (' other expenses ', 29), (' Marketing expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Other expenses ', 29), (' depreciation ', 28), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' Advertising expenses ', 27), (' Administration ', 26), (' Occupancy expenses ', 24), (' Lease expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 22), (' Royalties ', 21), (' Selling Expenses ', 18), (' levies', 15), ('expenses ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' other expenses ', 41), (' Other expenses ', 41), (' Management expenses ', 41), (' Other expenses ', 41), (' Marketing expenses ', 40), (' Administrative and other expenses ', 38), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), ('expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Royalties ', 28), (' Advertising expenses ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Administration ', 26), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Logistics and distribution ', 63), (' Distribution expenses ', 52), (' Selling & distribution expenses ', 44), (' Administrative and other expenses ', 34), (' Depreciation and amortisation expenses ', 34), (' Amortisation expenses ', 34), (' Advertising expenses ', 33), (' property espense ', 33), (' Administration ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Depreciation expenses ', 28), (' depreciation ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Royalties ', 27), (' other expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' Marketing expenses ', 21), (' Occupancy ', 20), (' Occupancy expenses ', 15), (' levies', 11), ('expenses ', 10), (' Lease expenses ', 8), (' Selling Expenses ', 8), (' Management expenses ', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' other expenses ', 48), (' Other expenses ', 48), (' Other expenses ', 48), (' Administrative and other expenses ', 47), (' property espense ', 44), (' Sales and marketing ', 38), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Marketing expenses ', 33), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Administration ', 31), (' Lease expenses ', 29), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Management expenses ', 28), (' Selling & distribution expenses ', 26), (' depreciation ', 25), (' Royalties ', 25), (' Distribution expenses ', 24), (' Occupancy ', 18), ('expenses ', 17), (' levies', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' property espense ', 47), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Marketing expenses ', 39), (' Administrative and other expenses ', 37), (' Logistics and distribution ', 37), (' Sales and marketing ', 37), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' Occupancy expenses ', 34), (' Management expenses ', 34), (' Depreciation and amortisation expenses ', 33), (' Depreciation expenses ', 32), (' Selling & distribution expenses ', 32), (' Amortisation expenses ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), ('expenses ', 28), (' depreciation ', 27), (' Royalties ', 27), (' Distribution expenses ', 26), (' Advertising expenses ', 26), (' Administration ', 25), (' levies', 15), (' Occupancy ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' other expenses ', 48), (' Other expenses ', 48), (' Other expenses ', 48), (' Administrative and other expenses ', 47), (' property espense ', 44), (' Sales and marketing ', 38), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Marketing expenses ', 33), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Administration ', 31), (' Lease expenses ', 29), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Management expenses ', 28), (' Selling & distribution expenses ', 26), (' depreciation ', 25), (' Royalties ', 25), (' Distribution expenses ', 24), (' Occupancy ', 18), ('expenses ', 17), (' levies', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 39), (' Distribution expenses ', 36), (' other expenses ', 35), (' Other expenses ', 35), (' Other expenses ', 35), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' property espense ', 33), (' employee benefit espense ', 33), (' Lease expenses ', 29), (' Marketing expenses ', 28), (' Advertising expenses ', 27), (' Amortisation expenses ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Occupancy expenses ', 25), (' Selling Expenses ', 25), (' Management expenses ', 25), (' Depreciation expenses ', 24), (' Administration ', 22), ('expenses ', 16), (' depreciation ', 15), (' Royalties ', 15), (' Occupancy ', 8), (' levies', 8)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8, 9], 'score': 100, 'value': -2650475.0, 'line_item_label': ['Selling and Distribution Expenses', 'Administration Expenses', 'Depreciation and Amortisation Expenses', 'Other Expenses'], 'note_numbers': [nan, nan, nan, nan], 'line_item_value': [-588608.0, -378702.0, -596431.0, -1086734.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' employee benefits expense ', 71), (' employee benefit espense ', 71), (' Sales and marketing ', 49), (' Administrative expenses ', 48), (' Administration expenses ', 48), (' Depreciation and amortisation expenses ', 46), (' Depreciation expenses ', 45), (' Advertising expenses ', 44), (' Selling & distribution expenses ', 43), (' Logistics and distribution ', 43), (' Administrative and other expenses ', 42), (' property espense ', 39), (' Distribution expenses ', 38), (' Amortisation expenses ', 35), (' Administration ', 34), (' other expenses ', 32), (' Other expenses ', 32), (' Lease expenses ', 32), (' Selling Expenses ', 32), (' Management expenses ', 32), (' Other expenses ', 32), (' Marketing expenses ', 31), (' depreciation ', 30), (' Royalties ', 30), ('expenses ', 25), (' Occupancy expenses ', 21), (' levies', 20), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' Advertising expenses ', 73), (' Marketing expenses ', 67), (' Administrative and other expenses ', 65), (' Depreciation and amortisation expenses ', 62), (' Amortisation expenses ', 60), (' Depreciation expenses ', 55), (' Administrative expenses ', 52), (' Administration expenses ', 52), (' Selling & distribution expenses ', 51), (' Sales and marketing ', 49), (' property espense ', 49), (' Distribution expenses ', 48), (' Management expenses ', 47), (' Lease expenses ', 43), (' Selling Expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Other expenses ', 42), (' employee benefits expense ', 42), ('expenses ', 38), (' employee benefit espense ', 38), (' Occupancy expenses ', 37), (' Administration ', 34), (' depreciation ', 30), (' Logistics and distribution ', 30), (' Royalties ', 18), (' levies', 13), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Selling & distribution expenses ', 91), (' Distribution expenses ', 78), (' Logistics and distribution ', 67), (' Administrative expenses ', 63), (' Administration expenses ', 63), (' Selling Expenses ', 61), (' Administrative and other expenses ', 59), (' Advertising expenses ', 55), (' Depreciation and amortisation expenses ', 55), (' Depreciation expenses ', 51), (' Amortisation expenses ', 51), (' Sales and marketing ', 45), (' Lease expenses ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' employee benefits expense ', 43), (' employee benefit espense ', 43), (' Marketing expenses ', 42), ('expenses ', 39), (' Occupancy expenses ', 38), (' Management expenses ', 38), (' property espense ', 35), (' Administration ', 35), (' depreciation ', 25), (' Royalties ', 19), (' Occupancy ', 13), (' levies', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Depreciation and amortisation expenses ', 100), (' Depreciation expenses ', 70), (' Amortisation expenses ', 70), (' Advertising expenses ', 59), (' Administrative and other expenses ', 58), (' Administrative expenses ', 57), (' Administration expenses ', 57), (' Distribution expenses ', 52), (' employee benefits expense ', 50), (' Selling & distribution expenses ', 47), (' employee benefit espense ', 46), (' depreciation ', 42), (' Logistics and distribution ', 39), (' Sales and marketing ', 39), ('expenses ', 38), (' property espense ', 34), (' Administration ', 34), (' other expenses ', 32), (' Occupancy expenses ', 32), (' Other expenses ', 32), (' Lease expenses ', 32), (' Selling Expenses ', 32), (' Management expenses ', 32), (' Other expenses ', 32), (' Marketing expenses ', 31), (' Occupancy ', 19), (' Royalties ', 18), (' levies', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [(' property espense ', 45), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' depreciation ', 35), (' Marketing expenses ', 34), (' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 29), (' Depreciation expenses ', 27), (' Selling & distribution expenses ', 27), (' Advertising expenses ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administration ', 24), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 21), (' levies', 20), (' Occupancy ', 19), (' Sales and marketing ', 19), ('expenses ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Depreciation and amortisation expenses ', 38), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Marketing expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' employee benefits expense ', 28), (' employee benefit espense ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Administration ', 27), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Management expenses ', 24), (' Other expenses ', 24), (' Depreciation expenses ', 23), (' Occupancy ', 23), (' Advertising expenses ', 22), (' Royalties ', 21), (' Lease expenses ', 19), (' Selling Expenses ', 19), (' depreciation ', 14), (' levies', 8), ('expenses ', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' employee benefits expense ', 41), (' property espense ', 38), (' employee benefit espense ', 36), (' Depreciation expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), (' other expenses ', 29), (' Marketing expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Other expenses ', 29), (' depreciation ', 28), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' Advertising expenses ', 27), (' Administration ', 26), (' Occupancy expenses ', 24), (' Lease expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 22), (' Royalties ', 21), (' Selling Expenses ', 18), (' levies', 15), ('expenses ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' other expenses ', 41), (' Other expenses ', 41), (' Management expenses ', 41), (' Other expenses ', 41), (' Marketing expenses ', 40), (' Administrative and other expenses ', 38), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), ('expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Royalties ', 28), (' Advertising expenses ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Administration ', 26), (' Occupancy ', 15), (' levies', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Logistics and distribution ', 63), (' Distribution expenses ', 52), (' Selling & distribution expenses ', 44), (' Administrative and other expenses ', 34), (' Depreciation and amortisation expenses ', 34), (' Amortisation expenses ', 34), (' Advertising expenses ', 33), (' property espense ', 33), (' Administration ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Depreciation expenses ', 28), (' depreciation ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Royalties ', 27), (' other expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' Marketing expenses ', 21), (' Occupancy ', 20), (' Occupancy expenses ', 15), (' levies', 11), ('expenses ', 10), (' Lease expenses ', 8), (' Selling Expenses ', 8), (' Management expenses ', 7)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' other expenses ', 48), (' Other expenses ', 48), (' Other expenses ', 48), (' Administrative and other expenses ', 47), (' property espense ', 44), (' Sales and marketing ', 38), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Marketing expenses ', 33), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Administration ', 31), (' Lease expenses ', 29), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Management expenses ', 28), (' Selling & distribution expenses ', 26), (' depreciation ', 25), (' Royalties ', 25), (' Distribution expenses ', 24), (' Occupancy ', 18), ('expenses ', 17), (' levies', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' property espense ', 47), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Marketing expenses ', 39), (' Administrative and other expenses ', 37), (' Logistics and distribution ', 37), (' Sales and marketing ', 37), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' Occupancy expenses ', 34), (' Management expenses ', 34), (' Depreciation and amortisation expenses ', 33), (' Depreciation expenses ', 32), (' Selling & distribution expenses ', 32), (' Amortisation expenses ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), ('expenses ', 28), (' depreciation ', 27), (' Royalties ', 27), (' Distribution expenses ', 26), (' Advertising expenses ', 26), (' Administration ', 25), (' levies', 15), (' Occupancy ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' other expenses ', 48), (' Other expenses ', 48), (' Other expenses ', 48), (' Administrative and other expenses ', 47), (' property espense ', 44), (' Sales and marketing ', 38), (' Depreciation and amortisation expenses ', 37), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Marketing expenses ', 33), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' Advertising expenses ', 31), (' Administration ', 31), (' Lease expenses ', 29), (' Selling Expenses ', 29), (' Occupancy expenses ', 28), (' Management expenses ', 28), (' Selling & distribution expenses ', 26), (' depreciation ', 25), (' Royalties ', 25), (' Distribution expenses ', 24), (' Occupancy ', 18), ('expenses ', 17), (' levies', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 39), (' Distribution expenses ', 36), (' other expenses ', 35), (' Other expenses ', 35), (' Other expenses ', 35), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Sales and marketing ', 33), (' employee benefits expense ', 33), (' property espense ', 33), (' employee benefit espense ', 33), (' Lease expenses ', 29), (' Marketing expenses ', 28), (' Advertising expenses ', 27), (' Amortisation expenses ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Occupancy expenses ', 25), (' Selling Expenses ', 25), (' Management expenses ', 25), (' Depreciation expenses ', 24), (' Administration ', 22), ('expenses ', 16), (' depreciation ', 15), (' Royalties ', 15), (' Occupancy ', 8), (' levies', 8)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8, 9], 'score': 100, 'value': -3177601.0, 'line_item_label': ['Selling and Distribution Expenses', 'Administration Expenses', 'Depreciation and Amortisation Expenses', 'Other Expenses'], 'note_numbers': [nan, nan, nan, nan], 'line_item_value': [-858306.0, -432075.0, -530019.0, -1357201.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' Administration expenses ', 48), (' Rental expenses ', 36), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' Administration expenses ', 52), (' Rental expenses ', 51), (' Occupancy expenses', 37), ('Rent ', 27), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Administration expenses ', 63), (' Rental expenses ', 47), (' Occupancy expenses', 38), ('Rent ', 21), (' Occupancy ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Administration expenses ', 57), (' Occupancy expenses', 32), (' Rental expenses ', 31), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [(' Rental expenses ', 34), ('Rent ', 30), (' Occupancy expenses', 29), (' Administration expenses ', 25), (' Occupancy ', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Administration expenses ', 27), (' Rental expenses ', 24), (' Occupancy expenses', 24), (' Occupancy ', 23), ('Rent ', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 32), (' Occupancy expenses', 24), ('Rent ', 23), (' Occupancy ', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Rental expenses ', 51), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Administration expenses ', 32), ('Rent ', 21), (' Rental expenses ', 21), (' Occupancy ', 20), (' Occupancy expenses', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses ', 36), (' Rental expenses ', 33), (' Occupancy expenses', 28), ('Rent ', 19), (' Occupancy ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' Rental expenses ', 50), (' Occupancy expenses', 34), (' Administration expenses ', 31), ('Rent ', 30), (' Occupancy ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses ', 36), (' Rental expenses ', 33), (' Occupancy expenses', 28), ('Rent ', 19), (' Occupancy ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 26), (' Occupancy expenses', 25), ('Rent ', 16), (' Occupancy ', 8)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -378702.0, 'line_item_label': ['Administration Expenses'], 'note_numbers': [nan], 'line_item_value': [-378702.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses', 44), (' Administration expenses ', 36), (' Rental expenses ', 32), (' Occupancy ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [(' Administration expenses ', 48), (' Rental expenses ', 36), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' Administration expenses ', 52), (' Rental expenses ', 51), (' Occupancy expenses', 37), ('Rent ', 27), (' Occupancy ', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Administration expenses ', 63), (' Rental expenses ', 47), (' Occupancy expenses', 38), ('Rent ', 21), (' Occupancy ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Administration expenses ', 57), (' Occupancy expenses', 32), (' Rental expenses ', 31), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [(' Rental expenses ', 34), ('Rent ', 30), (' Occupancy expenses', 29), (' Administration expenses ', 25), (' Occupancy ', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Occupancy expenses', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Administration expenses ', 27), (' Rental expenses ', 24), (' Occupancy expenses', 24), (' Occupancy ', 23), ('Rent ', 16)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 32), (' Occupancy expenses', 24), ('Rent ', 23), (' Occupancy ', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Rental expenses ', 51), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Administration expenses ', 32), ('Rent ', 21), (' Rental expenses ', 21), (' Occupancy ', 20), (' Occupancy expenses', 15)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses ', 36), (' Rental expenses ', 33), (' Occupancy expenses', 28), ('Rent ', 19), (' Occupancy ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' Rental expenses ', 50), (' Occupancy expenses', 34), (' Administration expenses ', 31), ('Rent ', 30), (' Occupancy ', 14)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses ', 36), (' Rental expenses ', 33), (' Occupancy expenses', 28), ('Rent ', 19), (' Occupancy ', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 26), (' Occupancy expenses', 25), ('Rent ', 16), (' Occupancy ', 8)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -432075.0, 'line_item_label': ['Administration Expenses'], 'note_numbers': [nan], 'line_item_value': [-432075.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [('other operating', 28), (' Other income', 27), ('Other revenue', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 28), (' Other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 23), (' Other income', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [('other operating', 54), (' Other income', 44), ('Other revenue', 36)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Other income', 44), ('other operating', 26), ('Other revenue', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Other income', 48), ('other operating', 38), ('Other revenue', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [('other operating', 32), (' Other income', 31), ('Other revenue', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [('other operating', 42), (' Other income', 35), ('Other revenue', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [('other operating', 36), (' Other income', 36), ('Other revenue', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 59928.0, 'line_item_label': ['Other Income'], 'note_numbers': ['3'], 'line_item_value': [59928.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [('other operating', 28), (' Other income', 27), ('Other revenue', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 28), (' Other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [('Other revenue', 32), ('other operating', 23), (' Other income', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [('other operating', 54), (' Other income', 44), ('Other revenue', 36)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Other income', 44), ('other operating', 26), ('Other revenue', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Other income', 48), ('other operating', 38), ('Other revenue', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [('other operating', 32), (' Other income', 31), ('Other revenue', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [('other operating', 42), (' Other income', 35), ('Other revenue', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [('other operating', 36), (' Other income', 36), ('Other revenue', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 140.0, 'line_item_label': ['Other Income'], 'note_numbers': ['3'], 'line_item_value': [140.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none miscellaneous income , res_fuzz_match = [('Other income ', 64), (' Commission revenue ', 43), (' rental revenue', 31), (' Rent ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total other income , res_fuzz_match = [('Other income ', 100), (' Rent ', 50), (' rental revenue', 46), (' Commission revenue ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent ', 50), ('Other income ', 40), (' rental revenue', 40), (' Commission revenue ', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none note 4 net finance costs , res_fuzz_match = [('Other income ', 55), (' Rent ', 50), (' rental revenue', 38), (' Commission revenue ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none miscellaneous income , res_fuzz_match = [('Other income ', 64), (' Commission revenue ', 43), (' rental revenue', 31), (' Rent ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total other income , res_fuzz_match = [('Other income ', 100), (' Rent ', 50), (' rental revenue', 46), (' Commission revenue ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent ', 50), ('Other income ', 40), (' rental revenue', 40), (' Commission revenue ', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none note 4 net finance costs , res_fuzz_match = [('Other income ', 55), (' Rent ', 50), (' rental revenue', 38), (' Commission revenue ', 29)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other income ', 0), (' Commission revenue ', 0), (' Rent ', 0), (' rental revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': [100, 100], 'value': [140.0, 59928.0], 'label': ['None Total Other Income', 'None Total Other Income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-17 10:23:32+0530 - sLogger - ERROR - error occured: cannot convert float NaN to integer
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-17 10:23:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-17 10:23:32+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [('Finance income and costs', 34), (' Interest revenue', 34), (' Finance income and finance costs', 33), (' Net finance costs', 29), ('other income', 27), ('finance income', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' Interest revenue', 39), (' Net finance costs', 39), ('Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Interest revenue', 40), ('Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 30), ('finance income', 27), ('other income', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), ('Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [('other income', 44), (' Net finance costs', 32), ('Finance income and costs', 27), (' Interest revenue', 26), (' Finance income and finance costs', 23), ('finance income', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Net finance costs', 83), ('Finance income and costs', 81), ('finance income', 73), (' Finance income and finance costs', 69), ('other income', 44), (' Interest revenue', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Net finance costs', 49), ('other income', 48), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Interest revenue', 33), (' Net finance costs', 33), ('other income', 31), ('Finance income and costs', 28), (' Finance income and finance costs', 28), ('finance income', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), ('Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' Net finance costs', 42), ('Finance income and costs', 36), ('other income', 35), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), ('Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [('other income', 36), (' Finance income and finance costs', 33), ('Finance income and costs', 30), (' Interest revenue', 30), (' Net finance costs', 30), ('finance income', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 11, 12, 13], 'score': 83, 'value': -159990.0, 'line_item_label': ['Other Income', 'Finance Income', 'Finance Costs', 'Net Finance Income/(Cost)'], 'note_numbers': ['3', '4', '4', nan], 'line_item_value': [59928.0, 676.0, -110635.0, -109959.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), ('Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = salaries and employee benefits , res_fuzz_match = [('Finance income and costs', 34), (' Interest revenue', 34), (' Finance income and finance costs', 33), (' Net finance costs', 29), ('other income', 27), ('finance income', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = marketing and advertising expenses , res_fuzz_match = [(' Interest revenue', 39), (' Net finance costs', 39), ('Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = selling and distribution expenses , res_fuzz_match = [(' Interest revenue', 40), ('Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 30), ('finance income', 27), ('other income', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs', 26)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), ('Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit from operations , res_fuzz_match = [('other income', 44), (' Net finance costs', 32), ('Finance income and costs', 27), (' Interest revenue', 26), (' Finance income and finance costs', 23), ('finance income', 21)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = net finance income/(cost) , res_fuzz_match = [(' Net finance costs', 83), ('Finance income and costs', 81), ('finance income', 73), (' Finance income and finance costs', 69), ('other income', 44), (' Interest revenue', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income , res_fuzz_match = [(' Net finance costs', 49), ('other income', 48), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit attributable to: , res_fuzz_match = [(' Interest revenue', 33), (' Net finance costs', 33), ('other income', 31), ('Finance income and costs', 28), (' Finance income and finance costs', 28), ('finance income', 22)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), ('Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit to: , res_fuzz_match = [(' Net finance costs', 42), ('Finance income and costs', 36), ('other income', 35), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 23)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), ('Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive profit for the year attributable to , res_fuzz_match = [('other income', 36), (' Finance income and finance costs', 33), ('Finance income and costs', 30), (' Interest revenue', 30), (' Net finance costs', 30), ('finance income', 18)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 11, 12, 13], 'score': 83, 'value': 11198.0, 'line_item_label': ['Other Income', 'Finance Income', 'Finance Costs', 'Net Finance Income/(Cost)'], 'note_numbers': ['3', '4', '4', nan], 'line_item_value': [140.0, 94899.0, -89370.0, 5529.0]}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none miscellaneous income , res_fuzz_match = [(' Interest income ', 57), (' Sublease interest income ', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 45), (' Interest received - Loan ', 40), (' Bank interest ', 38), (' Interest received - Bank ', 35), (' Share of JV interest received/(paid) ', 35), (' Bank Deposits - cash and cash equivalents ', 35), (' interest revenue', 33), ('interest ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total other income , res_fuzz_match = [(' Interest income ', 64), (' Sublease interest income ', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 45), (' Bank Deposits - cash and cash equivalents ', 41), ('interest ', 38), (' Bank interest ', 38), (' Share of JV interest received/(paid) ', 36), (' Interest received - Bank ', 35), (' Interest received - Loan ', 35), (' interest revenue', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan ', 40), (' Bank Deposits - cash and cash equivalents ', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 40), ('interest ', 38), (' Bank interest ', 30), (' Interest income ', 30), (' Interest received - Bank ', 30), (' Sublease interest income ', 30), (' Share of JV interest received/(paid) ', 30), (' interest revenue', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none note 4 net finance costs , res_fuzz_match = [('interest ', 62), (' Interest income ', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 56), (' Sublease interest income ', 55), (' Bank interest ', 54), (' interest revenue', 47), (' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Bank Deposits - cash and cash equivalents ', 44), (' Share of JV interest received/(paid) ', 40)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none miscellaneous income , res_fuzz_match = [(' Interest income ', 57), (' Sublease interest income ', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 45), (' Interest received - Loan ', 40), (' Bank interest ', 38), (' Interest received - Bank ', 35), (' Share of JV interest received/(paid) ', 35), (' Bank Deposits - cash and cash equivalents ', 35), (' interest revenue', 33), ('interest ', 25)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total other income , res_fuzz_match = [(' Interest income ', 64), (' Sublease interest income ', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 45), (' Bank Deposits - cash and cash equivalents ', 41), ('interest ', 38), (' Bank interest ', 38), (' Share of JV interest received/(paid) ', 36), (' Interest received - Bank ', 35), (' Interest received - Loan ', 35), (' interest revenue', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan ', 40), (' Bank Deposits - cash and cash equivalents ', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 40), ('interest ', 38), (' Bank interest ', 30), (' Interest income ', 30), (' Interest received - Bank ', 30), (' Sublease interest income ', 30), (' Share of JV interest received/(paid) ', 30), (' interest revenue', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none note 4 net finance costs , res_fuzz_match = [('interest ', 62), (' Interest income ', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 56), (' Sublease interest income ', 55), (' Bank interest ', 54), (' interest revenue', 47), (' Interest received - Bank ', 45), (' Interest received - Loan ', 45), (' Bank Deposits - cash and cash equivalents ', 44), (' Share of JV interest received/(paid) ', 40)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none miscellaneous income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total other income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none note 4 net finance costs , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none miscellaneous income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total other income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows = none note 4 net finance costs , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-17 10:23:32+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-17 10:23:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-17 10:23:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-17 10:23:32+0530 - sLogger - ERROR - error occured: cannot convert float NaN to integer
